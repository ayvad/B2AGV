
bin\Debug\B2AGVMainCodeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .data         00000108  00800200  00003df2  00003ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003df2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800308  00800308  00003fae  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  00003fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000382  00000000  00000000  000041d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fb  00000000  00000000  00004553  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184d  00000000  00000000  0000774e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ad6  00000000  00000000  00008f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000ba74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  0000bd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000c27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cc94  2**0
=======
  0 .data         00000108  00800200  0000424c  00004300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000424c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800308  00800308  00004408  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00004408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  0000440b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000382  00000000  00000000  0000462b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033c8  00000000  00000000  000049ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018bd  00000000  00000000  00007d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d2d  00000000  00000000  00009632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000c360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  0000c670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000cb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d580  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
<<<<<<< Updated upstream
      24:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__vector_9>
=======
      24:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__vector_9>
>>>>>>> Stashed changes
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
<<<<<<< Updated upstream
      c8:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__vector_50>
=======
      c8:	0c 94 85 19 	jmp	0x330a	; 0x330a <__vector_50>
>>>>>>> Stashed changes
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
<<<<<<< Updated upstream
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	fd e3       	ldi	r31, 0x3D	; 61
=======
      fa:	ec e4       	ldi	r30, 0x4C	; 76
      fc:	f2 e4       	ldi	r31, 0x42	; 66
>>>>>>> Stashed changes
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 31       	cpi	r26, 0x12	; 18
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
<<<<<<< Updated upstream
     11e:	0e 94 af 02 	call	0x55e	; 0x55e <main>
     122:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <_exit>
=======
     11e:	0e 94 b1 02 	call	0x562	; 0x562 <main>
     122:	0c 94 24 21 	jmp	0x4248	; 0x4248 <_exit>
>>>>>>> Stashed changes

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED>:

#define PINIRsensor1 PINJ
#define PINIRsensor2 PINJ

void LED(int Richting)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <LED+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
    switch (Richting)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	9c 83       	std	Y+4, r25	; 0x04
     140:	8b 83       	std	Y+3, r24	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	83 30       	cpi	r24, 0x03	; 3
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <LED+0x24>
     14c:	96 c0       	rjmp	.+300    	; 0x27a <LED+0x150>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	91 05       	cpc	r25, r1
     156:	64 f4       	brge	.+24     	; 0x170 <LED+0x46>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	d1 f0       	breq	.+52     	; 0x196 <LED+0x6c>
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	91 05       	cpc	r25, r1
     16a:	09 f4       	brne	.+2      	; 0x16e <LED+0x44>
     16c:	4d c0       	rjmp	.+154    	; 0x208 <LED+0xde>
     16e:	69 c1       	rjmp	.+722    	; 0x442 <LED+0x318>
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	85 30       	cpi	r24, 0x05	; 5
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <LED+0x52>
     17a:	f1 c0       	rjmp	.+482    	; 0x35e <LED+0x234>
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	85 30       	cpi	r24, 0x05	; 5
     182:	91 05       	cpc	r25, r1
     184:	0c f4       	brge	.+2      	; 0x188 <LED+0x5e>
     186:	b2 c0       	rjmp	.+356    	; 0x2ec <LED+0x1c2>
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	9c 81       	ldd	r25, Y+4	; 0x04
     18c:	86 30       	cpi	r24, 0x06	; 6
     18e:	91 05       	cpc	r25, r1
     190:	09 f4       	brne	.+2      	; 0x194 <LED+0x6a>
     192:	1e c1       	rjmp	.+572    	; 0x3d0 <LED+0x2a6>
     194:	56 c1       	rjmp	.+684    	; 0x442 <LED+0x318>
    {
    case 1 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     196:	a2 e2       	ldi	r26, 0x22	; 34
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e2 e2       	ldi	r30, 0x22	; 34
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     1a4:	a2 e2       	ldi	r26, 0x22	; 34
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e2 e2       	ldi	r30, 0x22	; 34
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     1b2:	a2 e2       	ldi	r26, 0x22	; 34
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e2 e2       	ldi	r30, 0x22	; 34
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8b 7f       	andi	r24, 0xFB	; 251
     1be:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     1c0:	a2 e2       	ldi	r26, 0x22	; 34
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e2 e2       	ldi	r30, 0x22	; 34
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     1ce:	a2 e2       	ldi	r26, 0x22	; 34
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e2 e2       	ldi	r30, 0x22	; 34
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     1dc:	a2 e2       	ldi	r26, 0x22	; 34
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e2 e2       	ldi	r30, 0x22	; 34
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7d       	andi	r24, 0xDF	; 223
     1e8:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     1ea:	a2 e2       	ldi	r26, 0x22	; 34
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e2 e2       	ldi	r30, 0x22	; 34
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 7b       	andi	r24, 0xBF	; 191
     1f6:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     1f8:	a2 e2       	ldi	r26, 0x22	; 34
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e2 e2       	ldi	r30, 0x22	; 34
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	8c 93       	st	X, r24
     206:	55 c1       	rjmp	.+682    	; 0x4b2 <LED+0x388>
        break;
    case 2 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     208:	a2 e2       	ldi	r26, 0x22	; 34
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e2 e2       	ldi	r30, 0x22	; 34
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     216:	a2 e2       	ldi	r26, 0x22	; 34
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e2 e2       	ldi	r30, 0x22	; 34
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8d 7f       	andi	r24, 0xFD	; 253
     222:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     224:	a2 e2       	ldi	r26, 0x22	; 34
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e2 e2       	ldi	r30, 0x22	; 34
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     240:	a2 e2       	ldi	r26, 0x22	; 34
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7e       	andi	r24, 0xEF	; 239
     24c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     24e:	a2 e2       	ldi	r26, 0x22	; 34
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e2 e2       	ldi	r30, 0x22	; 34
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 62       	ori	r24, 0x20	; 32
     25a:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     25c:	a2 e2       	ldi	r26, 0x22	; 34
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e2 e2       	ldi	r30, 0x22	; 34
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 7b       	andi	r24, 0xBF	; 191
     268:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     26a:	a2 e2       	ldi	r26, 0x22	; 34
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e2       	ldi	r30, 0x22	; 34
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	8c 93       	st	X, r24
     278:	1c c1       	rjmp	.+568    	; 0x4b2 <LED+0x388>
        break;
    case 3 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     27a:	a2 e2       	ldi	r26, 0x22	; 34
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e2 e2       	ldi	r30, 0x22	; 34
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8e 7f       	andi	r24, 0xFE	; 254
     286:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     288:	a2 e2       	ldi	r26, 0x22	; 34
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e2 e2       	ldi	r30, 0x22	; 34
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	8d 7f       	andi	r24, 0xFD	; 253
     294:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     296:	a2 e2       	ldi	r26, 0x22	; 34
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 e2       	ldi	r30, 0x22	; 34
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8b 7f       	andi	r24, 0xFB	; 251
     2a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     2a4:	a2 e2       	ldi	r26, 0x22	; 34
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e2 e2       	ldi	r30, 0x22	; 34
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     2b2:	a2 e2       	ldi	r26, 0x22	; 34
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e2 e2       	ldi	r30, 0x22	; 34
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     2c0:	a2 e2       	ldi	r26, 0x22	; 34
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e2 e2       	ldi	r30, 0x22	; 34
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e2       	ldi	r30, 0x22	; 34
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     2dc:	a2 e2       	ldi	r26, 0x22	; 34
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 77       	andi	r24, 0x7F	; 127
     2e8:	8c 93       	st	X, r24
     2ea:	e3 c0       	rjmp	.+454    	; 0x4b2 <LED+0x388>
        break;
    case 4 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     2ec:	a2 e2       	ldi	r26, 0x22	; 34
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e2 e2       	ldi	r30, 0x22	; 34
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     2fa:	a2 e2       	ldi	r26, 0x22	; 34
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e2 e2       	ldi	r30, 0x22	; 34
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     308:	a2 e2       	ldi	r26, 0x22	; 34
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	e2 e2       	ldi	r30, 0x22	; 34
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	84 60       	ori	r24, 0x04	; 4
     314:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e2 e2       	ldi	r30, 0x22	; 34
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     324:	a2 e2       	ldi	r26, 0x22	; 34
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e2 e2       	ldi	r30, 0x22	; 34
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7e       	andi	r24, 0xEF	; 239
     330:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     332:	a2 e2       	ldi	r26, 0x22	; 34
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e2 e2       	ldi	r30, 0x22	; 34
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7d       	andi	r24, 0xDF	; 223
     33e:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     340:	a2 e2       	ldi	r26, 0x22	; 34
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e2 e2       	ldi	r30, 0x22	; 34
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     34e:	a2 e2       	ldi	r26, 0x22	; 34
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e2 e2       	ldi	r30, 0x22	; 34
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	8c 93       	st	X, r24
     35c:	aa c0       	rjmp	.+340    	; 0x4b2 <LED+0x388>
        break;
    case 5 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     35e:	a2 e2       	ldi	r26, 0x22	; 34
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	e2 e2       	ldi	r30, 0x22	; 34
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     36c:	a2 e2       	ldi	r26, 0x22	; 34
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e2 e2       	ldi	r30, 0x22	; 34
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	82 60       	ori	r24, 0x02	; 2
     378:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     37a:	a2 e2       	ldi	r26, 0x22	; 34
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e2 e2       	ldi	r30, 0x22	; 34
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     388:	a2 e2       	ldi	r26, 0x22	; 34
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e2 e2       	ldi	r30, 0x22	; 34
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     396:	a2 e2       	ldi	r26, 0x22	; 34
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e2 e2       	ldi	r30, 0x22	; 34
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     3a4:	a2 e2       	ldi	r26, 0x22	; 34
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e2 e2       	ldi	r30, 0x22	; 34
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 7d       	andi	r24, 0xDF	; 223
     3b0:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     3b2:	a2 e2       	ldi	r26, 0x22	; 34
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7b       	andi	r24, 0xBF	; 191
     3be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     3c0:	a2 e2       	ldi	r26, 0x22	; 34
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e2 e2       	ldi	r30, 0x22	; 34
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	8c 93       	st	X, r24
     3ce:	71 c0       	rjmp	.+226    	; 0x4b2 <LED+0x388>
        break;
    case 6 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     3d0:	a2 e2       	ldi	r26, 0x22	; 34
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e2       	ldi	r30, 0x22	; 34
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     3de:	a2 e2       	ldi	r26, 0x22	; 34
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e2 e2       	ldi	r30, 0x22	; 34
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     3ec:	a2 e2       	ldi	r26, 0x22	; 34
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	e2 e2       	ldi	r30, 0x22	; 34
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	84 60       	ori	r24, 0x04	; 4
     3f8:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     3fa:	a2 e2       	ldi	r26, 0x22	; 34
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e2 e2       	ldi	r30, 0x22	; 34
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 60       	ori	r24, 0x08	; 8
     406:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     408:	a2 e2       	ldi	r26, 0x22	; 34
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e2 e2       	ldi	r30, 0x22	; 34
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     416:	a2 e2       	ldi	r26, 0x22	; 34
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e2 e2       	ldi	r30, 0x22	; 34
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     424:	a2 e2       	ldi	r26, 0x22	; 34
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e2 e2       	ldi	r30, 0x22	; 34
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     432:	a2 e2       	ldi	r26, 0x22	; 34
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e2 e2       	ldi	r30, 0x22	; 34
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8c 93       	st	X, r24
     440:	38 c0       	rjmp	.+112    	; 0x4b2 <LED+0x388>
        break;
    default :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     442:	a2 e2       	ldi	r26, 0x22	; 34
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e2 e2       	ldi	r30, 0x22	; 34
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     450:	a2 e2       	ldi	r26, 0x22	; 34
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e2 e2       	ldi	r30, 0x22	; 34
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     45e:	a2 e2       	ldi	r26, 0x22	; 34
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e2 e2       	ldi	r30, 0x22	; 34
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8b 7f       	andi	r24, 0xFB	; 251
     46a:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     46c:	a2 e2       	ldi	r26, 0x22	; 34
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e2 e2       	ldi	r30, 0x22	; 34
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     47a:	a2 e2       	ldi	r26, 0x22	; 34
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e2 e2       	ldi	r30, 0x22	; 34
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 7e       	andi	r24, 0xEF	; 239
     486:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     488:	a2 e2       	ldi	r26, 0x22	; 34
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e2 e2       	ldi	r30, 0x22	; 34
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     496:	a2 e2       	ldi	r26, 0x22	; 34
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e2 e2       	ldi	r30, 0x22	; 34
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     4a4:	a2 e2       	ldi	r26, 0x22	; 34
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e2 e2       	ldi	r30, 0x22	; 34
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	8c 93       	st	X, r24
    }
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <init>:


void init(void)
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
<<<<<<< Updated upstream
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
    LED(5);
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    DDRLEDRood |= (1 << PLEDRoodVoor);
     4d0:	a1 e2       	ldi	r26, 0x21	; 33
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	e1 e2       	ldi	r30, 0x21	; 33
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodAchter);
     4de:	a1 e2       	ldi	r26, 0x21	; 33
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e1 e2       	ldi	r30, 0x21	; 33
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodRechts);
     4ec:	a1 e2       	ldi	r26, 0x21	; 33
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	e1 e2       	ldi	r30, 0x21	; 33
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	84 60       	ori	r24, 0x04	; 4
     4f8:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodLinks);
     4fa:	a1 e2       	ldi	r26, 0x21	; 33
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	e1 e2       	ldi	r30, 0x21	; 33
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 60       	ori	r24, 0x08	; 8
     506:	8c 93       	st	X, r24

    DDRLEDGeel |= (1 << PLEDGeelVoor);
     508:	a1 e2       	ldi	r26, 0x21	; 33
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e1 e2       	ldi	r30, 0x21	; 33
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	80 61       	ori	r24, 0x10	; 16
     514:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelAchter);
     516:	a1 e2       	ldi	r26, 0x21	; 33
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e1 e2       	ldi	r30, 0x21	; 33
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	80 62       	ori	r24, 0x20	; 32
     522:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelRechts);
     524:	a1 e2       	ldi	r26, 0x21	; 33
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e1 e2       	ldi	r30, 0x21	; 33
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	80 64       	ori	r24, 0x40	; 64
     530:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelLinks);
     532:	a1 e2       	ldi	r26, 0x21	; 33
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	e1 e2       	ldi	r30, 0x21	; 33
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	8c 93       	st	X, r24

    DDRLEDRood |= (1 << PLEDNoodstop);
     540:	a1 e2       	ldi	r26, 0x21	; 33
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e1 e2       	ldi	r30, 0x21	; 33
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	80 61       	ori	r24, 0x10	; 16
     54c:	8c 93       	st	X, r24
=======
     4c4:	0f 92       	push	r0
     4c6:	0f 92       	push	r0
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
    //Data direction register:
    DDRLEDRood |= (1 << PLEDRoodVoor);
     4cc:	a1 e2       	ldi	r26, 0x21	; 33
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	e1 e2       	ldi	r30, 0x21	; 33
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodAchter);
     4da:	a1 e2       	ldi	r26, 0x21	; 33
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e1 e2       	ldi	r30, 0x21	; 33
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodRechts);
     4e8:	a1 e2       	ldi	r26, 0x21	; 33
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e1 e2       	ldi	r30, 0x21	; 33
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	84 60       	ori	r24, 0x04	; 4
     4f4:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodLinks);
     4f6:	a1 e2       	ldi	r26, 0x21	; 33
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	e1 e2       	ldi	r30, 0x21	; 33
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	88 60       	ori	r24, 0x08	; 8
     502:	8c 93       	st	X, r24

    DDRLEDGeel |= (1 << PLEDGeelVoor);
     504:	a1 e2       	ldi	r26, 0x21	; 33
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	e1 e2       	ldi	r30, 0x21	; 33
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 61       	ori	r24, 0x10	; 16
     510:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelAchter);
     512:	a1 e2       	ldi	r26, 0x21	; 33
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	e1 e2       	ldi	r30, 0x21	; 33
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	80 62       	ori	r24, 0x20	; 32
     51e:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelRechts);
     520:	a1 e2       	ldi	r26, 0x21	; 33
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	e1 e2       	ldi	r30, 0x21	; 33
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	80 64       	ori	r24, 0x40	; 64
     52c:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelLinks);
     52e:	a1 e2       	ldi	r26, 0x21	; 33
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	e1 e2       	ldi	r30, 0x21	; 33
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	80 68       	ori	r24, 0x80	; 128
     53a:	8c 93       	st	X, r24

    DDRLEDRood |= (1 << PLEDNoodstop);
     53c:	a1 e2       	ldi	r26, 0x21	; 33
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e1 e2       	ldi	r30, 0x21	; 33
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	80 61       	ori	r24, 0x10	; 16
     548:	8c 93       	st	X, r24
>>>>>>> Stashed changes

    init_steppermotor();
<<<<<<< Updated upstream
     54e:	0e 94 4b 03 	call	0x696	; 0x696 <init_steppermotor>
    init_ultrasoon();
     552:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <init_ultrasoon>
    sei();
     556:	78 94       	sei
}
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <main>:

int main(void)
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	2a 97       	sbiw	r28, 0x0a	; 10
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
    init();
     572:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>

    while(1)
    {
        double distanceUS1 = 0;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	8d 83       	std	Y+5, r24	; 0x05
     580:	9e 83       	std	Y+6, r25	; 0x06
     582:	af 83       	std	Y+7, r26	; 0x07
     584:	b8 87       	std	Y+8, r27	; 0x08
        double distanceUS2 = 0;
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	a0 e0       	ldi	r26, 0x00	; 0
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	9a 83       	std	Y+2, r25	; 0x02
     592:	ab 83       	std	Y+3, r26	; 0x03
     594:	bc 83       	std	Y+4, r27	; 0x04
        distanceUS1 = distance(ultra_1_trigger);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 8a 14 	call	0x2914	; 0x2914 <distance>
     59e:	aa 27       	eor	r26, r26
     5a0:	97 fd       	sbrc	r25, 7
     5a2:	a0 95       	com	r26
     5a4:	ba 2f       	mov	r27, r26
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	0e 94 81 1b 	call	0x3702	; 0x3702 <__floatsisf>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	8d 83       	std	Y+5, r24	; 0x05
     5b4:	9e 83       	std	Y+6, r25	; 0x06
     5b6:	af 83       	std	Y+7, r26	; 0x07
     5b8:	b8 87       	std	Y+8, r27	; 0x08
        distanceUS2 = distance(ultra_2_trigger);
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 8a 14 	call	0x2914	; 0x2914 <distance>
     5c2:	aa 27       	eor	r26, r26
     5c4:	97 fd       	sbrc	r25, 7
     5c6:	a0 95       	com	r26
     5c8:	ba 2f       	mov	r27, r26
     5ca:	bc 01       	movw	r22, r24
     5cc:	cd 01       	movw	r24, r26
     5ce:	0e 94 81 1b 	call	0x3702	; 0x3702 <__floatsisf>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	ab 83       	std	Y+3, r26	; 0x03
     5dc:	bc 83       	std	Y+4, r27	; 0x04
     5de:	36 c0       	rjmp	.+108    	; 0x64c <main+0xee>
        while((distanceUS1 > distance_dangerzone) & (distanceUS2 > distance_dangerzone))    //Dus voer alles totdat er iets te dichtbij voor de US-sensor staat
        {
            LED(1);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
            while (PINIRsensor1 && (1 << PIRsensor1))     //Zolang IR sensor geen boom ziet
     5e8:	e3 e0       	ldi	r30, 0x03	; 3
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	80 81       	ld	r24, Z
     5ee:	88 23       	and	r24, r24
     5f0:	29 f0       	breq	.+10     	; 0x5fc <main+0x9e>
            {
                Vooruit(100);
     5f2:	84 e6       	ldi	r24, 0x64	; 100
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <Vooruit>
     5fa:	f6 cf       	rjmp	.-20     	; 0x5e8 <main+0x8a>
            }
            LED(6);
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
            distanceUS1 = distance(ultra_1_trigger);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 8a 14 	call	0x2914	; 0x2914 <distance>
     60c:	aa 27       	eor	r26, r26
     60e:	97 fd       	sbrc	r25, 7
     610:	a0 95       	com	r26
     612:	ba 2f       	mov	r27, r26
     614:	bc 01       	movw	r22, r24
     616:	cd 01       	movw	r24, r26
     618:	0e 94 81 1b 	call	0x3702	; 0x3702 <__floatsisf>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	8d 83       	std	Y+5, r24	; 0x05
     622:	9e 83       	std	Y+6, r25	; 0x06
     624:	af 83       	std	Y+7, r26	; 0x07
     626:	b8 87       	std	Y+8, r27	; 0x08
            distanceUS2 = distance(ultra_2_trigger);
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 8a 14 	call	0x2914	; 0x2914 <distance>
     630:	aa 27       	eor	r26, r26
     632:	97 fd       	sbrc	r25, 7
     634:	a0 95       	com	r26
     636:	ba 2f       	mov	r27, r26
     638:	bc 01       	movw	r22, r24
     63a:	cd 01       	movw	r24, r26
     63c:	0e 94 81 1b 	call	0x3702	; 0x3702 <__floatsisf>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	ab 83       	std	Y+3, r26	; 0x03
     64a:	bc 83       	std	Y+4, r27	; 0x04
    {
        double distanceUS1 = 0;
        double distanceUS2 = 0;
        distanceUS1 = distance(ultra_1_trigger);
        distanceUS2 = distance(ultra_2_trigger);
        while((distanceUS1 > distance_dangerzone) & (distanceUS2 > distance_dangerzone))    //Dus voer alles totdat er iets te dichtbij voor de US-sensor staat
     64c:	1a 86       	std	Y+10, r1	; 0x0a
     64e:	6d 81       	ldd	r22, Y+5	; 0x05
     650:	7e 81       	ldd	r23, Y+6	; 0x06
     652:	8f 81       	ldd	r24, Y+7	; 0x07
     654:	98 85       	ldd	r25, Y+8	; 0x08
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e7       	ldi	r20, 0x70	; 112
     65c:	51 e4       	ldi	r21, 0x41	; 65
     65e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
     662:	18 16       	cp	r1, r24
     664:	14 f4       	brge	.+4      	; 0x66a <main+0x10c>
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	8a 87       	std	Y+10, r24	; 0x0a
     66a:	19 86       	std	Y+9, r1	; 0x09
     66c:	69 81       	ldd	r22, Y+1	; 0x01
     66e:	7a 81       	ldd	r23, Y+2	; 0x02
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	9c 81       	ldd	r25, Y+4	; 0x04
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e7       	ldi	r20, 0x70	; 112
     67a:	51 e4       	ldi	r21, 0x41	; 65
     67c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
     680:	18 16       	cp	r1, r24
     682:	14 f4       	brge	.+4      	; 0x688 <main+0x12a>
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	99 87       	std	Y+9, r25	; 0x09
     688:	8a 85       	ldd	r24, Y+10	; 0x0a
     68a:	99 85       	ldd	r25, Y+9	; 0x09
     68c:	89 23       	and	r24, r25
     68e:	88 23       	and	r24, r24
     690:	09 f0       	breq	.+2      	; 0x694 <main+0x136>
     692:	a6 cf       	rjmp	.-180    	; 0x5e0 <main+0x82>
     694:	70 cf       	rjmp	.-288    	; 0x576 <main+0x18>

00000696 <init_steppermotor>:
=======
     54a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <init_steppermotor>
    init_ultrasoon();
     54e:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <init_ultrasoon>
    sei();      //enabling global interupts
     552:	78 94       	sei
    int TreeCounter = 0;
     554:	1a 82       	std	Y+2, r1	; 0x02
     556:	19 82       	std	Y+1, r1	; 0x01
}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	cf 91       	pop	r28
     55e:	df 91       	pop	r29
     560:	08 95       	ret

00000562 <main>:

int main(void)
{
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	cb 54       	subi	r28, 0x4B	; 75
     570:	d0 40       	sbci	r29, 0x00	; 0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
    //int Steps = 512;//512 is een rondje.
    init();
     57c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>
    LED(1);
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     588:	fe 01       	movw	r30, r28
     58a:	ed 5b       	subi	r30, 0xBD	; 189
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	aa ef       	ldi	r26, 0xFA	; 250
     594:	b4 e4       	ldi	r27, 0x44	; 68
     596:	80 83       	st	Z, r24
     598:	91 83       	std	Z+1, r25	; 0x01
     59a:	a2 83       	std	Z+2, r26	; 0x02
     59c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     59e:	8e 01       	movw	r16, r28
     5a0:	01 5c       	subi	r16, 0xC1	; 193
     5a2:	1f 4f       	sbci	r17, 0xFF	; 255
     5a4:	fe 01       	movw	r30, r28
     5a6:	ed 5b       	subi	r30, 0xBD	; 189
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	60 81       	ld	r22, Z
     5ac:	71 81       	ldd	r23, Z+1	; 0x01
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	93 81       	ldd	r25, Z+3	; 0x03
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	4a e7       	ldi	r20, 0x7A	; 122
     5b8:	55 e4       	ldi	r21, 0x45	; 69
     5ba:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	f8 01       	movw	r30, r16
     5c4:	80 83       	st	Z, r24
     5c6:	91 83       	std	Z+1, r25	; 0x01
     5c8:	a2 83       	std	Z+2, r26	; 0x02
     5ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5cc:	fe 01       	movw	r30, r28
     5ce:	ff 96       	adiw	r30, 0x3f	; 63
     5d0:	60 81       	ld	r22, Z
     5d2:	71 81       	ldd	r23, Z+1	; 0x01
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e8       	ldi	r20, 0x80	; 128
     5de:	5f e3       	ldi	r21, 0x3F	; 63
     5e0:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     5e4:	88 23       	and	r24, r24
     5e6:	2c f4       	brge	.+10     	; 0x5f2 <main+0x90>
		__ticks = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	9e af       	std	Y+62, r25	; 0x3e
     5ee:	8d af       	std	Y+61, r24	; 0x3d
     5f0:	46 c0       	rjmp	.+140    	; 0x67e <main+0x11c>
	else if (__tmp > 65535)
     5f2:	fe 01       	movw	r30, r28
     5f4:	ff 96       	adiw	r30, 0x3f	; 63
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	3f ef       	ldi	r19, 0xFF	; 255
     602:	4f e7       	ldi	r20, 0x7F	; 127
     604:	57 e4       	ldi	r21, 0x47	; 71
     606:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     60a:	18 16       	cp	r1, r24
     60c:	64 f5       	brge	.+88     	; 0x666 <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     60e:	fe 01       	movw	r30, r28
     610:	ed 5b       	subi	r30, 0xBD	; 189
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	60 81       	ld	r22, Z
     616:	71 81       	ldd	r23, Z+1	; 0x01
     618:	82 81       	ldd	r24, Z+2	; 0x02
     61a:	93 81       	ldd	r25, Z+3	; 0x03
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e2       	ldi	r20, 0x20	; 32
     622:	51 e4       	ldi	r21, 0x41	; 65
     624:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	bc 01       	movw	r22, r24
     62e:	cd 01       	movw	r24, r26
     630:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	9e af       	std	Y+62, r25	; 0x3e
     63a:	8d af       	std	Y+61, r24	; 0x3d
     63c:	0f c0       	rjmp	.+30     	; 0x65c <main+0xfa>
     63e:	80 e9       	ldi	r24, 0x90	; 144
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	9c af       	std	Y+60, r25	; 0x3c
     644:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     646:	8b ad       	ldd	r24, Y+59	; 0x3b
     648:	9c ad       	ldd	r25, Y+60	; 0x3c
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <main+0xe8>
     64e:	9c af       	std	Y+60, r25	; 0x3c
     650:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     652:	8d ad       	ldd	r24, Y+61	; 0x3d
     654:	9e ad       	ldd	r25, Y+62	; 0x3e
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	9e af       	std	Y+62, r25	; 0x3e
     65a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65c:	8d ad       	ldd	r24, Y+61	; 0x3d
     65e:	9e ad       	ldd	r25, Y+62	; 0x3e
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	69 f7       	brne	.-38     	; 0x63e <main+0xdc>
     664:	16 c0       	rjmp	.+44     	; 0x692 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     666:	fe 01       	movw	r30, r28
     668:	ff 96       	adiw	r30, 0x3f	; 63
     66a:	60 81       	ld	r22, Z
     66c:	71 81       	ldd	r23, Z+1	; 0x01
     66e:	82 81       	ldd	r24, Z+2	; 0x02
     670:	93 81       	ldd	r25, Z+3	; 0x03
     672:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	9e af       	std	Y+62, r25	; 0x3e
     67c:	8d af       	std	Y+61, r24	; 0x3d
     67e:	8d ad       	ldd	r24, Y+61	; 0x3d
     680:	9e ad       	ldd	r25, Y+62	; 0x3e
     682:	9a af       	std	Y+58, r25	; 0x3a
     684:	89 af       	std	Y+57, r24	; 0x39
     686:	89 ad       	ldd	r24, Y+57	; 0x39
     688:	9a ad       	ldd	r25, Y+58	; 0x3a
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <main+0x128>
     68e:	9a af       	std	Y+58, r25	; 0x3a
     690:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2000);
    LED(3);
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	aa ef       	ldi	r26, 0xFA	; 250
     6a0:	b4 e4       	ldi	r27, 0x44	; 68
     6a2:	8d ab       	std	Y+53, r24	; 0x35
     6a4:	9e ab       	std	Y+54, r25	; 0x36
     6a6:	af ab       	std	Y+55, r26	; 0x37
     6a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6aa:	6d a9       	ldd	r22, Y+53	; 0x35
     6ac:	7e a9       	ldd	r23, Y+54	; 0x36
     6ae:	8f a9       	ldd	r24, Y+55	; 0x37
     6b0:	98 ad       	ldd	r25, Y+56	; 0x38
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4a e7       	ldi	r20, 0x7A	; 122
     6b8:	55 e4       	ldi	r21, 0x45	; 69
     6ba:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	89 ab       	std	Y+49, r24	; 0x31
     6c4:	9a ab       	std	Y+50, r25	; 0x32
     6c6:	ab ab       	std	Y+51, r26	; 0x33
     6c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     6ca:	69 a9       	ldd	r22, Y+49	; 0x31
     6cc:	7a a9       	ldd	r23, Y+50	; 0x32
     6ce:	8b a9       	ldd	r24, Y+51	; 0x33
     6d0:	9c a9       	ldd	r25, Y+52	; 0x34
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     6de:	88 23       	and	r24, r24
     6e0:	2c f4       	brge	.+10     	; 0x6ec <main+0x18a>
		__ticks = 1;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	98 ab       	std	Y+48, r25	; 0x30
     6e8:	8f a7       	std	Y+47, r24	; 0x2f
     6ea:	3f c0       	rjmp	.+126    	; 0x76a <main+0x208>
	else if (__tmp > 65535)
     6ec:	69 a9       	ldd	r22, Y+49	; 0x31
     6ee:	7a a9       	ldd	r23, Y+50	; 0x32
     6f0:	8b a9       	ldd	r24, Y+51	; 0x33
     6f2:	9c a9       	ldd	r25, Y+52	; 0x34
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	3f ef       	ldi	r19, 0xFF	; 255
     6f8:	4f e7       	ldi	r20, 0x7F	; 127
     6fa:	57 e4       	ldi	r21, 0x47	; 71
     6fc:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     700:	18 16       	cp	r1, r24
     702:	4c f5       	brge	.+82     	; 0x756 <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     704:	6d a9       	ldd	r22, Y+53	; 0x35
     706:	7e a9       	ldd	r23, Y+54	; 0x36
     708:	8f a9       	ldd	r24, Y+55	; 0x37
     70a:	98 ad       	ldd	r25, Y+56	; 0x38
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e2       	ldi	r20, 0x20	; 32
     712:	51 e4       	ldi	r21, 0x41	; 65
     714:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	bc 01       	movw	r22, r24
     71e:	cd 01       	movw	r24, r26
     720:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	98 ab       	std	Y+48, r25	; 0x30
     72a:	8f a7       	std	Y+47, r24	; 0x2f
     72c:	0f c0       	rjmp	.+30     	; 0x74c <main+0x1ea>
     72e:	80 e9       	ldi	r24, 0x90	; 144
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9e a7       	std	Y+46, r25	; 0x2e
     734:	8d a7       	std	Y+45, r24	; 0x2d
     736:	8d a5       	ldd	r24, Y+45	; 0x2d
     738:	9e a5       	ldd	r25, Y+46	; 0x2e
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <main+0x1d8>
     73e:	9e a7       	std	Y+46, r25	; 0x2e
     740:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     742:	8f a5       	ldd	r24, Y+47	; 0x2f
     744:	98 a9       	ldd	r25, Y+48	; 0x30
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	98 ab       	std	Y+48, r25	; 0x30
     74a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74c:	8f a5       	ldd	r24, Y+47	; 0x2f
     74e:	98 a9       	ldd	r25, Y+48	; 0x30
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	69 f7       	brne	.-38     	; 0x72e <main+0x1cc>
     754:	14 c0       	rjmp	.+40     	; 0x77e <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	69 a9       	ldd	r22, Y+49	; 0x31
     758:	7a a9       	ldd	r23, Y+50	; 0x32
     75a:	8b a9       	ldd	r24, Y+51	; 0x33
     75c:	9c a9       	ldd	r25, Y+52	; 0x34
     75e:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	98 ab       	std	Y+48, r25	; 0x30
     768:	8f a7       	std	Y+47, r24	; 0x2f
     76a:	8f a5       	ldd	r24, Y+47	; 0x2f
     76c:	98 a9       	ldd	r25, Y+48	; 0x30
     76e:	9c a7       	std	Y+44, r25	; 0x2c
     770:	8b a7       	std	Y+43, r24	; 0x2b
     772:	8b a5       	ldd	r24, Y+43	; 0x2b
     774:	9c a5       	ldd	r25, Y+44	; 0x2c
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <main+0x214>
     77a:	9c a7       	std	Y+44, r25	; 0x2c
     77c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2000);
    LED(2);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	aa ef       	ldi	r26, 0xFA	; 250
     78c:	b4 e4       	ldi	r27, 0x44	; 68
     78e:	8f a3       	std	Y+39, r24	; 0x27
     790:	98 a7       	std	Y+40, r25	; 0x28
     792:	a9 a7       	std	Y+41, r26	; 0x29
     794:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     796:	6f a1       	ldd	r22, Y+39	; 0x27
     798:	78 a5       	ldd	r23, Y+40	; 0x28
     79a:	89 a5       	ldd	r24, Y+41	; 0x29
     79c:	9a a5       	ldd	r25, Y+42	; 0x2a
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	4a e7       	ldi	r20, 0x7A	; 122
     7a4:	55 e4       	ldi	r21, 0x45	; 69
     7a6:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	8b a3       	std	Y+35, r24	; 0x23
     7b0:	9c a3       	std	Y+36, r25	; 0x24
     7b2:	ad a3       	std	Y+37, r26	; 0x25
     7b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     7b6:	6b a1       	ldd	r22, Y+35	; 0x23
     7b8:	7c a1       	ldd	r23, Y+36	; 0x24
     7ba:	8d a1       	ldd	r24, Y+37	; 0x25
     7bc:	9e a1       	ldd	r25, Y+38	; 0x26
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	5f e3       	ldi	r21, 0x3F	; 63
     7c6:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     7ca:	88 23       	and	r24, r24
     7cc:	2c f4       	brge	.+10     	; 0x7d8 <main+0x276>
		__ticks = 1;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9a a3       	std	Y+34, r25	; 0x22
     7d4:	89 a3       	std	Y+33, r24	; 0x21
     7d6:	3f c0       	rjmp	.+126    	; 0x856 <main+0x2f4>
	else if (__tmp > 65535)
     7d8:	6b a1       	ldd	r22, Y+35	; 0x23
     7da:	7c a1       	ldd	r23, Y+36	; 0x24
     7dc:	8d a1       	ldd	r24, Y+37	; 0x25
     7de:	9e a1       	ldd	r25, Y+38	; 0x26
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f e7       	ldi	r20, 0x7F	; 127
     7e6:	57 e4       	ldi	r21, 0x47	; 71
     7e8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	4c f5       	brge	.+82     	; 0x842 <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f0:	6f a1       	ldd	r22, Y+39	; 0x27
     7f2:	78 a5       	ldd	r23, Y+40	; 0x28
     7f4:	89 a5       	ldd	r24, Y+41	; 0x29
     7f6:	9a a5       	ldd	r25, Y+42	; 0x2a
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e2       	ldi	r20, 0x20	; 32
     7fe:	51 e4       	ldi	r21, 0x41	; 65
     800:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	9a a3       	std	Y+34, r25	; 0x22
     816:	89 a3       	std	Y+33, r24	; 0x21
     818:	0f c0       	rjmp	.+30     	; 0x838 <main+0x2d6>
     81a:	80 e9       	ldi	r24, 0x90	; 144
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	98 a3       	std	Y+32, r25	; 0x20
     820:	8f 8f       	std	Y+31, r24	; 0x1f
     822:	8f 8d       	ldd	r24, Y+31	; 0x1f
     824:	98 a1       	ldd	r25, Y+32	; 0x20
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <main+0x2c4>
     82a:	98 a3       	std	Y+32, r25	; 0x20
     82c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82e:	89 a1       	ldd	r24, Y+33	; 0x21
     830:	9a a1       	ldd	r25, Y+34	; 0x22
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	9a a3       	std	Y+34, r25	; 0x22
     836:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     838:	89 a1       	ldd	r24, Y+33	; 0x21
     83a:	9a a1       	ldd	r25, Y+34	; 0x22
     83c:	00 97       	sbiw	r24, 0x00	; 0
     83e:	69 f7       	brne	.-38     	; 0x81a <main+0x2b8>
     840:	14 c0       	rjmp	.+40     	; 0x86a <main+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     842:	6b a1       	ldd	r22, Y+35	; 0x23
     844:	7c a1       	ldd	r23, Y+36	; 0x24
     846:	8d a1       	ldd	r24, Y+37	; 0x25
     848:	9e a1       	ldd	r25, Y+38	; 0x26
     84a:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	9a a3       	std	Y+34, r25	; 0x22
     854:	89 a3       	std	Y+33, r24	; 0x21
     856:	89 a1       	ldd	r24, Y+33	; 0x21
     858:	9a a1       	ldd	r25, Y+34	; 0x22
     85a:	9e 8f       	std	Y+30, r25	; 0x1e
     85c:	8d 8f       	std	Y+29, r24	; 0x1d
     85e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     860:	9e 8d       	ldd	r25, Y+30	; 0x1e
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <main+0x300>
     866:	9e 8f       	std	Y+30, r25	; 0x1e
     868:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2000);
    LED(4);
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	aa ef       	ldi	r26, 0xFA	; 250
     878:	b4 e4       	ldi	r27, 0x44	; 68
     87a:	89 8f       	std	Y+25, r24	; 0x19
     87c:	9a 8f       	std	Y+26, r25	; 0x1a
     87e:	ab 8f       	std	Y+27, r26	; 0x1b
     880:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     882:	69 8d       	ldd	r22, Y+25	; 0x19
     884:	7a 8d       	ldd	r23, Y+26	; 0x1a
     886:	8b 8d       	ldd	r24, Y+27	; 0x1b
     888:	9c 8d       	ldd	r25, Y+28	; 0x1c
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	4a e7       	ldi	r20, 0x7A	; 122
     890:	55 e4       	ldi	r21, 0x45	; 69
     892:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	8d 8b       	std	Y+21, r24	; 0x15
     89c:	9e 8b       	std	Y+22, r25	; 0x16
     89e:	af 8b       	std	Y+23, r26	; 0x17
     8a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8a2:	6d 89       	ldd	r22, Y+21	; 0x15
     8a4:	7e 89       	ldd	r23, Y+22	; 0x16
     8a6:	8f 89       	ldd	r24, Y+23	; 0x17
     8a8:	98 8d       	ldd	r25, Y+24	; 0x18
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e8       	ldi	r20, 0x80	; 128
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     8b6:	88 23       	and	r24, r24
     8b8:	2c f4       	brge	.+10     	; 0x8c4 <main+0x362>
		__ticks = 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	9c 8b       	std	Y+20, r25	; 0x14
     8c0:	8b 8b       	std	Y+19, r24	; 0x13
     8c2:	3f c0       	rjmp	.+126    	; 0x942 <main+0x3e0>
	else if (__tmp > 65535)
     8c4:	6d 89       	ldd	r22, Y+21	; 0x15
     8c6:	7e 89       	ldd	r23, Y+22	; 0x16
     8c8:	8f 89       	ldd	r24, Y+23	; 0x17
     8ca:	98 8d       	ldd	r25, Y+24	; 0x18
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	3f ef       	ldi	r19, 0xFF	; 255
     8d0:	4f e7       	ldi	r20, 0x7F	; 127
     8d2:	57 e4       	ldi	r21, 0x47	; 71
     8d4:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     8d8:	18 16       	cp	r1, r24
     8da:	4c f5       	brge	.+82     	; 0x92e <main+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8dc:	69 8d       	ldd	r22, Y+25	; 0x19
     8de:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e2       	ldi	r20, 0x20	; 32
     8ea:	51 e4       	ldi	r21, 0x41	; 65
     8ec:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	bc 01       	movw	r22, r24
     8f6:	cd 01       	movw	r24, r26
     8f8:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	9c 8b       	std	Y+20, r25	; 0x14
     902:	8b 8b       	std	Y+19, r24	; 0x13
     904:	0f c0       	rjmp	.+30     	; 0x924 <main+0x3c2>
     906:	80 e9       	ldi	r24, 0x90	; 144
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	9a 8b       	std	Y+18, r25	; 0x12
     90c:	89 8b       	std	Y+17, r24	; 0x11
     90e:	89 89       	ldd	r24, Y+17	; 0x11
     910:	9a 89       	ldd	r25, Y+18	; 0x12
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <main+0x3b0>
     916:	9a 8b       	std	Y+18, r25	; 0x12
     918:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91a:	8b 89       	ldd	r24, Y+19	; 0x13
     91c:	9c 89       	ldd	r25, Y+20	; 0x14
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	9c 8b       	std	Y+20, r25	; 0x14
     922:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     924:	8b 89       	ldd	r24, Y+19	; 0x13
     926:	9c 89       	ldd	r25, Y+20	; 0x14
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	69 f7       	brne	.-38     	; 0x906 <main+0x3a4>
     92c:	14 c0       	rjmp	.+40     	; 0x956 <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92e:	6d 89       	ldd	r22, Y+21	; 0x15
     930:	7e 89       	ldd	r23, Y+22	; 0x16
     932:	8f 89       	ldd	r24, Y+23	; 0x17
     934:	98 8d       	ldd	r25, Y+24	; 0x18
     936:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9c 8b       	std	Y+20, r25	; 0x14
     940:	8b 8b       	std	Y+19, r24	; 0x13
     942:	8b 89       	ldd	r24, Y+19	; 0x13
     944:	9c 89       	ldd	r25, Y+20	; 0x14
     946:	98 8b       	std	Y+16, r25	; 0x10
     948:	8f 87       	std	Y+15, r24	; 0x0f
     94a:	8f 85       	ldd	r24, Y+15	; 0x0f
     94c:	98 89       	ldd	r25, Y+16	; 0x10
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <main+0x3ec>
     952:	98 8b       	std	Y+16, r25	; 0x10
     954:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2000);
    while(1)
    {
        double distanceUS1 = distance(ultra_1_trigger);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <distance>
     95e:	8e 01       	movw	r16, r28
     960:	09 5b       	subi	r16, 0xB9	; 185
     962:	1f 4f       	sbci	r17, 0xFF	; 255
     964:	aa 27       	eor	r26, r26
     966:	97 fd       	sbrc	r25, 7
     968:	a0 95       	com	r26
     96a:	ba 2f       	mov	r27, r26
     96c:	bc 01       	movw	r22, r24
     96e:	cd 01       	movw	r24, r26
     970:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__floatsisf>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	f8 01       	movw	r30, r16
     97a:	80 83       	st	Z, r24
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	a2 83       	std	Z+2, r26	; 0x02
     980:	b3 83       	std	Z+3, r27	; 0x03
 //    double distanceUS2 = distance(ultra_2_trigger);
        LED(5);
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     98a:	1e c0       	rjmp	.+60     	; 0x9c8 <main+0x466>
        while((distanceUS1 < distanceToTree)==0)
        {
            Vooruit(100);
     98c:	84 e6       	ldi	r24, 0x64	; 100
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <Vooruit>
            LED(1);
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
            distanceUS1 = distance(ultra_1_trigger);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <distance>
     9a4:	8e 01       	movw	r16, r28
     9a6:	09 5b       	subi	r16, 0xB9	; 185
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	aa 27       	eor	r26, r26
     9ac:	97 fd       	sbrc	r25, 7
     9ae:	a0 95       	com	r26
     9b0:	ba 2f       	mov	r27, r26
     9b2:	bc 01       	movw	r22, r24
     9b4:	cd 01       	movw	r24, r26
     9b6:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__floatsisf>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	f8 01       	movw	r30, r16
     9c0:	80 83       	st	Z, r24
     9c2:	91 83       	std	Z+1, r25	; 0x01
     9c4:	a2 83       	std	Z+2, r26	; 0x02
     9c6:	b3 83       	std	Z+3, r27	; 0x03
    while(1)
    {
        double distanceUS1 = distance(ultra_1_trigger);
 //    double distanceUS2 = distance(ultra_2_trigger);
        LED(5);
        while((distanceUS1 < distanceToTree)==0)
     9c8:	2c 96       	adiw	r28, 0x0c	; 12
     9ca:	1f ae       	std	Y+63, r1	; 0x3f
     9cc:	2c 97       	sbiw	r28, 0x0c	; 12
     9ce:	fe 01       	movw	r30, r28
     9d0:	e9 5b       	subi	r30, 0xB9	; 185
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	82 81       	ldd	r24, Z+2	; 0x02
     9da:	93 81       	ldd	r25, Z+3	; 0x03
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 ea       	ldi	r20, 0xA0	; 160
     9e2:	51 e4       	ldi	r21, 0x41	; 65
     9e4:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     9e8:	88 23       	and	r24, r24
     9ea:	24 f4       	brge	.+8      	; 0x9f4 <main+0x492>
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	2c 96       	adiw	r28, 0x0c	; 12
     9f0:	ff af       	std	Y+63, r31	; 0x3f
     9f2:	2c 97       	sbiw	r28, 0x0c	; 12
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	9f ad       	ldd	r25, Y+63	; 0x3f
     9fa:	2c 97       	sbiw	r28, 0x0c	; 12
     9fc:	89 27       	eor	r24, r25
     9fe:	88 23       	and	r24, r24
     a00:	29 f6       	brne	.-118    	; 0x98c <main+0x42a>
            Vooruit(100);
            LED(1);
            distanceUS1 = distance(ultra_1_trigger);
            //  distanceUS2 = distance(ultra_2_trigger);
        }
        LED(6);
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	aa e7       	ldi	r26, 0x7A	; 122
     a10:	b4 e4       	ldi	r27, 0x44	; 68
     a12:	8b 87       	std	Y+11, r24	; 0x0b
     a14:	9c 87       	std	Y+12, r25	; 0x0c
     a16:	ad 87       	std	Y+13, r26	; 0x0d
     a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a20:	9e 85       	ldd	r25, Y+14	; 0x0e
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	4a e7       	ldi	r20, 0x7A	; 122
     a28:	55 e4       	ldi	r21, 0x45	; 69
     a2a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	8f 83       	std	Y+7, r24	; 0x07
     a34:	98 87       	std	Y+8, r25	; 0x08
     a36:	a9 87       	std	Y+9, r26	; 0x09
     a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a3a:	6f 81       	ldd	r22, Y+7	; 0x07
     a3c:	78 85       	ldd	r23, Y+8	; 0x08
     a3e:	89 85       	ldd	r24, Y+9	; 0x09
     a40:	9a 85       	ldd	r25, Y+10	; 0x0a
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e8       	ldi	r20, 0x80	; 128
     a48:	5f e3       	ldi	r21, 0x3F	; 63
     a4a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     a4e:	88 23       	and	r24, r24
     a50:	2c f4       	brge	.+10     	; 0xa5c <main+0x4fa>
		__ticks = 1;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	8d 83       	std	Y+5, r24	; 0x05
     a5a:	3f c0       	rjmp	.+126    	; 0xada <main+0x578>
	else if (__tmp > 65535)
     a5c:	6f 81       	ldd	r22, Y+7	; 0x07
     a5e:	78 85       	ldd	r23, Y+8	; 0x08
     a60:	89 85       	ldd	r24, Y+9	; 0x09
     a62:	9a 85       	ldd	r25, Y+10	; 0x0a
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	3f ef       	ldi	r19, 0xFF	; 255
     a68:	4f e7       	ldi	r20, 0x7F	; 127
     a6a:	57 e4       	ldi	r21, 0x47	; 71
     a6c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     a70:	18 16       	cp	r1, r24
     a72:	4c f5       	brge	.+82     	; 0xac6 <main+0x564>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a74:	6b 85       	ldd	r22, Y+11	; 0x0b
     a76:	7c 85       	ldd	r23, Y+12	; 0x0c
     a78:	8d 85       	ldd	r24, Y+13	; 0x0d
     a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e2       	ldi	r20, 0x20	; 32
     a82:	51 e4       	ldi	r21, 0x41	; 65
     a84:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	bc 01       	movw	r22, r24
     a8e:	cd 01       	movw	r24, r26
     a90:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	9e 83       	std	Y+6, r25	; 0x06
     a9a:	8d 83       	std	Y+5, r24	; 0x05
     a9c:	0f c0       	rjmp	.+30     	; 0xabc <main+0x55a>
     a9e:	80 e9       	ldi	r24, 0x90	; 144
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	8b 83       	std	Y+3, r24	; 0x03
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <main+0x548>
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab2:	8d 81       	ldd	r24, Y+5	; 0x05
     ab4:	9e 81       	ldd	r25, Y+6	; 0x06
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	9e 83       	std	Y+6, r25	; 0x06
     aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	9e 81       	ldd	r25, Y+6	; 0x06
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	69 f7       	brne	.-38     	; 0xa9e <main+0x53c>
     ac4:	48 cf       	rjmp	.-368    	; 0x956 <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ac6:	6f 81       	ldd	r22, Y+7	; 0x07
     ac8:	78 85       	ldd	r23, Y+8	; 0x08
     aca:	89 85       	ldd	r24, Y+9	; 0x09
     acc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ace:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9e 83       	std	Y+6, r25	; 0x06
     ad8:	8d 83       	std	Y+5, r24	; 0x05
     ada:	8d 81       	ldd	r24, Y+5	; 0x05
     adc:	9e 81       	ldd	r25, Y+6	; 0x06
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <main+0x584>
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	33 cf       	rjmp	.-410    	; 0x956 <main+0x3f4>

00000af0 <init_steppermotor>:
#include <avr/io.h>
>>>>>>> Stashed changes
#include <util/delay.h>
#include "steppermotor.h"


void init_steppermotor(void)
{
<<<<<<< Updated upstream
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
    DDRStepper1 |= (1 << PStepper1_1); // PIN 30
     69e:	a7 e2       	ldi	r26, 0x27	; 39
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e7 e2       	ldi	r30, 0x27	; 39
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	80 68       	ori	r24, 0x80	; 128
     6aa:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_2); // PIN 32
     6ac:	a7 e2       	ldi	r26, 0x27	; 39
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	e7 e2       	ldi	r30, 0x27	; 39
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_3); // PIN 34
     6ba:	a7 e2       	ldi	r26, 0x27	; 39
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	e7 e2       	ldi	r30, 0x27	; 39
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	88 60       	ori	r24, 0x08	; 8
     6c6:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_4); // PIN 36
     6c8:	a7 e2       	ldi	r26, 0x27	; 39
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e7 e2       	ldi	r30, 0x27	; 39
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	82 60       	ori	r24, 0x02	; 2
     6d4:	8c 93       	st	X, r24

    DDRStepper2 |= (1 << PStepper2_1); // PIN 31
     6d6:	a7 e2       	ldi	r26, 0x27	; 39
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	e7 e2       	ldi	r30, 0x27	; 39
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	80 64       	ori	r24, 0x40	; 64
     6e2:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_2); // PIN 33
     6e4:	a7 e2       	ldi	r26, 0x27	; 39
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e7 e2       	ldi	r30, 0x27	; 39
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	80 61       	ori	r24, 0x10	; 16
     6f0:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_3); // PIN 35
     6f2:	a7 e2       	ldi	r26, 0x27	; 39
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e7 e2       	ldi	r30, 0x27	; 39
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	84 60       	ori	r24, 0x04	; 4
     6fe:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_4); // PIN 37
     700:	a7 e2       	ldi	r26, 0x27	; 39
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	e7 e2       	ldi	r30, 0x27	; 39
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	81 60       	ori	r24, 0x01	; 1
     70c:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 42
     70e:	aa e0       	ldi	r26, 0x0A	; 10
     710:	b1 e0       	ldi	r27, 0x01	; 1
     712:	ea e0       	ldi	r30, 0x0A	; 10
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	80 81       	ld	r24, Z
     718:	80 68       	ori	r24, 0x80	; 128
     71a:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 44
     71c:	aa e0       	ldi	r26, 0x0A	; 10
     71e:	b1 e0       	ldi	r27, 0x01	; 1
     720:	ea e0       	ldi	r30, 0x0A	; 10
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	80 81       	ld	r24, Z
     726:	80 62       	ori	r24, 0x20	; 32
     728:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 46
     72a:	aa e0       	ldi	r26, 0x0A	; 10
     72c:	b1 e0       	ldi	r27, 0x01	; 1
     72e:	ea e0       	ldi	r30, 0x0A	; 10
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	80 81       	ld	r24, Z
     734:	88 60       	ori	r24, 0x08	; 8
     736:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 48
     738:	aa e0       	ldi	r26, 0x0A	; 10
     73a:	b1 e0       	ldi	r27, 0x01	; 1
     73c:	ea e0       	ldi	r30, 0x0A	; 10
     73e:	f1 e0       	ldi	r31, 0x01	; 1
     740:	80 81       	ld	r24, Z
     742:	82 60       	ori	r24, 0x02	; 2
     744:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 43
     746:	aa e0       	ldi	r26, 0x0A	; 10
     748:	b1 e0       	ldi	r27, 0x01	; 1
     74a:	ea e0       	ldi	r30, 0x0A	; 10
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	80 81       	ld	r24, Z
     750:	80 68       	ori	r24, 0x80	; 128
     752:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 45
     754:	aa e0       	ldi	r26, 0x0A	; 10
     756:	b1 e0       	ldi	r27, 0x01	; 1
     758:	ea e0       	ldi	r30, 0x0A	; 10
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	80 81       	ld	r24, Z
     75e:	80 62       	ori	r24, 0x20	; 32
     760:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 47
     762:	aa e0       	ldi	r26, 0x0A	; 10
     764:	b1 e0       	ldi	r27, 0x01	; 1
     766:	ea e0       	ldi	r30, 0x0A	; 10
     768:	f1 e0       	ldi	r31, 0x01	; 1
     76a:	80 81       	ld	r24, Z
     76c:	88 60       	ori	r24, 0x08	; 8
     76e:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
     770:	aa e0       	ldi	r26, 0x0A	; 10
     772:	b1 e0       	ldi	r27, 0x01	; 1
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	80 81       	ld	r24, Z
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	8c 93       	st	X, r24
}
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	08 95       	ret

00000784 <steppermotor1Write>:

void steppermotor1Write(int a)
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	ea 97       	sbiw	r28, 0x3a	; 58
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	9e ab       	std	Y+54, r25	; 0x36
     79a:	8d ab       	std	Y+53, r24	; 0x35
     79c:	f1 c1       	rjmp	.+994    	; 0xb80 <steppermotor1Write+0x3fc>
=======
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
    DDRStepper1 |= (1 << PStepper1_1); // PIN 30
     af8:	a7 e2       	ldi	r26, 0x27	; 39
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e7 e2       	ldi	r30, 0x27	; 39
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	80 68       	ori	r24, 0x80	; 128
     b04:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_2); // PIN 32
     b06:	a7 e2       	ldi	r26, 0x27	; 39
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e7 e2       	ldi	r30, 0x27	; 39
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	80 62       	ori	r24, 0x20	; 32
     b12:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_3); // PIN 34
     b14:	a7 e2       	ldi	r26, 0x27	; 39
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e7 e2       	ldi	r30, 0x27	; 39
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	88 60       	ori	r24, 0x08	; 8
     b20:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_4); // PIN 36
     b22:	a7 e2       	ldi	r26, 0x27	; 39
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e2       	ldi	r30, 0x27	; 39
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	82 60       	ori	r24, 0x02	; 2
     b2e:	8c 93       	st	X, r24

    DDRStepper2 |= (1 << PStepper2_1); // PIN 31
     b30:	a7 e2       	ldi	r26, 0x27	; 39
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e7 e2       	ldi	r30, 0x27	; 39
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	80 64       	ori	r24, 0x40	; 64
     b3c:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_2); // PIN 33
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 61       	ori	r24, 0x10	; 16
     b4a:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_3); // PIN 35
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	84 60       	ori	r24, 0x04	; 4
     b58:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_4); // PIN 37
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	81 60       	ori	r24, 0x01	; 1
     b66:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 42
     b68:	aa e0       	ldi	r26, 0x0A	; 10
     b6a:	b1 e0       	ldi	r27, 0x01	; 1
     b6c:	ea e0       	ldi	r30, 0x0A	; 10
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	80 81       	ld	r24, Z
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 44
     b76:	aa e0       	ldi	r26, 0x0A	; 10
     b78:	b1 e0       	ldi	r27, 0x01	; 1
     b7a:	ea e0       	ldi	r30, 0x0A	; 10
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	80 81       	ld	r24, Z
     b80:	80 62       	ori	r24, 0x20	; 32
     b82:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 46
     b84:	aa e0       	ldi	r26, 0x0A	; 10
     b86:	b1 e0       	ldi	r27, 0x01	; 1
     b88:	ea e0       	ldi	r30, 0x0A	; 10
     b8a:	f1 e0       	ldi	r31, 0x01	; 1
     b8c:	80 81       	ld	r24, Z
     b8e:	88 60       	ori	r24, 0x08	; 8
     b90:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 48
     b92:	aa e0       	ldi	r26, 0x0A	; 10
     b94:	b1 e0       	ldi	r27, 0x01	; 1
     b96:	ea e0       	ldi	r30, 0x0A	; 10
     b98:	f1 e0       	ldi	r31, 0x01	; 1
     b9a:	80 81       	ld	r24, Z
     b9c:	82 60       	ori	r24, 0x02	; 2
     b9e:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 43
     ba0:	aa e0       	ldi	r26, 0x0A	; 10
     ba2:	b1 e0       	ldi	r27, 0x01	; 1
     ba4:	ea e0       	ldi	r30, 0x0A	; 10
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	80 81       	ld	r24, Z
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 45
     bae:	aa e0       	ldi	r26, 0x0A	; 10
     bb0:	b1 e0       	ldi	r27, 0x01	; 1
     bb2:	ea e0       	ldi	r30, 0x0A	; 10
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	80 81       	ld	r24, Z
     bb8:	80 62       	ori	r24, 0x20	; 32
     bba:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 47
     bbc:	aa e0       	ldi	r26, 0x0A	; 10
     bbe:	b1 e0       	ldi	r27, 0x01	; 1
     bc0:	ea e0       	ldi	r30, 0x0A	; 10
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	80 81       	ld	r24, Z
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
     bca:	aa e0       	ldi	r26, 0x0A	; 10
     bcc:	b1 e0       	ldi	r27, 0x01	; 1
     bce:	ea e0       	ldi	r30, 0x0A	; 10
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	80 81       	ld	r24, Z
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	8c 93       	st	X, r24
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <steppermotor1Write>:

void steppermotor1Write(int a)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	ea 97       	sbiw	r28, 0x3a	; 58
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	9e ab       	std	Y+54, r25	; 0x36
     bf4:	8d ab       	std	Y+53, r24	; 0x35
     bf6:	f1 c1       	rjmp	.+994    	; 0xfda <steppermotor1Write+0x3fc>
>>>>>>> Stashed changes
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	9c ab       	std	Y+52, r25	; 0x34
     7a4:	8b ab       	std	Y+51, r24	; 0x33
     7a6:	e4 c1       	rjmp	.+968    	; 0xb70 <steppermotor1Write+0x3ec>
        {
            switch (i)
     7a8:	8b a9       	ldd	r24, Y+51	; 0x33
     7aa:	9c a9       	ldd	r25, Y+52	; 0x34
     7ac:	98 af       	std	Y+56, r25	; 0x38
     7ae:	8f ab       	std	Y+55, r24	; 0x37
     7b0:	8f a9       	ldd	r24, Y+55	; 0x37
     7b2:	98 ad       	ldd	r25, Y+56	; 0x38
     7b4:	84 30       	cpi	r24, 0x04	; 4
     7b6:	91 05       	cpc	r25, r1
     7b8:	09 f4       	brne	.+2      	; 0x7bc <steppermotor1Write+0x38>
     7ba:	87 c0       	rjmp	.+270    	; 0x8ca <steppermotor1Write+0x146>
     7bc:	8f a9       	ldd	r24, Y+55	; 0x37
     7be:	98 ad       	ldd	r25, Y+56	; 0x38
     7c0:	85 30       	cpi	r24, 0x05	; 5
     7c2:	91 05       	cpc	r25, r1
     7c4:	94 f4       	brge	.+36     	; 0x7ea <steppermotor1Write+0x66>
     7c6:	8f a9       	ldd	r24, Y+55	; 0x37
     7c8:	98 ad       	ldd	r25, Y+56	; 0x38
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	91 05       	cpc	r25, r1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <steppermotor1Write+0x4e>
     7d0:	42 c0       	rjmp	.+132    	; 0x856 <steppermotor1Write+0xd2>
     7d2:	8f a9       	ldd	r24, Y+55	; 0x37
     7d4:	98 ad       	ldd	r25, Y+56	; 0x38
     7d6:	83 30       	cpi	r24, 0x03	; 3
     7d8:	91 05       	cpc	r25, r1
     7da:	0c f0       	brlt	.+2      	; 0x7de <steppermotor1Write+0x5a>
     7dc:	59 c0       	rjmp	.+178    	; 0x890 <steppermotor1Write+0x10c>
     7de:	8f a9       	ldd	r24, Y+55	; 0x37
     7e0:	98 ad       	ldd	r25, Y+56	; 0x38
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	91 05       	cpc	r25, r1
     7e6:	d1 f0       	breq	.+52     	; 0x81c <steppermotor1Write+0x98>
     7e8:	00 c1       	rjmp	.+512    	; 0x9ea <steppermotor1Write+0x266>
     7ea:	8f a9       	ldd	r24, Y+55	; 0x37
     7ec:	98 ad       	ldd	r25, Y+56	; 0x38
     7ee:	86 30       	cpi	r24, 0x06	; 6
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <steppermotor1Write+0x72>
     7f4:	a4 c0       	rjmp	.+328    	; 0x93e <steppermotor1Write+0x1ba>
     7f6:	8f a9       	ldd	r24, Y+55	; 0x37
     7f8:	98 ad       	ldd	r25, Y+56	; 0x38
     7fa:	86 30       	cpi	r24, 0x06	; 6
     7fc:	91 05       	cpc	r25, r1
     7fe:	0c f4       	brge	.+2      	; 0x802 <steppermotor1Write+0x7e>
     800:	81 c0       	rjmp	.+258    	; 0x904 <steppermotor1Write+0x180>
     802:	8f a9       	ldd	r24, Y+55	; 0x37
     804:	98 ad       	ldd	r25, Y+56	; 0x38
     806:	87 30       	cpi	r24, 0x07	; 7
     808:	91 05       	cpc	r25, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <steppermotor1Write+0x8a>
     80c:	b5 c0       	rjmp	.+362    	; 0x978 <steppermotor1Write+0x1f4>
     80e:	8f a9       	ldd	r24, Y+55	; 0x37
     810:	98 ad       	ldd	r25, Y+56	; 0x38
     812:	88 30       	cpi	r24, 0x08	; 8
     814:	91 05       	cpc	r25, r1
     816:	09 f4       	brne	.+2      	; 0x81a <steppermotor1Write+0x96>
     818:	cc c0       	rjmp	.+408    	; 0x9b2 <steppermotor1Write+0x22e>
     81a:	e7 c0       	rjmp	.+462    	; 0x9ea <steppermotor1Write+0x266>
            {
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     81c:	a8 e2       	ldi	r26, 0x28	; 40
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e8 e2       	ldi	r30, 0x28	; 40
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	80 68       	ori	r24, 0x80	; 128
     828:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     82a:	a8 e2       	ldi	r26, 0x28	; 40
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	e8 e2       	ldi	r30, 0x28	; 40
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8f 7d       	andi	r24, 0xDF	; 223
     836:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     838:	a8 e2       	ldi	r26, 0x28	; 40
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e8 e2       	ldi	r30, 0x28	; 40
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	87 7f       	andi	r24, 0xF7	; 247
     844:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     846:	a8 e2       	ldi	r26, 0x28	; 40
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	e8 e2       	ldi	r30, 0x28	; 40
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	8d 7f       	andi	r24, 0xFD	; 253
     852:	8c 93       	st	X, r24
     854:	ca c0       	rjmp	.+404    	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 2 :
                PORTStepper1 |= (1 << PStepper1_1);
     856:	a8 e2       	ldi	r26, 0x28	; 40
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e8 e2       	ldi	r30, 0x28	; 40
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	80 68       	ori	r24, 0x80	; 128
     862:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     864:	a8 e2       	ldi	r26, 0x28	; 40
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	e8 e2       	ldi	r30, 0x28	; 40
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	80 62       	ori	r24, 0x20	; 32
     870:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     872:	a8 e2       	ldi	r26, 0x28	; 40
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	e8 e2       	ldi	r30, 0x28	; 40
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	87 7f       	andi	r24, 0xF7	; 247
     87e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     880:	a8 e2       	ldi	r26, 0x28	; 40
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	e8 e2       	ldi	r30, 0x28	; 40
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	8d 7f       	andi	r24, 0xFD	; 253
     88c:	8c 93       	st	X, r24
     88e:	ad c0       	rjmp	.+346    	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     890:	a8 e2       	ldi	r26, 0x28	; 40
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	e8 e2       	ldi	r30, 0x28	; 40
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	8f 77       	andi	r24, 0x7F	; 127
     89c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     89e:	a8 e2       	ldi	r26, 0x28	; 40
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	e8 e2       	ldi	r30, 0x28	; 40
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	80 62       	ori	r24, 0x20	; 32
     8aa:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     8ac:	a8 e2       	ldi	r26, 0x28	; 40
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
     8b0:	e8 e2       	ldi	r30, 0x28	; 40
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	87 7f       	andi	r24, 0xF7	; 247
     8b8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     8ba:	a8 e2       	ldi	r26, 0x28	; 40
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e8 e2       	ldi	r30, 0x28	; 40
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8d 7f       	andi	r24, 0xFD	; 253
     8c6:	8c 93       	st	X, r24
     8c8:	90 c0       	rjmp	.+288    	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     8ca:	a8 e2       	ldi	r26, 0x28	; 40
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e8 e2       	ldi	r30, 0x28	; 40
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	8f 77       	andi	r24, 0x7F	; 127
     8d6:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     8d8:	a8 e2       	ldi	r26, 0x28	; 40
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e8 e2       	ldi	r30, 0x28	; 40
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	80 62       	ori	r24, 0x20	; 32
     8e4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     8e6:	a8 e2       	ldi	r26, 0x28	; 40
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e8 e2       	ldi	r30, 0x28	; 40
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	88 60       	ori	r24, 0x08	; 8
     8f2:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     8f4:	a8 e2       	ldi	r26, 0x28	; 40
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e8 e2       	ldi	r30, 0x28	; 40
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8d 7f       	andi	r24, 0xFD	; 253
     900:	8c 93       	st	X, r24
     902:	73 c0       	rjmp	.+230    	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     904:	a8 e2       	ldi	r26, 0x28	; 40
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e8 e2       	ldi	r30, 0x28	; 40
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     912:	a8 e2       	ldi	r26, 0x28	; 40
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	e8 e2       	ldi	r30, 0x28	; 40
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8f 7d       	andi	r24, 0xDF	; 223
     91e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     920:	a8 e2       	ldi	r26, 0x28	; 40
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	e8 e2       	ldi	r30, 0x28	; 40
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	88 60       	ori	r24, 0x08	; 8
     92c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     92e:	a8 e2       	ldi	r26, 0x28	; 40
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	e8 e2       	ldi	r30, 0x28	; 40
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	8d 7f       	andi	r24, 0xFD	; 253
     93a:	8c 93       	st	X, r24
     93c:	56 c0       	rjmp	.+172    	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     93e:	a8 e2       	ldi	r26, 0x28	; 40
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	e8 e2       	ldi	r30, 0x28	; 40
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	8f 77       	andi	r24, 0x7F	; 127
     94a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     94c:	a8 e2       	ldi	r26, 0x28	; 40
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e8 e2       	ldi	r30, 0x28	; 40
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	8f 7d       	andi	r24, 0xDF	; 223
     958:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     95a:	a8 e2       	ldi	r26, 0x28	; 40
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e8 e2       	ldi	r30, 0x28	; 40
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	88 60       	ori	r24, 0x08	; 8
     966:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     968:	a8 e2       	ldi	r26, 0x28	; 40
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	e8 e2       	ldi	r30, 0x28	; 40
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	82 60       	ori	r24, 0x02	; 2
     974:	8c 93       	st	X, r24
     976:	39 c0       	rjmp	.+114    	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 7 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     978:	a8 e2       	ldi	r26, 0x28	; 40
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e8 e2       	ldi	r30, 0x28	; 40
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	8f 77       	andi	r24, 0x7F	; 127
     984:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     986:	a8 e2       	ldi	r26, 0x28	; 40
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e8 e2       	ldi	r30, 0x28	; 40
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	8f 7d       	andi	r24, 0xDF	; 223
     992:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     994:	a8 e2       	ldi	r26, 0x28	; 40
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e8 e2       	ldi	r30, 0x28	; 40
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	87 7f       	andi	r24, 0xF7	; 247
     9a0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     9a2:	a8 e2       	ldi	r26, 0x28	; 40
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e8 e2       	ldi	r30, 0x28	; 40
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	82 60       	ori	r24, 0x02	; 2
     9ae:	8c 93       	st	X, r24
     9b0:	1c c0       	rjmp	.+56     	; 0x9ea <steppermotor1Write+0x266>
                break;
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     9b2:	a8 e2       	ldi	r26, 0x28	; 40
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e8 e2       	ldi	r30, 0x28	; 40
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	80 68       	ori	r24, 0x80	; 128
     9be:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     9c0:	a8 e2       	ldi	r26, 0x28	; 40
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	e8 e2       	ldi	r30, 0x28	; 40
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	8f 7d       	andi	r24, 0xDF	; 223
     9cc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     9ce:	a8 e2       	ldi	r26, 0x28	; 40
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	e8 e2       	ldi	r30, 0x28	; 40
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     9dc:	a8 e2       	ldi	r26, 0x28	; 40
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 e2       	ldi	r30, 0x28	; 40
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	8c 93       	st	X, r24
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	aa e7       	ldi	r26, 0x7A	; 122
     9f0:	b4 e4       	ldi	r27, 0x44	; 68
     9f2:	8d a7       	std	Y+45, r24	; 0x2d
     9f4:	9e a7       	std	Y+46, r25	; 0x2e
     9f6:	af a7       	std	Y+47, r26	; 0x2f
     9f8:	b8 ab       	std	Y+48, r27	; 0x30
=======
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c ab       	std	Y+52, r25	; 0x34
     bfe:	8b ab       	std	Y+51, r24	; 0x33
     c00:	e4 c1       	rjmp	.+968    	; 0xfca <steppermotor1Write+0x3ec>
        {
            switch (i)
     c02:	8b a9       	ldd	r24, Y+51	; 0x33
     c04:	9c a9       	ldd	r25, Y+52	; 0x34
     c06:	98 af       	std	Y+56, r25	; 0x38
     c08:	8f ab       	std	Y+55, r24	; 0x37
     c0a:	8f a9       	ldd	r24, Y+55	; 0x37
     c0c:	98 ad       	ldd	r25, Y+56	; 0x38
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	91 05       	cpc	r25, r1
     c12:	09 f4       	brne	.+2      	; 0xc16 <steppermotor1Write+0x38>
     c14:	87 c0       	rjmp	.+270    	; 0xd24 <steppermotor1Write+0x146>
     c16:	8f a9       	ldd	r24, Y+55	; 0x37
     c18:	98 ad       	ldd	r25, Y+56	; 0x38
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	91 05       	cpc	r25, r1
     c1e:	94 f4       	brge	.+36     	; 0xc44 <steppermotor1Write+0x66>
     c20:	8f a9       	ldd	r24, Y+55	; 0x37
     c22:	98 ad       	ldd	r25, Y+56	; 0x38
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	91 05       	cpc	r25, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <steppermotor1Write+0x4e>
     c2a:	42 c0       	rjmp	.+132    	; 0xcb0 <steppermotor1Write+0xd2>
     c2c:	8f a9       	ldd	r24, Y+55	; 0x37
     c2e:	98 ad       	ldd	r25, Y+56	; 0x38
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	91 05       	cpc	r25, r1
     c34:	0c f0       	brlt	.+2      	; 0xc38 <steppermotor1Write+0x5a>
     c36:	59 c0       	rjmp	.+178    	; 0xcea <steppermotor1Write+0x10c>
     c38:	8f a9       	ldd	r24, Y+55	; 0x37
     c3a:	98 ad       	ldd	r25, Y+56	; 0x38
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	91 05       	cpc	r25, r1
     c40:	d1 f0       	breq	.+52     	; 0xc76 <steppermotor1Write+0x98>
     c42:	00 c1       	rjmp	.+512    	; 0xe44 <steppermotor1Write+0x266>
     c44:	8f a9       	ldd	r24, Y+55	; 0x37
     c46:	98 ad       	ldd	r25, Y+56	; 0x38
     c48:	86 30       	cpi	r24, 0x06	; 6
     c4a:	91 05       	cpc	r25, r1
     c4c:	09 f4       	brne	.+2      	; 0xc50 <steppermotor1Write+0x72>
     c4e:	a4 c0       	rjmp	.+328    	; 0xd98 <steppermotor1Write+0x1ba>
     c50:	8f a9       	ldd	r24, Y+55	; 0x37
     c52:	98 ad       	ldd	r25, Y+56	; 0x38
     c54:	86 30       	cpi	r24, 0x06	; 6
     c56:	91 05       	cpc	r25, r1
     c58:	0c f4       	brge	.+2      	; 0xc5c <steppermotor1Write+0x7e>
     c5a:	81 c0       	rjmp	.+258    	; 0xd5e <steppermotor1Write+0x180>
     c5c:	8f a9       	ldd	r24, Y+55	; 0x37
     c5e:	98 ad       	ldd	r25, Y+56	; 0x38
     c60:	87 30       	cpi	r24, 0x07	; 7
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <steppermotor1Write+0x8a>
     c66:	b5 c0       	rjmp	.+362    	; 0xdd2 <steppermotor1Write+0x1f4>
     c68:	8f a9       	ldd	r24, Y+55	; 0x37
     c6a:	98 ad       	ldd	r25, Y+56	; 0x38
     c6c:	88 30       	cpi	r24, 0x08	; 8
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <steppermotor1Write+0x96>
     c72:	cc c0       	rjmp	.+408    	; 0xe0c <steppermotor1Write+0x22e>
     c74:	e7 c0       	rjmp	.+462    	; 0xe44 <steppermotor1Write+0x266>
            {
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     c76:	a8 e2       	ldi	r26, 0x28	; 40
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e8 e2       	ldi	r30, 0x28	; 40
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     c84:	a8 e2       	ldi	r26, 0x28	; 40
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e8 e2       	ldi	r30, 0x28	; 40
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c92:	a8 e2       	ldi	r26, 0x28	; 40
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e8 e2       	ldi	r30, 0x28	; 40
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	87 7f       	andi	r24, 0xF7	; 247
     c9e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     ca0:	a8 e2       	ldi	r26, 0x28	; 40
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e8 e2       	ldi	r30, 0x28	; 40
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8d 7f       	andi	r24, 0xFD	; 253
     cac:	8c 93       	st	X, r24
     cae:	ca c0       	rjmp	.+404    	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 2 :
                PORTStepper1 |= (1 << PStepper1_1);
     cb0:	a8 e2       	ldi	r26, 0x28	; 40
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e8 e2       	ldi	r30, 0x28	; 40
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 68       	ori	r24, 0x80	; 128
     cbc:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cbe:	a8 e2       	ldi	r26, 0x28	; 40
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e8 e2       	ldi	r30, 0x28	; 40
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 62       	ori	r24, 0x20	; 32
     cca:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     ccc:	a8 e2       	ldi	r26, 0x28	; 40
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e8 e2       	ldi	r30, 0x28	; 40
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     cda:	a8 e2       	ldi	r26, 0x28	; 40
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e8 e2       	ldi	r30, 0x28	; 40
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8d 7f       	andi	r24, 0xFD	; 253
     ce6:	8c 93       	st	X, r24
     ce8:	ad c0       	rjmp	.+346    	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     cea:	a8 e2       	ldi	r26, 0x28	; 40
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 e2       	ldi	r30, 0x28	; 40
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 77       	andi	r24, 0x7F	; 127
     cf6:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cf8:	a8 e2       	ldi	r26, 0x28	; 40
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e8 e2       	ldi	r30, 0x28	; 40
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     d06:	a8 e2       	ldi	r26, 0x28	; 40
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e8 e2       	ldi	r30, 0x28	; 40
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	87 7f       	andi	r24, 0xF7	; 247
     d12:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d14:	a8 e2       	ldi	r26, 0x28	; 40
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e8 e2       	ldi	r30, 0x28	; 40
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8d 7f       	andi	r24, 0xFD	; 253
     d20:	8c 93       	st	X, r24
     d22:	90 c0       	rjmp	.+288    	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d24:	a8 e2       	ldi	r26, 0x28	; 40
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e2       	ldi	r30, 0x28	; 40
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 77       	andi	r24, 0x7F	; 127
     d30:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     d32:	a8 e2       	ldi	r26, 0x28	; 40
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e8 e2       	ldi	r30, 0x28	; 40
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d40:	a8 e2       	ldi	r26, 0x28	; 40
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e8 e2       	ldi	r30, 0x28	; 40
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 60       	ori	r24, 0x08	; 8
     d4c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d4e:	a8 e2       	ldi	r26, 0x28	; 40
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 e2       	ldi	r30, 0x28	; 40
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8d 7f       	andi	r24, 0xFD	; 253
     d5a:	8c 93       	st	X, r24
     d5c:	73 c0       	rjmp	.+230    	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d5e:	a8 e2       	ldi	r26, 0x28	; 40
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e8 e2       	ldi	r30, 0x28	; 40
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8f 77       	andi	r24, 0x7F	; 127
     d6a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d6c:	a8 e2       	ldi	r26, 0x28	; 40
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e8 e2       	ldi	r30, 0x28	; 40
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8f 7d       	andi	r24, 0xDF	; 223
     d78:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d7a:	a8 e2       	ldi	r26, 0x28	; 40
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e8 e2       	ldi	r30, 0x28	; 40
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 60       	ori	r24, 0x08	; 8
     d86:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d88:	a8 e2       	ldi	r26, 0x28	; 40
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e8 e2       	ldi	r30, 0x28	; 40
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8d 7f       	andi	r24, 0xFD	; 253
     d94:	8c 93       	st	X, r24
     d96:	56 c0       	rjmp	.+172    	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d98:	a8 e2       	ldi	r26, 0x28	; 40
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e2       	ldi	r30, 0x28	; 40
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 77       	andi	r24, 0x7F	; 127
     da4:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     da6:	a8 e2       	ldi	r26, 0x28	; 40
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 e2       	ldi	r30, 0x28	; 40
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7d       	andi	r24, 0xDF	; 223
     db2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     db4:	a8 e2       	ldi	r26, 0x28	; 40
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e8 e2       	ldi	r30, 0x28	; 40
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	88 60       	ori	r24, 0x08	; 8
     dc0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     dc2:	a8 e2       	ldi	r26, 0x28	; 40
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e2       	ldi	r30, 0x28	; 40
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	8c 93       	st	X, r24
     dd0:	39 c0       	rjmp	.+114    	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 7 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     dd2:	a8 e2       	ldi	r26, 0x28	; 40
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e2       	ldi	r30, 0x28	; 40
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     de0:	a8 e2       	ldi	r26, 0x28	; 40
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e2       	ldi	r30, 0x28	; 40
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7d       	andi	r24, 0xDF	; 223
     dec:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     dee:	a8 e2       	ldi	r26, 0x28	; 40
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e2       	ldi	r30, 0x28	; 40
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	87 7f       	andi	r24, 0xF7	; 247
     dfa:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     dfc:	a8 e2       	ldi	r26, 0x28	; 40
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e8 e2       	ldi	r30, 0x28	; 40
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	8c 93       	st	X, r24
     e0a:	1c c0       	rjmp	.+56     	; 0xe44 <steppermotor1Write+0x266>
                break;
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     e0c:	a8 e2       	ldi	r26, 0x28	; 40
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e2       	ldi	r30, 0x28	; 40
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 68       	ori	r24, 0x80	; 128
     e18:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     e1a:	a8 e2       	ldi	r26, 0x28	; 40
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 e2       	ldi	r30, 0x28	; 40
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     e28:	a8 e2       	ldi	r26, 0x28	; 40
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e2       	ldi	r30, 0x28	; 40
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     e36:	a8 e2       	ldi	r26, 0x28	; 40
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e8 e2       	ldi	r30, 0x28	; 40
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	8c 93       	st	X, r24
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	aa e7       	ldi	r26, 0x7A	; 122
     e4a:	b4 e4       	ldi	r27, 0x44	; 68
     e4c:	8d a7       	std	Y+45, r24	; 0x2d
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	af a7       	std	Y+47, r26	; 0x2f
     e52:	b8 ab       	std	Y+48, r27	; 0x30
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
     9fa:	6d a5       	ldd	r22, Y+45	; 0x2d
     9fc:	7e a5       	ldd	r23, Y+46	; 0x2e
     9fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     a00:	98 a9       	ldd	r25, Y+48	; 0x30
     a02:	2b ea       	ldi	r18, 0xAB	; 171
     a04:	3a ea       	ldi	r19, 0xAA	; 170
     a06:	4a ea       	ldi	r20, 0xAA	; 170
     a08:	50 e4       	ldi	r21, 0x40	; 64
     a0a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	89 a7       	std	Y+41, r24	; 0x29
     a14:	9a a7       	std	Y+42, r25	; 0x2a
     a16:	ab a7       	std	Y+43, r26	; 0x2b
     a18:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     a1a:	69 a5       	ldd	r22, Y+41	; 0x29
     a1c:	7a a5       	ldd	r23, Y+42	; 0x2a
     a1e:	8b a5       	ldd	r24, Y+43	; 0x2b
     a20:	9c a5       	ldd	r25, Y+44	; 0x2c
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e8       	ldi	r20, 0x80	; 128
     a28:	5f e3       	ldi	r21, 0x3F	; 63
     a2a:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
     a2e:	88 23       	and	r24, r24
     a30:	1c f4       	brge	.+6      	; 0xa38 <steppermotor1Write+0x2b4>
		__ticks = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	88 a7       	std	Y+40, r24	; 0x28
     a36:	91 c0       	rjmp	.+290    	; 0xb5a <steppermotor1Write+0x3d6>
	else if (__tmp > 255)
     a38:	69 a5       	ldd	r22, Y+41	; 0x29
     a3a:	7a a5       	ldd	r23, Y+42	; 0x2a
     a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
     a3e:	9c a5       	ldd	r25, Y+44	; 0x2c
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	4f e7       	ldi	r20, 0x7F	; 127
     a46:	53 e4       	ldi	r21, 0x43	; 67
     a48:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
     a4c:	18 16       	cp	r1, r24
     a4e:	0c f0       	brlt	.+2      	; 0xa52 <steppermotor1Write+0x2ce>
     a50:	7b c0       	rjmp	.+246    	; 0xb48 <steppermotor1Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
     a52:	6d a5       	ldd	r22, Y+45	; 0x2d
     a54:	7e a5       	ldd	r23, Y+46	; 0x2e
     a56:	8f a5       	ldd	r24, Y+47	; 0x2f
     a58:	98 a9       	ldd	r25, Y+48	; 0x30
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	4a e7       	ldi	r20, 0x7A	; 122
     a60:	54 e4       	ldi	r21, 0x44	; 68
     a62:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	8c a3       	std	Y+36, r24	; 0x24
     a6c:	9d a3       	std	Y+37, r25	; 0x25
     a6e:	ae a3       	std	Y+38, r26	; 0x26
     a70:	bf a3       	std	Y+39, r27	; 0x27
=======
     e54:	6d a5       	ldd	r22, Y+45	; 0x2d
     e56:	7e a5       	ldd	r23, Y+46	; 0x2e
     e58:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5a:	98 a9       	ldd	r25, Y+48	; 0x30
     e5c:	2b ea       	ldi	r18, 0xAB	; 171
     e5e:	3a ea       	ldi	r19, 0xAA	; 170
     e60:	4a ea       	ldi	r20, 0xAA	; 170
     e62:	50 e4       	ldi	r21, 0x40	; 64
     e64:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	89 a7       	std	Y+41, r24	; 0x29
     e6e:	9a a7       	std	Y+42, r25	; 0x2a
     e70:	ab a7       	std	Y+43, r26	; 0x2b
     e72:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e74:	69 a5       	ldd	r22, Y+41	; 0x29
     e76:	7a a5       	ldd	r23, Y+42	; 0x2a
     e78:	8b a5       	ldd	r24, Y+43	; 0x2b
     e7a:	9c a5       	ldd	r25, Y+44	; 0x2c
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     e88:	88 23       	and	r24, r24
     e8a:	1c f4       	brge	.+6      	; 0xe92 <steppermotor1Write+0x2b4>
		__ticks = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	88 a7       	std	Y+40, r24	; 0x28
     e90:	91 c0       	rjmp	.+290    	; 0xfb4 <steppermotor1Write+0x3d6>
	else if (__tmp > 255)
     e92:	69 a5       	ldd	r22, Y+41	; 0x29
     e94:	7a a5       	ldd	r23, Y+42	; 0x2a
     e96:	8b a5       	ldd	r24, Y+43	; 0x2b
     e98:	9c a5       	ldd	r25, Y+44	; 0x2c
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	4f e7       	ldi	r20, 0x7F	; 127
     ea0:	53 e4       	ldi	r21, 0x43	; 67
     ea2:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     ea6:	18 16       	cp	r1, r24
     ea8:	0c f0       	brlt	.+2      	; 0xeac <steppermotor1Write+0x2ce>
     eaa:	7b c0       	rjmp	.+246    	; 0xfa2 <steppermotor1Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
     eac:	6d a5       	ldd	r22, Y+45	; 0x2d
     eae:	7e a5       	ldd	r23, Y+46	; 0x2e
     eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb2:	98 a9       	ldd	r25, Y+48	; 0x30
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a e7       	ldi	r20, 0x7A	; 122
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8c a3       	std	Y+36, r24	; 0x24
     ec6:	9d a3       	std	Y+37, r25	; 0x25
     ec8:	ae a3       	std	Y+38, r26	; 0x26
     eca:	bf a3       	std	Y+39, r27	; 0x27
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
     a72:	6c a1       	ldd	r22, Y+36	; 0x24
     a74:	7d a1       	ldd	r23, Y+37	; 0x25
     a76:	8e a1       	ldd	r24, Y+38	; 0x26
     a78:	9f a1       	ldd	r25, Y+39	; 0x27
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	4a e7       	ldi	r20, 0x7A	; 122
     a80:	55 e4       	ldi	r21, 0x45	; 69
     a82:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	88 a3       	std	Y+32, r24	; 0x20
     a8c:	99 a3       	std	Y+33, r25	; 0x21
     a8e:	aa a3       	std	Y+34, r26	; 0x22
     a90:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     a92:	68 a1       	ldd	r22, Y+32	; 0x20
     a94:	79 a1       	ldd	r23, Y+33	; 0x21
     a96:	8a a1       	ldd	r24, Y+34	; 0x22
     a98:	9b a1       	ldd	r25, Y+35	; 0x23
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	5f e3       	ldi	r21, 0x3F	; 63
     aa2:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
     aa6:	88 23       	and	r24, r24
     aa8:	2c f4       	brge	.+10     	; 0xab4 <steppermotor1Write+0x330>
		__ticks = 1;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	9f 8f       	std	Y+31, r25	; 0x1f
     ab0:	8e 8f       	std	Y+30, r24	; 0x1e
     ab2:	3f c0       	rjmp	.+126    	; 0xb32 <steppermotor1Write+0x3ae>
	else if (__tmp > 65535)
     ab4:	68 a1       	ldd	r22, Y+32	; 0x20
     ab6:	79 a1       	ldd	r23, Y+33	; 0x21
     ab8:	8a a1       	ldd	r24, Y+34	; 0x22
     aba:	9b a1       	ldd	r25, Y+35	; 0x23
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	3f ef       	ldi	r19, 0xFF	; 255
     ac0:	4f e7       	ldi	r20, 0x7F	; 127
     ac2:	57 e4       	ldi	r21, 0x47	; 71
     ac4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
     ac8:	18 16       	cp	r1, r24
     aca:	4c f5       	brge	.+82     	; 0xb1e <steppermotor1Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     acc:	6c a1       	ldd	r22, Y+36	; 0x24
     ace:	7d a1       	ldd	r23, Y+37	; 0x25
     ad0:	8e a1       	ldd	r24, Y+38	; 0x26
     ad2:	9f a1       	ldd	r25, Y+39	; 0x27
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e2       	ldi	r20, 0x20	; 32
     ada:	51 e4       	ldi	r21, 0x41	; 65
     adc:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	9f 8f       	std	Y+31, r25	; 0x1f
     af2:	8e 8f       	std	Y+30, r24	; 0x1e
     af4:	0f c0       	rjmp	.+30     	; 0xb14 <steppermotor1Write+0x390>
     af6:	80 e9       	ldi	r24, 0x90	; 144
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	9d 8f       	std	Y+29, r25	; 0x1d
     afc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     afe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b00:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <steppermotor1Write+0x37e>
     b06:	9d 8f       	std	Y+29, r25	; 0x1d
     b08:	8c 8f       	std	Y+28, r24	; 0x1c
=======
     ecc:	6c a1       	ldd	r22, Y+36	; 0x24
     ece:	7d a1       	ldd	r23, Y+37	; 0x25
     ed0:	8e a1       	ldd	r24, Y+38	; 0x26
     ed2:	9f a1       	ldd	r25, Y+39	; 0x27
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4a e7       	ldi	r20, 0x7A	; 122
     eda:	55 e4       	ldi	r21, 0x45	; 69
     edc:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	88 a3       	std	Y+32, r24	; 0x20
     ee6:	99 a3       	std	Y+33, r25	; 0x21
     ee8:	aa a3       	std	Y+34, r26	; 0x22
     eea:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     eec:	68 a1       	ldd	r22, Y+32	; 0x20
     eee:	79 a1       	ldd	r23, Y+33	; 0x21
     ef0:	8a a1       	ldd	r24, Y+34	; 0x22
     ef2:	9b a1       	ldd	r25, Y+35	; 0x23
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <steppermotor1Write+0x330>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9f 8f       	std	Y+31, r25	; 0x1f
     f0a:	8e 8f       	std	Y+30, r24	; 0x1e
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <steppermotor1Write+0x3ae>
	else if (__tmp > 65535)
     f0e:	68 a1       	ldd	r22, Y+32	; 0x20
     f10:	79 a1       	ldd	r23, Y+33	; 0x21
     f12:	8a a1       	ldd	r24, Y+34	; 0x22
     f14:	9b a1       	ldd	r25, Y+35	; 0x23
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <steppermotor1Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	6c a1       	ldd	r22, Y+36	; 0x24
     f28:	7d a1       	ldd	r23, Y+37	; 0x25
     f2a:	8e a1       	ldd	r24, Y+38	; 0x26
     f2c:	9f a1       	ldd	r25, Y+39	; 0x27
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9f 8f       	std	Y+31, r25	; 0x1f
     f4c:	8e 8f       	std	Y+30, r24	; 0x1e
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <steppermotor1Write+0x390>
     f50:	80 e9       	ldi	r24, 0x90	; 144
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	9d 8f       	std	Y+29, r25	; 0x1d
     f56:	8c 8f       	std	Y+28, r24	; 0x1c
     f58:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <steppermotor1Write+0x37e>
     f60:	9d 8f       	std	Y+29, r25	; 0x1d
     f62:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
     b0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9f 8f       	std	Y+31, r25	; 0x1f
     b12:	8e 8f       	std	Y+30, r24	; 0x1e
=======
     f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f66:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9f 8f       	std	Y+31, r25	; 0x1f
     f6c:	8e 8f       	std	Y+30, r24	; 0x1e
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
     b14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b16:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	69 f7       	brne	.-38     	; 0xaf6 <steppermotor1Write+0x372>
     b1c:	24 c0       	rjmp	.+72     	; 0xb66 <steppermotor1Write+0x3e2>
=======
     f6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f70:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	69 f7       	brne	.-38     	; 0xf50 <steppermotor1Write+0x372>
     f76:	24 c0       	rjmp	.+72     	; 0xfc0 <steppermotor1Write+0x3e2>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
     b1e:	68 a1       	ldd	r22, Y+32	; 0x20
     b20:	79 a1       	ldd	r23, Y+33	; 0x21
     b22:	8a a1       	ldd	r24, Y+34	; 0x22
     b24:	9b a1       	ldd	r25, Y+35	; 0x23
     b26:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9f 8f       	std	Y+31, r25	; 0x1f
     b30:	8e 8f       	std	Y+30, r24	; 0x1e
     b32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b34:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b36:	9b 8f       	std	Y+27, r25	; 0x1b
     b38:	8a 8f       	std	Y+26, r24	; 0x1a
     b3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <steppermotor1Write+0x3ba>
     b42:	9b 8f       	std	Y+27, r25	; 0x1b
     b44:	8a 8f       	std	Y+26, r24	; 0x1a
     b46:	0f c0       	rjmp	.+30     	; 0xb66 <steppermotor1Write+0x3e2>
=======
     f78:	68 a1       	ldd	r22, Y+32	; 0x20
     f7a:	79 a1       	ldd	r23, Y+33	; 0x21
     f7c:	8a a1       	ldd	r24, Y+34	; 0x22
     f7e:	9b a1       	ldd	r25, Y+35	; 0x23
     f80:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	9f 8f       	std	Y+31, r25	; 0x1f
     f8a:	8e 8f       	std	Y+30, r24	; 0x1e
     f8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f90:	9b 8f       	std	Y+27, r25	; 0x1b
     f92:	8a 8f       	std	Y+26, r24	; 0x1a
     f94:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f96:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <steppermotor1Write+0x3ba>
     f9c:	9b 8f       	std	Y+27, r25	; 0x1b
     f9e:	8a 8f       	std	Y+26, r24	; 0x1a
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <steppermotor1Write+0x3e2>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
     b48:	69 a5       	ldd	r22, Y+41	; 0x29
     b4a:	7a a5       	ldd	r23, Y+42	; 0x2a
     b4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b50:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	88 a7       	std	Y+40, r24	; 0x28
     b5a:	88 a5       	ldd	r24, Y+40	; 0x28
     b5c:	89 8f       	std	Y+25, r24	; 0x19
=======
     fa2:	69 a5       	ldd	r22, Y+41	; 0x29
     fa4:	7a a5       	ldd	r23, Y+42	; 0x2a
     fa6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fa8:	9c a5       	ldd	r25, Y+44	; 0x2c
     faa:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	88 a7       	std	Y+40, r24	; 0x28
     fb4:	88 a5       	ldd	r24, Y+40	; 0x28
     fb6:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
     b5e:	89 8d       	ldd	r24, Y+25	; 0x19
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <steppermotor1Write+0x3dc>
     b64:	89 8f       	std	Y+25, r24	; 0x19
=======
     fb8:	89 8d       	ldd	r24, Y+25	; 0x19
     fba:	8a 95       	dec	r24
     fbc:	f1 f7       	brne	.-4      	; 0xfba <steppermotor1Write+0x3dc>
     fbe:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
void steppermotor1Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
     b66:	8b a9       	ldd	r24, Y+51	; 0x33
     b68:	9c a9       	ldd	r25, Y+52	; 0x34
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	9c ab       	std	Y+52, r25	; 0x34
     b6e:	8b ab       	std	Y+51, r24	; 0x33
     b70:	8b a9       	ldd	r24, Y+51	; 0x33
     b72:	9c a9       	ldd	r25, Y+52	; 0x34
     b74:	88 30       	cpi	r24, 0x08	; 8
     b76:	91 05       	cpc	r25, r1
     b78:	0c f4       	brge	.+2      	; 0xb7c <steppermotor1Write+0x3f8>
     b7a:	16 ce       	rjmp	.-980    	; 0x7a8 <steppermotor1Write+0x24>
=======
     fc0:	8b a9       	ldd	r24, Y+51	; 0x33
     fc2:	9c a9       	ldd	r25, Y+52	; 0x34
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	9c ab       	std	Y+52, r25	; 0x34
     fc8:	8b ab       	std	Y+51, r24	; 0x33
     fca:	8b a9       	ldd	r24, Y+51	; 0x33
     fcc:	9c a9       	ldd	r25, Y+52	; 0x34
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	91 05       	cpc	r25, r1
     fd2:	0c f4       	brge	.+2      	; 0xfd6 <steppermotor1Write+0x3f8>
     fd4:	16 ce       	rjmp	.-980    	; 0xc02 <steppermotor1Write+0x24>
>>>>>>> Stashed changes
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
     b7c:	1e aa       	std	Y+54, r1	; 0x36
     b7e:	1d aa       	std	Y+53, r1	; 0x35
=======
     fd6:	1e aa       	std	Y+54, r1	; 0x36
     fd8:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
}

void steppermotor1Write(int a)
{
    while(a  == 1)
<<<<<<< Updated upstream
     b80:	8d a9       	ldd	r24, Y+53	; 0x35
     b82:	9e a9       	ldd	r25, Y+54	; 0x36
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <steppermotor1Write+0x408>
     b8a:	09 ce       	rjmp	.-1006   	; 0x79e <steppermotor1Write+0x1a>
     b8c:	f0 c1       	rjmp	.+992    	; 0xf6e <steppermotor1Write+0x7ea>
=======
     fda:	8d a9       	ldd	r24, Y+53	; 0x35
     fdc:	9e a9       	ldd	r25, Y+54	; 0x36
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <steppermotor1Write+0x408>
     fe4:	09 ce       	rjmp	.-1006   	; 0xbf8 <steppermotor1Write+0x1a>
     fe6:	f0 c1       	rjmp	.+992    	; 0x13c8 <steppermotor1Write+0x7ea>
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9a ab       	std	Y+50, r25	; 0x32
     b94:	89 ab       	std	Y+49, r24	; 0x31
     b96:	e3 c1       	rjmp	.+966    	; 0xf5e <steppermotor1Write+0x7da>
        {
            switch (i)
     b98:	89 a9       	ldd	r24, Y+49	; 0x31
     b9a:	9a a9       	ldd	r25, Y+50	; 0x32
     b9c:	9a af       	std	Y+58, r25	; 0x3a
     b9e:	89 af       	std	Y+57, r24	; 0x39
     ba0:	89 ad       	ldd	r24, Y+57	; 0x39
     ba2:	9a ad       	ldd	r25, Y+58	; 0x3a
     ba4:	84 30       	cpi	r24, 0x04	; 4
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <steppermotor1Write+0x428>
     baa:	a3 c0       	rjmp	.+326    	; 0xcf2 <steppermotor1Write+0x56e>
     bac:	89 ad       	ldd	r24, Y+57	; 0x39
     bae:	9a ad       	ldd	r25, Y+58	; 0x3a
     bb0:	85 30       	cpi	r24, 0x05	; 5
     bb2:	91 05       	cpc	r25, r1
     bb4:	94 f4       	brge	.+36     	; 0xbda <steppermotor1Write+0x456>
     bb6:	89 ad       	ldd	r24, Y+57	; 0x39
     bb8:	9a ad       	ldd	r25, Y+58	; 0x3a
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <steppermotor1Write+0x43e>
     bc0:	5e c0       	rjmp	.+188    	; 0xc7e <steppermotor1Write+0x4fa>
     bc2:	89 ad       	ldd	r24, Y+57	; 0x39
     bc4:	9a ad       	ldd	r25, Y+58	; 0x3a
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	91 05       	cpc	r25, r1
     bca:	0c f0       	brlt	.+2      	; 0xbce <steppermotor1Write+0x44a>
     bcc:	75 c0       	rjmp	.+234    	; 0xcb8 <steppermotor1Write+0x534>
     bce:	89 ad       	ldd	r24, Y+57	; 0x39
     bd0:	9a ad       	ldd	r25, Y+58	; 0x3a
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	91 05       	cpc	r25, r1
     bd6:	b1 f1       	breq	.+108    	; 0xc44 <steppermotor1Write+0x4c0>
     bd8:	ff c0       	rjmp	.+510    	; 0xdd8 <steppermotor1Write+0x654>
     bda:	89 ad       	ldd	r24, Y+57	; 0x39
     bdc:	9a ad       	ldd	r25, Y+58	; 0x3a
     bde:	86 30       	cpi	r24, 0x06	; 6
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <steppermotor1Write+0x462>
     be4:	c0 c0       	rjmp	.+384    	; 0xd66 <steppermotor1Write+0x5e2>
     be6:	89 ad       	ldd	r24, Y+57	; 0x39
     be8:	9a ad       	ldd	r25, Y+58	; 0x3a
     bea:	86 30       	cpi	r24, 0x06	; 6
     bec:	91 05       	cpc	r25, r1
     bee:	0c f4       	brge	.+2      	; 0xbf2 <steppermotor1Write+0x46e>
     bf0:	9d c0       	rjmp	.+314    	; 0xd2c <steppermotor1Write+0x5a8>
     bf2:	89 ad       	ldd	r24, Y+57	; 0x39
     bf4:	9a ad       	ldd	r25, Y+58	; 0x3a
     bf6:	87 30       	cpi	r24, 0x07	; 7
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <steppermotor1Write+0x47a>
     bfc:	d1 c0       	rjmp	.+418    	; 0xda0 <steppermotor1Write+0x61c>
     bfe:	89 ad       	ldd	r24, Y+57	; 0x39
     c00:	9a ad       	ldd	r25, Y+58	; 0x3a
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	91 05       	cpc	r25, r1
     c06:	09 f0       	breq	.+2      	; 0xc0a <steppermotor1Write+0x486>
     c08:	e7 c0       	rjmp	.+462    	; 0xdd8 <steppermotor1Write+0x654>
            {
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     c0a:	a8 e2       	ldi	r26, 0x28	; 40
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e8 e2       	ldi	r30, 0x28	; 40
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 68       	ori	r24, 0x80	; 128
     c16:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     c18:	a8 e2       	ldi	r26, 0x28	; 40
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e8 e2       	ldi	r30, 0x28	; 40
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8f 7d       	andi	r24, 0xDF	; 223
     c24:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c26:	a8 e2       	ldi	r26, 0x28	; 40
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 e2       	ldi	r30, 0x28	; 40
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     c34:	a8 e2       	ldi	r26, 0x28	; 40
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e8 e2       	ldi	r30, 0x28	; 40
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8d 7f       	andi	r24, 0xFD	; 253
     c40:	8c 93       	st	X, r24
     c42:	ca c0       	rjmp	.+404    	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     c44:	a8 e2       	ldi	r26, 0x28	; 40
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 e2       	ldi	r30, 0x28	; 40
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 68       	ori	r24, 0x80	; 128
     c50:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     c52:	a8 e2       	ldi	r26, 0x28	; 40
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e8 e2       	ldi	r30, 0x28	; 40
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 62       	ori	r24, 0x20	; 32
     c5e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c60:	a8 e2       	ldi	r26, 0x28	; 40
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e8 e2       	ldi	r30, 0x28	; 40
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	87 7f       	andi	r24, 0xF7	; 247
     c6c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     c6e:	a8 e2       	ldi	r26, 0x28	; 40
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 e2       	ldi	r30, 0x28	; 40
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	8d 7f       	andi	r24, 0xFD	; 253
     c7a:	8c 93       	st	X, r24
     c7c:	ad c0       	rjmp	.+346    	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 2 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8f 77       	andi	r24, 0x7F	; 127
     c8a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     c8c:	a8 e2       	ldi	r26, 0x28	; 40
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e8 e2       	ldi	r30, 0x28	; 40
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c9a:	a8 e2       	ldi	r26, 0x28	; 40
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e8 e2       	ldi	r30, 0x28	; 40
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	87 7f       	andi	r24, 0xF7	; 247
     ca6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     ca8:	a8 e2       	ldi	r26, 0x28	; 40
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e8 e2       	ldi	r30, 0x28	; 40
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8d 7f       	andi	r24, 0xFD	; 253
     cb4:	8c 93       	st	X, r24
     cb6:	90 c0       	rjmp	.+288    	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     cb8:	a8 e2       	ldi	r26, 0x28	; 40
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e2       	ldi	r30, 0x28	; 40
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cc6:	a8 e2       	ldi	r26, 0x28	; 40
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 e2       	ldi	r30, 0x28	; 40
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 62       	ori	r24, 0x20	; 32
     cd2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     cd4:	a8 e2       	ldi	r26, 0x28	; 40
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e8 e2       	ldi	r30, 0x28	; 40
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     ce2:	a8 e2       	ldi	r26, 0x28	; 40
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e8 e2       	ldi	r30, 0x28	; 40
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	8c 93       	st	X, r24
     cf0:	73 c0       	rjmp	.+230    	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 77       	andi	r24, 0x7F	; 127
     cfe:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d0e:	a8 e2       	ldi	r26, 0x28	; 40
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e8 e2       	ldi	r30, 0x28	; 40
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 60       	ori	r24, 0x08	; 8
     d1a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d1c:	a8 e2       	ldi	r26, 0x28	; 40
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e8 e2       	ldi	r30, 0x28	; 40
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	8c 93       	st	X, r24
     d2a:	56 c0       	rjmp	.+172    	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8f 77       	andi	r24, 0x7F	; 127
     d38:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d3a:	a8 e2       	ldi	r26, 0x28	; 40
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e8 e2       	ldi	r30, 0x28	; 40
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8f 7d       	andi	r24, 0xDF	; 223
     d46:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d48:	a8 e2       	ldi	r26, 0x28	; 40
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e8 e2       	ldi	r30, 0x28	; 40
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     d56:	a8 e2       	ldi	r26, 0x28	; 40
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e8 e2       	ldi	r30, 0x28	; 40
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	8c 93       	st	X, r24
     d64:	39 c0       	rjmp	.+114    	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d66:	a8 e2       	ldi	r26, 0x28	; 40
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e8 e2       	ldi	r30, 0x28	; 40
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 77       	andi	r24, 0x7F	; 127
     d72:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d74:	a8 e2       	ldi	r26, 0x28	; 40
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e8 e2       	ldi	r30, 0x28	; 40
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 7d       	andi	r24, 0xDF	; 223
     d80:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     d82:	a8 e2       	ldi	r26, 0x28	; 40
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e8 e2       	ldi	r30, 0x28	; 40
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	87 7f       	andi	r24, 0xF7	; 247
     d8e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     d90:	a8 e2       	ldi	r26, 0x28	; 40
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e8 e2       	ldi	r30, 0x28	; 40
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	82 60       	ori	r24, 0x02	; 2
     d9c:	8c 93       	st	X, r24
     d9e:	1c c0       	rjmp	.+56     	; 0xdd8 <steppermotor1Write+0x654>
                break;
            case 7 :
                PORTStepper1 |= (1 << PStepper1_1);
     da0:	a8 e2       	ldi	r26, 0x28	; 40
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e8 e2       	ldi	r30, 0x28	; 40
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     dae:	a8 e2       	ldi	r26, 0x28	; 40
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e8 e2       	ldi	r30, 0x28	; 40
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8f 7d       	andi	r24, 0xDF	; 223
     dba:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     dbc:	a8 e2       	ldi	r26, 0x28	; 40
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e8 e2       	ldi	r30, 0x28	; 40
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     dca:	a8 e2       	ldi	r26, 0x28	; 40
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e8 e2       	ldi	r30, 0x28	; 40
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	8c 93       	st	X, r24
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	aa e7       	ldi	r26, 0x7A	; 122
     dde:	b4 e4       	ldi	r27, 0x44	; 68
     de0:	8d 8b       	std	Y+21, r24	; 0x15
     de2:	9e 8b       	std	Y+22, r25	; 0x16
     de4:	af 8b       	std	Y+23, r26	; 0x17
     de6:	b8 8f       	std	Y+24, r27	; 0x18
=======
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9a ab       	std	Y+50, r25	; 0x32
     fee:	89 ab       	std	Y+49, r24	; 0x31
     ff0:	e3 c1       	rjmp	.+966    	; 0x13b8 <steppermotor1Write+0x7da>
        {
            switch (i)
     ff2:	89 a9       	ldd	r24, Y+49	; 0x31
     ff4:	9a a9       	ldd	r25, Y+50	; 0x32
     ff6:	9a af       	std	Y+58, r25	; 0x3a
     ff8:	89 af       	std	Y+57, r24	; 0x39
     ffa:	89 ad       	ldd	r24, Y+57	; 0x39
     ffc:	9a ad       	ldd	r25, Y+58	; 0x3a
     ffe:	84 30       	cpi	r24, 0x04	; 4
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <steppermotor1Write+0x428>
    1004:	a3 c0       	rjmp	.+326    	; 0x114c <steppermotor1Write+0x56e>
    1006:	89 ad       	ldd	r24, Y+57	; 0x39
    1008:	9a ad       	ldd	r25, Y+58	; 0x3a
    100a:	85 30       	cpi	r24, 0x05	; 5
    100c:	91 05       	cpc	r25, r1
    100e:	94 f4       	brge	.+36     	; 0x1034 <steppermotor1Write+0x456>
    1010:	89 ad       	ldd	r24, Y+57	; 0x39
    1012:	9a ad       	ldd	r25, Y+58	; 0x3a
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <steppermotor1Write+0x43e>
    101a:	5e c0       	rjmp	.+188    	; 0x10d8 <steppermotor1Write+0x4fa>
    101c:	89 ad       	ldd	r24, Y+57	; 0x39
    101e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	91 05       	cpc	r25, r1
    1024:	0c f0       	brlt	.+2      	; 0x1028 <steppermotor1Write+0x44a>
    1026:	75 c0       	rjmp	.+234    	; 0x1112 <steppermotor1Write+0x534>
    1028:	89 ad       	ldd	r24, Y+57	; 0x39
    102a:	9a ad       	ldd	r25, Y+58	; 0x3a
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	b1 f1       	breq	.+108    	; 0x109e <steppermotor1Write+0x4c0>
    1032:	ff c0       	rjmp	.+510    	; 0x1232 <steppermotor1Write+0x654>
    1034:	89 ad       	ldd	r24, Y+57	; 0x39
    1036:	9a ad       	ldd	r25, Y+58	; 0x3a
    1038:	86 30       	cpi	r24, 0x06	; 6
    103a:	91 05       	cpc	r25, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <steppermotor1Write+0x462>
    103e:	c0 c0       	rjmp	.+384    	; 0x11c0 <steppermotor1Write+0x5e2>
    1040:	89 ad       	ldd	r24, Y+57	; 0x39
    1042:	9a ad       	ldd	r25, Y+58	; 0x3a
    1044:	86 30       	cpi	r24, 0x06	; 6
    1046:	91 05       	cpc	r25, r1
    1048:	0c f4       	brge	.+2      	; 0x104c <steppermotor1Write+0x46e>
    104a:	9d c0       	rjmp	.+314    	; 0x1186 <steppermotor1Write+0x5a8>
    104c:	89 ad       	ldd	r24, Y+57	; 0x39
    104e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1050:	87 30       	cpi	r24, 0x07	; 7
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <steppermotor1Write+0x47a>
    1056:	d1 c0       	rjmp	.+418    	; 0x11fa <steppermotor1Write+0x61c>
    1058:	89 ad       	ldd	r24, Y+57	; 0x39
    105a:	9a ad       	ldd	r25, Y+58	; 0x3a
    105c:	88 30       	cpi	r24, 0x08	; 8
    105e:	91 05       	cpc	r25, r1
    1060:	09 f0       	breq	.+2      	; 0x1064 <steppermotor1Write+0x486>
    1062:	e7 c0       	rjmp	.+462    	; 0x1232 <steppermotor1Write+0x654>
            {
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
    1064:	a8 e2       	ldi	r26, 0x28	; 40
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e8 e2       	ldi	r30, 0x28	; 40
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1072:	a8 e2       	ldi	r26, 0x28	; 40
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e8 e2       	ldi	r30, 0x28	; 40
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1080:	a8 e2       	ldi	r26, 0x28	; 40
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 e2       	ldi	r30, 0x28	; 40
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	87 7f       	andi	r24, 0xF7	; 247
    108c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    108e:	a8 e2       	ldi	r26, 0x28	; 40
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e8 e2       	ldi	r30, 0x28	; 40
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8d 7f       	andi	r24, 0xFD	; 253
    109a:	8c 93       	st	X, r24
    109c:	ca c0       	rjmp	.+404    	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
    109e:	a8 e2       	ldi	r26, 0x28	; 40
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e8 e2       	ldi	r30, 0x28	; 40
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 68       	ori	r24, 0x80	; 128
    10aa:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    10ac:	a8 e2       	ldi	r26, 0x28	; 40
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e8 e2       	ldi	r30, 0x28	; 40
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 62       	ori	r24, 0x20	; 32
    10b8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    10ba:	a8 e2       	ldi	r26, 0x28	; 40
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e2       	ldi	r30, 0x28	; 40
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	87 7f       	andi	r24, 0xF7	; 247
    10c6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    10c8:	a8 e2       	ldi	r26, 0x28	; 40
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e8 e2       	ldi	r30, 0x28	; 40
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8d 7f       	andi	r24, 0xFD	; 253
    10d4:	8c 93       	st	X, r24
    10d6:	ad c0       	rjmp	.+346    	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 2 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    10d8:	a8 e2       	ldi	r26, 0x28	; 40
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e8 e2       	ldi	r30, 0x28	; 40
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 77       	andi	r24, 0x7F	; 127
    10e4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    10e6:	a8 e2       	ldi	r26, 0x28	; 40
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e8 e2       	ldi	r30, 0x28	; 40
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 62       	ori	r24, 0x20	; 32
    10f2:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    10f4:	a8 e2       	ldi	r26, 0x28	; 40
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e2       	ldi	r30, 0x28	; 40
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	87 7f       	andi	r24, 0xF7	; 247
    1100:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1102:	a8 e2       	ldi	r26, 0x28	; 40
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e2       	ldi	r30, 0x28	; 40
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8d 7f       	andi	r24, 0xFD	; 253
    110e:	8c 93       	st	X, r24
    1110:	90 c0       	rjmp	.+288    	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1112:	a8 e2       	ldi	r26, 0x28	; 40
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e8 e2       	ldi	r30, 0x28	; 40
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8f 77       	andi	r24, 0x7F	; 127
    111e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    1120:	a8 e2       	ldi	r26, 0x28	; 40
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e8 e2       	ldi	r30, 0x28	; 40
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 62       	ori	r24, 0x20	; 32
    112c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    112e:	a8 e2       	ldi	r26, 0x28	; 40
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e8 e2       	ldi	r30, 0x28	; 40
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	88 60       	ori	r24, 0x08	; 8
    113a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    113c:	a8 e2       	ldi	r26, 0x28	; 40
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e8 e2       	ldi	r30, 0x28	; 40
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8d 7f       	andi	r24, 0xFD	; 253
    1148:	8c 93       	st	X, r24
    114a:	73 c0       	rjmp	.+230    	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    114c:	a8 e2       	ldi	r26, 0x28	; 40
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e8 e2       	ldi	r30, 0x28	; 40
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8f 77       	andi	r24, 0x7F	; 127
    1158:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    115a:	a8 e2       	ldi	r26, 0x28	; 40
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e8 e2       	ldi	r30, 0x28	; 40
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8f 7d       	andi	r24, 0xDF	; 223
    1166:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    1168:	a8 e2       	ldi	r26, 0x28	; 40
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e8 e2       	ldi	r30, 0x28	; 40
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1176:	a8 e2       	ldi	r26, 0x28	; 40
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e8 e2       	ldi	r30, 0x28	; 40
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	8c 93       	st	X, r24
    1184:	56 c0       	rjmp	.+172    	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1186:	a8 e2       	ldi	r26, 0x28	; 40
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e2       	ldi	r30, 0x28	; 40
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1194:	a8 e2       	ldi	r26, 0x28	; 40
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e8 e2       	ldi	r30, 0x28	; 40
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    11a2:	a8 e2       	ldi	r26, 0x28	; 40
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e8 e2       	ldi	r30, 0x28	; 40
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    11b0:	a8 e2       	ldi	r26, 0x28	; 40
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e8 e2       	ldi	r30, 0x28	; 40
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	82 60       	ori	r24, 0x02	; 2
    11bc:	8c 93       	st	X, r24
    11be:	39 c0       	rjmp	.+114    	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    11c0:	a8 e2       	ldi	r26, 0x28	; 40
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e8 e2       	ldi	r30, 0x28	; 40
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    11ce:	a8 e2       	ldi	r26, 0x28	; 40
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e8 e2       	ldi	r30, 0x28	; 40
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7d       	andi	r24, 0xDF	; 223
    11da:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    11dc:	a8 e2       	ldi	r26, 0x28	; 40
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e8 e2       	ldi	r30, 0x28	; 40
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    11ea:	a8 e2       	ldi	r26, 0x28	; 40
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e8 e2       	ldi	r30, 0x28	; 40
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	82 60       	ori	r24, 0x02	; 2
    11f6:	8c 93       	st	X, r24
    11f8:	1c c0       	rjmp	.+56     	; 0x1232 <steppermotor1Write+0x654>
                break;
            case 7 :
                PORTStepper1 |= (1 << PStepper1_1);
    11fa:	a8 e2       	ldi	r26, 0x28	; 40
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e2       	ldi	r30, 0x28	; 40
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1208:	a8 e2       	ldi	r26, 0x28	; 40
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e2       	ldi	r30, 0x28	; 40
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8f 7d       	andi	r24, 0xDF	; 223
    1214:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1216:	a8 e2       	ldi	r26, 0x28	; 40
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 e2       	ldi	r30, 0x28	; 40
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	87 7f       	andi	r24, 0xF7	; 247
    1222:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    1224:	a8 e2       	ldi	r26, 0x28	; 40
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e2       	ldi	r30, 0x28	; 40
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	82 60       	ori	r24, 0x02	; 2
    1230:	8c 93       	st	X, r24
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	aa e7       	ldi	r26, 0x7A	; 122
    1238:	b4 e4       	ldi	r27, 0x44	; 68
    123a:	8d 8b       	std	Y+21, r24	; 0x15
    123c:	9e 8b       	std	Y+22, r25	; 0x16
    123e:	af 8b       	std	Y+23, r26	; 0x17
    1240:	b8 8f       	std	Y+24, r27	; 0x18
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
     de8:	6d 89       	ldd	r22, Y+21	; 0x15
     dea:	7e 89       	ldd	r23, Y+22	; 0x16
     dec:	8f 89       	ldd	r24, Y+23	; 0x17
     dee:	98 8d       	ldd	r25, Y+24	; 0x18
     df0:	2b ea       	ldi	r18, 0xAB	; 171
     df2:	3a ea       	ldi	r19, 0xAA	; 170
     df4:	4a ea       	ldi	r20, 0xAA	; 170
     df6:	50 e4       	ldi	r21, 0x40	; 64
     df8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	89 8b       	std	Y+17, r24	; 0x11
     e02:	9a 8b       	std	Y+18, r25	; 0x12
     e04:	ab 8b       	std	Y+19, r26	; 0x13
     e06:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e08:	69 89       	ldd	r22, Y+17	; 0x11
     e0a:	7a 89       	ldd	r23, Y+18	; 0x12
     e0c:	8b 89       	ldd	r24, Y+19	; 0x13
     e0e:	9c 89       	ldd	r25, Y+20	; 0x14
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	5f e3       	ldi	r21, 0x3F	; 63
     e18:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
     e1c:	88 23       	and	r24, r24
     e1e:	1c f4       	brge	.+6      	; 0xe26 <steppermotor1Write+0x6a2>
		__ticks = 1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	88 8b       	std	Y+16, r24	; 0x10
     e24:	91 c0       	rjmp	.+290    	; 0xf48 <steppermotor1Write+0x7c4>
	else if (__tmp > 255)
     e26:	69 89       	ldd	r22, Y+17	; 0x11
     e28:	7a 89       	ldd	r23, Y+18	; 0x12
     e2a:	8b 89       	ldd	r24, Y+19	; 0x13
     e2c:	9c 89       	ldd	r25, Y+20	; 0x14
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	4f e7       	ldi	r20, 0x7F	; 127
     e34:	53 e4       	ldi	r21, 0x43	; 67
     e36:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	0c f0       	brlt	.+2      	; 0xe40 <steppermotor1Write+0x6bc>
     e3e:	7b c0       	rjmp	.+246    	; 0xf36 <steppermotor1Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
     e40:	6d 89       	ldd	r22, Y+21	; 0x15
     e42:	7e 89       	ldd	r23, Y+22	; 0x16
     e44:	8f 89       	ldd	r24, Y+23	; 0x17
     e46:	98 8d       	ldd	r25, Y+24	; 0x18
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4a e7       	ldi	r20, 0x7A	; 122
     e4e:	54 e4       	ldi	r21, 0x44	; 68
     e50:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	8c 87       	std	Y+12, r24	; 0x0c
     e5a:	9d 87       	std	Y+13, r25	; 0x0d
     e5c:	ae 87       	std	Y+14, r26	; 0x0e
     e5e:	bf 87       	std	Y+15, r27	; 0x0f
=======
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	2b ea       	ldi	r18, 0xAB	; 171
    124c:	3a ea       	ldi	r19, 0xAA	; 170
    124e:	4a ea       	ldi	r20, 0xAA	; 170
    1250:	50 e4       	ldi	r21, 0x40	; 64
    1252:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	89 8b       	std	Y+17, r24	; 0x11
    125c:	9a 8b       	std	Y+18, r25	; 0x12
    125e:	ab 8b       	std	Y+19, r26	; 0x13
    1260:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1262:	69 89       	ldd	r22, Y+17	; 0x11
    1264:	7a 89       	ldd	r23, Y+18	; 0x12
    1266:	8b 89       	ldd	r24, Y+19	; 0x13
    1268:	9c 89       	ldd	r25, Y+20	; 0x14
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1276:	88 23       	and	r24, r24
    1278:	1c f4       	brge	.+6      	; 0x1280 <steppermotor1Write+0x6a2>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	88 8b       	std	Y+16, r24	; 0x10
    127e:	91 c0       	rjmp	.+290    	; 0x13a2 <steppermotor1Write+0x7c4>
	else if (__tmp > 255)
    1280:	69 89       	ldd	r22, Y+17	; 0x11
    1282:	7a 89       	ldd	r23, Y+18	; 0x12
    1284:	8b 89       	ldd	r24, Y+19	; 0x13
    1286:	9c 89       	ldd	r25, Y+20	; 0x14
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	53 e4       	ldi	r21, 0x43	; 67
    1290:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	0c f0       	brlt	.+2      	; 0x129a <steppermotor1Write+0x6bc>
    1298:	7b c0       	rjmp	.+246    	; 0x1390 <steppermotor1Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    129a:	6d 89       	ldd	r22, Y+21	; 0x15
    129c:	7e 89       	ldd	r23, Y+22	; 0x16
    129e:	8f 89       	ldd	r24, Y+23	; 0x17
    12a0:	98 8d       	ldd	r25, Y+24	; 0x18
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	4a e7       	ldi	r20, 0x7A	; 122
    12a8:	54 e4       	ldi	r21, 0x44	; 68
    12aa:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	8c 87       	std	Y+12, r24	; 0x0c
    12b4:	9d 87       	std	Y+13, r25	; 0x0d
    12b6:	ae 87       	std	Y+14, r26	; 0x0e
    12b8:	bf 87       	std	Y+15, r27	; 0x0f
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
     e60:	6c 85       	ldd	r22, Y+12	; 0x0c
     e62:	7d 85       	ldd	r23, Y+13	; 0x0d
     e64:	8e 85       	ldd	r24, Y+14	; 0x0e
     e66:	9f 85       	ldd	r25, Y+15	; 0x0f
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a e7       	ldi	r20, 0x7A	; 122
     e6e:	55 e4       	ldi	r21, 0x45	; 69
     e70:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	88 87       	std	Y+8, r24	; 0x08
     e7a:	99 87       	std	Y+9, r25	; 0x09
     e7c:	aa 87       	std	Y+10, r26	; 0x0a
     e7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e80:	68 85       	ldd	r22, Y+8	; 0x08
     e82:	79 85       	ldd	r23, Y+9	; 0x09
     e84:	8a 85       	ldd	r24, Y+10	; 0x0a
     e86:	9b 85       	ldd	r25, Y+11	; 0x0b
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <steppermotor1Write+0x71e>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9f 83       	std	Y+7, r25	; 0x07
     e9e:	8e 83       	std	Y+6, r24	; 0x06
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <steppermotor1Write+0x79c>
	else if (__tmp > 65535)
     ea2:	68 85       	ldd	r22, Y+8	; 0x08
     ea4:	79 85       	ldd	r23, Y+9	; 0x09
     ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	3f ef       	ldi	r19, 0xFF	; 255
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	57 e4       	ldi	r21, 0x47	; 71
     eb2:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	4c f5       	brge	.+82     	; 0xf0c <steppermotor1Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	6c 85       	ldd	r22, Y+12	; 0x0c
     ebc:	7d 85       	ldd	r23, Y+13	; 0x0d
     ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9f 83       	std	Y+7, r25	; 0x07
     ee0:	8e 83       	std	Y+6, r24	; 0x06
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <steppermotor1Write+0x77e>
     ee4:	80 e9       	ldi	r24, 0x90	; 144
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	9d 83       	std	Y+5, r25	; 0x05
     eea:	8c 83       	std	Y+4, r24	; 0x04
=======
    12ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    12bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    12be:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a e7       	ldi	r20, 0x7A	; 122
    12c8:	55 e4       	ldi	r21, 0x45	; 69
    12ca:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	88 87       	std	Y+8, r24	; 0x08
    12d4:	99 87       	std	Y+9, r25	; 0x09
    12d6:	aa 87       	std	Y+10, r26	; 0x0a
    12d8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12da:	68 85       	ldd	r22, Y+8	; 0x08
    12dc:	79 85       	ldd	r23, Y+9	; 0x09
    12de:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <steppermotor1Write+0x71e>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9f 83       	std	Y+7, r25	; 0x07
    12f8:	8e 83       	std	Y+6, r24	; 0x06
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <steppermotor1Write+0x79c>
	else if (__tmp > 65535)
    12fc:	68 85       	ldd	r22, Y+8	; 0x08
    12fe:	79 85       	ldd	r23, Y+9	; 0x09
    1300:	8a 85       	ldd	r24, Y+10	; 0x0a
    1302:	9b 85       	ldd	r25, Y+11	; 0x0b
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <steppermotor1Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	6c 85       	ldd	r22, Y+12	; 0x0c
    1316:	7d 85       	ldd	r23, Y+13	; 0x0d
    1318:	8e 85       	ldd	r24, Y+14	; 0x0e
    131a:	9f 85       	ldd	r25, Y+15	; 0x0f
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9f 83       	std	Y+7, r25	; 0x07
    133a:	8e 83       	std	Y+6, r24	; 0x06
    133c:	0f c0       	rjmp	.+30     	; 0x135c <steppermotor1Write+0x77e>
    133e:	80 e9       	ldi	r24, 0x90	; 144
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	9d 83       	std	Y+5, r25	; 0x05
    1344:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <steppermotor1Write+0x76c>
     ef4:	9d 83       	std	Y+5, r25	; 0x05
     ef6:	8c 83       	std	Y+4, r24	; 0x04
=======
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <steppermotor1Write+0x76c>
    134e:	9d 83       	std	Y+5, r25	; 0x05
    1350:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	9f 83       	std	Y+7, r25	; 0x07
     f00:	8e 83       	std	Y+6, r24	; 0x06
=======
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9f 83       	std	Y+7, r25	; 0x07
    135a:	8e 83       	std	Y+6, r24	; 0x06
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	69 f7       	brne	.-38     	; 0xee4 <steppermotor1Write+0x760>
     f0a:	24 c0       	rjmp	.+72     	; 0xf54 <steppermotor1Write+0x7d0>
=======
    135c:	8e 81       	ldd	r24, Y+6	; 0x06
    135e:	9f 81       	ldd	r25, Y+7	; 0x07
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <steppermotor1Write+0x760>
    1364:	24 c0       	rjmp	.+72     	; 0x13ae <steppermotor1Write+0x7d0>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
     f0c:	68 85       	ldd	r22, Y+8	; 0x08
     f0e:	79 85       	ldd	r23, Y+9	; 0x09
     f10:	8a 85       	ldd	r24, Y+10	; 0x0a
     f12:	9b 85       	ldd	r25, Y+11	; 0x0b
     f14:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9f 83       	std	Y+7, r25	; 0x07
     f1e:	8e 83       	std	Y+6, r24	; 0x06
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <steppermotor1Write+0x7a8>
     f30:	9b 83       	std	Y+3, r25	; 0x03
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	0f c0       	rjmp	.+30     	; 0xf54 <steppermotor1Write+0x7d0>
=======
    1366:	68 85       	ldd	r22, Y+8	; 0x08
    1368:	79 85       	ldd	r23, Y+9	; 0x09
    136a:	8a 85       	ldd	r24, Y+10	; 0x0a
    136c:	9b 85       	ldd	r25, Y+11	; 0x0b
    136e:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9f 83       	std	Y+7, r25	; 0x07
    1378:	8e 83       	std	Y+6, r24	; 0x06
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <steppermotor1Write+0x7a8>
    138a:	9b 83       	std	Y+3, r25	; 0x03
    138c:	8a 83       	std	Y+2, r24	; 0x02
    138e:	0f c0       	rjmp	.+30     	; 0x13ae <steppermotor1Write+0x7d0>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
     f36:	69 89       	ldd	r22, Y+17	; 0x11
     f38:	7a 89       	ldd	r23, Y+18	; 0x12
     f3a:	8b 89       	ldd	r24, Y+19	; 0x13
     f3c:	9c 89       	ldd	r25, Y+20	; 0x14
     f3e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	88 8b       	std	Y+16, r24	; 0x10
     f48:	88 89       	ldd	r24, Y+16	; 0x10
     f4a:	89 83       	std	Y+1, r24	; 0x01
=======
    1390:	69 89       	ldd	r22, Y+17	; 0x11
    1392:	7a 89       	ldd	r23, Y+18	; 0x12
    1394:	8b 89       	ldd	r24, Y+19	; 0x13
    1396:	9c 89       	ldd	r25, Y+20	; 0x14
    1398:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	88 8b       	std	Y+16, r24	; 0x10
    13a2:	88 89       	ldd	r24, Y+16	; 0x10
    13a4:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	8a 95       	dec	r24
     f50:	f1 f7       	brne	.-4      	; 0xf4e <steppermotor1Write+0x7ca>
     f52:	89 83       	std	Y+1, r24	; 0x01
=======
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	8a 95       	dec	r24
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <steppermotor1Write+0x7ca>
    13ac:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
     f54:	89 a9       	ldd	r24, Y+49	; 0x31
     f56:	9a a9       	ldd	r25, Y+50	; 0x32
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9a ab       	std	Y+50, r25	; 0x32
     f5c:	89 ab       	std	Y+49, r24	; 0x31
     f5e:	89 a9       	ldd	r24, Y+49	; 0x31
     f60:	9a a9       	ldd	r25, Y+50	; 0x32
     f62:	18 16       	cp	r1, r24
     f64:	19 06       	cpc	r1, r25
     f66:	0c f4       	brge	.+2      	; 0xf6a <steppermotor1Write+0x7e6>
     f68:	17 ce       	rjmp	.-978    	; 0xb98 <steppermotor1Write+0x414>
=======
    13ae:	89 a9       	ldd	r24, Y+49	; 0x31
    13b0:	9a a9       	ldd	r25, Y+50	; 0x32
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	9a ab       	std	Y+50, r25	; 0x32
    13b6:	89 ab       	std	Y+49, r24	; 0x31
    13b8:	89 a9       	ldd	r24, Y+49	; 0x31
    13ba:	9a a9       	ldd	r25, Y+50	; 0x32
    13bc:	18 16       	cp	r1, r24
    13be:	19 06       	cpc	r1, r25
    13c0:	0c f4       	brge	.+2      	; 0x13c4 <steppermotor1Write+0x7e6>
    13c2:	17 ce       	rjmp	.-978    	; 0xff2 <steppermotor1Write+0x414>
>>>>>>> Stashed changes
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
     f6a:	1e aa       	std	Y+54, r1	; 0x36
     f6c:	1d aa       	std	Y+53, r1	; 0x35
=======
    13c4:	1e aa       	std	Y+54, r1	; 0x36
    13c6:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
<<<<<<< Updated upstream
     f6e:	8d a9       	ldd	r24, Y+53	; 0x35
     f70:	9e a9       	ldd	r25, Y+54	; 0x36
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <steppermotor1Write+0x7f6>
     f78:	0a ce       	rjmp	.-1004   	; 0xb8e <steppermotor1Write+0x40a>
=======
    13c8:	8d a9       	ldd	r24, Y+53	; 0x35
    13ca:	9e a9       	ldd	r25, Y+54	; 0x36
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <steppermotor1Write+0x7f6>
    13d2:	0a ce       	rjmp	.-1004   	; 0xfe8 <steppermotor1Write+0x40a>
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
<<<<<<< Updated upstream
     f7a:	ea 96       	adiw	r28, 0x3a	; 58
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <steppermotor2Write>:

void steppermotor2Write(int a)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	ea 97       	sbiw	r28, 0x3a	; 58
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	9e ab       	std	Y+54, r25	; 0x36
     fa2:	8d ab       	std	Y+53, r24	; 0x35
     fa4:	f1 c1       	rjmp	.+994    	; 0x1388 <steppermotor2Write+0x3fc>
=======
    13d4:	ea 96       	adiw	r28, 0x3a	; 58
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <steppermotor2Write>:

void steppermotor2Write(int a)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	ea 97       	sbiw	r28, 0x3a	; 58
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	9e ab       	std	Y+54, r25	; 0x36
    13fc:	8d ab       	std	Y+53, r24	; 0x35
    13fe:	f1 c1       	rjmp	.+994    	; 0x17e2 <steppermotor2Write+0x3fc>
>>>>>>> Stashed changes
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9c ab       	std	Y+52, r25	; 0x34
     fac:	8b ab       	std	Y+51, r24	; 0x33
     fae:	e4 c1       	rjmp	.+968    	; 0x1378 <steppermotor2Write+0x3ec>
        {
            switch (i)
     fb0:	8b a9       	ldd	r24, Y+51	; 0x33
     fb2:	9c a9       	ldd	r25, Y+52	; 0x34
     fb4:	98 af       	std	Y+56, r25	; 0x38
     fb6:	8f ab       	std	Y+55, r24	; 0x37
     fb8:	8f a9       	ldd	r24, Y+55	; 0x37
     fba:	98 ad       	ldd	r25, Y+56	; 0x38
     fbc:	84 30       	cpi	r24, 0x04	; 4
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <steppermotor2Write+0x38>
     fc2:	87 c0       	rjmp	.+270    	; 0x10d2 <steppermotor2Write+0x146>
     fc4:	8f a9       	ldd	r24, Y+55	; 0x37
     fc6:	98 ad       	ldd	r25, Y+56	; 0x38
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	91 05       	cpc	r25, r1
     fcc:	94 f4       	brge	.+36     	; 0xff2 <steppermotor2Write+0x66>
     fce:	8f a9       	ldd	r24, Y+55	; 0x37
     fd0:	98 ad       	ldd	r25, Y+56	; 0x38
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <steppermotor2Write+0x4e>
     fd8:	42 c0       	rjmp	.+132    	; 0x105e <steppermotor2Write+0xd2>
     fda:	8f a9       	ldd	r24, Y+55	; 0x37
     fdc:	98 ad       	ldd	r25, Y+56	; 0x38
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	0c f0       	brlt	.+2      	; 0xfe6 <steppermotor2Write+0x5a>
     fe4:	59 c0       	rjmp	.+178    	; 0x1098 <steppermotor2Write+0x10c>
     fe6:	8f a9       	ldd	r24, Y+55	; 0x37
     fe8:	98 ad       	ldd	r25, Y+56	; 0x38
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	d1 f0       	breq	.+52     	; 0x1024 <steppermotor2Write+0x98>
     ff0:	00 c1       	rjmp	.+512    	; 0x11f2 <steppermotor2Write+0x266>
     ff2:	8f a9       	ldd	r24, Y+55	; 0x37
     ff4:	98 ad       	ldd	r25, Y+56	; 0x38
     ff6:	86 30       	cpi	r24, 0x06	; 6
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <steppermotor2Write+0x72>
     ffc:	a4 c0       	rjmp	.+328    	; 0x1146 <steppermotor2Write+0x1ba>
     ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    1000:	98 ad       	ldd	r25, Y+56	; 0x38
    1002:	86 30       	cpi	r24, 0x06	; 6
    1004:	91 05       	cpc	r25, r1
    1006:	0c f4       	brge	.+2      	; 0x100a <steppermotor2Write+0x7e>
    1008:	81 c0       	rjmp	.+258    	; 0x110c <steppermotor2Write+0x180>
    100a:	8f a9       	ldd	r24, Y+55	; 0x37
    100c:	98 ad       	ldd	r25, Y+56	; 0x38
    100e:	87 30       	cpi	r24, 0x07	; 7
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <steppermotor2Write+0x8a>
    1014:	b5 c0       	rjmp	.+362    	; 0x1180 <steppermotor2Write+0x1f4>
    1016:	8f a9       	ldd	r24, Y+55	; 0x37
    1018:	98 ad       	ldd	r25, Y+56	; 0x38
    101a:	88 30       	cpi	r24, 0x08	; 8
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <steppermotor2Write+0x96>
    1020:	cc c0       	rjmp	.+408    	; 0x11ba <steppermotor2Write+0x22e>
    1022:	e7 c0       	rjmp	.+462    	; 0x11f2 <steppermotor2Write+0x266>
            {
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    1024:	a8 e2       	ldi	r26, 0x28	; 40
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e2       	ldi	r30, 0x28	; 40
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 64       	ori	r24, 0x40	; 64
    1030:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1032:	a8 e2       	ldi	r26, 0x28	; 40
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e8 e2       	ldi	r30, 0x28	; 40
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7e       	andi	r24, 0xEF	; 239
    103e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1040:	a8 e2       	ldi	r26, 0x28	; 40
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e8 e2       	ldi	r30, 0x28	; 40
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8b 7f       	andi	r24, 0xFB	; 251
    104c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    104e:	a8 e2       	ldi	r26, 0x28	; 40
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e2       	ldi	r30, 0x28	; 40
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	8c 93       	st	X, r24
    105c:	ca c0       	rjmp	.+404    	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 2 :
                PORTStepper2 |= (1 << PStepper2_1);
    105e:	a8 e2       	ldi	r26, 0x28	; 40
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e2       	ldi	r30, 0x28	; 40
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 61       	ori	r24, 0x10	; 16
    1078:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8b 7f       	andi	r24, 0xFB	; 251
    1086:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1088:	a8 e2       	ldi	r26, 0x28	; 40
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e8 e2       	ldi	r30, 0x28	; 40
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8e 7f       	andi	r24, 0xFE	; 254
    1094:	8c 93       	st	X, r24
    1096:	ad c0       	rjmp	.+346    	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 7b       	andi	r24, 0xBF	; 191
    10a4:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    10b4:	a8 e2       	ldi	r26, 0x28	; 40
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e2       	ldi	r30, 0x28	; 40
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8b 7f       	andi	r24, 0xFB	; 251
    10c0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    10c2:	a8 e2       	ldi	r26, 0x28	; 40
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e2       	ldi	r30, 0x28	; 40
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8e 7f       	andi	r24, 0xFE	; 254
    10ce:	8c 93       	st	X, r24
    10d0:	90 c0       	rjmp	.+288    	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8f 7b       	andi	r24, 0xBF	; 191
    10de:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    10e0:	a8 e2       	ldi	r26, 0x28	; 40
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e8 e2       	ldi	r30, 0x28	; 40
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 61       	ori	r24, 0x10	; 16
    10ec:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8e 7f       	andi	r24, 0xFE	; 254
    1108:	8c 93       	st	X, r24
    110a:	73 c0       	rjmp	.+230    	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 7b       	andi	r24, 0xBF	; 191
    1118:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7e       	andi	r24, 0xEF	; 239
    1126:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1136:	a8 e2       	ldi	r26, 0x28	; 40
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e2       	ldi	r30, 0x28	; 40
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8e 7f       	andi	r24, 0xFE	; 254
    1142:	8c 93       	st	X, r24
    1144:	56 c0       	rjmp	.+172    	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1146:	a8 e2       	ldi	r26, 0x28	; 40
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e2       	ldi	r30, 0x28	; 40
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7b       	andi	r24, 0xBF	; 191
    1152:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1154:	a8 e2       	ldi	r26, 0x28	; 40
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e8 e2       	ldi	r30, 0x28	; 40
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8f 7e       	andi	r24, 0xEF	; 239
    1160:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1162:	a8 e2       	ldi	r26, 0x28	; 40
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e8 e2       	ldi	r30, 0x28	; 40
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1170:	a8 e2       	ldi	r26, 0x28	; 40
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e8 e2       	ldi	r30, 0x28	; 40
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	8c 93       	st	X, r24
    117e:	39 c0       	rjmp	.+114    	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 7 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1180:	a8 e2       	ldi	r26, 0x28	; 40
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e2       	ldi	r30, 0x28	; 40
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8f 7b       	andi	r24, 0xBF	; 191
    118c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    118e:	a8 e2       	ldi	r26, 0x28	; 40
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e8 e2       	ldi	r30, 0x28	; 40
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7e       	andi	r24, 0xEF	; 239
    119a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    119c:	a8 e2       	ldi	r26, 0x28	; 40
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e2       	ldi	r30, 0x28	; 40
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8b 7f       	andi	r24, 0xFB	; 251
    11a8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    11aa:	a8 e2       	ldi	r26, 0x28	; 40
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e2       	ldi	r30, 0x28	; 40
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	81 60       	ori	r24, 0x01	; 1
    11b6:	8c 93       	st	X, r24
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <steppermotor2Write+0x266>
                break;
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    11ba:	a8 e2       	ldi	r26, 0x28	; 40
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e2       	ldi	r30, 0x28	; 40
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    11c8:	a8 e2       	ldi	r26, 0x28	; 40
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e8 e2       	ldi	r30, 0x28	; 40
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7e       	andi	r24, 0xEF	; 239
    11d4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    11d6:	a8 e2       	ldi	r26, 0x28	; 40
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e2       	ldi	r30, 0x28	; 40
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8b 7f       	andi	r24, 0xFB	; 251
    11e2:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    11e4:	a8 e2       	ldi	r26, 0x28	; 40
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e8 e2       	ldi	r30, 0x28	; 40
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	8c 93       	st	X, r24
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	aa e7       	ldi	r26, 0x7A	; 122
    11f8:	b4 e4       	ldi	r27, 0x44	; 68
    11fa:	8d a7       	std	Y+45, r24	; 0x2d
    11fc:	9e a7       	std	Y+46, r25	; 0x2e
    11fe:	af a7       	std	Y+47, r26	; 0x2f
    1200:	b8 ab       	std	Y+48, r27	; 0x30
=======
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9c ab       	std	Y+52, r25	; 0x34
    1406:	8b ab       	std	Y+51, r24	; 0x33
    1408:	e4 c1       	rjmp	.+968    	; 0x17d2 <steppermotor2Write+0x3ec>
        {
            switch (i)
    140a:	8b a9       	ldd	r24, Y+51	; 0x33
    140c:	9c a9       	ldd	r25, Y+52	; 0x34
    140e:	98 af       	std	Y+56, r25	; 0x38
    1410:	8f ab       	std	Y+55, r24	; 0x37
    1412:	8f a9       	ldd	r24, Y+55	; 0x37
    1414:	98 ad       	ldd	r25, Y+56	; 0x38
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <steppermotor2Write+0x38>
    141c:	87 c0       	rjmp	.+270    	; 0x152c <steppermotor2Write+0x146>
    141e:	8f a9       	ldd	r24, Y+55	; 0x37
    1420:	98 ad       	ldd	r25, Y+56	; 0x38
    1422:	85 30       	cpi	r24, 0x05	; 5
    1424:	91 05       	cpc	r25, r1
    1426:	94 f4       	brge	.+36     	; 0x144c <steppermotor2Write+0x66>
    1428:	8f a9       	ldd	r24, Y+55	; 0x37
    142a:	98 ad       	ldd	r25, Y+56	; 0x38
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <steppermotor2Write+0x4e>
    1432:	42 c0       	rjmp	.+132    	; 0x14b8 <steppermotor2Write+0xd2>
    1434:	8f a9       	ldd	r24, Y+55	; 0x37
    1436:	98 ad       	ldd	r25, Y+56	; 0x38
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	91 05       	cpc	r25, r1
    143c:	0c f0       	brlt	.+2      	; 0x1440 <steppermotor2Write+0x5a>
    143e:	59 c0       	rjmp	.+178    	; 0x14f2 <steppermotor2Write+0x10c>
    1440:	8f a9       	ldd	r24, Y+55	; 0x37
    1442:	98 ad       	ldd	r25, Y+56	; 0x38
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	91 05       	cpc	r25, r1
    1448:	d1 f0       	breq	.+52     	; 0x147e <steppermotor2Write+0x98>
    144a:	00 c1       	rjmp	.+512    	; 0x164c <steppermotor2Write+0x266>
    144c:	8f a9       	ldd	r24, Y+55	; 0x37
    144e:	98 ad       	ldd	r25, Y+56	; 0x38
    1450:	86 30       	cpi	r24, 0x06	; 6
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <steppermotor2Write+0x72>
    1456:	a4 c0       	rjmp	.+328    	; 0x15a0 <steppermotor2Write+0x1ba>
    1458:	8f a9       	ldd	r24, Y+55	; 0x37
    145a:	98 ad       	ldd	r25, Y+56	; 0x38
    145c:	86 30       	cpi	r24, 0x06	; 6
    145e:	91 05       	cpc	r25, r1
    1460:	0c f4       	brge	.+2      	; 0x1464 <steppermotor2Write+0x7e>
    1462:	81 c0       	rjmp	.+258    	; 0x1566 <steppermotor2Write+0x180>
    1464:	8f a9       	ldd	r24, Y+55	; 0x37
    1466:	98 ad       	ldd	r25, Y+56	; 0x38
    1468:	87 30       	cpi	r24, 0x07	; 7
    146a:	91 05       	cpc	r25, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <steppermotor2Write+0x8a>
    146e:	b5 c0       	rjmp	.+362    	; 0x15da <steppermotor2Write+0x1f4>
    1470:	8f a9       	ldd	r24, Y+55	; 0x37
    1472:	98 ad       	ldd	r25, Y+56	; 0x38
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <steppermotor2Write+0x96>
    147a:	cc c0       	rjmp	.+408    	; 0x1614 <steppermotor2Write+0x22e>
    147c:	e7 c0       	rjmp	.+462    	; 0x164c <steppermotor2Write+0x266>
            {
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    147e:	a8 e2       	ldi	r26, 0x28	; 40
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e8 e2       	ldi	r30, 0x28	; 40
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    148c:	a8 e2       	ldi	r26, 0x28	; 40
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e8 e2       	ldi	r30, 0x28	; 40
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8f 7e       	andi	r24, 0xEF	; 239
    1498:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    149a:	a8 e2       	ldi	r26, 0x28	; 40
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e8 e2       	ldi	r30, 0x28	; 40
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8b 7f       	andi	r24, 0xFB	; 251
    14a6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14a8:	a8 e2       	ldi	r26, 0x28	; 40
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e8 e2       	ldi	r30, 0x28	; 40
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	8c 93       	st	X, r24
    14b6:	ca c0       	rjmp	.+404    	; 0x164c <steppermotor2Write+0x266>
                break;
            case 2 :
                PORTStepper2 |= (1 << PStepper2_1);
    14b8:	a8 e2       	ldi	r26, 0x28	; 40
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 e2       	ldi	r30, 0x28	; 40
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 64       	ori	r24, 0x40	; 64
    14c4:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14c6:	a8 e2       	ldi	r26, 0x28	; 40
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e8 e2       	ldi	r30, 0x28	; 40
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 61       	ori	r24, 0x10	; 16
    14d2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    14d4:	a8 e2       	ldi	r26, 0x28	; 40
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e8 e2       	ldi	r30, 0x28	; 40
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14e2:	a8 e2       	ldi	r26, 0x28	; 40
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e2       	ldi	r30, 0x28	; 40
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8e 7f       	andi	r24, 0xFE	; 254
    14ee:	8c 93       	st	X, r24
    14f0:	ad c0       	rjmp	.+346    	; 0x164c <steppermotor2Write+0x266>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    14f2:	a8 e2       	ldi	r26, 0x28	; 40
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e2       	ldi	r30, 0x28	; 40
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 7b       	andi	r24, 0xBF	; 191
    14fe:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1500:	a8 e2       	ldi	r26, 0x28	; 40
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e8 e2       	ldi	r30, 0x28	; 40
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	80 61       	ori	r24, 0x10	; 16
    150c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    150e:	a8 e2       	ldi	r26, 0x28	; 40
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e8 e2       	ldi	r30, 0x28	; 40
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8b 7f       	andi	r24, 0xFB	; 251
    151a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    151c:	a8 e2       	ldi	r26, 0x28	; 40
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e2       	ldi	r30, 0x28	; 40
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8e 7f       	andi	r24, 0xFE	; 254
    1528:	8c 93       	st	X, r24
    152a:	90 c0       	rjmp	.+288    	; 0x164c <steppermotor2Write+0x266>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    152c:	a8 e2       	ldi	r26, 0x28	; 40
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e8 e2       	ldi	r30, 0x28	; 40
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8f 7b       	andi	r24, 0xBF	; 191
    1538:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    153a:	a8 e2       	ldi	r26, 0x28	; 40
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e8 e2       	ldi	r30, 0x28	; 40
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	80 61       	ori	r24, 0x10	; 16
    1546:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1548:	a8 e2       	ldi	r26, 0x28	; 40
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e2       	ldi	r30, 0x28	; 40
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	84 60       	ori	r24, 0x04	; 4
    1554:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1556:	a8 e2       	ldi	r26, 0x28	; 40
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e8 e2       	ldi	r30, 0x28	; 40
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8e 7f       	andi	r24, 0xFE	; 254
    1562:	8c 93       	st	X, r24
    1564:	73 c0       	rjmp	.+230    	; 0x164c <steppermotor2Write+0x266>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1566:	a8 e2       	ldi	r26, 0x28	; 40
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e2       	ldi	r30, 0x28	; 40
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8f 7b       	andi	r24, 0xBF	; 191
    1572:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1574:	a8 e2       	ldi	r26, 0x28	; 40
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e8 e2       	ldi	r30, 0x28	; 40
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8f 7e       	andi	r24, 0xEF	; 239
    1580:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1582:	a8 e2       	ldi	r26, 0x28	; 40
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e2       	ldi	r30, 0x28	; 40
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1590:	a8 e2       	ldi	r26, 0x28	; 40
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e8 e2       	ldi	r30, 0x28	; 40
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	8c 93       	st	X, r24
    159e:	56 c0       	rjmp	.+172    	; 0x164c <steppermotor2Write+0x266>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    15a0:	a8 e2       	ldi	r26, 0x28	; 40
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e8 e2       	ldi	r30, 0x28	; 40
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 7b       	andi	r24, 0xBF	; 191
    15ac:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15ae:	a8 e2       	ldi	r26, 0x28	; 40
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e2       	ldi	r30, 0x28	; 40
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 7e       	andi	r24, 0xEF	; 239
    15ba:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    15bc:	a8 e2       	ldi	r26, 0x28	; 40
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e8 e2       	ldi	r30, 0x28	; 40
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	84 60       	ori	r24, 0x04	; 4
    15c8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15ca:	a8 e2       	ldi	r26, 0x28	; 40
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e8 e2       	ldi	r30, 0x28	; 40
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	81 60       	ori	r24, 0x01	; 1
    15d6:	8c 93       	st	X, r24
    15d8:	39 c0       	rjmp	.+114    	; 0x164c <steppermotor2Write+0x266>
                break;
            case 7 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    15da:	a8 e2       	ldi	r26, 0x28	; 40
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e2       	ldi	r30, 0x28	; 40
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8f 7b       	andi	r24, 0xBF	; 191
    15e6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15e8:	a8 e2       	ldi	r26, 0x28	; 40
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e8 e2       	ldi	r30, 0x28	; 40
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7e       	andi	r24, 0xEF	; 239
    15f4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    15f6:	a8 e2       	ldi	r26, 0x28	; 40
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e8 e2       	ldi	r30, 0x28	; 40
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8b 7f       	andi	r24, 0xFB	; 251
    1602:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1604:	a8 e2       	ldi	r26, 0x28	; 40
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e2       	ldi	r30, 0x28	; 40
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	8c 93       	st	X, r24
    1612:	1c c0       	rjmp	.+56     	; 0x164c <steppermotor2Write+0x266>
                break;
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1614:	a8 e2       	ldi	r26, 0x28	; 40
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e2       	ldi	r30, 0x28	; 40
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 64       	ori	r24, 0x40	; 64
    1620:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1622:	a8 e2       	ldi	r26, 0x28	; 40
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e2       	ldi	r30, 0x28	; 40
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7e       	andi	r24, 0xEF	; 239
    162e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1630:	a8 e2       	ldi	r26, 0x28	; 40
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e8 e2       	ldi	r30, 0x28	; 40
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8b 7f       	andi	r24, 0xFB	; 251
    163c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    163e:	a8 e2       	ldi	r26, 0x28	; 40
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e8 e2       	ldi	r30, 0x28	; 40
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	81 60       	ori	r24, 0x01	; 1
    164a:	8c 93       	st	X, r24
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	aa e7       	ldi	r26, 0x7A	; 122
    1652:	b4 e4       	ldi	r27, 0x44	; 68
    1654:	8d a7       	std	Y+45, r24	; 0x2d
    1656:	9e a7       	std	Y+46, r25	; 0x2e
    1658:	af a7       	std	Y+47, r26	; 0x2f
    165a:	b8 ab       	std	Y+48, r27	; 0x30
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    1202:	6d a5       	ldd	r22, Y+45	; 0x2d
    1204:	7e a5       	ldd	r23, Y+46	; 0x2e
    1206:	8f a5       	ldd	r24, Y+47	; 0x2f
    1208:	98 a9       	ldd	r25, Y+48	; 0x30
    120a:	2b ea       	ldi	r18, 0xAB	; 171
    120c:	3a ea       	ldi	r19, 0xAA	; 170
    120e:	4a ea       	ldi	r20, 0xAA	; 170
    1210:	50 e4       	ldi	r21, 0x40	; 64
    1212:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	89 a7       	std	Y+41, r24	; 0x29
    121c:	9a a7       	std	Y+42, r25	; 0x2a
    121e:	ab a7       	std	Y+43, r26	; 0x2b
    1220:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1222:	69 a5       	ldd	r22, Y+41	; 0x29
    1224:	7a a5       	ldd	r23, Y+42	; 0x2a
    1226:	8b a5       	ldd	r24, Y+43	; 0x2b
    1228:	9c a5       	ldd	r25, Y+44	; 0x2c
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5f e3       	ldi	r21, 0x3F	; 63
    1232:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    1236:	88 23       	and	r24, r24
    1238:	1c f4       	brge	.+6      	; 0x1240 <steppermotor2Write+0x2b4>
		__ticks = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	88 a7       	std	Y+40, r24	; 0x28
    123e:	91 c0       	rjmp	.+290    	; 0x1362 <steppermotor2Write+0x3d6>
	else if (__tmp > 255)
    1240:	69 a5       	ldd	r22, Y+41	; 0x29
    1242:	7a a5       	ldd	r23, Y+42	; 0x2a
    1244:	8b a5       	ldd	r24, Y+43	; 0x2b
    1246:	9c a5       	ldd	r25, Y+44	; 0x2c
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4f e7       	ldi	r20, 0x7F	; 127
    124e:	53 e4       	ldi	r21, 0x43	; 67
    1250:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    1254:	18 16       	cp	r1, r24
    1256:	0c f0       	brlt	.+2      	; 0x125a <steppermotor2Write+0x2ce>
    1258:	7b c0       	rjmp	.+246    	; 0x1350 <steppermotor2Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    125a:	6d a5       	ldd	r22, Y+45	; 0x2d
    125c:	7e a5       	ldd	r23, Y+46	; 0x2e
    125e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1260:	98 a9       	ldd	r25, Y+48	; 0x30
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a e7       	ldi	r20, 0x7A	; 122
    1268:	54 e4       	ldi	r21, 0x44	; 68
    126a:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8c a3       	std	Y+36, r24	; 0x24
    1274:	9d a3       	std	Y+37, r25	; 0x25
    1276:	ae a3       	std	Y+38, r26	; 0x26
    1278:	bf a3       	std	Y+39, r27	; 0x27
=======
    165c:	6d a5       	ldd	r22, Y+45	; 0x2d
    165e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1660:	8f a5       	ldd	r24, Y+47	; 0x2f
    1662:	98 a9       	ldd	r25, Y+48	; 0x30
    1664:	2b ea       	ldi	r18, 0xAB	; 171
    1666:	3a ea       	ldi	r19, 0xAA	; 170
    1668:	4a ea       	ldi	r20, 0xAA	; 170
    166a:	50 e4       	ldi	r21, 0x40	; 64
    166c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	89 a7       	std	Y+41, r24	; 0x29
    1676:	9a a7       	std	Y+42, r25	; 0x2a
    1678:	ab a7       	std	Y+43, r26	; 0x2b
    167a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    167c:	69 a5       	ldd	r22, Y+41	; 0x29
    167e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1680:	8b a5       	ldd	r24, Y+43	; 0x2b
    1682:	9c a5       	ldd	r25, Y+44	; 0x2c
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1690:	88 23       	and	r24, r24
    1692:	1c f4       	brge	.+6      	; 0x169a <steppermotor2Write+0x2b4>
		__ticks = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	88 a7       	std	Y+40, r24	; 0x28
    1698:	91 c0       	rjmp	.+290    	; 0x17bc <steppermotor2Write+0x3d6>
	else if (__tmp > 255)
    169a:	69 a5       	ldd	r22, Y+41	; 0x29
    169c:	7a a5       	ldd	r23, Y+42	; 0x2a
    169e:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4f e7       	ldi	r20, 0x7F	; 127
    16a8:	53 e4       	ldi	r21, 0x43	; 67
    16aa:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	0c f0       	brlt	.+2      	; 0x16b4 <steppermotor2Write+0x2ce>
    16b2:	7b c0       	rjmp	.+246    	; 0x17aa <steppermotor2Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    16b4:	6d a5       	ldd	r22, Y+45	; 0x2d
    16b6:	7e a5       	ldd	r23, Y+46	; 0x2e
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	98 a9       	ldd	r25, Y+48	; 0x30
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	54 e4       	ldi	r21, 0x44	; 68
    16c4:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8c a3       	std	Y+36, r24	; 0x24
    16ce:	9d a3       	std	Y+37, r25	; 0x25
    16d0:	ae a3       	std	Y+38, r26	; 0x26
    16d2:	bf a3       	std	Y+39, r27	; 0x27
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    127a:	6c a1       	ldd	r22, Y+36	; 0x24
    127c:	7d a1       	ldd	r23, Y+37	; 0x25
    127e:	8e a1       	ldd	r24, Y+38	; 0x26
    1280:	9f a1       	ldd	r25, Y+39	; 0x27
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a e7       	ldi	r20, 0x7A	; 122
    1288:	55 e4       	ldi	r21, 0x45	; 69
    128a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	88 a3       	std	Y+32, r24	; 0x20
    1294:	99 a3       	std	Y+33, r25	; 0x21
    1296:	aa a3       	std	Y+34, r26	; 0x22
    1298:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    129a:	68 a1       	ldd	r22, Y+32	; 0x20
    129c:	79 a1       	ldd	r23, Y+33	; 0x21
    129e:	8a a1       	ldd	r24, Y+34	; 0x22
    12a0:	9b a1       	ldd	r25, Y+35	; 0x23
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <steppermotor2Write+0x330>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9f 8f       	std	Y+31, r25	; 0x1f
    12b8:	8e 8f       	std	Y+30, r24	; 0x1e
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <steppermotor2Write+0x3ae>
	else if (__tmp > 65535)
    12bc:	68 a1       	ldd	r22, Y+32	; 0x20
    12be:	79 a1       	ldd	r23, Y+33	; 0x21
    12c0:	8a a1       	ldd	r24, Y+34	; 0x22
    12c2:	9b a1       	ldd	r25, Y+35	; 0x23
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <steppermotor2Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6c a1       	ldd	r22, Y+36	; 0x24
    12d6:	7d a1       	ldd	r23, Y+37	; 0x25
    12d8:	8e a1       	ldd	r24, Y+38	; 0x26
    12da:	9f a1       	ldd	r25, Y+39	; 0x27
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9f 8f       	std	Y+31, r25	; 0x1f
    12fa:	8e 8f       	std	Y+30, r24	; 0x1e
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <steppermotor2Write+0x390>
    12fe:	80 e9       	ldi	r24, 0x90	; 144
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	9d 8f       	std	Y+29, r25	; 0x1d
    1304:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    16d4:	6c a1       	ldd	r22, Y+36	; 0x24
    16d6:	7d a1       	ldd	r23, Y+37	; 0x25
    16d8:	8e a1       	ldd	r24, Y+38	; 0x26
    16da:	9f a1       	ldd	r25, Y+39	; 0x27
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4a e7       	ldi	r20, 0x7A	; 122
    16e2:	55 e4       	ldi	r21, 0x45	; 69
    16e4:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	88 a3       	std	Y+32, r24	; 0x20
    16ee:	99 a3       	std	Y+33, r25	; 0x21
    16f0:	aa a3       	std	Y+34, r26	; 0x22
    16f2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    16f4:	68 a1       	ldd	r22, Y+32	; 0x20
    16f6:	79 a1       	ldd	r23, Y+33	; 0x21
    16f8:	8a a1       	ldd	r24, Y+34	; 0x22
    16fa:	9b a1       	ldd	r25, Y+35	; 0x23
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	2c f4       	brge	.+10     	; 0x1716 <steppermotor2Write+0x330>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9f 8f       	std	Y+31, r25	; 0x1f
    1712:	8e 8f       	std	Y+30, r24	; 0x1e
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <steppermotor2Write+0x3ae>
	else if (__tmp > 65535)
    1716:	68 a1       	ldd	r22, Y+32	; 0x20
    1718:	79 a1       	ldd	r23, Y+33	; 0x21
    171a:	8a a1       	ldd	r24, Y+34	; 0x22
    171c:	9b a1       	ldd	r25, Y+35	; 0x23
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	57 e4       	ldi	r21, 0x47	; 71
    1726:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    172a:	18 16       	cp	r1, r24
    172c:	4c f5       	brge	.+82     	; 0x1780 <steppermotor2Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172e:	6c a1       	ldd	r22, Y+36	; 0x24
    1730:	7d a1       	ldd	r23, Y+37	; 0x25
    1732:	8e a1       	ldd	r24, Y+38	; 0x26
    1734:	9f a1       	ldd	r25, Y+39	; 0x27
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9f 8f       	std	Y+31, r25	; 0x1f
    1754:	8e 8f       	std	Y+30, r24	; 0x1e
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <steppermotor2Write+0x390>
    1758:	80 e9       	ldi	r24, 0x90	; 144
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	9d 8f       	std	Y+29, r25	; 0x1d
    175e:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1306:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1308:	9d 8d       	ldd	r25, Y+29	; 0x1d
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <steppermotor2Write+0x37e>
    130e:	9d 8f       	std	Y+29, r25	; 0x1d
    1310:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    1760:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1762:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <steppermotor2Write+0x37e>
    1768:	9d 8f       	std	Y+29, r25	; 0x1d
    176a:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    1312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1314:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9f 8f       	std	Y+31, r25	; 0x1f
    131a:	8e 8f       	std	Y+30, r24	; 0x1e
=======
    176c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    176e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9f 8f       	std	Y+31, r25	; 0x1f
    1774:	8e 8f       	std	Y+30, r24	; 0x1e
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    131c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <steppermotor2Write+0x372>
    1324:	24 c0       	rjmp	.+72     	; 0x136e <steppermotor2Write+0x3e2>
=======
    1776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1778:	9f 8d       	ldd	r25, Y+31	; 0x1f
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	69 f7       	brne	.-38     	; 0x1758 <steppermotor2Write+0x372>
    177e:	24 c0       	rjmp	.+72     	; 0x17c8 <steppermotor2Write+0x3e2>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    1326:	68 a1       	ldd	r22, Y+32	; 0x20
    1328:	79 a1       	ldd	r23, Y+33	; 0x21
    132a:	8a a1       	ldd	r24, Y+34	; 0x22
    132c:	9b a1       	ldd	r25, Y+35	; 0x23
    132e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9f 8f       	std	Y+31, r25	; 0x1f
    1338:	8e 8f       	std	Y+30, r24	; 0x1e
    133a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    133c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    133e:	9b 8f       	std	Y+27, r25	; 0x1b
    1340:	8a 8f       	std	Y+26, r24	; 0x1a
    1342:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1344:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <steppermotor2Write+0x3ba>
    134a:	9b 8f       	std	Y+27, r25	; 0x1b
    134c:	8a 8f       	std	Y+26, r24	; 0x1a
    134e:	0f c0       	rjmp	.+30     	; 0x136e <steppermotor2Write+0x3e2>
=======
    1780:	68 a1       	ldd	r22, Y+32	; 0x20
    1782:	79 a1       	ldd	r23, Y+33	; 0x21
    1784:	8a a1       	ldd	r24, Y+34	; 0x22
    1786:	9b a1       	ldd	r25, Y+35	; 0x23
    1788:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9f 8f       	std	Y+31, r25	; 0x1f
    1792:	8e 8f       	std	Y+30, r24	; 0x1e
    1794:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1796:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1798:	9b 8f       	std	Y+27, r25	; 0x1b
    179a:	8a 8f       	std	Y+26, r24	; 0x1a
    179c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    179e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <steppermotor2Write+0x3ba>
    17a4:	9b 8f       	std	Y+27, r25	; 0x1b
    17a6:	8a 8f       	std	Y+26, r24	; 0x1a
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <steppermotor2Write+0x3e2>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    1350:	69 a5       	ldd	r22, Y+41	; 0x29
    1352:	7a a5       	ldd	r23, Y+42	; 0x2a
    1354:	8b a5       	ldd	r24, Y+43	; 0x2b
    1356:	9c a5       	ldd	r25, Y+44	; 0x2c
    1358:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	88 a7       	std	Y+40, r24	; 0x28
    1362:	88 a5       	ldd	r24, Y+40	; 0x28
    1364:	89 8f       	std	Y+25, r24	; 0x19
=======
    17aa:	69 a5       	ldd	r22, Y+41	; 0x29
    17ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    17ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b2:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	88 a7       	std	Y+40, r24	; 0x28
    17bc:	88 a5       	ldd	r24, Y+40	; 0x28
    17be:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1366:	89 8d       	ldd	r24, Y+25	; 0x19
    1368:	8a 95       	dec	r24
    136a:	f1 f7       	brne	.-4      	; 0x1368 <steppermotor2Write+0x3dc>
    136c:	89 8f       	std	Y+25, r24	; 0x19
=======
    17c0:	89 8d       	ldd	r24, Y+25	; 0x19
    17c2:	8a 95       	dec	r24
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <steppermotor2Write+0x3dc>
    17c6:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
void steppermotor2Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
    136e:	8b a9       	ldd	r24, Y+51	; 0x33
    1370:	9c a9       	ldd	r25, Y+52	; 0x34
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	9c ab       	std	Y+52, r25	; 0x34
    1376:	8b ab       	std	Y+51, r24	; 0x33
    1378:	8b a9       	ldd	r24, Y+51	; 0x33
    137a:	9c a9       	ldd	r25, Y+52	; 0x34
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	91 05       	cpc	r25, r1
    1380:	0c f4       	brge	.+2      	; 0x1384 <steppermotor2Write+0x3f8>
    1382:	16 ce       	rjmp	.-980    	; 0xfb0 <steppermotor2Write+0x24>
=======
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	9c ab       	std	Y+52, r25	; 0x34
    17d0:	8b ab       	std	Y+51, r24	; 0x33
    17d2:	8b a9       	ldd	r24, Y+51	; 0x33
    17d4:	9c a9       	ldd	r25, Y+52	; 0x34
    17d6:	88 30       	cpi	r24, 0x08	; 8
    17d8:	91 05       	cpc	r25, r1
    17da:	0c f4       	brge	.+2      	; 0x17de <steppermotor2Write+0x3f8>
    17dc:	16 ce       	rjmp	.-980    	; 0x140a <steppermotor2Write+0x24>
>>>>>>> Stashed changes
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
    1384:	1e aa       	std	Y+54, r1	; 0x36
    1386:	1d aa       	std	Y+53, r1	; 0x35
=======
    17de:	1e aa       	std	Y+54, r1	; 0x36
    17e0:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
    }
}

void steppermotor2Write(int a)
{
    while(a  == 1)
<<<<<<< Updated upstream
    1388:	8d a9       	ldd	r24, Y+53	; 0x35
    138a:	9e a9       	ldd	r25, Y+54	; 0x36
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <steppermotor2Write+0x408>
    1392:	09 ce       	rjmp	.-1006   	; 0xfa6 <steppermotor2Write+0x1a>
    1394:	f0 c1       	rjmp	.+992    	; 0x1776 <steppermotor2Write+0x7ea>
=======
    17e2:	8d a9       	ldd	r24, Y+53	; 0x35
    17e4:	9e a9       	ldd	r25, Y+54	; 0x36
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <steppermotor2Write+0x408>
    17ec:	09 ce       	rjmp	.-1006   	; 0x1400 <steppermotor2Write+0x1a>
    17ee:	f0 c1       	rjmp	.+992    	; 0x1bd0 <steppermotor2Write+0x7ea>
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
    1396:	88 e0       	ldi	r24, 0x08	; 8
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9a ab       	std	Y+50, r25	; 0x32
    139c:	89 ab       	std	Y+49, r24	; 0x31
    139e:	e3 c1       	rjmp	.+966    	; 0x1766 <steppermotor2Write+0x7da>
        {
            switch (i)
    13a0:	89 a9       	ldd	r24, Y+49	; 0x31
    13a2:	9a a9       	ldd	r25, Y+50	; 0x32
    13a4:	9a af       	std	Y+58, r25	; 0x3a
    13a6:	89 af       	std	Y+57, r24	; 0x39
    13a8:	89 ad       	ldd	r24, Y+57	; 0x39
    13aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	91 05       	cpc	r25, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <steppermotor2Write+0x428>
    13b2:	a3 c0       	rjmp	.+326    	; 0x14fa <steppermotor2Write+0x56e>
    13b4:	89 ad       	ldd	r24, Y+57	; 0x39
    13b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    13b8:	85 30       	cpi	r24, 0x05	; 5
    13ba:	91 05       	cpc	r25, r1
    13bc:	94 f4       	brge	.+36     	; 0x13e2 <steppermotor2Write+0x456>
    13be:	89 ad       	ldd	r24, Y+57	; 0x39
    13c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13c2:	82 30       	cpi	r24, 0x02	; 2
    13c4:	91 05       	cpc	r25, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <steppermotor2Write+0x43e>
    13c8:	5e c0       	rjmp	.+188    	; 0x1486 <steppermotor2Write+0x4fa>
    13ca:	89 ad       	ldd	r24, Y+57	; 0x39
    13cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	0c f0       	brlt	.+2      	; 0x13d6 <steppermotor2Write+0x44a>
    13d4:	75 c0       	rjmp	.+234    	; 0x14c0 <steppermotor2Write+0x534>
    13d6:	89 ad       	ldd	r24, Y+57	; 0x39
    13d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	b1 f1       	breq	.+108    	; 0x144c <steppermotor2Write+0x4c0>
    13e0:	ff c0       	rjmp	.+510    	; 0x15e0 <steppermotor2Write+0x654>
    13e2:	89 ad       	ldd	r24, Y+57	; 0x39
    13e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    13e6:	86 30       	cpi	r24, 0x06	; 6
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <steppermotor2Write+0x462>
    13ec:	c0 c0       	rjmp	.+384    	; 0x156e <steppermotor2Write+0x5e2>
    13ee:	89 ad       	ldd	r24, Y+57	; 0x39
    13f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13f2:	86 30       	cpi	r24, 0x06	; 6
    13f4:	91 05       	cpc	r25, r1
    13f6:	0c f4       	brge	.+2      	; 0x13fa <steppermotor2Write+0x46e>
    13f8:	9d c0       	rjmp	.+314    	; 0x1534 <steppermotor2Write+0x5a8>
    13fa:	89 ad       	ldd	r24, Y+57	; 0x39
    13fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    13fe:	87 30       	cpi	r24, 0x07	; 7
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <steppermotor2Write+0x47a>
    1404:	d1 c0       	rjmp	.+418    	; 0x15a8 <steppermotor2Write+0x61c>
    1406:	89 ad       	ldd	r24, Y+57	; 0x39
    1408:	9a ad       	ldd	r25, Y+58	; 0x3a
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	91 05       	cpc	r25, r1
    140e:	09 f0       	breq	.+2      	; 0x1412 <steppermotor2Write+0x486>
    1410:	e7 c0       	rjmp	.+462    	; 0x15e0 <steppermotor2Write+0x654>
            {
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1412:	a8 e2       	ldi	r26, 0x28	; 40
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e8 e2       	ldi	r30, 0x28	; 40
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 64       	ori	r24, 0x40	; 64
    141e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1420:	a8 e2       	ldi	r26, 0x28	; 40
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e8 e2       	ldi	r30, 0x28	; 40
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8f 7e       	andi	r24, 0xEF	; 239
    142c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    142e:	a8 e2       	ldi	r26, 0x28	; 40
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e8 e2       	ldi	r30, 0x28	; 40
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    143c:	a8 e2       	ldi	r26, 0x28	; 40
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e8 e2       	ldi	r30, 0x28	; 40
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	8c 93       	st	X, r24
    144a:	ca c0       	rjmp	.+404    	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    144c:	a8 e2       	ldi	r26, 0x28	; 40
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e8 e2       	ldi	r30, 0x28	; 40
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 64       	ori	r24, 0x40	; 64
    1458:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    145a:	a8 e2       	ldi	r26, 0x28	; 40
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e8 e2       	ldi	r30, 0x28	; 40
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 61       	ori	r24, 0x10	; 16
    1466:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1468:	a8 e2       	ldi	r26, 0x28	; 40
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e2       	ldi	r30, 0x28	; 40
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8b 7f       	andi	r24, 0xFB	; 251
    1474:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1476:	a8 e2       	ldi	r26, 0x28	; 40
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e2       	ldi	r30, 0x28	; 40
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	8e 7f       	andi	r24, 0xFE	; 254
    1482:	8c 93       	st	X, r24
    1484:	ad c0       	rjmp	.+346    	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 2 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1486:	a8 e2       	ldi	r26, 0x28	; 40
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e8 e2       	ldi	r30, 0x28	; 40
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 7b       	andi	r24, 0xBF	; 191
    1492:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1494:	a8 e2       	ldi	r26, 0x28	; 40
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e8 e2       	ldi	r30, 0x28	; 40
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 61       	ori	r24, 0x10	; 16
    14a0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    14a2:	a8 e2       	ldi	r26, 0x28	; 40
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e8 e2       	ldi	r30, 0x28	; 40
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8b 7f       	andi	r24, 0xFB	; 251
    14ae:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14b0:	a8 e2       	ldi	r26, 0x28	; 40
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e8 e2       	ldi	r30, 0x28	; 40
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	8c 93       	st	X, r24
    14be:	90 c0       	rjmp	.+288    	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    14c0:	a8 e2       	ldi	r26, 0x28	; 40
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e2       	ldi	r30, 0x28	; 40
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8f 7b       	andi	r24, 0xBF	; 191
    14cc:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14ce:	a8 e2       	ldi	r26, 0x28	; 40
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e8 e2       	ldi	r30, 0x28	; 40
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	80 61       	ori	r24, 0x10	; 16
    14da:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    14dc:	a8 e2       	ldi	r26, 0x28	; 40
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e8 e2       	ldi	r30, 0x28	; 40
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	84 60       	ori	r24, 0x04	; 4
    14e8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14ea:	a8 e2       	ldi	r26, 0x28	; 40
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e2       	ldi	r30, 0x28	; 40
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8e 7f       	andi	r24, 0xFE	; 254
    14f6:	8c 93       	st	X, r24
    14f8:	73 c0       	rjmp	.+230    	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    14fa:	a8 e2       	ldi	r26, 0x28	; 40
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e2       	ldi	r30, 0x28	; 40
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8f 7b       	andi	r24, 0xBF	; 191
    1506:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1508:	a8 e2       	ldi	r26, 0x28	; 40
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e2       	ldi	r30, 0x28	; 40
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8f 7e       	andi	r24, 0xEF	; 239
    1514:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1516:	a8 e2       	ldi	r26, 0x28	; 40
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e8 e2       	ldi	r30, 0x28	; 40
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	84 60       	ori	r24, 0x04	; 4
    1522:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1524:	a8 e2       	ldi	r26, 0x28	; 40
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e2       	ldi	r30, 0x28	; 40
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8e 7f       	andi	r24, 0xFE	; 254
    1530:	8c 93       	st	X, r24
    1532:	56 c0       	rjmp	.+172    	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1534:	a8 e2       	ldi	r26, 0x28	; 40
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e2       	ldi	r30, 0x28	; 40
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8f 7b       	andi	r24, 0xBF	; 191
    1540:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1542:	a8 e2       	ldi	r26, 0x28	; 40
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e8 e2       	ldi	r30, 0x28	; 40
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8f 7e       	andi	r24, 0xEF	; 239
    154e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1550:	a8 e2       	ldi	r26, 0x28	; 40
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 e2       	ldi	r30, 0x28	; 40
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	84 60       	ori	r24, 0x04	; 4
    155c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    155e:	a8 e2       	ldi	r26, 0x28	; 40
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e2       	ldi	r30, 0x28	; 40
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	81 60       	ori	r24, 0x01	; 1
    156a:	8c 93       	st	X, r24
    156c:	39 c0       	rjmp	.+114    	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    156e:	a8 e2       	ldi	r26, 0x28	; 40
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e8 e2       	ldi	r30, 0x28	; 40
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8f 7b       	andi	r24, 0xBF	; 191
    157a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    157c:	a8 e2       	ldi	r26, 0x28	; 40
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e8 e2       	ldi	r30, 0x28	; 40
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	8f 7e       	andi	r24, 0xEF	; 239
    1588:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    158a:	a8 e2       	ldi	r26, 0x28	; 40
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 e2       	ldi	r30, 0x28	; 40
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8b 7f       	andi	r24, 0xFB	; 251
    1596:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1598:	a8 e2       	ldi	r26, 0x28	; 40
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e8 e2       	ldi	r30, 0x28	; 40
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	81 60       	ori	r24, 0x01	; 1
    15a4:	8c 93       	st	X, r24
    15a6:	1c c0       	rjmp	.+56     	; 0x15e0 <steppermotor2Write+0x654>
                break;
            case 7 :
                PORTStepper2 |= (1 << PStepper2_1);
    15a8:	a8 e2       	ldi	r26, 0x28	; 40
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e2       	ldi	r30, 0x28	; 40
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 64       	ori	r24, 0x40	; 64
    15b4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15b6:	a8 e2       	ldi	r26, 0x28	; 40
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e8 e2       	ldi	r30, 0x28	; 40
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 7e       	andi	r24, 0xEF	; 239
    15c2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    15c4:	a8 e2       	ldi	r26, 0x28	; 40
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e2       	ldi	r30, 0x28	; 40
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8b 7f       	andi	r24, 0xFB	; 251
    15d0:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15d2:	a8 e2       	ldi	r26, 0x28	; 40
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e2       	ldi	r30, 0x28	; 40
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	81 60       	ori	r24, 0x01	; 1
    15de:	8c 93       	st	X, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	aa e7       	ldi	r26, 0x7A	; 122
    15e6:	b4 e4       	ldi	r27, 0x44	; 68
    15e8:	8d 8b       	std	Y+21, r24	; 0x15
    15ea:	9e 8b       	std	Y+22, r25	; 0x16
    15ec:	af 8b       	std	Y+23, r26	; 0x17
    15ee:	b8 8f       	std	Y+24, r27	; 0x18
=======
    17f0:	88 e0       	ldi	r24, 0x08	; 8
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9a ab       	std	Y+50, r25	; 0x32
    17f6:	89 ab       	std	Y+49, r24	; 0x31
    17f8:	e3 c1       	rjmp	.+966    	; 0x1bc0 <steppermotor2Write+0x7da>
        {
            switch (i)
    17fa:	89 a9       	ldd	r24, Y+49	; 0x31
    17fc:	9a a9       	ldd	r25, Y+50	; 0x32
    17fe:	9a af       	std	Y+58, r25	; 0x3a
    1800:	89 af       	std	Y+57, r24	; 0x39
    1802:	89 ad       	ldd	r24, Y+57	; 0x39
    1804:	9a ad       	ldd	r25, Y+58	; 0x3a
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <steppermotor2Write+0x428>
    180c:	a3 c0       	rjmp	.+326    	; 0x1954 <steppermotor2Write+0x56e>
    180e:	89 ad       	ldd	r24, Y+57	; 0x39
    1810:	9a ad       	ldd	r25, Y+58	; 0x3a
    1812:	85 30       	cpi	r24, 0x05	; 5
    1814:	91 05       	cpc	r25, r1
    1816:	94 f4       	brge	.+36     	; 0x183c <steppermotor2Write+0x456>
    1818:	89 ad       	ldd	r24, Y+57	; 0x39
    181a:	9a ad       	ldd	r25, Y+58	; 0x3a
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <steppermotor2Write+0x43e>
    1822:	5e c0       	rjmp	.+188    	; 0x18e0 <steppermotor2Write+0x4fa>
    1824:	89 ad       	ldd	r24, Y+57	; 0x39
    1826:	9a ad       	ldd	r25, Y+58	; 0x3a
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	91 05       	cpc	r25, r1
    182c:	0c f0       	brlt	.+2      	; 0x1830 <steppermotor2Write+0x44a>
    182e:	75 c0       	rjmp	.+234    	; 0x191a <steppermotor2Write+0x534>
    1830:	89 ad       	ldd	r24, Y+57	; 0x39
    1832:	9a ad       	ldd	r25, Y+58	; 0x3a
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	b1 f1       	breq	.+108    	; 0x18a6 <steppermotor2Write+0x4c0>
    183a:	ff c0       	rjmp	.+510    	; 0x1a3a <steppermotor2Write+0x654>
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1840:	86 30       	cpi	r24, 0x06	; 6
    1842:	91 05       	cpc	r25, r1
    1844:	09 f4       	brne	.+2      	; 0x1848 <steppermotor2Write+0x462>
    1846:	c0 c0       	rjmp	.+384    	; 0x19c8 <steppermotor2Write+0x5e2>
    1848:	89 ad       	ldd	r24, Y+57	; 0x39
    184a:	9a ad       	ldd	r25, Y+58	; 0x3a
    184c:	86 30       	cpi	r24, 0x06	; 6
    184e:	91 05       	cpc	r25, r1
    1850:	0c f4       	brge	.+2      	; 0x1854 <steppermotor2Write+0x46e>
    1852:	9d c0       	rjmp	.+314    	; 0x198e <steppermotor2Write+0x5a8>
    1854:	89 ad       	ldd	r24, Y+57	; 0x39
    1856:	9a ad       	ldd	r25, Y+58	; 0x3a
    1858:	87 30       	cpi	r24, 0x07	; 7
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <steppermotor2Write+0x47a>
    185e:	d1 c0       	rjmp	.+418    	; 0x1a02 <steppermotor2Write+0x61c>
    1860:	89 ad       	ldd	r24, Y+57	; 0x39
    1862:	9a ad       	ldd	r25, Y+58	; 0x3a
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	91 05       	cpc	r25, r1
    1868:	09 f0       	breq	.+2      	; 0x186c <steppermotor2Write+0x486>
    186a:	e7 c0       	rjmp	.+462    	; 0x1a3a <steppermotor2Write+0x654>
            {
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    186c:	a8 e2       	ldi	r26, 0x28	; 40
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e2       	ldi	r30, 0x28	; 40
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    187a:	a8 e2       	ldi	r26, 0x28	; 40
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e8 e2       	ldi	r30, 0x28	; 40
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 7e       	andi	r24, 0xEF	; 239
    1886:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1888:	a8 e2       	ldi	r26, 0x28	; 40
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e8 e2       	ldi	r30, 0x28	; 40
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8b 7f       	andi	r24, 0xFB	; 251
    1894:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1896:	a8 e2       	ldi	r26, 0x28	; 40
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e8 e2       	ldi	r30, 0x28	; 40
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	8c 93       	st	X, r24
    18a4:	ca c0       	rjmp	.+404    	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    18a6:	a8 e2       	ldi	r26, 0x28	; 40
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e8 e2       	ldi	r30, 0x28	; 40
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 64       	ori	r24, 0x40	; 64
    18b2:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    18b4:	a8 e2       	ldi	r26, 0x28	; 40
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e8 e2       	ldi	r30, 0x28	; 40
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 61       	ori	r24, 0x10	; 16
    18c0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    18c2:	a8 e2       	ldi	r26, 0x28	; 40
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e8 e2       	ldi	r30, 0x28	; 40
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8b 7f       	andi	r24, 0xFB	; 251
    18ce:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    18d0:	a8 e2       	ldi	r26, 0x28	; 40
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e8 e2       	ldi	r30, 0x28	; 40
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8e 7f       	andi	r24, 0xFE	; 254
    18dc:	8c 93       	st	X, r24
    18de:	ad c0       	rjmp	.+346    	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 2 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    18e0:	a8 e2       	ldi	r26, 0x28	; 40
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e8 e2       	ldi	r30, 0x28	; 40
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8f 7b       	andi	r24, 0xBF	; 191
    18ec:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    18ee:	a8 e2       	ldi	r26, 0x28	; 40
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e8 e2       	ldi	r30, 0x28	; 40
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 61       	ori	r24, 0x10	; 16
    18fa:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    18fc:	a8 e2       	ldi	r26, 0x28	; 40
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e8 e2       	ldi	r30, 0x28	; 40
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8b 7f       	andi	r24, 0xFB	; 251
    1908:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    190a:	a8 e2       	ldi	r26, 0x28	; 40
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e8 e2       	ldi	r30, 0x28	; 40
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8e 7f       	andi	r24, 0xFE	; 254
    1916:	8c 93       	st	X, r24
    1918:	90 c0       	rjmp	.+288    	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    191a:	a8 e2       	ldi	r26, 0x28	; 40
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e8 e2       	ldi	r30, 0x28	; 40
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 7b       	andi	r24, 0xBF	; 191
    1926:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1928:	a8 e2       	ldi	r26, 0x28	; 40
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e8 e2       	ldi	r30, 0x28	; 40
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 61       	ori	r24, 0x10	; 16
    1934:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1936:	a8 e2       	ldi	r26, 0x28	; 40
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e8 e2       	ldi	r30, 0x28	; 40
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1944:	a8 e2       	ldi	r26, 0x28	; 40
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e8 e2       	ldi	r30, 0x28	; 40
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8c 93       	st	X, r24
    1952:	73 c0       	rjmp	.+230    	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1954:	a8 e2       	ldi	r26, 0x28	; 40
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e8 e2       	ldi	r30, 0x28	; 40
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 7b       	andi	r24, 0xBF	; 191
    1960:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1962:	a8 e2       	ldi	r26, 0x28	; 40
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e8 e2       	ldi	r30, 0x28	; 40
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 7e       	andi	r24, 0xEF	; 239
    196e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1970:	a8 e2       	ldi	r26, 0x28	; 40
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e8 e2       	ldi	r30, 0x28	; 40
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	84 60       	ori	r24, 0x04	; 4
    197c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    197e:	a8 e2       	ldi	r26, 0x28	; 40
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e8 e2       	ldi	r30, 0x28	; 40
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8e 7f       	andi	r24, 0xFE	; 254
    198a:	8c 93       	st	X, r24
    198c:	56 c0       	rjmp	.+172    	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    198e:	a8 e2       	ldi	r26, 0x28	; 40
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e8 e2       	ldi	r30, 0x28	; 40
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 7b       	andi	r24, 0xBF	; 191
    199a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    199c:	a8 e2       	ldi	r26, 0x28	; 40
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e8 e2       	ldi	r30, 0x28	; 40
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8f 7e       	andi	r24, 0xEF	; 239
    19a8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    19aa:	a8 e2       	ldi	r26, 0x28	; 40
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e8 e2       	ldi	r30, 0x28	; 40
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	84 60       	ori	r24, 0x04	; 4
    19b6:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    19b8:	a8 e2       	ldi	r26, 0x28	; 40
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e8 e2       	ldi	r30, 0x28	; 40
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	81 60       	ori	r24, 0x01	; 1
    19c4:	8c 93       	st	X, r24
    19c6:	39 c0       	rjmp	.+114    	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    19c8:	a8 e2       	ldi	r26, 0x28	; 40
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e8 e2       	ldi	r30, 0x28	; 40
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8f 7b       	andi	r24, 0xBF	; 191
    19d4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    19d6:	a8 e2       	ldi	r26, 0x28	; 40
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e8 e2       	ldi	r30, 0x28	; 40
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8f 7e       	andi	r24, 0xEF	; 239
    19e2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    19e4:	a8 e2       	ldi	r26, 0x28	; 40
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 e2       	ldi	r30, 0x28	; 40
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8b 7f       	andi	r24, 0xFB	; 251
    19f0:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    19f2:	a8 e2       	ldi	r26, 0x28	; 40
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e8 e2       	ldi	r30, 0x28	; 40
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	8c 93       	st	X, r24
    1a00:	1c c0       	rjmp	.+56     	; 0x1a3a <steppermotor2Write+0x654>
                break;
            case 7 :
                PORTStepper2 |= (1 << PStepper2_1);
    1a02:	a8 e2       	ldi	r26, 0x28	; 40
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e8 e2       	ldi	r30, 0x28	; 40
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 64       	ori	r24, 0x40	; 64
    1a0e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1a10:	a8 e2       	ldi	r26, 0x28	; 40
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e8 e2       	ldi	r30, 0x28	; 40
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8f 7e       	andi	r24, 0xEF	; 239
    1a1c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1a1e:	a8 e2       	ldi	r26, 0x28	; 40
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e8 e2       	ldi	r30, 0x28	; 40
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 7f       	andi	r24, 0xFB	; 251
    1a2a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1a2c:	a8 e2       	ldi	r26, 0x28	; 40
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e8 e2       	ldi	r30, 0x28	; 40
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	8c 93       	st	X, r24
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	aa e7       	ldi	r26, 0x7A	; 122
    1a40:	b4 e4       	ldi	r27, 0x44	; 68
    1a42:	8d 8b       	std	Y+21, r24	; 0x15
    1a44:	9e 8b       	std	Y+22, r25	; 0x16
    1a46:	af 8b       	std	Y+23, r26	; 0x17
    1a48:	b8 8f       	std	Y+24, r27	; 0x18
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	2b ea       	ldi	r18, 0xAB	; 171
    15fa:	3a ea       	ldi	r19, 0xAA	; 170
    15fc:	4a ea       	ldi	r20, 0xAA	; 170
    15fe:	50 e4       	ldi	r21, 0x40	; 64
    1600:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	89 8b       	std	Y+17, r24	; 0x11
    160a:	9a 8b       	std	Y+18, r25	; 0x12
    160c:	ab 8b       	std	Y+19, r26	; 0x13
    160e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1610:	69 89       	ldd	r22, Y+17	; 0x11
    1612:	7a 89       	ldd	r23, Y+18	; 0x12
    1614:	8b 89       	ldd	r24, Y+19	; 0x13
    1616:	9c 89       	ldd	r25, Y+20	; 0x14
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	1c f4       	brge	.+6      	; 0x162e <steppermotor2Write+0x6a2>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	88 8b       	std	Y+16, r24	; 0x10
    162c:	91 c0       	rjmp	.+290    	; 0x1750 <steppermotor2Write+0x7c4>
	else if (__tmp > 255)
    162e:	69 89       	ldd	r22, Y+17	; 0x11
    1630:	7a 89       	ldd	r23, Y+18	; 0x12
    1632:	8b 89       	ldd	r24, Y+19	; 0x13
    1634:	9c 89       	ldd	r25, Y+20	; 0x14
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4f e7       	ldi	r20, 0x7F	; 127
    163c:	53 e4       	ldi	r21, 0x43	; 67
    163e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    1642:	18 16       	cp	r1, r24
    1644:	0c f0       	brlt	.+2      	; 0x1648 <steppermotor2Write+0x6bc>
    1646:	7b c0       	rjmp	.+246    	; 0x173e <steppermotor2Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1648:	6d 89       	ldd	r22, Y+21	; 0x15
    164a:	7e 89       	ldd	r23, Y+22	; 0x16
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	98 8d       	ldd	r25, Y+24	; 0x18
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a e7       	ldi	r20, 0x7A	; 122
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8c 87       	std	Y+12, r24	; 0x0c
    1662:	9d 87       	std	Y+13, r25	; 0x0d
    1664:	ae 87       	std	Y+14, r26	; 0x0e
    1666:	bf 87       	std	Y+15, r27	; 0x0f
=======
    1a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	2b ea       	ldi	r18, 0xAB	; 171
    1a54:	3a ea       	ldi	r19, 0xAA	; 170
    1a56:	4a ea       	ldi	r20, 0xAA	; 170
    1a58:	50 e4       	ldi	r21, 0x40	; 64
    1a5a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	89 8b       	std	Y+17, r24	; 0x11
    1a64:	9a 8b       	std	Y+18, r25	; 0x12
    1a66:	ab 8b       	std	Y+19, r26	; 0x13
    1a68:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a6a:	69 89       	ldd	r22, Y+17	; 0x11
    1a6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	1c f4       	brge	.+6      	; 0x1a88 <steppermotor2Write+0x6a2>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	88 8b       	std	Y+16, r24	; 0x10
    1a86:	91 c0       	rjmp	.+290    	; 0x1baa <steppermotor2Write+0x7c4>
	else if (__tmp > 255)
    1a88:	69 89       	ldd	r22, Y+17	; 0x11
    1a8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	53 e4       	ldi	r21, 0x43	; 67
    1a98:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	0c f0       	brlt	.+2      	; 0x1aa2 <steppermotor2Write+0x6bc>
    1aa0:	7b c0       	rjmp	.+246    	; 0x1b98 <steppermotor2Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8c 87       	std	Y+12, r24	; 0x0c
    1abc:	9d 87       	std	Y+13, r25	; 0x0d
    1abe:	ae 87       	std	Y+14, r26	; 0x0e
    1ac0:	bf 87       	std	Y+15, r27	; 0x0f
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    1668:	6c 85       	ldd	r22, Y+12	; 0x0c
    166a:	7d 85       	ldd	r23, Y+13	; 0x0d
    166c:	8e 85       	ldd	r24, Y+14	; 0x0e
    166e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a e7       	ldi	r20, 0x7A	; 122
    1676:	55 e4       	ldi	r21, 0x45	; 69
    1678:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	88 87       	std	Y+8, r24	; 0x08
    1682:	99 87       	std	Y+9, r25	; 0x09
    1684:	aa 87       	std	Y+10, r26	; 0x0a
    1686:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1688:	68 85       	ldd	r22, Y+8	; 0x08
    168a:	79 85       	ldd	r23, Y+9	; 0x09
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	2c f4       	brge	.+10     	; 0x16aa <steppermotor2Write+0x71e>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9f 83       	std	Y+7, r25	; 0x07
    16a6:	8e 83       	std	Y+6, r24	; 0x06
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <steppermotor2Write+0x79c>
	else if (__tmp > 65535)
    16aa:	68 85       	ldd	r22, Y+8	; 0x08
    16ac:	79 85       	ldd	r23, Y+9	; 0x09
    16ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	4c f5       	brge	.+82     	; 0x1714 <steppermotor2Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    16c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    16c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9f 83       	std	Y+7, r25	; 0x07
    16e8:	8e 83       	std	Y+6, r24	; 0x06
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <steppermotor2Write+0x77e>
    16ec:	80 e9       	ldi	r24, 0x90	; 144
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	9d 83       	std	Y+5, r25	; 0x05
    16f2:	8c 83       	std	Y+4, r24	; 0x04
=======
    1ac2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ac4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ac6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a e7       	ldi	r20, 0x7A	; 122
    1ad0:	55 e4       	ldi	r21, 0x45	; 69
    1ad2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	88 87       	std	Y+8, r24	; 0x08
    1adc:	99 87       	std	Y+9, r25	; 0x09
    1ade:	aa 87       	std	Y+10, r26	; 0x0a
    1ae0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ae2:	68 85       	ldd	r22, Y+8	; 0x08
    1ae4:	79 85       	ldd	r23, Y+9	; 0x09
    1ae6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <steppermotor2Write+0x71e>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9f 83       	std	Y+7, r25	; 0x07
    1b00:	8e 83       	std	Y+6, r24	; 0x06
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <steppermotor2Write+0x79c>
	else if (__tmp > 65535)
    1b04:	68 85       	ldd	r22, Y+8	; 0x08
    1b06:	79 85       	ldd	r23, Y+9	; 0x09
    1b08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <steppermotor2Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9f 83       	std	Y+7, r25	; 0x07
    1b42:	8e 83       	std	Y+6, r24	; 0x06
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <steppermotor2Write+0x77e>
    1b46:	80 e9       	ldi	r24, 0x90	; 144
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	9d 83       	std	Y+5, r25	; 0x05
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <steppermotor2Write+0x76c>
    16fc:	9d 83       	std	Y+5, r25	; 0x05
    16fe:	8c 83       	std	Y+4, r24	; 0x04
=======
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <steppermotor2Write+0x76c>
    1b56:	9d 83       	std	Y+5, r25	; 0x05
    1b58:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9f 83       	std	Y+7, r25	; 0x07
    1708:	8e 83       	std	Y+6, r24	; 0x06
=======
    1b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9f 83       	std	Y+7, r25	; 0x07
    1b62:	8e 83       	std	Y+6, r24	; 0x06
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    170a:	8e 81       	ldd	r24, Y+6	; 0x06
    170c:	9f 81       	ldd	r25, Y+7	; 0x07
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	69 f7       	brne	.-38     	; 0x16ec <steppermotor2Write+0x760>
    1712:	24 c0       	rjmp	.+72     	; 0x175c <steppermotor2Write+0x7d0>
=======
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <steppermotor2Write+0x760>
    1b6c:	24 c0       	rjmp	.+72     	; 0x1bb6 <steppermotor2Write+0x7d0>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    1714:	68 85       	ldd	r22, Y+8	; 0x08
    1716:	79 85       	ldd	r23, Y+9	; 0x09
    1718:	8a 85       	ldd	r24, Y+10	; 0x0a
    171a:	9b 85       	ldd	r25, Y+11	; 0x0b
    171c:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9f 83       	std	Y+7, r25	; 0x07
    1726:	8e 83       	std	Y+6, r24	; 0x06
    1728:	8e 81       	ldd	r24, Y+6	; 0x06
    172a:	9f 81       	ldd	r25, Y+7	; 0x07
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <steppermotor2Write+0x7a8>
    1738:	9b 83       	std	Y+3, r25	; 0x03
    173a:	8a 83       	std	Y+2, r24	; 0x02
    173c:	0f c0       	rjmp	.+30     	; 0x175c <steppermotor2Write+0x7d0>
=======
    1b6e:	68 85       	ldd	r22, Y+8	; 0x08
    1b70:	79 85       	ldd	r23, Y+9	; 0x09
    1b72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b76:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9f 83       	std	Y+7, r25	; 0x07
    1b80:	8e 83       	std	Y+6, r24	; 0x06
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	9b 83       	std	Y+3, r25	; 0x03
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <steppermotor2Write+0x7a8>
    1b92:	9b 83       	std	Y+3, r25	; 0x03
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <steppermotor2Write+0x7d0>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    173e:	69 89       	ldd	r22, Y+17	; 0x11
    1740:	7a 89       	ldd	r23, Y+18	; 0x12
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	88 8b       	std	Y+16, r24	; 0x10
    1750:	88 89       	ldd	r24, Y+16	; 0x10
    1752:	89 83       	std	Y+1, r24	; 0x01
=======
    1b98:	69 89       	ldd	r22, Y+17	; 0x11
    1b9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba0:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	88 8b       	std	Y+16, r24	; 0x10
    1baa:	88 89       	ldd	r24, Y+16	; 0x10
    1bac:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	8a 95       	dec	r24
    1758:	f1 f7       	brne	.-4      	; 0x1756 <steppermotor2Write+0x7ca>
    175a:	89 83       	std	Y+1, r24	; 0x01
=======
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	8a 95       	dec	r24
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <steppermotor2Write+0x7ca>
    1bb4:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
    175c:	89 a9       	ldd	r24, Y+49	; 0x31
    175e:	9a a9       	ldd	r25, Y+50	; 0x32
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	9a ab       	std	Y+50, r25	; 0x32
    1764:	89 ab       	std	Y+49, r24	; 0x31
    1766:	89 a9       	ldd	r24, Y+49	; 0x31
    1768:	9a a9       	ldd	r25, Y+50	; 0x32
    176a:	18 16       	cp	r1, r24
    176c:	19 06       	cpc	r1, r25
    176e:	0c f4       	brge	.+2      	; 0x1772 <steppermotor2Write+0x7e6>
    1770:	17 ce       	rjmp	.-978    	; 0x13a0 <steppermotor2Write+0x414>
=======
    1bb6:	89 a9       	ldd	r24, Y+49	; 0x31
    1bb8:	9a a9       	ldd	r25, Y+50	; 0x32
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9a ab       	std	Y+50, r25	; 0x32
    1bbe:	89 ab       	std	Y+49, r24	; 0x31
    1bc0:	89 a9       	ldd	r24, Y+49	; 0x31
    1bc2:	9a a9       	ldd	r25, Y+50	; 0x32
    1bc4:	18 16       	cp	r1, r24
    1bc6:	19 06       	cpc	r1, r25
    1bc8:	0c f4       	brge	.+2      	; 0x1bcc <steppermotor2Write+0x7e6>
    1bca:	17 ce       	rjmp	.-978    	; 0x17fa <steppermotor2Write+0x414>
>>>>>>> Stashed changes
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
    1772:	1e aa       	std	Y+54, r1	; 0x36
    1774:	1d aa       	std	Y+53, r1	; 0x35
=======
    1bcc:	1e aa       	std	Y+54, r1	; 0x36
    1bce:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
<<<<<<< Updated upstream
    1776:	8d a9       	ldd	r24, Y+53	; 0x35
    1778:	9e a9       	ldd	r25, Y+54	; 0x36
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <steppermotor2Write+0x7f6>
    1780:	0a ce       	rjmp	.-1004   	; 0x1396 <steppermotor2Write+0x40a>
=======
    1bd0:	8d a9       	ldd	r24, Y+53	; 0x35
    1bd2:	9e a9       	ldd	r25, Y+54	; 0x36
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <steppermotor2Write+0x7f6>
    1bda:	0a ce       	rjmp	.-1004   	; 0x17f0 <steppermotor2Write+0x40a>
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
<<<<<<< Updated upstream
    1782:	ea 96       	adiw	r28, 0x3a	; 58
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <steppermotor3Write>:

void steppermotor3Write(int a)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	ea 97       	sbiw	r28, 0x3a	; 58
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	9e ab       	std	Y+54, r25	; 0x36
    17aa:	8d ab       	std	Y+53, r24	; 0x35
    17ac:	f1 c1       	rjmp	.+994    	; 0x1b90 <steppermotor3Write+0x3fc>
=======
    1bdc:	ea 96       	adiw	r28, 0x3a	; 58
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <steppermotor3Write>:

void steppermotor3Write(int a)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	ea 97       	sbiw	r28, 0x3a	; 58
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	9e ab       	std	Y+54, r25	; 0x36
    1c04:	8d ab       	std	Y+53, r24	; 0x35
    1c06:	f1 c1       	rjmp	.+994    	; 0x1fea <steppermotor3Write+0x3fc>
>>>>>>> Stashed changes
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9c ab       	std	Y+52, r25	; 0x34
    17b4:	8b ab       	std	Y+51, r24	; 0x33
    17b6:	e4 c1       	rjmp	.+968    	; 0x1b80 <steppermotor3Write+0x3ec>
        {
            switch (i)
    17b8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ba:	9c a9       	ldd	r25, Y+52	; 0x34
    17bc:	98 af       	std	Y+56, r25	; 0x38
    17be:	8f ab       	std	Y+55, r24	; 0x37
    17c0:	8f a9       	ldd	r24, Y+55	; 0x37
    17c2:	98 ad       	ldd	r25, Y+56	; 0x38
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <steppermotor3Write+0x38>
    17ca:	87 c0       	rjmp	.+270    	; 0x18da <steppermotor3Write+0x146>
    17cc:	8f a9       	ldd	r24, Y+55	; 0x37
    17ce:	98 ad       	ldd	r25, Y+56	; 0x38
    17d0:	85 30       	cpi	r24, 0x05	; 5
    17d2:	91 05       	cpc	r25, r1
    17d4:	94 f4       	brge	.+36     	; 0x17fa <steppermotor3Write+0x66>
    17d6:	8f a9       	ldd	r24, Y+55	; 0x37
    17d8:	98 ad       	ldd	r25, Y+56	; 0x38
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <steppermotor3Write+0x4e>
    17e0:	42 c0       	rjmp	.+132    	; 0x1866 <steppermotor3Write+0xd2>
    17e2:	8f a9       	ldd	r24, Y+55	; 0x37
    17e4:	98 ad       	ldd	r25, Y+56	; 0x38
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	0c f0       	brlt	.+2      	; 0x17ee <steppermotor3Write+0x5a>
    17ec:	59 c0       	rjmp	.+178    	; 0x18a0 <steppermotor3Write+0x10c>
    17ee:	8f a9       	ldd	r24, Y+55	; 0x37
    17f0:	98 ad       	ldd	r25, Y+56	; 0x38
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	d1 f0       	breq	.+52     	; 0x182c <steppermotor3Write+0x98>
    17f8:	00 c1       	rjmp	.+512    	; 0x19fa <steppermotor3Write+0x266>
    17fa:	8f a9       	ldd	r24, Y+55	; 0x37
    17fc:	98 ad       	ldd	r25, Y+56	; 0x38
    17fe:	86 30       	cpi	r24, 0x06	; 6
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <steppermotor3Write+0x72>
    1804:	a4 c0       	rjmp	.+328    	; 0x194e <steppermotor3Write+0x1ba>
    1806:	8f a9       	ldd	r24, Y+55	; 0x37
    1808:	98 ad       	ldd	r25, Y+56	; 0x38
    180a:	86 30       	cpi	r24, 0x06	; 6
    180c:	91 05       	cpc	r25, r1
    180e:	0c f4       	brge	.+2      	; 0x1812 <steppermotor3Write+0x7e>
    1810:	81 c0       	rjmp	.+258    	; 0x1914 <steppermotor3Write+0x180>
    1812:	8f a9       	ldd	r24, Y+55	; 0x37
    1814:	98 ad       	ldd	r25, Y+56	; 0x38
    1816:	87 30       	cpi	r24, 0x07	; 7
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <steppermotor3Write+0x8a>
    181c:	b5 c0       	rjmp	.+362    	; 0x1988 <steppermotor3Write+0x1f4>
    181e:	8f a9       	ldd	r24, Y+55	; 0x37
    1820:	98 ad       	ldd	r25, Y+56	; 0x38
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	91 05       	cpc	r25, r1
    1826:	09 f4       	brne	.+2      	; 0x182a <steppermotor3Write+0x96>
    1828:	cc c0       	rjmp	.+408    	; 0x19c2 <steppermotor3Write+0x22e>
    182a:	e7 c0       	rjmp	.+462    	; 0x19fa <steppermotor3Write+0x266>
            {
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    182c:	ab e0       	ldi	r26, 0x0B	; 11
    182e:	b1 e0       	ldi	r27, 0x01	; 1
    1830:	eb e0       	ldi	r30, 0x0B	; 11
    1832:	f1 e0       	ldi	r31, 0x01	; 1
    1834:	80 81       	ld	r24, Z
    1836:	80 68       	ori	r24, 0x80	; 128
    1838:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    183a:	ab e0       	ldi	r26, 0x0B	; 11
    183c:	b1 e0       	ldi	r27, 0x01	; 1
    183e:	eb e0       	ldi	r30, 0x0B	; 11
    1840:	f1 e0       	ldi	r31, 0x01	; 1
    1842:	80 81       	ld	r24, Z
    1844:	8f 7d       	andi	r24, 0xDF	; 223
    1846:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1848:	ab e0       	ldi	r26, 0x0B	; 11
    184a:	b1 e0       	ldi	r27, 0x01	; 1
    184c:	eb e0       	ldi	r30, 0x0B	; 11
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	80 81       	ld	r24, Z
    1852:	87 7f       	andi	r24, 0xF7	; 247
    1854:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1856:	ab e0       	ldi	r26, 0x0B	; 11
    1858:	b1 e0       	ldi	r27, 0x01	; 1
    185a:	eb e0       	ldi	r30, 0x0B	; 11
    185c:	f1 e0       	ldi	r31, 0x01	; 1
    185e:	80 81       	ld	r24, Z
    1860:	8d 7f       	andi	r24, 0xFD	; 253
    1862:	8c 93       	st	X, r24
    1864:	ca c0       	rjmp	.+404    	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 2 :
                PORTStepper3 |= (1 << PStepper3_1);
    1866:	ab e0       	ldi	r26, 0x0B	; 11
    1868:	b1 e0       	ldi	r27, 0x01	; 1
    186a:	eb e0       	ldi	r30, 0x0B	; 11
    186c:	f1 e0       	ldi	r31, 0x01	; 1
    186e:	80 81       	ld	r24, Z
    1870:	80 68       	ori	r24, 0x80	; 128
    1872:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1874:	ab e0       	ldi	r26, 0x0B	; 11
    1876:	b1 e0       	ldi	r27, 0x01	; 1
    1878:	eb e0       	ldi	r30, 0x0B	; 11
    187a:	f1 e0       	ldi	r31, 0x01	; 1
    187c:	80 81       	ld	r24, Z
    187e:	80 62       	ori	r24, 0x20	; 32
    1880:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1882:	ab e0       	ldi	r26, 0x0B	; 11
    1884:	b1 e0       	ldi	r27, 0x01	; 1
    1886:	eb e0       	ldi	r30, 0x0B	; 11
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	80 81       	ld	r24, Z
    188c:	87 7f       	andi	r24, 0xF7	; 247
    188e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1890:	ab e0       	ldi	r26, 0x0B	; 11
    1892:	b1 e0       	ldi	r27, 0x01	; 1
    1894:	eb e0       	ldi	r30, 0x0B	; 11
    1896:	f1 e0       	ldi	r31, 0x01	; 1
    1898:	80 81       	ld	r24, Z
    189a:	8d 7f       	andi	r24, 0xFD	; 253
    189c:	8c 93       	st	X, r24
    189e:	ad c0       	rjmp	.+346    	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    18a0:	ab e0       	ldi	r26, 0x0B	; 11
    18a2:	b1 e0       	ldi	r27, 0x01	; 1
    18a4:	eb e0       	ldi	r30, 0x0B	; 11
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 77       	andi	r24, 0x7F	; 127
    18ac:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    18ae:	ab e0       	ldi	r26, 0x0B	; 11
    18b0:	b1 e0       	ldi	r27, 0x01	; 1
    18b2:	eb e0       	ldi	r30, 0x0B	; 11
    18b4:	f1 e0       	ldi	r31, 0x01	; 1
    18b6:	80 81       	ld	r24, Z
    18b8:	80 62       	ori	r24, 0x20	; 32
    18ba:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    18bc:	ab e0       	ldi	r26, 0x0B	; 11
    18be:	b1 e0       	ldi	r27, 0x01	; 1
    18c0:	eb e0       	ldi	r30, 0x0B	; 11
    18c2:	f1 e0       	ldi	r31, 0x01	; 1
    18c4:	80 81       	ld	r24, Z
    18c6:	87 7f       	andi	r24, 0xF7	; 247
    18c8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    18ca:	ab e0       	ldi	r26, 0x0B	; 11
    18cc:	b1 e0       	ldi	r27, 0x01	; 1
    18ce:	eb e0       	ldi	r30, 0x0B	; 11
    18d0:	f1 e0       	ldi	r31, 0x01	; 1
    18d2:	80 81       	ld	r24, Z
    18d4:	8d 7f       	andi	r24, 0xFD	; 253
    18d6:	8c 93       	st	X, r24
    18d8:	90 c0       	rjmp	.+288    	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    18da:	ab e0       	ldi	r26, 0x0B	; 11
    18dc:	b1 e0       	ldi	r27, 0x01	; 1
    18de:	eb e0       	ldi	r30, 0x0B	; 11
    18e0:	f1 e0       	ldi	r31, 0x01	; 1
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 77       	andi	r24, 0x7F	; 127
    18e6:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    18e8:	ab e0       	ldi	r26, 0x0B	; 11
    18ea:	b1 e0       	ldi	r27, 0x01	; 1
    18ec:	eb e0       	ldi	r30, 0x0B	; 11
    18ee:	f1 e0       	ldi	r31, 0x01	; 1
    18f0:	80 81       	ld	r24, Z
    18f2:	80 62       	ori	r24, 0x20	; 32
    18f4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    18f6:	ab e0       	ldi	r26, 0x0B	; 11
    18f8:	b1 e0       	ldi	r27, 0x01	; 1
    18fa:	eb e0       	ldi	r30, 0x0B	; 11
    18fc:	f1 e0       	ldi	r31, 0x01	; 1
    18fe:	80 81       	ld	r24, Z
    1900:	88 60       	ori	r24, 0x08	; 8
    1902:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1904:	ab e0       	ldi	r26, 0x0B	; 11
    1906:	b1 e0       	ldi	r27, 0x01	; 1
    1908:	eb e0       	ldi	r30, 0x0B	; 11
    190a:	f1 e0       	ldi	r31, 0x01	; 1
    190c:	80 81       	ld	r24, Z
    190e:	8d 7f       	andi	r24, 0xFD	; 253
    1910:	8c 93       	st	X, r24
    1912:	73 c0       	rjmp	.+230    	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1914:	ab e0       	ldi	r26, 0x0B	; 11
    1916:	b1 e0       	ldi	r27, 0x01	; 1
    1918:	eb e0       	ldi	r30, 0x0B	; 11
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	80 81       	ld	r24, Z
    191e:	8f 77       	andi	r24, 0x7F	; 127
    1920:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1922:	ab e0       	ldi	r26, 0x0B	; 11
    1924:	b1 e0       	ldi	r27, 0x01	; 1
    1926:	eb e0       	ldi	r30, 0x0B	; 11
    1928:	f1 e0       	ldi	r31, 0x01	; 1
    192a:	80 81       	ld	r24, Z
    192c:	8f 7d       	andi	r24, 0xDF	; 223
    192e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1930:	ab e0       	ldi	r26, 0x0B	; 11
    1932:	b1 e0       	ldi	r27, 0x01	; 1
    1934:	eb e0       	ldi	r30, 0x0B	; 11
    1936:	f1 e0       	ldi	r31, 0x01	; 1
    1938:	80 81       	ld	r24, Z
    193a:	88 60       	ori	r24, 0x08	; 8
    193c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    193e:	ab e0       	ldi	r26, 0x0B	; 11
    1940:	b1 e0       	ldi	r27, 0x01	; 1
    1942:	eb e0       	ldi	r30, 0x0B	; 11
    1944:	f1 e0       	ldi	r31, 0x01	; 1
    1946:	80 81       	ld	r24, Z
    1948:	8d 7f       	andi	r24, 0xFD	; 253
    194a:	8c 93       	st	X, r24
    194c:	56 c0       	rjmp	.+172    	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    194e:	ab e0       	ldi	r26, 0x0B	; 11
    1950:	b1 e0       	ldi	r27, 0x01	; 1
    1952:	eb e0       	ldi	r30, 0x0B	; 11
    1954:	f1 e0       	ldi	r31, 0x01	; 1
    1956:	80 81       	ld	r24, Z
    1958:	8f 77       	andi	r24, 0x7F	; 127
    195a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    195c:	ab e0       	ldi	r26, 0x0B	; 11
    195e:	b1 e0       	ldi	r27, 0x01	; 1
    1960:	eb e0       	ldi	r30, 0x0B	; 11
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	80 81       	ld	r24, Z
    1966:	8f 7d       	andi	r24, 0xDF	; 223
    1968:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    196a:	ab e0       	ldi	r26, 0x0B	; 11
    196c:	b1 e0       	ldi	r27, 0x01	; 1
    196e:	eb e0       	ldi	r30, 0x0B	; 11
    1970:	f1 e0       	ldi	r31, 0x01	; 1
    1972:	80 81       	ld	r24, Z
    1974:	88 60       	ori	r24, 0x08	; 8
    1976:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1978:	ab e0       	ldi	r26, 0x0B	; 11
    197a:	b1 e0       	ldi	r27, 0x01	; 1
    197c:	eb e0       	ldi	r30, 0x0B	; 11
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	80 81       	ld	r24, Z
    1982:	82 60       	ori	r24, 0x02	; 2
    1984:	8c 93       	st	X, r24
    1986:	39 c0       	rjmp	.+114    	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 7 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1988:	ab e0       	ldi	r26, 0x0B	; 11
    198a:	b1 e0       	ldi	r27, 0x01	; 1
    198c:	eb e0       	ldi	r30, 0x0B	; 11
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	80 81       	ld	r24, Z
    1992:	8f 77       	andi	r24, 0x7F	; 127
    1994:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1996:	ab e0       	ldi	r26, 0x0B	; 11
    1998:	b1 e0       	ldi	r27, 0x01	; 1
    199a:	eb e0       	ldi	r30, 0x0B	; 11
    199c:	f1 e0       	ldi	r31, 0x01	; 1
    199e:	80 81       	ld	r24, Z
    19a0:	8f 7d       	andi	r24, 0xDF	; 223
    19a2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    19a4:	ab e0       	ldi	r26, 0x0B	; 11
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	eb e0       	ldi	r30, 0x0B	; 11
    19aa:	f1 e0       	ldi	r31, 0x01	; 1
    19ac:	80 81       	ld	r24, Z
    19ae:	87 7f       	andi	r24, 0xF7	; 247
    19b0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    19b2:	ab e0       	ldi	r26, 0x0B	; 11
    19b4:	b1 e0       	ldi	r27, 0x01	; 1
    19b6:	eb e0       	ldi	r30, 0x0B	; 11
    19b8:	f1 e0       	ldi	r31, 0x01	; 1
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	8c 93       	st	X, r24
    19c0:	1c c0       	rjmp	.+56     	; 0x19fa <steppermotor3Write+0x266>
                break;
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    19c2:	ab e0       	ldi	r26, 0x0B	; 11
    19c4:	b1 e0       	ldi	r27, 0x01	; 1
    19c6:	eb e0       	ldi	r30, 0x0B	; 11
    19c8:	f1 e0       	ldi	r31, 0x01	; 1
    19ca:	80 81       	ld	r24, Z
    19cc:	80 68       	ori	r24, 0x80	; 128
    19ce:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    19d0:	ab e0       	ldi	r26, 0x0B	; 11
    19d2:	b1 e0       	ldi	r27, 0x01	; 1
    19d4:	eb e0       	ldi	r30, 0x0B	; 11
    19d6:	f1 e0       	ldi	r31, 0x01	; 1
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7d       	andi	r24, 0xDF	; 223
    19dc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    19de:	ab e0       	ldi	r26, 0x0B	; 11
    19e0:	b1 e0       	ldi	r27, 0x01	; 1
    19e2:	eb e0       	ldi	r30, 0x0B	; 11
    19e4:	f1 e0       	ldi	r31, 0x01	; 1
    19e6:	80 81       	ld	r24, Z
    19e8:	87 7f       	andi	r24, 0xF7	; 247
    19ea:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    19ec:	ab e0       	ldi	r26, 0x0B	; 11
    19ee:	b1 e0       	ldi	r27, 0x01	; 1
    19f0:	eb e0       	ldi	r30, 0x0B	; 11
    19f2:	f1 e0       	ldi	r31, 0x01	; 1
    19f4:	80 81       	ld	r24, Z
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	8c 93       	st	X, r24
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	aa e7       	ldi	r26, 0x7A	; 122
    1a00:	b4 e4       	ldi	r27, 0x44	; 68
    1a02:	8d a7       	std	Y+45, r24	; 0x2d
    1a04:	9e a7       	std	Y+46, r25	; 0x2e
    1a06:	af a7       	std	Y+47, r26	; 0x2f
    1a08:	b8 ab       	std	Y+48, r27	; 0x30
=======
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c ab       	std	Y+52, r25	; 0x34
    1c0e:	8b ab       	std	Y+51, r24	; 0x33
    1c10:	e4 c1       	rjmp	.+968    	; 0x1fda <steppermotor3Write+0x3ec>
        {
            switch (i)
    1c12:	8b a9       	ldd	r24, Y+51	; 0x33
    1c14:	9c a9       	ldd	r25, Y+52	; 0x34
    1c16:	98 af       	std	Y+56, r25	; 0x38
    1c18:	8f ab       	std	Y+55, r24	; 0x37
    1c1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	91 05       	cpc	r25, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <steppermotor3Write+0x38>
    1c24:	87 c0       	rjmp	.+270    	; 0x1d34 <steppermotor3Write+0x146>
    1c26:	8f a9       	ldd	r24, Y+55	; 0x37
    1c28:	98 ad       	ldd	r25, Y+56	; 0x38
    1c2a:	85 30       	cpi	r24, 0x05	; 5
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	94 f4       	brge	.+36     	; 0x1c54 <steppermotor3Write+0x66>
    1c30:	8f a9       	ldd	r24, Y+55	; 0x37
    1c32:	98 ad       	ldd	r25, Y+56	; 0x38
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	91 05       	cpc	r25, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <steppermotor3Write+0x4e>
    1c3a:	42 c0       	rjmp	.+132    	; 0x1cc0 <steppermotor3Write+0xd2>
    1c3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <steppermotor3Write+0x5a>
    1c46:	59 c0       	rjmp	.+178    	; 0x1cfa <steppermotor3Write+0x10c>
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	d1 f0       	breq	.+52     	; 0x1c86 <steppermotor3Write+0x98>
    1c52:	00 c1       	rjmp	.+512    	; 0x1e54 <steppermotor3Write+0x266>
    1c54:	8f a9       	ldd	r24, Y+55	; 0x37
    1c56:	98 ad       	ldd	r25, Y+56	; 0x38
    1c58:	86 30       	cpi	r24, 0x06	; 6
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <steppermotor3Write+0x72>
    1c5e:	a4 c0       	rjmp	.+328    	; 0x1da8 <steppermotor3Write+0x1ba>
    1c60:	8f a9       	ldd	r24, Y+55	; 0x37
    1c62:	98 ad       	ldd	r25, Y+56	; 0x38
    1c64:	86 30       	cpi	r24, 0x06	; 6
    1c66:	91 05       	cpc	r25, r1
    1c68:	0c f4       	brge	.+2      	; 0x1c6c <steppermotor3Write+0x7e>
    1c6a:	81 c0       	rjmp	.+258    	; 0x1d6e <steppermotor3Write+0x180>
    1c6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c70:	87 30       	cpi	r24, 0x07	; 7
    1c72:	91 05       	cpc	r25, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <steppermotor3Write+0x8a>
    1c76:	b5 c0       	rjmp	.+362    	; 0x1de2 <steppermotor3Write+0x1f4>
    1c78:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7c:	88 30       	cpi	r24, 0x08	; 8
    1c7e:	91 05       	cpc	r25, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <steppermotor3Write+0x96>
    1c82:	cc c0       	rjmp	.+408    	; 0x1e1c <steppermotor3Write+0x22e>
    1c84:	e7 c0       	rjmp	.+462    	; 0x1e54 <steppermotor3Write+0x266>
            {
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c86:	ab e0       	ldi	r26, 0x0B	; 11
    1c88:	b1 e0       	ldi	r27, 0x01	; 1
    1c8a:	eb e0       	ldi	r30, 0x0B	; 11
    1c8c:	f1 e0       	ldi	r31, 0x01	; 1
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1c94:	ab e0       	ldi	r26, 0x0B	; 11
    1c96:	b1 e0       	ldi	r27, 0x01	; 1
    1c98:	eb e0       	ldi	r30, 0x0B	; 11
    1c9a:	f1 e0       	ldi	r31, 0x01	; 1
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ca0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1ca2:	ab e0       	ldi	r26, 0x0B	; 11
    1ca4:	b1 e0       	ldi	r27, 0x01	; 1
    1ca6:	eb e0       	ldi	r30, 0x0B	; 11
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	80 81       	ld	r24, Z
    1cac:	87 7f       	andi	r24, 0xF7	; 247
    1cae:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cb0:	ab e0       	ldi	r26, 0x0B	; 11
    1cb2:	b1 e0       	ldi	r27, 0x01	; 1
    1cb4:	eb e0       	ldi	r30, 0x0B	; 11
    1cb6:	f1 e0       	ldi	r31, 0x01	; 1
    1cb8:	80 81       	ld	r24, Z
    1cba:	8d 7f       	andi	r24, 0xFD	; 253
    1cbc:	8c 93       	st	X, r24
    1cbe:	ca c0       	rjmp	.+404    	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 2 :
                PORTStepper3 |= (1 << PStepper3_1);
    1cc0:	ab e0       	ldi	r26, 0x0B	; 11
    1cc2:	b1 e0       	ldi	r27, 0x01	; 1
    1cc4:	eb e0       	ldi	r30, 0x0B	; 11
    1cc6:	f1 e0       	ldi	r31, 0x01	; 1
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 68       	ori	r24, 0x80	; 128
    1ccc:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1cce:	ab e0       	ldi	r26, 0x0B	; 11
    1cd0:	b1 e0       	ldi	r27, 0x01	; 1
    1cd2:	eb e0       	ldi	r30, 0x0B	; 11
    1cd4:	f1 e0       	ldi	r31, 0x01	; 1
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 62       	ori	r24, 0x20	; 32
    1cda:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1cdc:	ab e0       	ldi	r26, 0x0B	; 11
    1cde:	b1 e0       	ldi	r27, 0x01	; 1
    1ce0:	eb e0       	ldi	r30, 0x0B	; 11
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1
    1ce4:	80 81       	ld	r24, Z
    1ce6:	87 7f       	andi	r24, 0xF7	; 247
    1ce8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cea:	ab e0       	ldi	r26, 0x0B	; 11
    1cec:	b1 e0       	ldi	r27, 0x01	; 1
    1cee:	eb e0       	ldi	r30, 0x0B	; 11
    1cf0:	f1 e0       	ldi	r31, 0x01	; 1
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8d 7f       	andi	r24, 0xFD	; 253
    1cf6:	8c 93       	st	X, r24
    1cf8:	ad c0       	rjmp	.+346    	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1cfa:	ab e0       	ldi	r26, 0x0B	; 11
    1cfc:	b1 e0       	ldi	r27, 0x01	; 1
    1cfe:	eb e0       	ldi	r30, 0x0B	; 11
    1d00:	f1 e0       	ldi	r31, 0x01	; 1
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 77       	andi	r24, 0x7F	; 127
    1d06:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1d08:	ab e0       	ldi	r26, 0x0B	; 11
    1d0a:	b1 e0       	ldi	r27, 0x01	; 1
    1d0c:	eb e0       	ldi	r30, 0x0B	; 11
    1d0e:	f1 e0       	ldi	r31, 0x01	; 1
    1d10:	80 81       	ld	r24, Z
    1d12:	80 62       	ori	r24, 0x20	; 32
    1d14:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1d16:	ab e0       	ldi	r26, 0x0B	; 11
    1d18:	b1 e0       	ldi	r27, 0x01	; 1
    1d1a:	eb e0       	ldi	r30, 0x0B	; 11
    1d1c:	f1 e0       	ldi	r31, 0x01	; 1
    1d1e:	80 81       	ld	r24, Z
    1d20:	87 7f       	andi	r24, 0xF7	; 247
    1d22:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d24:	ab e0       	ldi	r26, 0x0B	; 11
    1d26:	b1 e0       	ldi	r27, 0x01	; 1
    1d28:	eb e0       	ldi	r30, 0x0B	; 11
    1d2a:	f1 e0       	ldi	r31, 0x01	; 1
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8d 7f       	andi	r24, 0xFD	; 253
    1d30:	8c 93       	st	X, r24
    1d32:	90 c0       	rjmp	.+288    	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d34:	ab e0       	ldi	r26, 0x0B	; 11
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	eb e0       	ldi	r30, 0x0B	; 11
    1d3a:	f1 e0       	ldi	r31, 0x01	; 1
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1d42:	ab e0       	ldi	r26, 0x0B	; 11
    1d44:	b1 e0       	ldi	r27, 0x01	; 1
    1d46:	eb e0       	ldi	r30, 0x0B	; 11
    1d48:	f1 e0       	ldi	r31, 0x01	; 1
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 62       	ori	r24, 0x20	; 32
    1d4e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d50:	ab e0       	ldi	r26, 0x0B	; 11
    1d52:	b1 e0       	ldi	r27, 0x01	; 1
    1d54:	eb e0       	ldi	r30, 0x0B	; 11
    1d56:	f1 e0       	ldi	r31, 0x01	; 1
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 60       	ori	r24, 0x08	; 8
    1d5c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d5e:	ab e0       	ldi	r26, 0x0B	; 11
    1d60:	b1 e0       	ldi	r27, 0x01	; 1
    1d62:	eb e0       	ldi	r30, 0x0B	; 11
    1d64:	f1 e0       	ldi	r31, 0x01	; 1
    1d66:	80 81       	ld	r24, Z
    1d68:	8d 7f       	andi	r24, 0xFD	; 253
    1d6a:	8c 93       	st	X, r24
    1d6c:	73 c0       	rjmp	.+230    	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d6e:	ab e0       	ldi	r26, 0x0B	; 11
    1d70:	b1 e0       	ldi	r27, 0x01	; 1
    1d72:	eb e0       	ldi	r30, 0x0B	; 11
    1d74:	f1 e0       	ldi	r31, 0x01	; 1
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 77       	andi	r24, 0x7F	; 127
    1d7a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d7c:	ab e0       	ldi	r26, 0x0B	; 11
    1d7e:	b1 e0       	ldi	r27, 0x01	; 1
    1d80:	eb e0       	ldi	r30, 0x0B	; 11
    1d82:	f1 e0       	ldi	r31, 0x01	; 1
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d8a:	ab e0       	ldi	r26, 0x0B	; 11
    1d8c:	b1 e0       	ldi	r27, 0x01	; 1
    1d8e:	eb e0       	ldi	r30, 0x0B	; 11
    1d90:	f1 e0       	ldi	r31, 0x01	; 1
    1d92:	80 81       	ld	r24, Z
    1d94:	88 60       	ori	r24, 0x08	; 8
    1d96:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d98:	ab e0       	ldi	r26, 0x0B	; 11
    1d9a:	b1 e0       	ldi	r27, 0x01	; 1
    1d9c:	eb e0       	ldi	r30, 0x0B	; 11
    1d9e:	f1 e0       	ldi	r31, 0x01	; 1
    1da0:	80 81       	ld	r24, Z
    1da2:	8d 7f       	andi	r24, 0xFD	; 253
    1da4:	8c 93       	st	X, r24
    1da6:	56 c0       	rjmp	.+172    	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1da8:	ab e0       	ldi	r26, 0x0B	; 11
    1daa:	b1 e0       	ldi	r27, 0x01	; 1
    1dac:	eb e0       	ldi	r30, 0x0B	; 11
    1dae:	f1 e0       	ldi	r31, 0x01	; 1
    1db0:	80 81       	ld	r24, Z
    1db2:	8f 77       	andi	r24, 0x7F	; 127
    1db4:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1db6:	ab e0       	ldi	r26, 0x0B	; 11
    1db8:	b1 e0       	ldi	r27, 0x01	; 1
    1dba:	eb e0       	ldi	r30, 0x0B	; 11
    1dbc:	f1 e0       	ldi	r31, 0x01	; 1
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8f 7d       	andi	r24, 0xDF	; 223
    1dc2:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1dc4:	ab e0       	ldi	r26, 0x0B	; 11
    1dc6:	b1 e0       	ldi	r27, 0x01	; 1
    1dc8:	eb e0       	ldi	r30, 0x0B	; 11
    1dca:	f1 e0       	ldi	r31, 0x01	; 1
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1dd2:	ab e0       	ldi	r26, 0x0B	; 11
    1dd4:	b1 e0       	ldi	r27, 0x01	; 1
    1dd6:	eb e0       	ldi	r30, 0x0B	; 11
    1dd8:	f1 e0       	ldi	r31, 0x01	; 1
    1dda:	80 81       	ld	r24, Z
    1ddc:	82 60       	ori	r24, 0x02	; 2
    1dde:	8c 93       	st	X, r24
    1de0:	39 c0       	rjmp	.+114    	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 7 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1de2:	ab e0       	ldi	r26, 0x0B	; 11
    1de4:	b1 e0       	ldi	r27, 0x01	; 1
    1de6:	eb e0       	ldi	r30, 0x0B	; 11
    1de8:	f1 e0       	ldi	r31, 0x01	; 1
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 77       	andi	r24, 0x7F	; 127
    1dee:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1df0:	ab e0       	ldi	r26, 0x0B	; 11
    1df2:	b1 e0       	ldi	r27, 0x01	; 1
    1df4:	eb e0       	ldi	r30, 0x0B	; 11
    1df6:	f1 e0       	ldi	r31, 0x01	; 1
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 7d       	andi	r24, 0xDF	; 223
    1dfc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1dfe:	ab e0       	ldi	r26, 0x0B	; 11
    1e00:	b1 e0       	ldi	r27, 0x01	; 1
    1e02:	eb e0       	ldi	r30, 0x0B	; 11
    1e04:	f1 e0       	ldi	r31, 0x01	; 1
    1e06:	80 81       	ld	r24, Z
    1e08:	87 7f       	andi	r24, 0xF7	; 247
    1e0a:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1e0c:	ab e0       	ldi	r26, 0x0B	; 11
    1e0e:	b1 e0       	ldi	r27, 0x01	; 1
    1e10:	eb e0       	ldi	r30, 0x0B	; 11
    1e12:	f1 e0       	ldi	r31, 0x01	; 1
    1e14:	80 81       	ld	r24, Z
    1e16:	82 60       	ori	r24, 0x02	; 2
    1e18:	8c 93       	st	X, r24
    1e1a:	1c c0       	rjmp	.+56     	; 0x1e54 <steppermotor3Write+0x266>
                break;
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    1e1c:	ab e0       	ldi	r26, 0x0B	; 11
    1e1e:	b1 e0       	ldi	r27, 0x01	; 1
    1e20:	eb e0       	ldi	r30, 0x0B	; 11
    1e22:	f1 e0       	ldi	r31, 0x01	; 1
    1e24:	80 81       	ld	r24, Z
    1e26:	80 68       	ori	r24, 0x80	; 128
    1e28:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1e2a:	ab e0       	ldi	r26, 0x0B	; 11
    1e2c:	b1 e0       	ldi	r27, 0x01	; 1
    1e2e:	eb e0       	ldi	r30, 0x0B	; 11
    1e30:	f1 e0       	ldi	r31, 0x01	; 1
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7d       	andi	r24, 0xDF	; 223
    1e36:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1e38:	ab e0       	ldi	r26, 0x0B	; 11
    1e3a:	b1 e0       	ldi	r27, 0x01	; 1
    1e3c:	eb e0       	ldi	r30, 0x0B	; 11
    1e3e:	f1 e0       	ldi	r31, 0x01	; 1
    1e40:	80 81       	ld	r24, Z
    1e42:	87 7f       	andi	r24, 0xF7	; 247
    1e44:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1e46:	ab e0       	ldi	r26, 0x0B	; 11
    1e48:	b1 e0       	ldi	r27, 0x01	; 1
    1e4a:	eb e0       	ldi	r30, 0x0B	; 11
    1e4c:	f1 e0       	ldi	r31, 0x01	; 1
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 60       	ori	r24, 0x02	; 2
    1e52:	8c 93       	st	X, r24
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	aa e7       	ldi	r26, 0x7A	; 122
    1e5a:	b4 e4       	ldi	r27, 0x44	; 68
    1e5c:	8d a7       	std	Y+45, r24	; 0x2d
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	af a7       	std	Y+47, r26	; 0x2f
    1e62:	b8 ab       	std	Y+48, r27	; 0x30
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    1a0a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a0c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a10:	98 a9       	ldd	r25, Y+48	; 0x30
    1a12:	2b ea       	ldi	r18, 0xAB	; 171
    1a14:	3a ea       	ldi	r19, 0xAA	; 170
    1a16:	4a ea       	ldi	r20, 0xAA	; 170
    1a18:	50 e4       	ldi	r21, 0x40	; 64
    1a1a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	89 a7       	std	Y+41, r24	; 0x29
    1a24:	9a a7       	std	Y+42, r25	; 0x2a
    1a26:	ab a7       	std	Y+43, r26	; 0x2b
    1a28:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a2a:	69 a5       	ldd	r22, Y+41	; 0x29
    1a2c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	1c f4       	brge	.+6      	; 0x1a48 <steppermotor3Write+0x2b4>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	88 a7       	std	Y+40, r24	; 0x28
    1a46:	91 c0       	rjmp	.+290    	; 0x1b6a <steppermotor3Write+0x3d6>
	else if (__tmp > 255)
    1a48:	69 a5       	ldd	r22, Y+41	; 0x29
    1a4a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	0c f0       	brlt	.+2      	; 0x1a62 <steppermotor3Write+0x2ce>
    1a60:	7b c0       	rjmp	.+246    	; 0x1b58 <steppermotor3Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1a62:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a64:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a68:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8c a3       	std	Y+36, r24	; 0x24
    1a7c:	9d a3       	std	Y+37, r25	; 0x25
    1a7e:	ae a3       	std	Y+38, r26	; 0x26
    1a80:	bf a3       	std	Y+39, r27	; 0x27
=======
    1e64:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e66:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6c:	2b ea       	ldi	r18, 0xAB	; 171
    1e6e:	3a ea       	ldi	r19, 0xAA	; 170
    1e70:	4a ea       	ldi	r20, 0xAA	; 170
    1e72:	50 e4       	ldi	r21, 0x40	; 64
    1e74:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	89 a7       	std	Y+41, r24	; 0x29
    1e7e:	9a a7       	std	Y+42, r25	; 0x2a
    1e80:	ab a7       	std	Y+43, r26	; 0x2b
    1e82:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e84:	69 a5       	ldd	r22, Y+41	; 0x29
    1e86:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	1c f4       	brge	.+6      	; 0x1ea2 <steppermotor3Write+0x2b4>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	88 a7       	std	Y+40, r24	; 0x28
    1ea0:	91 c0       	rjmp	.+290    	; 0x1fc4 <steppermotor3Write+0x3d6>
	else if (__tmp > 255)
    1ea2:	69 a5       	ldd	r22, Y+41	; 0x29
    1ea4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ea6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	53 e4       	ldi	r21, 0x43	; 67
    1eb2:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	0c f0       	brlt	.+2      	; 0x1ebc <steppermotor3Write+0x2ce>
    1eba:	7b c0       	rjmp	.+246    	; 0x1fb2 <steppermotor3Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1ebc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ebe:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8c a3       	std	Y+36, r24	; 0x24
    1ed6:	9d a3       	std	Y+37, r25	; 0x25
    1ed8:	ae a3       	std	Y+38, r26	; 0x26
    1eda:	bf a3       	std	Y+39, r27	; 0x27
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    1a82:	6c a1       	ldd	r22, Y+36	; 0x24
    1a84:	7d a1       	ldd	r23, Y+37	; 0x25
    1a86:	8e a1       	ldd	r24, Y+38	; 0x26
    1a88:	9f a1       	ldd	r25, Y+39	; 0x27
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	55 e4       	ldi	r21, 0x45	; 69
    1a92:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	88 a3       	std	Y+32, r24	; 0x20
    1a9c:	99 a3       	std	Y+33, r25	; 0x21
    1a9e:	aa a3       	std	Y+34, r26	; 0x22
    1aa0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1aa2:	68 a1       	ldd	r22, Y+32	; 0x20
    1aa4:	79 a1       	ldd	r23, Y+33	; 0x21
    1aa6:	8a a1       	ldd	r24, Y+34	; 0x22
    1aa8:	9b a1       	ldd	r25, Y+35	; 0x23
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <steppermotor3Write+0x330>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9f 8f       	std	Y+31, r25	; 0x1f
    1ac0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <steppermotor3Write+0x3ae>
	else if (__tmp > 65535)
    1ac4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ac6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ac8:	8a a1       	ldd	r24, Y+34	; 0x22
    1aca:	9b a1       	ldd	r25, Y+35	; 0x23
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <steppermotor3Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	6c a1       	ldd	r22, Y+36	; 0x24
    1ade:	7d a1       	ldd	r23, Y+37	; 0x25
    1ae0:	8e a1       	ldd	r24, Y+38	; 0x26
    1ae2:	9f a1       	ldd	r25, Y+39	; 0x27
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9f 8f       	std	Y+31, r25	; 0x1f
    1b02:	8e 8f       	std	Y+30, r24	; 0x1e
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <steppermotor3Write+0x390>
    1b06:	80 e9       	ldi	r24, 0x90	; 144
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	9d 8f       	std	Y+29, r25	; 0x1d
    1b0c:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    1edc:	6c a1       	ldd	r22, Y+36	; 0x24
    1ede:	7d a1       	ldd	r23, Y+37	; 0x25
    1ee0:	8e a1       	ldd	r24, Y+38	; 0x26
    1ee2:	9f a1       	ldd	r25, Y+39	; 0x27
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a e7       	ldi	r20, 0x7A	; 122
    1eea:	55 e4       	ldi	r21, 0x45	; 69
    1eec:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	88 a3       	std	Y+32, r24	; 0x20
    1ef6:	99 a3       	std	Y+33, r25	; 0x21
    1ef8:	aa a3       	std	Y+34, r26	; 0x22
    1efa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1efc:	68 a1       	ldd	r22, Y+32	; 0x20
    1efe:	79 a1       	ldd	r23, Y+33	; 0x21
    1f00:	8a a1       	ldd	r24, Y+34	; 0x22
    1f02:	9b a1       	ldd	r25, Y+35	; 0x23
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <steppermotor3Write+0x330>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9f 8f       	std	Y+31, r25	; 0x1f
    1f1a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <steppermotor3Write+0x3ae>
	else if (__tmp > 65535)
    1f1e:	68 a1       	ldd	r22, Y+32	; 0x20
    1f20:	79 a1       	ldd	r23, Y+33	; 0x21
    1f22:	8a a1       	ldd	r24, Y+34	; 0x22
    1f24:	9b a1       	ldd	r25, Y+35	; 0x23
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <steppermotor3Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6c a1       	ldd	r22, Y+36	; 0x24
    1f38:	7d a1       	ldd	r23, Y+37	; 0x25
    1f3a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f3c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <steppermotor3Write+0x390>
    1f60:	80 e9       	ldi	r24, 0x90	; 144
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	9d 8f       	std	Y+29, r25	; 0x1d
    1f66:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1b0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b10:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <steppermotor3Write+0x37e>
    1b16:	9d 8f       	std	Y+29, r25	; 0x1d
    1b18:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    1f68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <steppermotor3Write+0x37e>
    1f70:	9d 8f       	std	Y+29, r25	; 0x1d
    1f72:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    1b1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9f 8f       	std	Y+31, r25	; 0x1f
    1b22:	8e 8f       	std	Y+30, r24	; 0x1e
=======
    1f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f7c:	8e 8f       	std	Y+30, r24	; 0x1e
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    1b24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <steppermotor3Write+0x372>
    1b2c:	24 c0       	rjmp	.+72     	; 0x1b76 <steppermotor3Write+0x3e2>
=======
    1f7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <steppermotor3Write+0x372>
    1f86:	24 c0       	rjmp	.+72     	; 0x1fd0 <steppermotor3Write+0x3e2>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    1b2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b30:	79 a1       	ldd	r23, Y+33	; 0x21
    1b32:	8a a1       	ldd	r24, Y+34	; 0x22
    1b34:	9b a1       	ldd	r25, Y+35	; 0x23
    1b36:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9f 8f       	std	Y+31, r25	; 0x1f
    1b40:	8e 8f       	std	Y+30, r24	; 0x1e
    1b42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b44:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b46:	9b 8f       	std	Y+27, r25	; 0x1b
    1b48:	8a 8f       	std	Y+26, r24	; 0x1a
    1b4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <steppermotor3Write+0x3ba>
    1b52:	9b 8f       	std	Y+27, r25	; 0x1b
    1b54:	8a 8f       	std	Y+26, r24	; 0x1a
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <steppermotor3Write+0x3e2>
=======
    1f88:	68 a1       	ldd	r22, Y+32	; 0x20
    1f8a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f8c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f8e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f90:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9f 8f       	std	Y+31, r25	; 0x1f
    1f9a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fa0:	9b 8f       	std	Y+27, r25	; 0x1b
    1fa2:	8a 8f       	std	Y+26, r24	; 0x1a
    1fa4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fa6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <steppermotor3Write+0x3ba>
    1fac:	9b 8f       	std	Y+27, r25	; 0x1b
    1fae:	8a 8f       	std	Y+26, r24	; 0x1a
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <steppermotor3Write+0x3e2>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    1b58:	69 a5       	ldd	r22, Y+41	; 0x29
    1b5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b60:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	88 a7       	std	Y+40, r24	; 0x28
    1b6a:	88 a5       	ldd	r24, Y+40	; 0x28
    1b6c:	89 8f       	std	Y+25, r24	; 0x19
=======
    1fb2:	69 a5       	ldd	r22, Y+41	; 0x29
    1fb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fba:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	88 a7       	std	Y+40, r24	; 0x28
    1fc4:	88 a5       	ldd	r24, Y+40	; 0x28
    1fc6:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1b6e:	89 8d       	ldd	r24, Y+25	; 0x19
    1b70:	8a 95       	dec	r24
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <steppermotor3Write+0x3dc>
    1b74:	89 8f       	std	Y+25, r24	; 0x19
=======
    1fc8:	89 8d       	ldd	r24, Y+25	; 0x19
    1fca:	8a 95       	dec	r24
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <steppermotor3Write+0x3dc>
    1fce:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
void steppermotor3Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
    1b76:	8b a9       	ldd	r24, Y+51	; 0x33
    1b78:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	9c ab       	std	Y+52, r25	; 0x34
    1b7e:	8b ab       	std	Y+51, r24	; 0x33
    1b80:	8b a9       	ldd	r24, Y+51	; 0x33
    1b82:	9c a9       	ldd	r25, Y+52	; 0x34
    1b84:	88 30       	cpi	r24, 0x08	; 8
    1b86:	91 05       	cpc	r25, r1
    1b88:	0c f4       	brge	.+2      	; 0x1b8c <steppermotor3Write+0x3f8>
    1b8a:	16 ce       	rjmp	.-980    	; 0x17b8 <steppermotor3Write+0x24>
=======
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	9c ab       	std	Y+52, r25	; 0x34
    1fd8:	8b ab       	std	Y+51, r24	; 0x33
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fde:	88 30       	cpi	r24, 0x08	; 8
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	0c f4       	brge	.+2      	; 0x1fe6 <steppermotor3Write+0x3f8>
    1fe4:	16 ce       	rjmp	.-980    	; 0x1c12 <steppermotor3Write+0x24>
>>>>>>> Stashed changes
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
    1b8c:	1e aa       	std	Y+54, r1	; 0x36
    1b8e:	1d aa       	std	Y+53, r1	; 0x35
=======
    1fe6:	1e aa       	std	Y+54, r1	; 0x36
    1fe8:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
    }
}

void steppermotor3Write(int a)
{
    while(a  == 1)
<<<<<<< Updated upstream
    1b90:	8d a9       	ldd	r24, Y+53	; 0x35
    1b92:	9e a9       	ldd	r25, Y+54	; 0x36
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <steppermotor3Write+0x408>
    1b9a:	09 ce       	rjmp	.-1006   	; 0x17ae <steppermotor3Write+0x1a>
    1b9c:	f0 c1       	rjmp	.+992    	; 0x1f7e <steppermotor3Write+0x7ea>
=======
    1fea:	8d a9       	ldd	r24, Y+53	; 0x35
    1fec:	9e a9       	ldd	r25, Y+54	; 0x36
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <steppermotor3Write+0x408>
    1ff4:	09 ce       	rjmp	.-1006   	; 0x1c08 <steppermotor3Write+0x1a>
    1ff6:	f0 c1       	rjmp	.+992    	; 0x23d8 <__stack+0x1d9>
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
    1b9e:	88 e0       	ldi	r24, 0x08	; 8
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9a ab       	std	Y+50, r25	; 0x32
    1ba4:	89 ab       	std	Y+49, r24	; 0x31
    1ba6:	e3 c1       	rjmp	.+966    	; 0x1f6e <steppermotor3Write+0x7da>
        {
            switch (i)
    1ba8:	89 a9       	ldd	r24, Y+49	; 0x31
    1baa:	9a a9       	ldd	r25, Y+50	; 0x32
    1bac:	9a af       	std	Y+58, r25	; 0x3a
    1bae:	89 af       	std	Y+57, r24	; 0x39
    1bb0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bb4:	84 30       	cpi	r24, 0x04	; 4
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <steppermotor3Write+0x428>
    1bba:	a3 c0       	rjmp	.+326    	; 0x1d02 <steppermotor3Write+0x56e>
    1bbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1bbe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc0:	85 30       	cpi	r24, 0x05	; 5
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	94 f4       	brge	.+36     	; 0x1bea <steppermotor3Write+0x456>
    1bc6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	91 05       	cpc	r25, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <steppermotor3Write+0x43e>
    1bd0:	5e c0       	rjmp	.+188    	; 0x1c8e <steppermotor3Write+0x4fa>
    1bd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <steppermotor3Write+0x44a>
    1bdc:	75 c0       	rjmp	.+234    	; 0x1cc8 <steppermotor3Write+0x534>
    1bde:	89 ad       	ldd	r24, Y+57	; 0x39
    1be0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	91 05       	cpc	r25, r1
    1be6:	b1 f1       	breq	.+108    	; 0x1c54 <steppermotor3Write+0x4c0>
    1be8:	ff c0       	rjmp	.+510    	; 0x1de8 <steppermotor3Write+0x654>
    1bea:	89 ad       	ldd	r24, Y+57	; 0x39
    1bec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bee:	86 30       	cpi	r24, 0x06	; 6
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <steppermotor3Write+0x462>
    1bf4:	c0 c0       	rjmp	.+384    	; 0x1d76 <steppermotor3Write+0x5e2>
    1bf6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bfa:	86 30       	cpi	r24, 0x06	; 6
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	0c f4       	brge	.+2      	; 0x1c02 <steppermotor3Write+0x46e>
    1c00:	9d c0       	rjmp	.+314    	; 0x1d3c <steppermotor3Write+0x5a8>
    1c02:	89 ad       	ldd	r24, Y+57	; 0x39
    1c04:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c06:	87 30       	cpi	r24, 0x07	; 7
    1c08:	91 05       	cpc	r25, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <steppermotor3Write+0x47a>
    1c0c:	d1 c0       	rjmp	.+418    	; 0x1db0 <steppermotor3Write+0x61c>
    1c0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c10:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c12:	88 30       	cpi	r24, 0x08	; 8
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <steppermotor3Write+0x486>
    1c18:	e7 c0       	rjmp	.+462    	; 0x1de8 <steppermotor3Write+0x654>
            {
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c1a:	ab e0       	ldi	r26, 0x0B	; 11
    1c1c:	b1 e0       	ldi	r27, 0x01	; 1
    1c1e:	eb e0       	ldi	r30, 0x0B	; 11
    1c20:	f1 e0       	ldi	r31, 0x01	; 1
    1c22:	80 81       	ld	r24, Z
    1c24:	80 68       	ori	r24, 0x80	; 128
    1c26:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1c28:	ab e0       	ldi	r26, 0x0B	; 11
    1c2a:	b1 e0       	ldi	r27, 0x01	; 1
    1c2c:	eb e0       	ldi	r30, 0x0B	; 11
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	80 81       	ld	r24, Z
    1c32:	8f 7d       	andi	r24, 0xDF	; 223
    1c34:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1c36:	ab e0       	ldi	r26, 0x0B	; 11
    1c38:	b1 e0       	ldi	r27, 0x01	; 1
    1c3a:	eb e0       	ldi	r30, 0x0B	; 11
    1c3c:	f1 e0       	ldi	r31, 0x01	; 1
    1c3e:	80 81       	ld	r24, Z
    1c40:	87 7f       	andi	r24, 0xF7	; 247
    1c42:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1c44:	ab e0       	ldi	r26, 0x0B	; 11
    1c46:	b1 e0       	ldi	r27, 0x01	; 1
    1c48:	eb e0       	ldi	r30, 0x0B	; 11
    1c4a:	f1 e0       	ldi	r31, 0x01	; 1
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	8c 93       	st	X, r24
    1c52:	ca c0       	rjmp	.+404    	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c54:	ab e0       	ldi	r26, 0x0B	; 11
    1c56:	b1 e0       	ldi	r27, 0x01	; 1
    1c58:	eb e0       	ldi	r30, 0x0B	; 11
    1c5a:	f1 e0       	ldi	r31, 0x01	; 1
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 68       	ori	r24, 0x80	; 128
    1c60:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1c62:	ab e0       	ldi	r26, 0x0B	; 11
    1c64:	b1 e0       	ldi	r27, 0x01	; 1
    1c66:	eb e0       	ldi	r30, 0x0B	; 11
    1c68:	f1 e0       	ldi	r31, 0x01	; 1
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 62       	ori	r24, 0x20	; 32
    1c6e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1c70:	ab e0       	ldi	r26, 0x0B	; 11
    1c72:	b1 e0       	ldi	r27, 0x01	; 1
    1c74:	eb e0       	ldi	r30, 0x0B	; 11
    1c76:	f1 e0       	ldi	r31, 0x01	; 1
    1c78:	80 81       	ld	r24, Z
    1c7a:	87 7f       	andi	r24, 0xF7	; 247
    1c7c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1c7e:	ab e0       	ldi	r26, 0x0B	; 11
    1c80:	b1 e0       	ldi	r27, 0x01	; 1
    1c82:	eb e0       	ldi	r30, 0x0B	; 11
    1c84:	f1 e0       	ldi	r31, 0x01	; 1
    1c86:	80 81       	ld	r24, Z
    1c88:	8d 7f       	andi	r24, 0xFD	; 253
    1c8a:	8c 93       	st	X, r24
    1c8c:	ad c0       	rjmp	.+346    	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 2 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1c8e:	ab e0       	ldi	r26, 0x0B	; 11
    1c90:	b1 e0       	ldi	r27, 0x01	; 1
    1c92:	eb e0       	ldi	r30, 0x0B	; 11
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	80 81       	ld	r24, Z
    1c98:	8f 77       	andi	r24, 0x7F	; 127
    1c9a:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1c9c:	ab e0       	ldi	r26, 0x0B	; 11
    1c9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ca0:	eb e0       	ldi	r30, 0x0B	; 11
    1ca2:	f1 e0       	ldi	r31, 0x01	; 1
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1caa:	ab e0       	ldi	r26, 0x0B	; 11
    1cac:	b1 e0       	ldi	r27, 0x01	; 1
    1cae:	eb e0       	ldi	r30, 0x0B	; 11
    1cb0:	f1 e0       	ldi	r31, 0x01	; 1
    1cb2:	80 81       	ld	r24, Z
    1cb4:	87 7f       	andi	r24, 0xF7	; 247
    1cb6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cb8:	ab e0       	ldi	r26, 0x0B	; 11
    1cba:	b1 e0       	ldi	r27, 0x01	; 1
    1cbc:	eb e0       	ldi	r30, 0x0B	; 11
    1cbe:	f1 e0       	ldi	r31, 0x01	; 1
    1cc0:	80 81       	ld	r24, Z
    1cc2:	8d 7f       	andi	r24, 0xFD	; 253
    1cc4:	8c 93       	st	X, r24
    1cc6:	90 c0       	rjmp	.+288    	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1cc8:	ab e0       	ldi	r26, 0x0B	; 11
    1cca:	b1 e0       	ldi	r27, 0x01	; 1
    1ccc:	eb e0       	ldi	r30, 0x0B	; 11
    1cce:	f1 e0       	ldi	r31, 0x01	; 1
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 77       	andi	r24, 0x7F	; 127
    1cd4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1cd6:	ab e0       	ldi	r26, 0x0B	; 11
    1cd8:	b1 e0       	ldi	r27, 0x01	; 1
    1cda:	eb e0       	ldi	r30, 0x0B	; 11
    1cdc:	f1 e0       	ldi	r31, 0x01	; 1
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 62       	ori	r24, 0x20	; 32
    1ce2:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1ce4:	ab e0       	ldi	r26, 0x0B	; 11
    1ce6:	b1 e0       	ldi	r27, 0x01	; 1
    1ce8:	eb e0       	ldi	r30, 0x0B	; 11
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	80 81       	ld	r24, Z
    1cee:	88 60       	ori	r24, 0x08	; 8
    1cf0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cf2:	ab e0       	ldi	r26, 0x0B	; 11
    1cf4:	b1 e0       	ldi	r27, 0x01	; 1
    1cf6:	eb e0       	ldi	r30, 0x0B	; 11
    1cf8:	f1 e0       	ldi	r31, 0x01	; 1
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8d 7f       	andi	r24, 0xFD	; 253
    1cfe:	8c 93       	st	X, r24
    1d00:	73 c0       	rjmp	.+230    	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d02:	ab e0       	ldi	r26, 0x0B	; 11
    1d04:	b1 e0       	ldi	r27, 0x01	; 1
    1d06:	eb e0       	ldi	r30, 0x0B	; 11
    1d08:	f1 e0       	ldi	r31, 0x01	; 1
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 77       	andi	r24, 0x7F	; 127
    1d0e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d10:	ab e0       	ldi	r26, 0x0B	; 11
    1d12:	b1 e0       	ldi	r27, 0x01	; 1
    1d14:	eb e0       	ldi	r30, 0x0B	; 11
    1d16:	f1 e0       	ldi	r31, 0x01	; 1
    1d18:	80 81       	ld	r24, Z
    1d1a:	8f 7d       	andi	r24, 0xDF	; 223
    1d1c:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d1e:	ab e0       	ldi	r26, 0x0B	; 11
    1d20:	b1 e0       	ldi	r27, 0x01	; 1
    1d22:	eb e0       	ldi	r30, 0x0B	; 11
    1d24:	f1 e0       	ldi	r31, 0x01	; 1
    1d26:	80 81       	ld	r24, Z
    1d28:	88 60       	ori	r24, 0x08	; 8
    1d2a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d2c:	ab e0       	ldi	r26, 0x0B	; 11
    1d2e:	b1 e0       	ldi	r27, 0x01	; 1
    1d30:	eb e0       	ldi	r30, 0x0B	; 11
    1d32:	f1 e0       	ldi	r31, 0x01	; 1
    1d34:	80 81       	ld	r24, Z
    1d36:	8d 7f       	andi	r24, 0xFD	; 253
    1d38:	8c 93       	st	X, r24
    1d3a:	56 c0       	rjmp	.+172    	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d3c:	ab e0       	ldi	r26, 0x0B	; 11
    1d3e:	b1 e0       	ldi	r27, 0x01	; 1
    1d40:	eb e0       	ldi	r30, 0x0B	; 11
    1d42:	f1 e0       	ldi	r31, 0x01	; 1
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 77       	andi	r24, 0x7F	; 127
    1d48:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d4a:	ab e0       	ldi	r26, 0x0B	; 11
    1d4c:	b1 e0       	ldi	r27, 0x01	; 1
    1d4e:	eb e0       	ldi	r30, 0x0B	; 11
    1d50:	f1 e0       	ldi	r31, 0x01	; 1
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 7d       	andi	r24, 0xDF	; 223
    1d56:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d58:	ab e0       	ldi	r26, 0x0B	; 11
    1d5a:	b1 e0       	ldi	r27, 0x01	; 1
    1d5c:	eb e0       	ldi	r30, 0x0B	; 11
    1d5e:	f1 e0       	ldi	r31, 0x01	; 1
    1d60:	80 81       	ld	r24, Z
    1d62:	88 60       	ori	r24, 0x08	; 8
    1d64:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1d66:	ab e0       	ldi	r26, 0x0B	; 11
    1d68:	b1 e0       	ldi	r27, 0x01	; 1
    1d6a:	eb e0       	ldi	r30, 0x0B	; 11
    1d6c:	f1 e0       	ldi	r31, 0x01	; 1
    1d6e:	80 81       	ld	r24, Z
    1d70:	82 60       	ori	r24, 0x02	; 2
    1d72:	8c 93       	st	X, r24
    1d74:	39 c0       	rjmp	.+114    	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d76:	ab e0       	ldi	r26, 0x0B	; 11
    1d78:	b1 e0       	ldi	r27, 0x01	; 1
    1d7a:	eb e0       	ldi	r30, 0x0B	; 11
    1d7c:	f1 e0       	ldi	r31, 0x01	; 1
    1d7e:	80 81       	ld	r24, Z
    1d80:	8f 77       	andi	r24, 0x7F	; 127
    1d82:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d84:	ab e0       	ldi	r26, 0x0B	; 11
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	eb e0       	ldi	r30, 0x0B	; 11
    1d8a:	f1 e0       	ldi	r31, 0x01	; 1
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7d       	andi	r24, 0xDF	; 223
    1d90:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1d92:	ab e0       	ldi	r26, 0x0B	; 11
    1d94:	b1 e0       	ldi	r27, 0x01	; 1
    1d96:	eb e0       	ldi	r30, 0x0B	; 11
    1d98:	f1 e0       	ldi	r31, 0x01	; 1
    1d9a:	80 81       	ld	r24, Z
    1d9c:	87 7f       	andi	r24, 0xF7	; 247
    1d9e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1da0:	ab e0       	ldi	r26, 0x0B	; 11
    1da2:	b1 e0       	ldi	r27, 0x01	; 1
    1da4:	eb e0       	ldi	r30, 0x0B	; 11
    1da6:	f1 e0       	ldi	r31, 0x01	; 1
    1da8:	80 81       	ld	r24, Z
    1daa:	82 60       	ori	r24, 0x02	; 2
    1dac:	8c 93       	st	X, r24
    1dae:	1c c0       	rjmp	.+56     	; 0x1de8 <steppermotor3Write+0x654>
                break;
            case 7 :
                PORTStepper3 |= (1 << PStepper3_1);
    1db0:	ab e0       	ldi	r26, 0x0B	; 11
    1db2:	b1 e0       	ldi	r27, 0x01	; 1
    1db4:	eb e0       	ldi	r30, 0x0B	; 11
    1db6:	f1 e0       	ldi	r31, 0x01	; 1
    1db8:	80 81       	ld	r24, Z
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1dbe:	ab e0       	ldi	r26, 0x0B	; 11
    1dc0:	b1 e0       	ldi	r27, 0x01	; 1
    1dc2:	eb e0       	ldi	r30, 0x0B	; 11
    1dc4:	f1 e0       	ldi	r31, 0x01	; 1
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8f 7d       	andi	r24, 0xDF	; 223
    1dca:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1dcc:	ab e0       	ldi	r26, 0x0B	; 11
    1dce:	b1 e0       	ldi	r27, 0x01	; 1
    1dd0:	eb e0       	ldi	r30, 0x0B	; 11
    1dd2:	f1 e0       	ldi	r31, 0x01	; 1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	87 7f       	andi	r24, 0xF7	; 247
    1dd8:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1dda:	ab e0       	ldi	r26, 0x0B	; 11
    1ddc:	b1 e0       	ldi	r27, 0x01	; 1
    1dde:	eb e0       	ldi	r30, 0x0B	; 11
    1de0:	f1 e0       	ldi	r31, 0x01	; 1
    1de2:	80 81       	ld	r24, Z
    1de4:	82 60       	ori	r24, 0x02	; 2
    1de6:	8c 93       	st	X, r24
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	aa e7       	ldi	r26, 0x7A	; 122
    1dee:	b4 e4       	ldi	r27, 0x44	; 68
    1df0:	8d 8b       	std	Y+21, r24	; 0x15
    1df2:	9e 8b       	std	Y+22, r25	; 0x16
    1df4:	af 8b       	std	Y+23, r26	; 0x17
    1df6:	b8 8f       	std	Y+24, r27	; 0x18
=======
    1ff8:	88 e0       	ldi	r24, 0x08	; 8
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a ab       	std	Y+50, r25	; 0x32
    1ffe:	89 ab       	std	Y+49, r24	; 0x31
    2000:	e3 c1       	rjmp	.+966    	; 0x23c8 <__stack+0x1c9>
        {
            switch (i)
    2002:	89 a9       	ldd	r24, Y+49	; 0x31
    2004:	9a a9       	ldd	r25, Y+50	; 0x32
    2006:	9a af       	std	Y+58, r25	; 0x3a
    2008:	89 af       	std	Y+57, r24	; 0x39
    200a:	89 ad       	ldd	r24, Y+57	; 0x39
    200c:	9a ad       	ldd	r25, Y+58	; 0x3a
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	91 05       	cpc	r25, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <steppermotor3Write+0x428>
    2014:	a3 c0       	rjmp	.+326    	; 0x215c <steppermotor3Write+0x56e>
    2016:	89 ad       	ldd	r24, Y+57	; 0x39
    2018:	9a ad       	ldd	r25, Y+58	; 0x3a
    201a:	85 30       	cpi	r24, 0x05	; 5
    201c:	91 05       	cpc	r25, r1
    201e:	94 f4       	brge	.+36     	; 0x2044 <steppermotor3Write+0x456>
    2020:	89 ad       	ldd	r24, Y+57	; 0x39
    2022:	9a ad       	ldd	r25, Y+58	; 0x3a
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	91 05       	cpc	r25, r1
    2028:	09 f4       	brne	.+2      	; 0x202c <steppermotor3Write+0x43e>
    202a:	5e c0       	rjmp	.+188    	; 0x20e8 <steppermotor3Write+0x4fa>
    202c:	89 ad       	ldd	r24, Y+57	; 0x39
    202e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	0c f0       	brlt	.+2      	; 0x2038 <steppermotor3Write+0x44a>
    2036:	75 c0       	rjmp	.+234    	; 0x2122 <steppermotor3Write+0x534>
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	9a ad       	ldd	r25, Y+58	; 0x3a
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	91 05       	cpc	r25, r1
    2040:	b1 f1       	breq	.+108    	; 0x20ae <steppermotor3Write+0x4c0>
    2042:	ff c0       	rjmp	.+510    	; 0x2242 <__stack+0x43>
    2044:	89 ad       	ldd	r24, Y+57	; 0x39
    2046:	9a ad       	ldd	r25, Y+58	; 0x3a
    2048:	86 30       	cpi	r24, 0x06	; 6
    204a:	91 05       	cpc	r25, r1
    204c:	09 f4       	brne	.+2      	; 0x2050 <steppermotor3Write+0x462>
    204e:	c0 c0       	rjmp	.+384    	; 0x21d0 <steppermotor3Write+0x5e2>
    2050:	89 ad       	ldd	r24, Y+57	; 0x39
    2052:	9a ad       	ldd	r25, Y+58	; 0x3a
    2054:	86 30       	cpi	r24, 0x06	; 6
    2056:	91 05       	cpc	r25, r1
    2058:	0c f4       	brge	.+2      	; 0x205c <steppermotor3Write+0x46e>
    205a:	9d c0       	rjmp	.+314    	; 0x2196 <steppermotor3Write+0x5a8>
    205c:	89 ad       	ldd	r24, Y+57	; 0x39
    205e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2060:	87 30       	cpi	r24, 0x07	; 7
    2062:	91 05       	cpc	r25, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <steppermotor3Write+0x47a>
    2066:	d1 c0       	rjmp	.+418    	; 0x220a <__stack+0xb>
    2068:	89 ad       	ldd	r24, Y+57	; 0x39
    206a:	9a ad       	ldd	r25, Y+58	; 0x3a
    206c:	88 30       	cpi	r24, 0x08	; 8
    206e:	91 05       	cpc	r25, r1
    2070:	09 f0       	breq	.+2      	; 0x2074 <steppermotor3Write+0x486>
    2072:	e7 c0       	rjmp	.+462    	; 0x2242 <__stack+0x43>
            {
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    2074:	ab e0       	ldi	r26, 0x0B	; 11
    2076:	b1 e0       	ldi	r27, 0x01	; 1
    2078:	eb e0       	ldi	r30, 0x0B	; 11
    207a:	f1 e0       	ldi	r31, 0x01	; 1
    207c:	80 81       	ld	r24, Z
    207e:	80 68       	ori	r24, 0x80	; 128
    2080:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2082:	ab e0       	ldi	r26, 0x0B	; 11
    2084:	b1 e0       	ldi	r27, 0x01	; 1
    2086:	eb e0       	ldi	r30, 0x0B	; 11
    2088:	f1 e0       	ldi	r31, 0x01	; 1
    208a:	80 81       	ld	r24, Z
    208c:	8f 7d       	andi	r24, 0xDF	; 223
    208e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2090:	ab e0       	ldi	r26, 0x0B	; 11
    2092:	b1 e0       	ldi	r27, 0x01	; 1
    2094:	eb e0       	ldi	r30, 0x0B	; 11
    2096:	f1 e0       	ldi	r31, 0x01	; 1
    2098:	80 81       	ld	r24, Z
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    209e:	ab e0       	ldi	r26, 0x0B	; 11
    20a0:	b1 e0       	ldi	r27, 0x01	; 1
    20a2:	eb e0       	ldi	r30, 0x0B	; 11
    20a4:	f1 e0       	ldi	r31, 0x01	; 1
    20a6:	80 81       	ld	r24, Z
    20a8:	8d 7f       	andi	r24, 0xFD	; 253
    20aa:	8c 93       	st	X, r24
    20ac:	ca c0       	rjmp	.+404    	; 0x2242 <__stack+0x43>
                break;
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    20ae:	ab e0       	ldi	r26, 0x0B	; 11
    20b0:	b1 e0       	ldi	r27, 0x01	; 1
    20b2:	eb e0       	ldi	r30, 0x0B	; 11
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	80 81       	ld	r24, Z
    20b8:	80 68       	ori	r24, 0x80	; 128
    20ba:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    20bc:	ab e0       	ldi	r26, 0x0B	; 11
    20be:	b1 e0       	ldi	r27, 0x01	; 1
    20c0:	eb e0       	ldi	r30, 0x0B	; 11
    20c2:	f1 e0       	ldi	r31, 0x01	; 1
    20c4:	80 81       	ld	r24, Z
    20c6:	80 62       	ori	r24, 0x20	; 32
    20c8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    20ca:	ab e0       	ldi	r26, 0x0B	; 11
    20cc:	b1 e0       	ldi	r27, 0x01	; 1
    20ce:	eb e0       	ldi	r30, 0x0B	; 11
    20d0:	f1 e0       	ldi	r31, 0x01	; 1
    20d2:	80 81       	ld	r24, Z
    20d4:	87 7f       	andi	r24, 0xF7	; 247
    20d6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    20d8:	ab e0       	ldi	r26, 0x0B	; 11
    20da:	b1 e0       	ldi	r27, 0x01	; 1
    20dc:	eb e0       	ldi	r30, 0x0B	; 11
    20de:	f1 e0       	ldi	r31, 0x01	; 1
    20e0:	80 81       	ld	r24, Z
    20e2:	8d 7f       	andi	r24, 0xFD	; 253
    20e4:	8c 93       	st	X, r24
    20e6:	ad c0       	rjmp	.+346    	; 0x2242 <__stack+0x43>
                break;
            case 2 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    20e8:	ab e0       	ldi	r26, 0x0B	; 11
    20ea:	b1 e0       	ldi	r27, 0x01	; 1
    20ec:	eb e0       	ldi	r30, 0x0B	; 11
    20ee:	f1 e0       	ldi	r31, 0x01	; 1
    20f0:	80 81       	ld	r24, Z
    20f2:	8f 77       	andi	r24, 0x7F	; 127
    20f4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    20f6:	ab e0       	ldi	r26, 0x0B	; 11
    20f8:	b1 e0       	ldi	r27, 0x01	; 1
    20fa:	eb e0       	ldi	r30, 0x0B	; 11
    20fc:	f1 e0       	ldi	r31, 0x01	; 1
    20fe:	80 81       	ld	r24, Z
    2100:	80 62       	ori	r24, 0x20	; 32
    2102:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2104:	ab e0       	ldi	r26, 0x0B	; 11
    2106:	b1 e0       	ldi	r27, 0x01	; 1
    2108:	eb e0       	ldi	r30, 0x0B	; 11
    210a:	f1 e0       	ldi	r31, 0x01	; 1
    210c:	80 81       	ld	r24, Z
    210e:	87 7f       	andi	r24, 0xF7	; 247
    2110:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2112:	ab e0       	ldi	r26, 0x0B	; 11
    2114:	b1 e0       	ldi	r27, 0x01	; 1
    2116:	eb e0       	ldi	r30, 0x0B	; 11
    2118:	f1 e0       	ldi	r31, 0x01	; 1
    211a:	80 81       	ld	r24, Z
    211c:	8d 7f       	andi	r24, 0xFD	; 253
    211e:	8c 93       	st	X, r24
    2120:	90 c0       	rjmp	.+288    	; 0x2242 <__stack+0x43>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2122:	ab e0       	ldi	r26, 0x0B	; 11
    2124:	b1 e0       	ldi	r27, 0x01	; 1
    2126:	eb e0       	ldi	r30, 0x0B	; 11
    2128:	f1 e0       	ldi	r31, 0x01	; 1
    212a:	80 81       	ld	r24, Z
    212c:	8f 77       	andi	r24, 0x7F	; 127
    212e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    2130:	ab e0       	ldi	r26, 0x0B	; 11
    2132:	b1 e0       	ldi	r27, 0x01	; 1
    2134:	eb e0       	ldi	r30, 0x0B	; 11
    2136:	f1 e0       	ldi	r31, 0x01	; 1
    2138:	80 81       	ld	r24, Z
    213a:	80 62       	ori	r24, 0x20	; 32
    213c:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    213e:	ab e0       	ldi	r26, 0x0B	; 11
    2140:	b1 e0       	ldi	r27, 0x01	; 1
    2142:	eb e0       	ldi	r30, 0x0B	; 11
    2144:	f1 e0       	ldi	r31, 0x01	; 1
    2146:	80 81       	ld	r24, Z
    2148:	88 60       	ori	r24, 0x08	; 8
    214a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    214c:	ab e0       	ldi	r26, 0x0B	; 11
    214e:	b1 e0       	ldi	r27, 0x01	; 1
    2150:	eb e0       	ldi	r30, 0x0B	; 11
    2152:	f1 e0       	ldi	r31, 0x01	; 1
    2154:	80 81       	ld	r24, Z
    2156:	8d 7f       	andi	r24, 0xFD	; 253
    2158:	8c 93       	st	X, r24
    215a:	73 c0       	rjmp	.+230    	; 0x2242 <__stack+0x43>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    215c:	ab e0       	ldi	r26, 0x0B	; 11
    215e:	b1 e0       	ldi	r27, 0x01	; 1
    2160:	eb e0       	ldi	r30, 0x0B	; 11
    2162:	f1 e0       	ldi	r31, 0x01	; 1
    2164:	80 81       	ld	r24, Z
    2166:	8f 77       	andi	r24, 0x7F	; 127
    2168:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    216a:	ab e0       	ldi	r26, 0x0B	; 11
    216c:	b1 e0       	ldi	r27, 0x01	; 1
    216e:	eb e0       	ldi	r30, 0x0B	; 11
    2170:	f1 e0       	ldi	r31, 0x01	; 1
    2172:	80 81       	ld	r24, Z
    2174:	8f 7d       	andi	r24, 0xDF	; 223
    2176:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    2178:	ab e0       	ldi	r26, 0x0B	; 11
    217a:	b1 e0       	ldi	r27, 0x01	; 1
    217c:	eb e0       	ldi	r30, 0x0B	; 11
    217e:	f1 e0       	ldi	r31, 0x01	; 1
    2180:	80 81       	ld	r24, Z
    2182:	88 60       	ori	r24, 0x08	; 8
    2184:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2186:	ab e0       	ldi	r26, 0x0B	; 11
    2188:	b1 e0       	ldi	r27, 0x01	; 1
    218a:	eb e0       	ldi	r30, 0x0B	; 11
    218c:	f1 e0       	ldi	r31, 0x01	; 1
    218e:	80 81       	ld	r24, Z
    2190:	8d 7f       	andi	r24, 0xFD	; 253
    2192:	8c 93       	st	X, r24
    2194:	56 c0       	rjmp	.+172    	; 0x2242 <__stack+0x43>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2196:	ab e0       	ldi	r26, 0x0B	; 11
    2198:	b1 e0       	ldi	r27, 0x01	; 1
    219a:	eb e0       	ldi	r30, 0x0B	; 11
    219c:	f1 e0       	ldi	r31, 0x01	; 1
    219e:	80 81       	ld	r24, Z
    21a0:	8f 77       	andi	r24, 0x7F	; 127
    21a2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    21a4:	ab e0       	ldi	r26, 0x0B	; 11
    21a6:	b1 e0       	ldi	r27, 0x01	; 1
    21a8:	eb e0       	ldi	r30, 0x0B	; 11
    21aa:	f1 e0       	ldi	r31, 0x01	; 1
    21ac:	80 81       	ld	r24, Z
    21ae:	8f 7d       	andi	r24, 0xDF	; 223
    21b0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    21b2:	ab e0       	ldi	r26, 0x0B	; 11
    21b4:	b1 e0       	ldi	r27, 0x01	; 1
    21b6:	eb e0       	ldi	r30, 0x0B	; 11
    21b8:	f1 e0       	ldi	r31, 0x01	; 1
    21ba:	80 81       	ld	r24, Z
    21bc:	88 60       	ori	r24, 0x08	; 8
    21be:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    21c0:	ab e0       	ldi	r26, 0x0B	; 11
    21c2:	b1 e0       	ldi	r27, 0x01	; 1
    21c4:	eb e0       	ldi	r30, 0x0B	; 11
    21c6:	f1 e0       	ldi	r31, 0x01	; 1
    21c8:	80 81       	ld	r24, Z
    21ca:	82 60       	ori	r24, 0x02	; 2
    21cc:	8c 93       	st	X, r24
    21ce:	39 c0       	rjmp	.+114    	; 0x2242 <__stack+0x43>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    21d0:	ab e0       	ldi	r26, 0x0B	; 11
    21d2:	b1 e0       	ldi	r27, 0x01	; 1
    21d4:	eb e0       	ldi	r30, 0x0B	; 11
    21d6:	f1 e0       	ldi	r31, 0x01	; 1
    21d8:	80 81       	ld	r24, Z
    21da:	8f 77       	andi	r24, 0x7F	; 127
    21dc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    21de:	ab e0       	ldi	r26, 0x0B	; 11
    21e0:	b1 e0       	ldi	r27, 0x01	; 1
    21e2:	eb e0       	ldi	r30, 0x0B	; 11
    21e4:	f1 e0       	ldi	r31, 0x01	; 1
    21e6:	80 81       	ld	r24, Z
    21e8:	8f 7d       	andi	r24, 0xDF	; 223
    21ea:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    21ec:	ab e0       	ldi	r26, 0x0B	; 11
    21ee:	b1 e0       	ldi	r27, 0x01	; 1
    21f0:	eb e0       	ldi	r30, 0x0B	; 11
    21f2:	f1 e0       	ldi	r31, 0x01	; 1
    21f4:	80 81       	ld	r24, Z
    21f6:	87 7f       	andi	r24, 0xF7	; 247
    21f8:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    21fa:	ab e0       	ldi	r26, 0x0B	; 11
    21fc:	b1 e0       	ldi	r27, 0x01	; 1
    21fe:	eb e0       	ldi	r30, 0x0B	; 11
    2200:	f1 e0       	ldi	r31, 0x01	; 1
    2202:	80 81       	ld	r24, Z
    2204:	82 60       	ori	r24, 0x02	; 2
    2206:	8c 93       	st	X, r24
    2208:	1c c0       	rjmp	.+56     	; 0x2242 <__stack+0x43>
                break;
            case 7 :
                PORTStepper3 |= (1 << PStepper3_1);
    220a:	ab e0       	ldi	r26, 0x0B	; 11
    220c:	b1 e0       	ldi	r27, 0x01	; 1
    220e:	eb e0       	ldi	r30, 0x0B	; 11
    2210:	f1 e0       	ldi	r31, 0x01	; 1
    2212:	80 81       	ld	r24, Z
    2214:	80 68       	ori	r24, 0x80	; 128
    2216:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2218:	ab e0       	ldi	r26, 0x0B	; 11
    221a:	b1 e0       	ldi	r27, 0x01	; 1
    221c:	eb e0       	ldi	r30, 0x0B	; 11
    221e:	f1 e0       	ldi	r31, 0x01	; 1
    2220:	80 81       	ld	r24, Z
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2226:	ab e0       	ldi	r26, 0x0B	; 11
    2228:	b1 e0       	ldi	r27, 0x01	; 1
    222a:	eb e0       	ldi	r30, 0x0B	; 11
    222c:	f1 e0       	ldi	r31, 0x01	; 1
    222e:	80 81       	ld	r24, Z
    2230:	87 7f       	andi	r24, 0xF7	; 247
    2232:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    2234:	ab e0       	ldi	r26, 0x0B	; 11
    2236:	b1 e0       	ldi	r27, 0x01	; 1
    2238:	eb e0       	ldi	r30, 0x0B	; 11
    223a:	f1 e0       	ldi	r31, 0x01	; 1
    223c:	80 81       	ld	r24, Z
    223e:	82 60       	ori	r24, 0x02	; 2
    2240:	8c 93       	st	X, r24
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	aa e7       	ldi	r26, 0x7A	; 122
    2248:	b4 e4       	ldi	r27, 0x44	; 68
    224a:	8d 8b       	std	Y+21, r24	; 0x15
    224c:	9e 8b       	std	Y+22, r25	; 0x16
    224e:	af 8b       	std	Y+23, r26	; 0x17
    2250:	b8 8f       	std	Y+24, r27	; 0x18
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    1df8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1e00:	2b ea       	ldi	r18, 0xAB	; 171
    1e02:	3a ea       	ldi	r19, 0xAA	; 170
    1e04:	4a ea       	ldi	r20, 0xAA	; 170
    1e06:	50 e4       	ldi	r21, 0x40	; 64
    1e08:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	89 8b       	std	Y+17, r24	; 0x11
    1e12:	9a 8b       	std	Y+18, r25	; 0x12
    1e14:	ab 8b       	std	Y+19, r26	; 0x13
    1e16:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e18:	69 89       	ldd	r22, Y+17	; 0x11
    1e1a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	1c f4       	brge	.+6      	; 0x1e36 <steppermotor3Write+0x6a2>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	88 8b       	std	Y+16, r24	; 0x10
    1e34:	91 c0       	rjmp	.+290    	; 0x1f58 <steppermotor3Write+0x7c4>
	else if (__tmp > 255)
    1e36:	69 89       	ldd	r22, Y+17	; 0x11
    1e38:	7a 89       	ldd	r23, Y+18	; 0x12
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	0c f0       	brlt	.+2      	; 0x1e50 <steppermotor3Write+0x6bc>
    1e4e:	7b c0       	rjmp	.+246    	; 0x1f46 <steppermotor3Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1e50:	6d 89       	ldd	r22, Y+21	; 0x15
    1e52:	7e 89       	ldd	r23, Y+22	; 0x16
    1e54:	8f 89       	ldd	r24, Y+23	; 0x17
    1e56:	98 8d       	ldd	r25, Y+24	; 0x18
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	54 e4       	ldi	r21, 0x44	; 68
    1e60:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8c 87       	std	Y+12, r24	; 0x0c
    1e6a:	9d 87       	std	Y+13, r25	; 0x0d
    1e6c:	ae 87       	std	Y+14, r26	; 0x0e
    1e6e:	bf 87       	std	Y+15, r27	; 0x0f
=======
    2252:	6d 89       	ldd	r22, Y+21	; 0x15
    2254:	7e 89       	ldd	r23, Y+22	; 0x16
    2256:	8f 89       	ldd	r24, Y+23	; 0x17
    2258:	98 8d       	ldd	r25, Y+24	; 0x18
    225a:	2b ea       	ldi	r18, 0xAB	; 171
    225c:	3a ea       	ldi	r19, 0xAA	; 170
    225e:	4a ea       	ldi	r20, 0xAA	; 170
    2260:	50 e4       	ldi	r21, 0x40	; 64
    2262:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	89 8b       	std	Y+17, r24	; 0x11
    226c:	9a 8b       	std	Y+18, r25	; 0x12
    226e:	ab 8b       	std	Y+19, r26	; 0x13
    2270:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2272:	69 89       	ldd	r22, Y+17	; 0x11
    2274:	7a 89       	ldd	r23, Y+18	; 0x12
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	1c f4       	brge	.+6      	; 0x2290 <__stack+0x91>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	88 8b       	std	Y+16, r24	; 0x10
    228e:	91 c0       	rjmp	.+290    	; 0x23b2 <__stack+0x1b3>
	else if (__tmp > 255)
    2290:	69 89       	ldd	r22, Y+17	; 0x11
    2292:	7a 89       	ldd	r23, Y+18	; 0x12
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	53 e4       	ldi	r21, 0x43	; 67
    22a0:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	0c f0       	brlt	.+2      	; 0x22aa <__stack+0xab>
    22a8:	7b c0       	rjmp	.+246    	; 0x23a0 <__stack+0x1a1>
	{
		_delay_ms(__us / 1000.0);
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a e7       	ldi	r20, 0x7A	; 122
    22b8:	54 e4       	ldi	r21, 0x44	; 68
    22ba:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	8c 87       	std	Y+12, r24	; 0x0c
    22c4:	9d 87       	std	Y+13, r25	; 0x0d
    22c6:	ae 87       	std	Y+14, r26	; 0x0e
    22c8:	bf 87       	std	Y+15, r27	; 0x0f
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    1e70:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e72:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	55 e4       	ldi	r21, 0x45	; 69
    1e80:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	88 87       	std	Y+8, r24	; 0x08
    1e8a:	99 87       	std	Y+9, r25	; 0x09
    1e8c:	aa 87       	std	Y+10, r26	; 0x0a
    1e8e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e90:	68 85       	ldd	r22, Y+8	; 0x08
    1e92:	79 85       	ldd	r23, Y+9	; 0x09
    1e94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <steppermotor3Write+0x71e>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9f 83       	std	Y+7, r25	; 0x07
    1eae:	8e 83       	std	Y+6, r24	; 0x06
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <steppermotor3Write+0x79c>
	else if (__tmp > 65535)
    1eb2:	68 85       	ldd	r22, Y+8	; 0x08
    1eb4:	79 85       	ldd	r23, Y+9	; 0x09
    1eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <steppermotor3Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ecc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ece:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9f 83       	std	Y+7, r25	; 0x07
    1ef0:	8e 83       	std	Y+6, r24	; 0x06
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <steppermotor3Write+0x77e>
    1ef4:	80 e9       	ldi	r24, 0x90	; 144
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	9d 83       	std	Y+5, r25	; 0x05
    1efa:	8c 83       	std	Y+4, r24	; 0x04
=======
    22ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    22cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    22d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a e7       	ldi	r20, 0x7A	; 122
    22d8:	55 e4       	ldi	r21, 0x45	; 69
    22da:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	88 87       	std	Y+8, r24	; 0x08
    22e4:	99 87       	std	Y+9, r25	; 0x09
    22e6:	aa 87       	std	Y+10, r26	; 0x0a
    22e8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22ea:	68 85       	ldd	r22, Y+8	; 0x08
    22ec:	79 85       	ldd	r23, Y+9	; 0x09
    22ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <__stack+0x10d>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9f 83       	std	Y+7, r25	; 0x07
    2308:	8e 83       	std	Y+6, r24	; 0x06
    230a:	3f c0       	rjmp	.+126    	; 0x238a <__stack+0x18b>
	else if (__tmp > 65535)
    230c:	68 85       	ldd	r22, Y+8	; 0x08
    230e:	79 85       	ldd	r23, Y+9	; 0x09
    2310:	8a 85       	ldd	r24, Y+10	; 0x0a
    2312:	9b 85       	ldd	r25, Y+11	; 0x0b
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <__stack+0x177>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6c 85       	ldd	r22, Y+12	; 0x0c
    2326:	7d 85       	ldd	r23, Y+13	; 0x0d
    2328:	8e 85       	ldd	r24, Y+14	; 0x0e
    232a:	9f 85       	ldd	r25, Y+15	; 0x0f
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9f 83       	std	Y+7, r25	; 0x07
    234a:	8e 83       	std	Y+6, r24	; 0x06
    234c:	0f c0       	rjmp	.+30     	; 0x236c <__stack+0x16d>
    234e:	80 e9       	ldi	r24, 0x90	; 144
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	9d 83       	std	Y+5, r25	; 0x05
    2354:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <steppermotor3Write+0x76c>
    1f04:	9d 83       	std	Y+5, r25	; 0x05
    1f06:	8c 83       	std	Y+4, r24	; 0x04
=======
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	9d 81       	ldd	r25, Y+5	; 0x05
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <__stack+0x15b>
    235e:	9d 83       	std	Y+5, r25	; 0x05
    2360:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    1f08:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9f 83       	std	Y+7, r25	; 0x07
    1f10:	8e 83       	std	Y+6, r24	; 0x06
=======
    2362:	8e 81       	ldd	r24, Y+6	; 0x06
    2364:	9f 81       	ldd	r25, Y+7	; 0x07
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9f 83       	std	Y+7, r25	; 0x07
    236a:	8e 83       	std	Y+6, r24	; 0x06
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    1f12:	8e 81       	ldd	r24, Y+6	; 0x06
    1f14:	9f 81       	ldd	r25, Y+7	; 0x07
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <steppermotor3Write+0x760>
    1f1a:	24 c0       	rjmp	.+72     	; 0x1f64 <steppermotor3Write+0x7d0>
=======
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	9f 81       	ldd	r25, Y+7	; 0x07
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <__stack+0x14f>
    2374:	24 c0       	rjmp	.+72     	; 0x23be <__stack+0x1bf>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    1f1c:	68 85       	ldd	r22, Y+8	; 0x08
    1f1e:	79 85       	ldd	r23, Y+9	; 0x09
    1f20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f22:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f24:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9f 83       	std	Y+7, r25	; 0x07
    1f2e:	8e 83       	std	Y+6, r24	; 0x06
    1f30:	8e 81       	ldd	r24, Y+6	; 0x06
    1f32:	9f 81       	ldd	r25, Y+7	; 0x07
    1f34:	9b 83       	std	Y+3, r25	; 0x03
    1f36:	8a 83       	std	Y+2, r24	; 0x02
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <steppermotor3Write+0x7a8>
    1f40:	9b 83       	std	Y+3, r25	; 0x03
    1f42:	8a 83       	std	Y+2, r24	; 0x02
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <steppermotor3Write+0x7d0>
=======
    2376:	68 85       	ldd	r22, Y+8	; 0x08
    2378:	79 85       	ldd	r23, Y+9	; 0x09
    237a:	8a 85       	ldd	r24, Y+10	; 0x0a
    237c:	9b 85       	ldd	r25, Y+11	; 0x0b
    237e:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9f 83       	std	Y+7, r25	; 0x07
    2388:	8e 83       	std	Y+6, r24	; 0x06
    238a:	8e 81       	ldd	r24, Y+6	; 0x06
    238c:	9f 81       	ldd	r25, Y+7	; 0x07
    238e:	9b 83       	std	Y+3, r25	; 0x03
    2390:	8a 83       	std	Y+2, r24	; 0x02
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <__stack+0x197>
    239a:	9b 83       	std	Y+3, r25	; 0x03
    239c:	8a 83       	std	Y+2, r24	; 0x02
    239e:	0f c0       	rjmp	.+30     	; 0x23be <__stack+0x1bf>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    1f46:	69 89       	ldd	r22, Y+17	; 0x11
    1f48:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	88 8b       	std	Y+16, r24	; 0x10
    1f58:	88 89       	ldd	r24, Y+16	; 0x10
    1f5a:	89 83       	std	Y+1, r24	; 0x01
=======
    23a0:	69 89       	ldd	r22, Y+17	; 0x11
    23a2:	7a 89       	ldd	r23, Y+18	; 0x12
    23a4:	8b 89       	ldd	r24, Y+19	; 0x13
    23a6:	9c 89       	ldd	r25, Y+20	; 0x14
    23a8:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	88 8b       	std	Y+16, r24	; 0x10
    23b2:	88 89       	ldd	r24, Y+16	; 0x10
    23b4:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	8a 95       	dec	r24
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <steppermotor3Write+0x7ca>
    1f62:	89 83       	std	Y+1, r24	; 0x01
=======
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	8a 95       	dec	r24
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <__stack+0x1b9>
    23bc:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
    1f64:	89 a9       	ldd	r24, Y+49	; 0x31
    1f66:	9a a9       	ldd	r25, Y+50	; 0x32
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	9a ab       	std	Y+50, r25	; 0x32
    1f6c:	89 ab       	std	Y+49, r24	; 0x31
    1f6e:	89 a9       	ldd	r24, Y+49	; 0x31
    1f70:	9a a9       	ldd	r25, Y+50	; 0x32
    1f72:	18 16       	cp	r1, r24
    1f74:	19 06       	cpc	r1, r25
    1f76:	0c f4       	brge	.+2      	; 0x1f7a <steppermotor3Write+0x7e6>
    1f78:	17 ce       	rjmp	.-978    	; 0x1ba8 <steppermotor3Write+0x414>
=======
    23be:	89 a9       	ldd	r24, Y+49	; 0x31
    23c0:	9a a9       	ldd	r25, Y+50	; 0x32
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9a ab       	std	Y+50, r25	; 0x32
    23c6:	89 ab       	std	Y+49, r24	; 0x31
    23c8:	89 a9       	ldd	r24, Y+49	; 0x31
    23ca:	9a a9       	ldd	r25, Y+50	; 0x32
    23cc:	18 16       	cp	r1, r24
    23ce:	19 06       	cpc	r1, r25
    23d0:	0c f4       	brge	.+2      	; 0x23d4 <__stack+0x1d5>
    23d2:	17 ce       	rjmp	.-978    	; 0x2002 <steppermotor3Write+0x414>
>>>>>>> Stashed changes
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
    1f7a:	1e aa       	std	Y+54, r1	; 0x36
    1f7c:	1d aa       	std	Y+53, r1	; 0x35
=======
    23d4:	1e aa       	std	Y+54, r1	; 0x36
    23d6:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
<<<<<<< Updated upstream
    1f7e:	8d a9       	ldd	r24, Y+53	; 0x35
    1f80:	9e a9       	ldd	r25, Y+54	; 0x36
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	91 05       	cpc	r25, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <steppermotor3Write+0x7f6>
    1f88:	0a ce       	rjmp	.-1004   	; 0x1b9e <steppermotor3Write+0x40a>
=======
    23d8:	8d a9       	ldd	r24, Y+53	; 0x35
    23da:	9e a9       	ldd	r25, Y+54	; 0x36
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	91 05       	cpc	r25, r1
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <__stack+0x1e5>
    23e2:	0a ce       	rjmp	.-1004   	; 0x1ff8 <steppermotor3Write+0x40a>
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
<<<<<<< Updated upstream
    1f8a:	ea 96       	adiw	r28, 0x3a	; 58
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <steppermotor4Write>:

void steppermotor4Write(int a)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	ea 97       	sbiw	r28, 0x3a	; 58
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	9e ab       	std	Y+54, r25	; 0x36
    1fb2:	8d ab       	std	Y+53, r24	; 0x35
    1fb4:	f1 c1       	rjmp	.+994    	; 0x2398 <__stack+0x199>
=======
    23e4:	ea 96       	adiw	r28, 0x3a	; 58
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <steppermotor4Write>:

void steppermotor4Write(int a)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	ea 97       	sbiw	r28, 0x3a	; 58
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	9e ab       	std	Y+54, r25	; 0x36
    240c:	8d ab       	std	Y+53, r24	; 0x35
    240e:	f1 c1       	rjmp	.+994    	; 0x27f2 <steppermotor4Write+0x3fc>
>>>>>>> Stashed changes
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9c ab       	std	Y+52, r25	; 0x34
    1fbc:	8b ab       	std	Y+51, r24	; 0x33
    1fbe:	e4 c1       	rjmp	.+968    	; 0x2388 <__stack+0x189>
        {
            switch (i)
    1fc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc4:	98 af       	std	Y+56, r25	; 0x38
    1fc6:	8f ab       	std	Y+55, r24	; 0x37
    1fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fca:	98 ad       	ldd	r25, Y+56	; 0x38
    1fcc:	84 30       	cpi	r24, 0x04	; 4
    1fce:	91 05       	cpc	r25, r1
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <steppermotor4Write+0x38>
    1fd2:	87 c0       	rjmp	.+270    	; 0x20e2 <steppermotor4Write+0x146>
    1fd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd8:	85 30       	cpi	r24, 0x05	; 5
    1fda:	91 05       	cpc	r25, r1
    1fdc:	94 f4       	brge	.+36     	; 0x2002 <steppermotor4Write+0x66>
    1fde:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <steppermotor4Write+0x4e>
    1fe8:	42 c0       	rjmp	.+132    	; 0x206e <steppermotor4Write+0xd2>
    1fea:	8f a9       	ldd	r24, Y+55	; 0x37
    1fec:	98 ad       	ldd	r25, Y+56	; 0x38
    1fee:	83 30       	cpi	r24, 0x03	; 3
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	0c f0       	brlt	.+2      	; 0x1ff6 <steppermotor4Write+0x5a>
    1ff4:	59 c0       	rjmp	.+178    	; 0x20a8 <steppermotor4Write+0x10c>
    1ff6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff8:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	d1 f0       	breq	.+52     	; 0x2034 <steppermotor4Write+0x98>
    2000:	00 c1       	rjmp	.+512    	; 0x2202 <__stack+0x3>
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	86 30       	cpi	r24, 0x06	; 6
    2008:	91 05       	cpc	r25, r1
    200a:	09 f4       	brne	.+2      	; 0x200e <steppermotor4Write+0x72>
    200c:	a4 c0       	rjmp	.+328    	; 0x2156 <steppermotor4Write+0x1ba>
    200e:	8f a9       	ldd	r24, Y+55	; 0x37
    2010:	98 ad       	ldd	r25, Y+56	; 0x38
    2012:	86 30       	cpi	r24, 0x06	; 6
    2014:	91 05       	cpc	r25, r1
    2016:	0c f4       	brge	.+2      	; 0x201a <steppermotor4Write+0x7e>
    2018:	81 c0       	rjmp	.+258    	; 0x211c <steppermotor4Write+0x180>
    201a:	8f a9       	ldd	r24, Y+55	; 0x37
    201c:	98 ad       	ldd	r25, Y+56	; 0x38
    201e:	87 30       	cpi	r24, 0x07	; 7
    2020:	91 05       	cpc	r25, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <steppermotor4Write+0x8a>
    2024:	b5 c0       	rjmp	.+362    	; 0x2190 <steppermotor4Write+0x1f4>
    2026:	8f a9       	ldd	r24, Y+55	; 0x37
    2028:	98 ad       	ldd	r25, Y+56	; 0x38
    202a:	88 30       	cpi	r24, 0x08	; 8
    202c:	91 05       	cpc	r25, r1
    202e:	09 f4       	brne	.+2      	; 0x2032 <steppermotor4Write+0x96>
    2030:	cc c0       	rjmp	.+408    	; 0x21ca <steppermotor4Write+0x22e>
    2032:	e7 c0       	rjmp	.+462    	; 0x2202 <__stack+0x3>
            {
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    2034:	ab e0       	ldi	r26, 0x0B	; 11
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	eb e0       	ldi	r30, 0x0B	; 11
    203a:	f1 e0       	ldi	r31, 0x01	; 1
    203c:	80 81       	ld	r24, Z
    203e:	80 64       	ori	r24, 0x40	; 64
    2040:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2042:	ab e0       	ldi	r26, 0x0B	; 11
    2044:	b1 e0       	ldi	r27, 0x01	; 1
    2046:	eb e0       	ldi	r30, 0x0B	; 11
    2048:	f1 e0       	ldi	r31, 0x01	; 1
    204a:	80 81       	ld	r24, Z
    204c:	8f 7e       	andi	r24, 0xEF	; 239
    204e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2050:	ab e0       	ldi	r26, 0x0B	; 11
    2052:	b1 e0       	ldi	r27, 0x01	; 1
    2054:	eb e0       	ldi	r30, 0x0B	; 11
    2056:	f1 e0       	ldi	r31, 0x01	; 1
    2058:	80 81       	ld	r24, Z
    205a:	8b 7f       	andi	r24, 0xFB	; 251
    205c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    205e:	ab e0       	ldi	r26, 0x0B	; 11
    2060:	b1 e0       	ldi	r27, 0x01	; 1
    2062:	eb e0       	ldi	r30, 0x0B	; 11
    2064:	f1 e0       	ldi	r31, 0x01	; 1
    2066:	80 81       	ld	r24, Z
    2068:	8e 7f       	andi	r24, 0xFE	; 254
    206a:	8c 93       	st	X, r24
    206c:	ca c0       	rjmp	.+404    	; 0x2202 <__stack+0x3>
                break;
            case 2 :
                PORTStepper4 |= (1 << PStepper4_1);
    206e:	ab e0       	ldi	r26, 0x0B	; 11
    2070:	b1 e0       	ldi	r27, 0x01	; 1
    2072:	eb e0       	ldi	r30, 0x0B	; 11
    2074:	f1 e0       	ldi	r31, 0x01	; 1
    2076:	80 81       	ld	r24, Z
    2078:	80 64       	ori	r24, 0x40	; 64
    207a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    207c:	ab e0       	ldi	r26, 0x0B	; 11
    207e:	b1 e0       	ldi	r27, 0x01	; 1
    2080:	eb e0       	ldi	r30, 0x0B	; 11
    2082:	f1 e0       	ldi	r31, 0x01	; 1
    2084:	80 81       	ld	r24, Z
    2086:	80 61       	ori	r24, 0x10	; 16
    2088:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    208a:	ab e0       	ldi	r26, 0x0B	; 11
    208c:	b1 e0       	ldi	r27, 0x01	; 1
    208e:	eb e0       	ldi	r30, 0x0B	; 11
    2090:	f1 e0       	ldi	r31, 0x01	; 1
    2092:	80 81       	ld	r24, Z
    2094:	8b 7f       	andi	r24, 0xFB	; 251
    2096:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2098:	ab e0       	ldi	r26, 0x0B	; 11
    209a:	b1 e0       	ldi	r27, 0x01	; 1
    209c:	eb e0       	ldi	r30, 0x0B	; 11
    209e:	f1 e0       	ldi	r31, 0x01	; 1
    20a0:	80 81       	ld	r24, Z
    20a2:	8e 7f       	andi	r24, 0xFE	; 254
    20a4:	8c 93       	st	X, r24
    20a6:	ad c0       	rjmp	.+346    	; 0x2202 <__stack+0x3>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    20a8:	ab e0       	ldi	r26, 0x0B	; 11
    20aa:	b1 e0       	ldi	r27, 0x01	; 1
    20ac:	eb e0       	ldi	r30, 0x0B	; 11
    20ae:	f1 e0       	ldi	r31, 0x01	; 1
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7b       	andi	r24, 0xBF	; 191
    20b4:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    20b6:	ab e0       	ldi	r26, 0x0B	; 11
    20b8:	b1 e0       	ldi	r27, 0x01	; 1
    20ba:	eb e0       	ldi	r30, 0x0B	; 11
    20bc:	f1 e0       	ldi	r31, 0x01	; 1
    20be:	80 81       	ld	r24, Z
    20c0:	80 61       	ori	r24, 0x10	; 16
    20c2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    20c4:	ab e0       	ldi	r26, 0x0B	; 11
    20c6:	b1 e0       	ldi	r27, 0x01	; 1
    20c8:	eb e0       	ldi	r30, 0x0B	; 11
    20ca:	f1 e0       	ldi	r31, 0x01	; 1
    20cc:	80 81       	ld	r24, Z
    20ce:	8b 7f       	andi	r24, 0xFB	; 251
    20d0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    20d2:	ab e0       	ldi	r26, 0x0B	; 11
    20d4:	b1 e0       	ldi	r27, 0x01	; 1
    20d6:	eb e0       	ldi	r30, 0x0B	; 11
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    20da:	80 81       	ld	r24, Z
    20dc:	8e 7f       	andi	r24, 0xFE	; 254
    20de:	8c 93       	st	X, r24
    20e0:	90 c0       	rjmp	.+288    	; 0x2202 <__stack+0x3>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    20e2:	ab e0       	ldi	r26, 0x0B	; 11
    20e4:	b1 e0       	ldi	r27, 0x01	; 1
    20e6:	eb e0       	ldi	r30, 0x0B	; 11
    20e8:	f1 e0       	ldi	r31, 0x01	; 1
    20ea:	80 81       	ld	r24, Z
    20ec:	8f 7b       	andi	r24, 0xBF	; 191
    20ee:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    20f0:	ab e0       	ldi	r26, 0x0B	; 11
    20f2:	b1 e0       	ldi	r27, 0x01	; 1
    20f4:	eb e0       	ldi	r30, 0x0B	; 11
    20f6:	f1 e0       	ldi	r31, 0x01	; 1
    20f8:	80 81       	ld	r24, Z
    20fa:	80 61       	ori	r24, 0x10	; 16
    20fc:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    20fe:	ab e0       	ldi	r26, 0x0B	; 11
    2100:	b1 e0       	ldi	r27, 0x01	; 1
    2102:	eb e0       	ldi	r30, 0x0B	; 11
    2104:	f1 e0       	ldi	r31, 0x01	; 1
    2106:	80 81       	ld	r24, Z
    2108:	84 60       	ori	r24, 0x04	; 4
    210a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    210c:	ab e0       	ldi	r26, 0x0B	; 11
    210e:	b1 e0       	ldi	r27, 0x01	; 1
    2110:	eb e0       	ldi	r30, 0x0B	; 11
    2112:	f1 e0       	ldi	r31, 0x01	; 1
    2114:	80 81       	ld	r24, Z
    2116:	8e 7f       	andi	r24, 0xFE	; 254
    2118:	8c 93       	st	X, r24
    211a:	73 c0       	rjmp	.+230    	; 0x2202 <__stack+0x3>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    211c:	ab e0       	ldi	r26, 0x0B	; 11
    211e:	b1 e0       	ldi	r27, 0x01	; 1
    2120:	eb e0       	ldi	r30, 0x0B	; 11
    2122:	f1 e0       	ldi	r31, 0x01	; 1
    2124:	80 81       	ld	r24, Z
    2126:	8f 7b       	andi	r24, 0xBF	; 191
    2128:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    212a:	ab e0       	ldi	r26, 0x0B	; 11
    212c:	b1 e0       	ldi	r27, 0x01	; 1
    212e:	eb e0       	ldi	r30, 0x0B	; 11
    2130:	f1 e0       	ldi	r31, 0x01	; 1
    2132:	80 81       	ld	r24, Z
    2134:	8f 7e       	andi	r24, 0xEF	; 239
    2136:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2138:	ab e0       	ldi	r26, 0x0B	; 11
    213a:	b1 e0       	ldi	r27, 0x01	; 1
    213c:	eb e0       	ldi	r30, 0x0B	; 11
    213e:	f1 e0       	ldi	r31, 0x01	; 1
    2140:	80 81       	ld	r24, Z
    2142:	84 60       	ori	r24, 0x04	; 4
    2144:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2146:	ab e0       	ldi	r26, 0x0B	; 11
    2148:	b1 e0       	ldi	r27, 0x01	; 1
    214a:	eb e0       	ldi	r30, 0x0B	; 11
    214c:	f1 e0       	ldi	r31, 0x01	; 1
    214e:	80 81       	ld	r24, Z
    2150:	8e 7f       	andi	r24, 0xFE	; 254
    2152:	8c 93       	st	X, r24
    2154:	56 c0       	rjmp	.+172    	; 0x2202 <__stack+0x3>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2156:	ab e0       	ldi	r26, 0x0B	; 11
    2158:	b1 e0       	ldi	r27, 0x01	; 1
    215a:	eb e0       	ldi	r30, 0x0B	; 11
    215c:	f1 e0       	ldi	r31, 0x01	; 1
    215e:	80 81       	ld	r24, Z
    2160:	8f 7b       	andi	r24, 0xBF	; 191
    2162:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2164:	ab e0       	ldi	r26, 0x0B	; 11
    2166:	b1 e0       	ldi	r27, 0x01	; 1
    2168:	eb e0       	ldi	r30, 0x0B	; 11
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	80 81       	ld	r24, Z
    216e:	8f 7e       	andi	r24, 0xEF	; 239
    2170:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2172:	ab e0       	ldi	r26, 0x0B	; 11
    2174:	b1 e0       	ldi	r27, 0x01	; 1
    2176:	eb e0       	ldi	r30, 0x0B	; 11
    2178:	f1 e0       	ldi	r31, 0x01	; 1
    217a:	80 81       	ld	r24, Z
    217c:	84 60       	ori	r24, 0x04	; 4
    217e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2180:	ab e0       	ldi	r26, 0x0B	; 11
    2182:	b1 e0       	ldi	r27, 0x01	; 1
    2184:	eb e0       	ldi	r30, 0x0B	; 11
    2186:	f1 e0       	ldi	r31, 0x01	; 1
    2188:	80 81       	ld	r24, Z
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c 93       	st	X, r24
    218e:	39 c0       	rjmp	.+114    	; 0x2202 <__stack+0x3>
                break;
            case 7 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2190:	ab e0       	ldi	r26, 0x0B	; 11
    2192:	b1 e0       	ldi	r27, 0x01	; 1
    2194:	eb e0       	ldi	r30, 0x0B	; 11
    2196:	f1 e0       	ldi	r31, 0x01	; 1
    2198:	80 81       	ld	r24, Z
    219a:	8f 7b       	andi	r24, 0xBF	; 191
    219c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    219e:	ab e0       	ldi	r26, 0x0B	; 11
    21a0:	b1 e0       	ldi	r27, 0x01	; 1
    21a2:	eb e0       	ldi	r30, 0x0B	; 11
    21a4:	f1 e0       	ldi	r31, 0x01	; 1
    21a6:	80 81       	ld	r24, Z
    21a8:	8f 7e       	andi	r24, 0xEF	; 239
    21aa:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    21ac:	ab e0       	ldi	r26, 0x0B	; 11
    21ae:	b1 e0       	ldi	r27, 0x01	; 1
    21b0:	eb e0       	ldi	r30, 0x0B	; 11
    21b2:	f1 e0       	ldi	r31, 0x01	; 1
    21b4:	80 81       	ld	r24, Z
    21b6:	8b 7f       	andi	r24, 0xFB	; 251
    21b8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    21ba:	ab e0       	ldi	r26, 0x0B	; 11
    21bc:	b1 e0       	ldi	r27, 0x01	; 1
    21be:	eb e0       	ldi	r30, 0x0B	; 11
    21c0:	f1 e0       	ldi	r31, 0x01	; 1
    21c2:	80 81       	ld	r24, Z
    21c4:	81 60       	ori	r24, 0x01	; 1
    21c6:	8c 93       	st	X, r24
    21c8:	1c c0       	rjmp	.+56     	; 0x2202 <__stack+0x3>
                break;
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    21ca:	ab e0       	ldi	r26, 0x0B	; 11
    21cc:	b1 e0       	ldi	r27, 0x01	; 1
    21ce:	eb e0       	ldi	r30, 0x0B	; 11
    21d0:	f1 e0       	ldi	r31, 0x01	; 1
    21d2:	80 81       	ld	r24, Z
    21d4:	80 64       	ori	r24, 0x40	; 64
    21d6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    21d8:	ab e0       	ldi	r26, 0x0B	; 11
    21da:	b1 e0       	ldi	r27, 0x01	; 1
    21dc:	eb e0       	ldi	r30, 0x0B	; 11
    21de:	f1 e0       	ldi	r31, 0x01	; 1
    21e0:	80 81       	ld	r24, Z
    21e2:	8f 7e       	andi	r24, 0xEF	; 239
    21e4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    21e6:	ab e0       	ldi	r26, 0x0B	; 11
    21e8:	b1 e0       	ldi	r27, 0x01	; 1
    21ea:	eb e0       	ldi	r30, 0x0B	; 11
    21ec:	f1 e0       	ldi	r31, 0x01	; 1
    21ee:	80 81       	ld	r24, Z
    21f0:	8b 7f       	andi	r24, 0xFB	; 251
    21f2:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    21f4:	ab e0       	ldi	r26, 0x0B	; 11
    21f6:	b1 e0       	ldi	r27, 0x01	; 1
    21f8:	eb e0       	ldi	r30, 0x0B	; 11
    21fa:	f1 e0       	ldi	r31, 0x01	; 1
    21fc:	80 81       	ld	r24, Z
    21fe:	81 60       	ori	r24, 0x01	; 1
    2200:	8c 93       	st	X, r24
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	aa e7       	ldi	r26, 0x7A	; 122
    2208:	b4 e4       	ldi	r27, 0x44	; 68
    220a:	8d a7       	std	Y+45, r24	; 0x2d
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	af a7       	std	Y+47, r26	; 0x2f
    2210:	b8 ab       	std	Y+48, r27	; 0x30
=======
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c ab       	std	Y+52, r25	; 0x34
    2416:	8b ab       	std	Y+51, r24	; 0x33
    2418:	e4 c1       	rjmp	.+968    	; 0x27e2 <steppermotor4Write+0x3ec>
        {
            switch (i)
    241a:	8b a9       	ldd	r24, Y+51	; 0x33
    241c:	9c a9       	ldd	r25, Y+52	; 0x34
    241e:	98 af       	std	Y+56, r25	; 0x38
    2420:	8f ab       	std	Y+55, r24	; 0x37
    2422:	8f a9       	ldd	r24, Y+55	; 0x37
    2424:	98 ad       	ldd	r25, Y+56	; 0x38
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	91 05       	cpc	r25, r1
    242a:	09 f4       	brne	.+2      	; 0x242e <steppermotor4Write+0x38>
    242c:	87 c0       	rjmp	.+270    	; 0x253c <steppermotor4Write+0x146>
    242e:	8f a9       	ldd	r24, Y+55	; 0x37
    2430:	98 ad       	ldd	r25, Y+56	; 0x38
    2432:	85 30       	cpi	r24, 0x05	; 5
    2434:	91 05       	cpc	r25, r1
    2436:	94 f4       	brge	.+36     	; 0x245c <steppermotor4Write+0x66>
    2438:	8f a9       	ldd	r24, Y+55	; 0x37
    243a:	98 ad       	ldd	r25, Y+56	; 0x38
    243c:	82 30       	cpi	r24, 0x02	; 2
    243e:	91 05       	cpc	r25, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <steppermotor4Write+0x4e>
    2442:	42 c0       	rjmp	.+132    	; 0x24c8 <steppermotor4Write+0xd2>
    2444:	8f a9       	ldd	r24, Y+55	; 0x37
    2446:	98 ad       	ldd	r25, Y+56	; 0x38
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	91 05       	cpc	r25, r1
    244c:	0c f0       	brlt	.+2      	; 0x2450 <steppermotor4Write+0x5a>
    244e:	59 c0       	rjmp	.+178    	; 0x2502 <steppermotor4Write+0x10c>
    2450:	8f a9       	ldd	r24, Y+55	; 0x37
    2452:	98 ad       	ldd	r25, Y+56	; 0x38
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	91 05       	cpc	r25, r1
    2458:	d1 f0       	breq	.+52     	; 0x248e <steppermotor4Write+0x98>
    245a:	00 c1       	rjmp	.+512    	; 0x265c <steppermotor4Write+0x266>
    245c:	8f a9       	ldd	r24, Y+55	; 0x37
    245e:	98 ad       	ldd	r25, Y+56	; 0x38
    2460:	86 30       	cpi	r24, 0x06	; 6
    2462:	91 05       	cpc	r25, r1
    2464:	09 f4       	brne	.+2      	; 0x2468 <steppermotor4Write+0x72>
    2466:	a4 c0       	rjmp	.+328    	; 0x25b0 <steppermotor4Write+0x1ba>
    2468:	8f a9       	ldd	r24, Y+55	; 0x37
    246a:	98 ad       	ldd	r25, Y+56	; 0x38
    246c:	86 30       	cpi	r24, 0x06	; 6
    246e:	91 05       	cpc	r25, r1
    2470:	0c f4       	brge	.+2      	; 0x2474 <steppermotor4Write+0x7e>
    2472:	81 c0       	rjmp	.+258    	; 0x2576 <steppermotor4Write+0x180>
    2474:	8f a9       	ldd	r24, Y+55	; 0x37
    2476:	98 ad       	ldd	r25, Y+56	; 0x38
    2478:	87 30       	cpi	r24, 0x07	; 7
    247a:	91 05       	cpc	r25, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <steppermotor4Write+0x8a>
    247e:	b5 c0       	rjmp	.+362    	; 0x25ea <steppermotor4Write+0x1f4>
    2480:	8f a9       	ldd	r24, Y+55	; 0x37
    2482:	98 ad       	ldd	r25, Y+56	; 0x38
    2484:	88 30       	cpi	r24, 0x08	; 8
    2486:	91 05       	cpc	r25, r1
    2488:	09 f4       	brne	.+2      	; 0x248c <steppermotor4Write+0x96>
    248a:	cc c0       	rjmp	.+408    	; 0x2624 <steppermotor4Write+0x22e>
    248c:	e7 c0       	rjmp	.+462    	; 0x265c <steppermotor4Write+0x266>
            {
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    248e:	ab e0       	ldi	r26, 0x0B	; 11
    2490:	b1 e0       	ldi	r27, 0x01	; 1
    2492:	eb e0       	ldi	r30, 0x0B	; 11
    2494:	f1 e0       	ldi	r31, 0x01	; 1
    2496:	80 81       	ld	r24, Z
    2498:	80 64       	ori	r24, 0x40	; 64
    249a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    249c:	ab e0       	ldi	r26, 0x0B	; 11
    249e:	b1 e0       	ldi	r27, 0x01	; 1
    24a0:	eb e0       	ldi	r30, 0x0B	; 11
    24a2:	f1 e0       	ldi	r31, 0x01	; 1
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 7e       	andi	r24, 0xEF	; 239
    24a8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24aa:	ab e0       	ldi	r26, 0x0B	; 11
    24ac:	b1 e0       	ldi	r27, 0x01	; 1
    24ae:	eb e0       	ldi	r30, 0x0B	; 11
    24b0:	f1 e0       	ldi	r31, 0x01	; 1
    24b2:	80 81       	ld	r24, Z
    24b4:	8b 7f       	andi	r24, 0xFB	; 251
    24b6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24b8:	ab e0       	ldi	r26, 0x0B	; 11
    24ba:	b1 e0       	ldi	r27, 0x01	; 1
    24bc:	eb e0       	ldi	r30, 0x0B	; 11
    24be:	f1 e0       	ldi	r31, 0x01	; 1
    24c0:	80 81       	ld	r24, Z
    24c2:	8e 7f       	andi	r24, 0xFE	; 254
    24c4:	8c 93       	st	X, r24
    24c6:	ca c0       	rjmp	.+404    	; 0x265c <steppermotor4Write+0x266>
                break;
            case 2 :
                PORTStepper4 |= (1 << PStepper4_1);
    24c8:	ab e0       	ldi	r26, 0x0B	; 11
    24ca:	b1 e0       	ldi	r27, 0x01	; 1
    24cc:	eb e0       	ldi	r30, 0x0B	; 11
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	80 81       	ld	r24, Z
    24d2:	80 64       	ori	r24, 0x40	; 64
    24d4:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24d6:	ab e0       	ldi	r26, 0x0B	; 11
    24d8:	b1 e0       	ldi	r27, 0x01	; 1
    24da:	eb e0       	ldi	r30, 0x0B	; 11
    24dc:	f1 e0       	ldi	r31, 0x01	; 1
    24de:	80 81       	ld	r24, Z
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24e4:	ab e0       	ldi	r26, 0x0B	; 11
    24e6:	b1 e0       	ldi	r27, 0x01	; 1
    24e8:	eb e0       	ldi	r30, 0x0B	; 11
    24ea:	f1 e0       	ldi	r31, 0x01	; 1
    24ec:	80 81       	ld	r24, Z
    24ee:	8b 7f       	andi	r24, 0xFB	; 251
    24f0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24f2:	ab e0       	ldi	r26, 0x0B	; 11
    24f4:	b1 e0       	ldi	r27, 0x01	; 1
    24f6:	eb e0       	ldi	r30, 0x0B	; 11
    24f8:	f1 e0       	ldi	r31, 0x01	; 1
    24fa:	80 81       	ld	r24, Z
    24fc:	8e 7f       	andi	r24, 0xFE	; 254
    24fe:	8c 93       	st	X, r24
    2500:	ad c0       	rjmp	.+346    	; 0x265c <steppermotor4Write+0x266>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2502:	ab e0       	ldi	r26, 0x0B	; 11
    2504:	b1 e0       	ldi	r27, 0x01	; 1
    2506:	eb e0       	ldi	r30, 0x0B	; 11
    2508:	f1 e0       	ldi	r31, 0x01	; 1
    250a:	80 81       	ld	r24, Z
    250c:	8f 7b       	andi	r24, 0xBF	; 191
    250e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2510:	ab e0       	ldi	r26, 0x0B	; 11
    2512:	b1 e0       	ldi	r27, 0x01	; 1
    2514:	eb e0       	ldi	r30, 0x0B	; 11
    2516:	f1 e0       	ldi	r31, 0x01	; 1
    2518:	80 81       	ld	r24, Z
    251a:	80 61       	ori	r24, 0x10	; 16
    251c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    251e:	ab e0       	ldi	r26, 0x0B	; 11
    2520:	b1 e0       	ldi	r27, 0x01	; 1
    2522:	eb e0       	ldi	r30, 0x0B	; 11
    2524:	f1 e0       	ldi	r31, 0x01	; 1
    2526:	80 81       	ld	r24, Z
    2528:	8b 7f       	andi	r24, 0xFB	; 251
    252a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    252c:	ab e0       	ldi	r26, 0x0B	; 11
    252e:	b1 e0       	ldi	r27, 0x01	; 1
    2530:	eb e0       	ldi	r30, 0x0B	; 11
    2532:	f1 e0       	ldi	r31, 0x01	; 1
    2534:	80 81       	ld	r24, Z
    2536:	8e 7f       	andi	r24, 0xFE	; 254
    2538:	8c 93       	st	X, r24
    253a:	90 c0       	rjmp	.+288    	; 0x265c <steppermotor4Write+0x266>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    253c:	ab e0       	ldi	r26, 0x0B	; 11
    253e:	b1 e0       	ldi	r27, 0x01	; 1
    2540:	eb e0       	ldi	r30, 0x0B	; 11
    2542:	f1 e0       	ldi	r31, 0x01	; 1
    2544:	80 81       	ld	r24, Z
    2546:	8f 7b       	andi	r24, 0xBF	; 191
    2548:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    254a:	ab e0       	ldi	r26, 0x0B	; 11
    254c:	b1 e0       	ldi	r27, 0x01	; 1
    254e:	eb e0       	ldi	r30, 0x0B	; 11
    2550:	f1 e0       	ldi	r31, 0x01	; 1
    2552:	80 81       	ld	r24, Z
    2554:	80 61       	ori	r24, 0x10	; 16
    2556:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2558:	ab e0       	ldi	r26, 0x0B	; 11
    255a:	b1 e0       	ldi	r27, 0x01	; 1
    255c:	eb e0       	ldi	r30, 0x0B	; 11
    255e:	f1 e0       	ldi	r31, 0x01	; 1
    2560:	80 81       	ld	r24, Z
    2562:	84 60       	ori	r24, 0x04	; 4
    2564:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2566:	ab e0       	ldi	r26, 0x0B	; 11
    2568:	b1 e0       	ldi	r27, 0x01	; 1
    256a:	eb e0       	ldi	r30, 0x0B	; 11
    256c:	f1 e0       	ldi	r31, 0x01	; 1
    256e:	80 81       	ld	r24, Z
    2570:	8e 7f       	andi	r24, 0xFE	; 254
    2572:	8c 93       	st	X, r24
    2574:	73 c0       	rjmp	.+230    	; 0x265c <steppermotor4Write+0x266>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2576:	ab e0       	ldi	r26, 0x0B	; 11
    2578:	b1 e0       	ldi	r27, 0x01	; 1
    257a:	eb e0       	ldi	r30, 0x0B	; 11
    257c:	f1 e0       	ldi	r31, 0x01	; 1
    257e:	80 81       	ld	r24, Z
    2580:	8f 7b       	andi	r24, 0xBF	; 191
    2582:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2584:	ab e0       	ldi	r26, 0x0B	; 11
    2586:	b1 e0       	ldi	r27, 0x01	; 1
    2588:	eb e0       	ldi	r30, 0x0B	; 11
    258a:	f1 e0       	ldi	r31, 0x01	; 1
    258c:	80 81       	ld	r24, Z
    258e:	8f 7e       	andi	r24, 0xEF	; 239
    2590:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2592:	ab e0       	ldi	r26, 0x0B	; 11
    2594:	b1 e0       	ldi	r27, 0x01	; 1
    2596:	eb e0       	ldi	r30, 0x0B	; 11
    2598:	f1 e0       	ldi	r31, 0x01	; 1
    259a:	80 81       	ld	r24, Z
    259c:	84 60       	ori	r24, 0x04	; 4
    259e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    25a0:	ab e0       	ldi	r26, 0x0B	; 11
    25a2:	b1 e0       	ldi	r27, 0x01	; 1
    25a4:	eb e0       	ldi	r30, 0x0B	; 11
    25a6:	f1 e0       	ldi	r31, 0x01	; 1
    25a8:	80 81       	ld	r24, Z
    25aa:	8e 7f       	andi	r24, 0xFE	; 254
    25ac:	8c 93       	st	X, r24
    25ae:	56 c0       	rjmp	.+172    	; 0x265c <steppermotor4Write+0x266>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    25b0:	ab e0       	ldi	r26, 0x0B	; 11
    25b2:	b1 e0       	ldi	r27, 0x01	; 1
    25b4:	eb e0       	ldi	r30, 0x0B	; 11
    25b6:	f1 e0       	ldi	r31, 0x01	; 1
    25b8:	80 81       	ld	r24, Z
    25ba:	8f 7b       	andi	r24, 0xBF	; 191
    25bc:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25be:	ab e0       	ldi	r26, 0x0B	; 11
    25c0:	b1 e0       	ldi	r27, 0x01	; 1
    25c2:	eb e0       	ldi	r30, 0x0B	; 11
    25c4:	f1 e0       	ldi	r31, 0x01	; 1
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7e       	andi	r24, 0xEF	; 239
    25ca:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    25cc:	ab e0       	ldi	r26, 0x0B	; 11
    25ce:	b1 e0       	ldi	r27, 0x01	; 1
    25d0:	eb e0       	ldi	r30, 0x0B	; 11
    25d2:	f1 e0       	ldi	r31, 0x01	; 1
    25d4:	80 81       	ld	r24, Z
    25d6:	84 60       	ori	r24, 0x04	; 4
    25d8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25da:	ab e0       	ldi	r26, 0x0B	; 11
    25dc:	b1 e0       	ldi	r27, 0x01	; 1
    25de:	eb e0       	ldi	r30, 0x0B	; 11
    25e0:	f1 e0       	ldi	r31, 0x01	; 1
    25e2:	80 81       	ld	r24, Z
    25e4:	81 60       	ori	r24, 0x01	; 1
    25e6:	8c 93       	st	X, r24
    25e8:	39 c0       	rjmp	.+114    	; 0x265c <steppermotor4Write+0x266>
                break;
            case 7 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    25ea:	ab e0       	ldi	r26, 0x0B	; 11
    25ec:	b1 e0       	ldi	r27, 0x01	; 1
    25ee:	eb e0       	ldi	r30, 0x0B	; 11
    25f0:	f1 e0       	ldi	r31, 0x01	; 1
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 7b       	andi	r24, 0xBF	; 191
    25f6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25f8:	ab e0       	ldi	r26, 0x0B	; 11
    25fa:	b1 e0       	ldi	r27, 0x01	; 1
    25fc:	eb e0       	ldi	r30, 0x0B	; 11
    25fe:	f1 e0       	ldi	r31, 0x01	; 1
    2600:	80 81       	ld	r24, Z
    2602:	8f 7e       	andi	r24, 0xEF	; 239
    2604:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2606:	ab e0       	ldi	r26, 0x0B	; 11
    2608:	b1 e0       	ldi	r27, 0x01	; 1
    260a:	eb e0       	ldi	r30, 0x0B	; 11
    260c:	f1 e0       	ldi	r31, 0x01	; 1
    260e:	80 81       	ld	r24, Z
    2610:	8b 7f       	andi	r24, 0xFB	; 251
    2612:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2614:	ab e0       	ldi	r26, 0x0B	; 11
    2616:	b1 e0       	ldi	r27, 0x01	; 1
    2618:	eb e0       	ldi	r30, 0x0B	; 11
    261a:	f1 e0       	ldi	r31, 0x01	; 1
    261c:	80 81       	ld	r24, Z
    261e:	81 60       	ori	r24, 0x01	; 1
    2620:	8c 93       	st	X, r24
    2622:	1c c0       	rjmp	.+56     	; 0x265c <steppermotor4Write+0x266>
                break;
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2624:	ab e0       	ldi	r26, 0x0B	; 11
    2626:	b1 e0       	ldi	r27, 0x01	; 1
    2628:	eb e0       	ldi	r30, 0x0B	; 11
    262a:	f1 e0       	ldi	r31, 0x01	; 1
    262c:	80 81       	ld	r24, Z
    262e:	80 64       	ori	r24, 0x40	; 64
    2630:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2632:	ab e0       	ldi	r26, 0x0B	; 11
    2634:	b1 e0       	ldi	r27, 0x01	; 1
    2636:	eb e0       	ldi	r30, 0x0B	; 11
    2638:	f1 e0       	ldi	r31, 0x01	; 1
    263a:	80 81       	ld	r24, Z
    263c:	8f 7e       	andi	r24, 0xEF	; 239
    263e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2640:	ab e0       	ldi	r26, 0x0B	; 11
    2642:	b1 e0       	ldi	r27, 0x01	; 1
    2644:	eb e0       	ldi	r30, 0x0B	; 11
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	80 81       	ld	r24, Z
    264a:	8b 7f       	andi	r24, 0xFB	; 251
    264c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    264e:	ab e0       	ldi	r26, 0x0B	; 11
    2650:	b1 e0       	ldi	r27, 0x01	; 1
    2652:	eb e0       	ldi	r30, 0x0B	; 11
    2654:	f1 e0       	ldi	r31, 0x01	; 1
    2656:	80 81       	ld	r24, Z
    2658:	81 60       	ori	r24, 0x01	; 1
    265a:	8c 93       	st	X, r24
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	aa e7       	ldi	r26, 0x7A	; 122
    2662:	b4 e4       	ldi	r27, 0x44	; 68
    2664:	8d a7       	std	Y+45, r24	; 0x2d
    2666:	9e a7       	std	Y+46, r25	; 0x2e
    2668:	af a7       	std	Y+47, r26	; 0x2f
    266a:	b8 ab       	std	Y+48, r27	; 0x30
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    2212:	6d a5       	ldd	r22, Y+45	; 0x2d
    2214:	7e a5       	ldd	r23, Y+46	; 0x2e
    2216:	8f a5       	ldd	r24, Y+47	; 0x2f
    2218:	98 a9       	ldd	r25, Y+48	; 0x30
    221a:	2b ea       	ldi	r18, 0xAB	; 171
    221c:	3a ea       	ldi	r19, 0xAA	; 170
    221e:	4a ea       	ldi	r20, 0xAA	; 170
    2220:	50 e4       	ldi	r21, 0x40	; 64
    2222:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	89 a7       	std	Y+41, r24	; 0x29
    222c:	9a a7       	std	Y+42, r25	; 0x2a
    222e:	ab a7       	std	Y+43, r26	; 0x2b
    2230:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2232:	69 a5       	ldd	r22, Y+41	; 0x29
    2234:	7a a5       	ldd	r23, Y+42	; 0x2a
    2236:	8b a5       	ldd	r24, Y+43	; 0x2b
    2238:	9c a5       	ldd	r25, Y+44	; 0x2c
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	1c f4       	brge	.+6      	; 0x2250 <__stack+0x51>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	88 a7       	std	Y+40, r24	; 0x28
    224e:	91 c0       	rjmp	.+290    	; 0x2372 <__stack+0x173>
	else if (__tmp > 255)
    2250:	69 a5       	ldd	r22, Y+41	; 0x29
    2252:	7a a5       	ldd	r23, Y+42	; 0x2a
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	9c a5       	ldd	r25, Y+44	; 0x2c
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	53 e4       	ldi	r21, 0x43	; 67
    2260:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	0c f0       	brlt	.+2      	; 0x226a <__stack+0x6b>
    2268:	7b c0       	rjmp	.+246    	; 0x2360 <__stack+0x161>
	{
		_delay_ms(__us / 1000.0);
    226a:	6d a5       	ldd	r22, Y+45	; 0x2d
    226c:	7e a5       	ldd	r23, Y+46	; 0x2e
    226e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2270:	98 a9       	ldd	r25, Y+48	; 0x30
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a e7       	ldi	r20, 0x7A	; 122
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8c a3       	std	Y+36, r24	; 0x24
    2284:	9d a3       	std	Y+37, r25	; 0x25
    2286:	ae a3       	std	Y+38, r26	; 0x26
    2288:	bf a3       	std	Y+39, r27	; 0x27
=======
    266c:	6d a5       	ldd	r22, Y+45	; 0x2d
    266e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2670:	8f a5       	ldd	r24, Y+47	; 0x2f
    2672:	98 a9       	ldd	r25, Y+48	; 0x30
    2674:	2b ea       	ldi	r18, 0xAB	; 171
    2676:	3a ea       	ldi	r19, 0xAA	; 170
    2678:	4a ea       	ldi	r20, 0xAA	; 170
    267a:	50 e4       	ldi	r21, 0x40	; 64
    267c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	89 a7       	std	Y+41, r24	; 0x29
    2686:	9a a7       	std	Y+42, r25	; 0x2a
    2688:	ab a7       	std	Y+43, r26	; 0x2b
    268a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    268c:	69 a5       	ldd	r22, Y+41	; 0x29
    268e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2690:	8b a5       	ldd	r24, Y+43	; 0x2b
    2692:	9c a5       	ldd	r25, Y+44	; 0x2c
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	1c f4       	brge	.+6      	; 0x26aa <steppermotor4Write+0x2b4>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	88 a7       	std	Y+40, r24	; 0x28
    26a8:	91 c0       	rjmp	.+290    	; 0x27cc <steppermotor4Write+0x3d6>
	else if (__tmp > 255)
    26aa:	69 a5       	ldd	r22, Y+41	; 0x29
    26ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	53 e4       	ldi	r21, 0x43	; 67
    26ba:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	0c f0       	brlt	.+2      	; 0x26c4 <steppermotor4Write+0x2ce>
    26c2:	7b c0       	rjmp	.+246    	; 0x27ba <steppermotor4Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    26c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    26c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    26c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ca:	98 a9       	ldd	r25, Y+48	; 0x30
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a e7       	ldi	r20, 0x7A	; 122
    26d2:	54 e4       	ldi	r21, 0x44	; 68
    26d4:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8c a3       	std	Y+36, r24	; 0x24
    26de:	9d a3       	std	Y+37, r25	; 0x25
    26e0:	ae a3       	std	Y+38, r26	; 0x26
    26e2:	bf a3       	std	Y+39, r27	; 0x27
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    228a:	6c a1       	ldd	r22, Y+36	; 0x24
    228c:	7d a1       	ldd	r23, Y+37	; 0x25
    228e:	8e a1       	ldd	r24, Y+38	; 0x26
    2290:	9f a1       	ldd	r25, Y+39	; 0x27
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a e7       	ldi	r20, 0x7A	; 122
    2298:	55 e4       	ldi	r21, 0x45	; 69
    229a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	88 a3       	std	Y+32, r24	; 0x20
    22a4:	99 a3       	std	Y+33, r25	; 0x21
    22a6:	aa a3       	std	Y+34, r26	; 0x22
    22a8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22aa:	68 a1       	ldd	r22, Y+32	; 0x20
    22ac:	79 a1       	ldd	r23, Y+33	; 0x21
    22ae:	8a a1       	ldd	r24, Y+34	; 0x22
    22b0:	9b a1       	ldd	r25, Y+35	; 0x23
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <__stack+0xcd>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9f 8f       	std	Y+31, r25	; 0x1f
    22c8:	8e 8f       	std	Y+30, r24	; 0x1e
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <__stack+0x14b>
	else if (__tmp > 65535)
    22cc:	68 a1       	ldd	r22, Y+32	; 0x20
    22ce:	79 a1       	ldd	r23, Y+33	; 0x21
    22d0:	8a a1       	ldd	r24, Y+34	; 0x22
    22d2:	9b a1       	ldd	r25, Y+35	; 0x23
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <__stack+0x137>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6c a1       	ldd	r22, Y+36	; 0x24
    22e6:	7d a1       	ldd	r23, Y+37	; 0x25
    22e8:	8e a1       	ldd	r24, Y+38	; 0x26
    22ea:	9f a1       	ldd	r25, Y+39	; 0x27
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9f 8f       	std	Y+31, r25	; 0x1f
    230a:	8e 8f       	std	Y+30, r24	; 0x1e
    230c:	0f c0       	rjmp	.+30     	; 0x232c <__stack+0x12d>
    230e:	80 e9       	ldi	r24, 0x90	; 144
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	9d 8f       	std	Y+29, r25	; 0x1d
    2314:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    26e4:	6c a1       	ldd	r22, Y+36	; 0x24
    26e6:	7d a1       	ldd	r23, Y+37	; 0x25
    26e8:	8e a1       	ldd	r24, Y+38	; 0x26
    26ea:	9f a1       	ldd	r25, Y+39	; 0x27
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	88 a3       	std	Y+32, r24	; 0x20
    26fe:	99 a3       	std	Y+33, r25	; 0x21
    2700:	aa a3       	std	Y+34, r26	; 0x22
    2702:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2704:	68 a1       	ldd	r22, Y+32	; 0x20
    2706:	79 a1       	ldd	r23, Y+33	; 0x21
    2708:	8a a1       	ldd	r24, Y+34	; 0x22
    270a:	9b a1       	ldd	r25, Y+35	; 0x23
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <steppermotor4Write+0x330>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9f 8f       	std	Y+31, r25	; 0x1f
    2722:	8e 8f       	std	Y+30, r24	; 0x1e
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <steppermotor4Write+0x3ae>
	else if (__tmp > 65535)
    2726:	68 a1       	ldd	r22, Y+32	; 0x20
    2728:	79 a1       	ldd	r23, Y+33	; 0x21
    272a:	8a a1       	ldd	r24, Y+34	; 0x22
    272c:	9b a1       	ldd	r25, Y+35	; 0x23
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <steppermotor4Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6c a1       	ldd	r22, Y+36	; 0x24
    2740:	7d a1       	ldd	r23, Y+37	; 0x25
    2742:	8e a1       	ldd	r24, Y+38	; 0x26
    2744:	9f a1       	ldd	r25, Y+39	; 0x27
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9f 8f       	std	Y+31, r25	; 0x1f
    2764:	8e 8f       	std	Y+30, r24	; 0x1e
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <steppermotor4Write+0x390>
    2768:	80 e9       	ldi	r24, 0x90	; 144
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	9d 8f       	std	Y+29, r25	; 0x1d
    276e:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2316:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2318:	9d 8d       	ldd	r25, Y+29	; 0x1d
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <__stack+0x11b>
    231e:	9d 8f       	std	Y+29, r25	; 0x1d
    2320:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    2770:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2772:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <steppermotor4Write+0x37e>
    2778:	9d 8f       	std	Y+29, r25	; 0x1d
    277a:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    2322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2324:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9f 8f       	std	Y+31, r25	; 0x1f
    232a:	8e 8f       	std	Y+30, r24	; 0x1e
=======
    277c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    277e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9f 8f       	std	Y+31, r25	; 0x1f
    2784:	8e 8f       	std	Y+30, r24	; 0x1e
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    232c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    232e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <__stack+0x10f>
    2334:	24 c0       	rjmp	.+72     	; 0x237e <__stack+0x17f>
=======
    2786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2788:	9f 8d       	ldd	r25, Y+31	; 0x1f
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <steppermotor4Write+0x372>
    278e:	24 c0       	rjmp	.+72     	; 0x27d8 <steppermotor4Write+0x3e2>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    2336:	68 a1       	ldd	r22, Y+32	; 0x20
    2338:	79 a1       	ldd	r23, Y+33	; 0x21
    233a:	8a a1       	ldd	r24, Y+34	; 0x22
    233c:	9b a1       	ldd	r25, Y+35	; 0x23
    233e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9f 8f       	std	Y+31, r25	; 0x1f
    2348:	8e 8f       	std	Y+30, r24	; 0x1e
    234a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    234c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    234e:	9b 8f       	std	Y+27, r25	; 0x1b
    2350:	8a 8f       	std	Y+26, r24	; 0x1a
    2352:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2354:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <__stack+0x157>
    235a:	9b 8f       	std	Y+27, r25	; 0x1b
    235c:	8a 8f       	std	Y+26, r24	; 0x1a
    235e:	0f c0       	rjmp	.+30     	; 0x237e <__stack+0x17f>
=======
    2790:	68 a1       	ldd	r22, Y+32	; 0x20
    2792:	79 a1       	ldd	r23, Y+33	; 0x21
    2794:	8a a1       	ldd	r24, Y+34	; 0x22
    2796:	9b a1       	ldd	r25, Y+35	; 0x23
    2798:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9f 8f       	std	Y+31, r25	; 0x1f
    27a2:	8e 8f       	std	Y+30, r24	; 0x1e
    27a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27a8:	9b 8f       	std	Y+27, r25	; 0x1b
    27aa:	8a 8f       	std	Y+26, r24	; 0x1a
    27ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <steppermotor4Write+0x3ba>
    27b4:	9b 8f       	std	Y+27, r25	; 0x1b
    27b6:	8a 8f       	std	Y+26, r24	; 0x1a
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <steppermotor4Write+0x3e2>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    2360:	69 a5       	ldd	r22, Y+41	; 0x29
    2362:	7a a5       	ldd	r23, Y+42	; 0x2a
    2364:	8b a5       	ldd	r24, Y+43	; 0x2b
    2366:	9c a5       	ldd	r25, Y+44	; 0x2c
    2368:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	88 a7       	std	Y+40, r24	; 0x28
    2372:	88 a5       	ldd	r24, Y+40	; 0x28
    2374:	89 8f       	std	Y+25, r24	; 0x19
=======
    27ba:	69 a5       	ldd	r22, Y+41	; 0x29
    27bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    27be:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c2:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	88 a7       	std	Y+40, r24	; 0x28
    27cc:	88 a5       	ldd	r24, Y+40	; 0x28
    27ce:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2376:	89 8d       	ldd	r24, Y+25	; 0x19
    2378:	8a 95       	dec	r24
    237a:	f1 f7       	brne	.-4      	; 0x2378 <__stack+0x179>
    237c:	89 8f       	std	Y+25, r24	; 0x19
=======
    27d0:	89 8d       	ldd	r24, Y+25	; 0x19
    27d2:	8a 95       	dec	r24
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <steppermotor4Write+0x3dc>
    27d6:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
void steppermotor4Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
<<<<<<< Updated upstream
    237e:	8b a9       	ldd	r24, Y+51	; 0x33
    2380:	9c a9       	ldd	r25, Y+52	; 0x34
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	9c ab       	std	Y+52, r25	; 0x34
    2386:	8b ab       	std	Y+51, r24	; 0x33
    2388:	8b a9       	ldd	r24, Y+51	; 0x33
    238a:	9c a9       	ldd	r25, Y+52	; 0x34
    238c:	88 30       	cpi	r24, 0x08	; 8
    238e:	91 05       	cpc	r25, r1
    2390:	0c f4       	brge	.+2      	; 0x2394 <__stack+0x195>
    2392:	16 ce       	rjmp	.-980    	; 0x1fc0 <steppermotor4Write+0x24>
=======
    27d8:	8b a9       	ldd	r24, Y+51	; 0x33
    27da:	9c a9       	ldd	r25, Y+52	; 0x34
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	9c ab       	std	Y+52, r25	; 0x34
    27e0:	8b ab       	std	Y+51, r24	; 0x33
    27e2:	8b a9       	ldd	r24, Y+51	; 0x33
    27e4:	9c a9       	ldd	r25, Y+52	; 0x34
    27e6:	88 30       	cpi	r24, 0x08	; 8
    27e8:	91 05       	cpc	r25, r1
    27ea:	0c f4       	brge	.+2      	; 0x27ee <steppermotor4Write+0x3f8>
    27ec:	16 ce       	rjmp	.-980    	; 0x241a <steppermotor4Write+0x24>
>>>>>>> Stashed changes
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
    2394:	1e aa       	std	Y+54, r1	; 0x36
    2396:	1d aa       	std	Y+53, r1	; 0x35
=======
    27ee:	1e aa       	std	Y+54, r1	; 0x36
    27f0:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
    }
}

void steppermotor4Write(int a)
{
    while(a  == 1)
<<<<<<< Updated upstream
    2398:	8d a9       	ldd	r24, Y+53	; 0x35
    239a:	9e a9       	ldd	r25, Y+54	; 0x36
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	91 05       	cpc	r25, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__stack+0x1a5>
    23a2:	09 ce       	rjmp	.-1006   	; 0x1fb6 <steppermotor4Write+0x1a>
    23a4:	f0 c1       	rjmp	.+992    	; 0x2786 <__stack+0x587>
=======
    27f2:	8d a9       	ldd	r24, Y+53	; 0x35
    27f4:	9e a9       	ldd	r25, Y+54	; 0x36
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	91 05       	cpc	r25, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <steppermotor4Write+0x408>
    27fc:	09 ce       	rjmp	.-1006   	; 0x2410 <steppermotor4Write+0x1a>
    27fe:	f0 c1       	rjmp	.+992    	; 0x2be0 <steppermotor4Write+0x7ea>
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
    23a6:	88 e0       	ldi	r24, 0x08	; 8
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9a ab       	std	Y+50, r25	; 0x32
    23ac:	89 ab       	std	Y+49, r24	; 0x31
    23ae:	e3 c1       	rjmp	.+966    	; 0x2776 <__stack+0x577>
        {
            switch (i)
    23b0:	89 a9       	ldd	r24, Y+49	; 0x31
    23b2:	9a a9       	ldd	r25, Y+50	; 0x32
    23b4:	9a af       	std	Y+58, r25	; 0x3a
    23b6:	89 af       	std	Y+57, r24	; 0x39
    23b8:	89 ad       	ldd	r24, Y+57	; 0x39
    23ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    23bc:	84 30       	cpi	r24, 0x04	; 4
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <__stack+0x1c5>
    23c2:	a3 c0       	rjmp	.+326    	; 0x250a <__stack+0x30b>
    23c4:	89 ad       	ldd	r24, Y+57	; 0x39
    23c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    23c8:	85 30       	cpi	r24, 0x05	; 5
    23ca:	91 05       	cpc	r25, r1
    23cc:	94 f4       	brge	.+36     	; 0x23f2 <__stack+0x1f3>
    23ce:	89 ad       	ldd	r24, Y+57	; 0x39
    23d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <__stack+0x1db>
    23d8:	5e c0       	rjmp	.+188    	; 0x2496 <__stack+0x297>
    23da:	89 ad       	ldd	r24, Y+57	; 0x39
    23dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    23de:	83 30       	cpi	r24, 0x03	; 3
    23e0:	91 05       	cpc	r25, r1
    23e2:	0c f0       	brlt	.+2      	; 0x23e6 <__stack+0x1e7>
    23e4:	75 c0       	rjmp	.+234    	; 0x24d0 <__stack+0x2d1>
    23e6:	89 ad       	ldd	r24, Y+57	; 0x39
    23e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	91 05       	cpc	r25, r1
    23ee:	b1 f1       	breq	.+108    	; 0x245c <__stack+0x25d>
    23f0:	ff c0       	rjmp	.+510    	; 0x25f0 <__stack+0x3f1>
    23f2:	89 ad       	ldd	r24, Y+57	; 0x39
    23f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23f6:	86 30       	cpi	r24, 0x06	; 6
    23f8:	91 05       	cpc	r25, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	c0 c0       	rjmp	.+384    	; 0x257e <__stack+0x37f>
    23fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2400:	9a ad       	ldd	r25, Y+58	; 0x3a
    2402:	86 30       	cpi	r24, 0x06	; 6
    2404:	91 05       	cpc	r25, r1
    2406:	0c f4       	brge	.+2      	; 0x240a <__stack+0x20b>
    2408:	9d c0       	rjmp	.+314    	; 0x2544 <__stack+0x345>
    240a:	89 ad       	ldd	r24, Y+57	; 0x39
    240c:	9a ad       	ldd	r25, Y+58	; 0x3a
    240e:	87 30       	cpi	r24, 0x07	; 7
    2410:	91 05       	cpc	r25, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <__stack+0x217>
    2414:	d1 c0       	rjmp	.+418    	; 0x25b8 <__stack+0x3b9>
    2416:	89 ad       	ldd	r24, Y+57	; 0x39
    2418:	9a ad       	ldd	r25, Y+58	; 0x3a
    241a:	88 30       	cpi	r24, 0x08	; 8
    241c:	91 05       	cpc	r25, r1
    241e:	09 f0       	breq	.+2      	; 0x2422 <__stack+0x223>
    2420:	e7 c0       	rjmp	.+462    	; 0x25f0 <__stack+0x3f1>
            {
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2422:	ab e0       	ldi	r26, 0x0B	; 11
    2424:	b1 e0       	ldi	r27, 0x01	; 1
    2426:	eb e0       	ldi	r30, 0x0B	; 11
    2428:	f1 e0       	ldi	r31, 0x01	; 1
    242a:	80 81       	ld	r24, Z
    242c:	80 64       	ori	r24, 0x40	; 64
    242e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2430:	ab e0       	ldi	r26, 0x0B	; 11
    2432:	b1 e0       	ldi	r27, 0x01	; 1
    2434:	eb e0       	ldi	r30, 0x0B	; 11
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	80 81       	ld	r24, Z
    243a:	8f 7e       	andi	r24, 0xEF	; 239
    243c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    243e:	ab e0       	ldi	r26, 0x0B	; 11
    2440:	b1 e0       	ldi	r27, 0x01	; 1
    2442:	eb e0       	ldi	r30, 0x0B	; 11
    2444:	f1 e0       	ldi	r31, 0x01	; 1
    2446:	80 81       	ld	r24, Z
    2448:	8b 7f       	andi	r24, 0xFB	; 251
    244a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    244c:	ab e0       	ldi	r26, 0x0B	; 11
    244e:	b1 e0       	ldi	r27, 0x01	; 1
    2450:	eb e0       	ldi	r30, 0x0B	; 11
    2452:	f1 e0       	ldi	r31, 0x01	; 1
    2454:	80 81       	ld	r24, Z
    2456:	8e 7f       	andi	r24, 0xFE	; 254
    2458:	8c 93       	st	X, r24
    245a:	ca c0       	rjmp	.+404    	; 0x25f0 <__stack+0x3f1>
                break;
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    245c:	ab e0       	ldi	r26, 0x0B	; 11
    245e:	b1 e0       	ldi	r27, 0x01	; 1
    2460:	eb e0       	ldi	r30, 0x0B	; 11
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	80 81       	ld	r24, Z
    2466:	80 64       	ori	r24, 0x40	; 64
    2468:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    246a:	ab e0       	ldi	r26, 0x0B	; 11
    246c:	b1 e0       	ldi	r27, 0x01	; 1
    246e:	eb e0       	ldi	r30, 0x0B	; 11
    2470:	f1 e0       	ldi	r31, 0x01	; 1
    2472:	80 81       	ld	r24, Z
    2474:	80 61       	ori	r24, 0x10	; 16
    2476:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2478:	ab e0       	ldi	r26, 0x0B	; 11
    247a:	b1 e0       	ldi	r27, 0x01	; 1
    247c:	eb e0       	ldi	r30, 0x0B	; 11
    247e:	f1 e0       	ldi	r31, 0x01	; 1
    2480:	80 81       	ld	r24, Z
    2482:	8b 7f       	andi	r24, 0xFB	; 251
    2484:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2486:	ab e0       	ldi	r26, 0x0B	; 11
    2488:	b1 e0       	ldi	r27, 0x01	; 1
    248a:	eb e0       	ldi	r30, 0x0B	; 11
    248c:	f1 e0       	ldi	r31, 0x01	; 1
    248e:	80 81       	ld	r24, Z
    2490:	8e 7f       	andi	r24, 0xFE	; 254
    2492:	8c 93       	st	X, r24
    2494:	ad c0       	rjmp	.+346    	; 0x25f0 <__stack+0x3f1>
                break;
            case 2 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2496:	ab e0       	ldi	r26, 0x0B	; 11
    2498:	b1 e0       	ldi	r27, 0x01	; 1
    249a:	eb e0       	ldi	r30, 0x0B	; 11
    249c:	f1 e0       	ldi	r31, 0x01	; 1
    249e:	80 81       	ld	r24, Z
    24a0:	8f 7b       	andi	r24, 0xBF	; 191
    24a2:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24a4:	ab e0       	ldi	r26, 0x0B	; 11
    24a6:	b1 e0       	ldi	r27, 0x01	; 1
    24a8:	eb e0       	ldi	r30, 0x0B	; 11
    24aa:	f1 e0       	ldi	r31, 0x01	; 1
    24ac:	80 81       	ld	r24, Z
    24ae:	80 61       	ori	r24, 0x10	; 16
    24b0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24b2:	ab e0       	ldi	r26, 0x0B	; 11
    24b4:	b1 e0       	ldi	r27, 0x01	; 1
    24b6:	eb e0       	ldi	r30, 0x0B	; 11
    24b8:	f1 e0       	ldi	r31, 0x01	; 1
    24ba:	80 81       	ld	r24, Z
    24bc:	8b 7f       	andi	r24, 0xFB	; 251
    24be:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24c0:	ab e0       	ldi	r26, 0x0B	; 11
    24c2:	b1 e0       	ldi	r27, 0x01	; 1
    24c4:	eb e0       	ldi	r30, 0x0B	; 11
    24c6:	f1 e0       	ldi	r31, 0x01	; 1
    24c8:	80 81       	ld	r24, Z
    24ca:	8e 7f       	andi	r24, 0xFE	; 254
    24cc:	8c 93       	st	X, r24
    24ce:	90 c0       	rjmp	.+288    	; 0x25f0 <__stack+0x3f1>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    24d0:	ab e0       	ldi	r26, 0x0B	; 11
    24d2:	b1 e0       	ldi	r27, 0x01	; 1
    24d4:	eb e0       	ldi	r30, 0x0B	; 11
    24d6:	f1 e0       	ldi	r31, 0x01	; 1
    24d8:	80 81       	ld	r24, Z
    24da:	8f 7b       	andi	r24, 0xBF	; 191
    24dc:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24de:	ab e0       	ldi	r26, 0x0B	; 11
    24e0:	b1 e0       	ldi	r27, 0x01	; 1
    24e2:	eb e0       	ldi	r30, 0x0B	; 11
    24e4:	f1 e0       	ldi	r31, 0x01	; 1
    24e6:	80 81       	ld	r24, Z
    24e8:	80 61       	ori	r24, 0x10	; 16
    24ea:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    24ec:	ab e0       	ldi	r26, 0x0B	; 11
    24ee:	b1 e0       	ldi	r27, 0x01	; 1
    24f0:	eb e0       	ldi	r30, 0x0B	; 11
    24f2:	f1 e0       	ldi	r31, 0x01	; 1
    24f4:	80 81       	ld	r24, Z
    24f6:	84 60       	ori	r24, 0x04	; 4
    24f8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24fa:	ab e0       	ldi	r26, 0x0B	; 11
    24fc:	b1 e0       	ldi	r27, 0x01	; 1
    24fe:	eb e0       	ldi	r30, 0x0B	; 11
    2500:	f1 e0       	ldi	r31, 0x01	; 1
    2502:	80 81       	ld	r24, Z
    2504:	8e 7f       	andi	r24, 0xFE	; 254
    2506:	8c 93       	st	X, r24
    2508:	73 c0       	rjmp	.+230    	; 0x25f0 <__stack+0x3f1>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    250a:	ab e0       	ldi	r26, 0x0B	; 11
    250c:	b1 e0       	ldi	r27, 0x01	; 1
    250e:	eb e0       	ldi	r30, 0x0B	; 11
    2510:	f1 e0       	ldi	r31, 0x01	; 1
    2512:	80 81       	ld	r24, Z
    2514:	8f 7b       	andi	r24, 0xBF	; 191
    2516:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2518:	ab e0       	ldi	r26, 0x0B	; 11
    251a:	b1 e0       	ldi	r27, 0x01	; 1
    251c:	eb e0       	ldi	r30, 0x0B	; 11
    251e:	f1 e0       	ldi	r31, 0x01	; 1
    2520:	80 81       	ld	r24, Z
    2522:	8f 7e       	andi	r24, 0xEF	; 239
    2524:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2526:	ab e0       	ldi	r26, 0x0B	; 11
    2528:	b1 e0       	ldi	r27, 0x01	; 1
    252a:	eb e0       	ldi	r30, 0x0B	; 11
    252c:	f1 e0       	ldi	r31, 0x01	; 1
    252e:	80 81       	ld	r24, Z
    2530:	84 60       	ori	r24, 0x04	; 4
    2532:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2534:	ab e0       	ldi	r26, 0x0B	; 11
    2536:	b1 e0       	ldi	r27, 0x01	; 1
    2538:	eb e0       	ldi	r30, 0x0B	; 11
    253a:	f1 e0       	ldi	r31, 0x01	; 1
    253c:	80 81       	ld	r24, Z
    253e:	8e 7f       	andi	r24, 0xFE	; 254
    2540:	8c 93       	st	X, r24
    2542:	56 c0       	rjmp	.+172    	; 0x25f0 <__stack+0x3f1>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2544:	ab e0       	ldi	r26, 0x0B	; 11
    2546:	b1 e0       	ldi	r27, 0x01	; 1
    2548:	eb e0       	ldi	r30, 0x0B	; 11
    254a:	f1 e0       	ldi	r31, 0x01	; 1
    254c:	80 81       	ld	r24, Z
    254e:	8f 7b       	andi	r24, 0xBF	; 191
    2550:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2552:	ab e0       	ldi	r26, 0x0B	; 11
    2554:	b1 e0       	ldi	r27, 0x01	; 1
    2556:	eb e0       	ldi	r30, 0x0B	; 11
    2558:	f1 e0       	ldi	r31, 0x01	; 1
    255a:	80 81       	ld	r24, Z
    255c:	8f 7e       	andi	r24, 0xEF	; 239
    255e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2560:	ab e0       	ldi	r26, 0x0B	; 11
    2562:	b1 e0       	ldi	r27, 0x01	; 1
    2564:	eb e0       	ldi	r30, 0x0B	; 11
    2566:	f1 e0       	ldi	r31, 0x01	; 1
    2568:	80 81       	ld	r24, Z
    256a:	84 60       	ori	r24, 0x04	; 4
    256c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    256e:	ab e0       	ldi	r26, 0x0B	; 11
    2570:	b1 e0       	ldi	r27, 0x01	; 1
    2572:	eb e0       	ldi	r30, 0x0B	; 11
    2574:	f1 e0       	ldi	r31, 0x01	; 1
    2576:	80 81       	ld	r24, Z
    2578:	81 60       	ori	r24, 0x01	; 1
    257a:	8c 93       	st	X, r24
    257c:	39 c0       	rjmp	.+114    	; 0x25f0 <__stack+0x3f1>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    257e:	ab e0       	ldi	r26, 0x0B	; 11
    2580:	b1 e0       	ldi	r27, 0x01	; 1
    2582:	eb e0       	ldi	r30, 0x0B	; 11
    2584:	f1 e0       	ldi	r31, 0x01	; 1
    2586:	80 81       	ld	r24, Z
    2588:	8f 7b       	andi	r24, 0xBF	; 191
    258a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    258c:	ab e0       	ldi	r26, 0x0B	; 11
    258e:	b1 e0       	ldi	r27, 0x01	; 1
    2590:	eb e0       	ldi	r30, 0x0B	; 11
    2592:	f1 e0       	ldi	r31, 0x01	; 1
    2594:	80 81       	ld	r24, Z
    2596:	8f 7e       	andi	r24, 0xEF	; 239
    2598:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    259a:	ab e0       	ldi	r26, 0x0B	; 11
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	eb e0       	ldi	r30, 0x0B	; 11
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	80 81       	ld	r24, Z
    25a4:	8b 7f       	andi	r24, 0xFB	; 251
    25a6:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25a8:	ab e0       	ldi	r26, 0x0B	; 11
    25aa:	b1 e0       	ldi	r27, 0x01	; 1
    25ac:	eb e0       	ldi	r30, 0x0B	; 11
    25ae:	f1 e0       	ldi	r31, 0x01	; 1
    25b0:	80 81       	ld	r24, Z
    25b2:	81 60       	ori	r24, 0x01	; 1
    25b4:	8c 93       	st	X, r24
    25b6:	1c c0       	rjmp	.+56     	; 0x25f0 <__stack+0x3f1>
                break;
            case 7 :
                PORTStepper4 |= (1 << PStepper4_1);
    25b8:	ab e0       	ldi	r26, 0x0B	; 11
    25ba:	b1 e0       	ldi	r27, 0x01	; 1
    25bc:	eb e0       	ldi	r30, 0x0B	; 11
    25be:	f1 e0       	ldi	r31, 0x01	; 1
    25c0:	80 81       	ld	r24, Z
    25c2:	80 64       	ori	r24, 0x40	; 64
    25c4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25c6:	ab e0       	ldi	r26, 0x0B	; 11
    25c8:	b1 e0       	ldi	r27, 0x01	; 1
    25ca:	eb e0       	ldi	r30, 0x0B	; 11
    25cc:	f1 e0       	ldi	r31, 0x01	; 1
    25ce:	80 81       	ld	r24, Z
    25d0:	8f 7e       	andi	r24, 0xEF	; 239
    25d2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    25d4:	ab e0       	ldi	r26, 0x0B	; 11
    25d6:	b1 e0       	ldi	r27, 0x01	; 1
    25d8:	eb e0       	ldi	r30, 0x0B	; 11
    25da:	f1 e0       	ldi	r31, 0x01	; 1
    25dc:	80 81       	ld	r24, Z
    25de:	8b 7f       	andi	r24, 0xFB	; 251
    25e0:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25e2:	ab e0       	ldi	r26, 0x0B	; 11
    25e4:	b1 e0       	ldi	r27, 0x01	; 1
    25e6:	eb e0       	ldi	r30, 0x0B	; 11
    25e8:	f1 e0       	ldi	r31, 0x01	; 1
    25ea:	80 81       	ld	r24, Z
    25ec:	81 60       	ori	r24, 0x01	; 1
    25ee:	8c 93       	st	X, r24
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	aa e7       	ldi	r26, 0x7A	; 122
    25f6:	b4 e4       	ldi	r27, 0x44	; 68
    25f8:	8d 8b       	std	Y+21, r24	; 0x15
    25fa:	9e 8b       	std	Y+22, r25	; 0x16
    25fc:	af 8b       	std	Y+23, r26	; 0x17
    25fe:	b8 8f       	std	Y+24, r27	; 0x18
=======
    2800:	88 e0       	ldi	r24, 0x08	; 8
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9a ab       	std	Y+50, r25	; 0x32
    2806:	89 ab       	std	Y+49, r24	; 0x31
    2808:	e3 c1       	rjmp	.+966    	; 0x2bd0 <steppermotor4Write+0x7da>
        {
            switch (i)
    280a:	89 a9       	ldd	r24, Y+49	; 0x31
    280c:	9a a9       	ldd	r25, Y+50	; 0x32
    280e:	9a af       	std	Y+58, r25	; 0x3a
    2810:	89 af       	std	Y+57, r24	; 0x39
    2812:	89 ad       	ldd	r24, Y+57	; 0x39
    2814:	9a ad       	ldd	r25, Y+58	; 0x3a
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	91 05       	cpc	r25, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <steppermotor4Write+0x428>
    281c:	a3 c0       	rjmp	.+326    	; 0x2964 <steppermotor4Write+0x56e>
    281e:	89 ad       	ldd	r24, Y+57	; 0x39
    2820:	9a ad       	ldd	r25, Y+58	; 0x3a
    2822:	85 30       	cpi	r24, 0x05	; 5
    2824:	91 05       	cpc	r25, r1
    2826:	94 f4       	brge	.+36     	; 0x284c <steppermotor4Write+0x456>
    2828:	89 ad       	ldd	r24, Y+57	; 0x39
    282a:	9a ad       	ldd	r25, Y+58	; 0x3a
    282c:	82 30       	cpi	r24, 0x02	; 2
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <steppermotor4Write+0x43e>
    2832:	5e c0       	rjmp	.+188    	; 0x28f0 <steppermotor4Write+0x4fa>
    2834:	89 ad       	ldd	r24, Y+57	; 0x39
    2836:	9a ad       	ldd	r25, Y+58	; 0x3a
    2838:	83 30       	cpi	r24, 0x03	; 3
    283a:	91 05       	cpc	r25, r1
    283c:	0c f0       	brlt	.+2      	; 0x2840 <steppermotor4Write+0x44a>
    283e:	75 c0       	rjmp	.+234    	; 0x292a <steppermotor4Write+0x534>
    2840:	89 ad       	ldd	r24, Y+57	; 0x39
    2842:	9a ad       	ldd	r25, Y+58	; 0x3a
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	91 05       	cpc	r25, r1
    2848:	b1 f1       	breq	.+108    	; 0x28b6 <steppermotor4Write+0x4c0>
    284a:	ff c0       	rjmp	.+510    	; 0x2a4a <steppermotor4Write+0x654>
    284c:	89 ad       	ldd	r24, Y+57	; 0x39
    284e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2850:	86 30       	cpi	r24, 0x06	; 6
    2852:	91 05       	cpc	r25, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <steppermotor4Write+0x462>
    2856:	c0 c0       	rjmp	.+384    	; 0x29d8 <steppermotor4Write+0x5e2>
    2858:	89 ad       	ldd	r24, Y+57	; 0x39
    285a:	9a ad       	ldd	r25, Y+58	; 0x3a
    285c:	86 30       	cpi	r24, 0x06	; 6
    285e:	91 05       	cpc	r25, r1
    2860:	0c f4       	brge	.+2      	; 0x2864 <steppermotor4Write+0x46e>
    2862:	9d c0       	rjmp	.+314    	; 0x299e <steppermotor4Write+0x5a8>
    2864:	89 ad       	ldd	r24, Y+57	; 0x39
    2866:	9a ad       	ldd	r25, Y+58	; 0x3a
    2868:	87 30       	cpi	r24, 0x07	; 7
    286a:	91 05       	cpc	r25, r1
    286c:	09 f4       	brne	.+2      	; 0x2870 <steppermotor4Write+0x47a>
    286e:	d1 c0       	rjmp	.+418    	; 0x2a12 <steppermotor4Write+0x61c>
    2870:	89 ad       	ldd	r24, Y+57	; 0x39
    2872:	9a ad       	ldd	r25, Y+58	; 0x3a
    2874:	88 30       	cpi	r24, 0x08	; 8
    2876:	91 05       	cpc	r25, r1
    2878:	09 f0       	breq	.+2      	; 0x287c <steppermotor4Write+0x486>
    287a:	e7 c0       	rjmp	.+462    	; 0x2a4a <steppermotor4Write+0x654>
            {
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    287c:	ab e0       	ldi	r26, 0x0B	; 11
    287e:	b1 e0       	ldi	r27, 0x01	; 1
    2880:	eb e0       	ldi	r30, 0x0B	; 11
    2882:	f1 e0       	ldi	r31, 0x01	; 1
    2884:	80 81       	ld	r24, Z
    2886:	80 64       	ori	r24, 0x40	; 64
    2888:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    288a:	ab e0       	ldi	r26, 0x0B	; 11
    288c:	b1 e0       	ldi	r27, 0x01	; 1
    288e:	eb e0       	ldi	r30, 0x0B	; 11
    2890:	f1 e0       	ldi	r31, 0x01	; 1
    2892:	80 81       	ld	r24, Z
    2894:	8f 7e       	andi	r24, 0xEF	; 239
    2896:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2898:	ab e0       	ldi	r26, 0x0B	; 11
    289a:	b1 e0       	ldi	r27, 0x01	; 1
    289c:	eb e0       	ldi	r30, 0x0B	; 11
    289e:	f1 e0       	ldi	r31, 0x01	; 1
    28a0:	80 81       	ld	r24, Z
    28a2:	8b 7f       	andi	r24, 0xFB	; 251
    28a4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    28a6:	ab e0       	ldi	r26, 0x0B	; 11
    28a8:	b1 e0       	ldi	r27, 0x01	; 1
    28aa:	eb e0       	ldi	r30, 0x0B	; 11
    28ac:	f1 e0       	ldi	r31, 0x01	; 1
    28ae:	80 81       	ld	r24, Z
    28b0:	8e 7f       	andi	r24, 0xFE	; 254
    28b2:	8c 93       	st	X, r24
    28b4:	ca c0       	rjmp	.+404    	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    28b6:	ab e0       	ldi	r26, 0x0B	; 11
    28b8:	b1 e0       	ldi	r27, 0x01	; 1
    28ba:	eb e0       	ldi	r30, 0x0B	; 11
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	80 81       	ld	r24, Z
    28c0:	80 64       	ori	r24, 0x40	; 64
    28c2:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    28c4:	ab e0       	ldi	r26, 0x0B	; 11
    28c6:	b1 e0       	ldi	r27, 0x01	; 1
    28c8:	eb e0       	ldi	r30, 0x0B	; 11
    28ca:	f1 e0       	ldi	r31, 0x01	; 1
    28cc:	80 81       	ld	r24, Z
    28ce:	80 61       	ori	r24, 0x10	; 16
    28d0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    28d2:	ab e0       	ldi	r26, 0x0B	; 11
    28d4:	b1 e0       	ldi	r27, 0x01	; 1
    28d6:	eb e0       	ldi	r30, 0x0B	; 11
    28d8:	f1 e0       	ldi	r31, 0x01	; 1
    28da:	80 81       	ld	r24, Z
    28dc:	8b 7f       	andi	r24, 0xFB	; 251
    28de:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    28e0:	ab e0       	ldi	r26, 0x0B	; 11
    28e2:	b1 e0       	ldi	r27, 0x01	; 1
    28e4:	eb e0       	ldi	r30, 0x0B	; 11
    28e6:	f1 e0       	ldi	r31, 0x01	; 1
    28e8:	80 81       	ld	r24, Z
    28ea:	8e 7f       	andi	r24, 0xFE	; 254
    28ec:	8c 93       	st	X, r24
    28ee:	ad c0       	rjmp	.+346    	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 2 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    28f0:	ab e0       	ldi	r26, 0x0B	; 11
    28f2:	b1 e0       	ldi	r27, 0x01	; 1
    28f4:	eb e0       	ldi	r30, 0x0B	; 11
    28f6:	f1 e0       	ldi	r31, 0x01	; 1
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 7b       	andi	r24, 0xBF	; 191
    28fc:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    28fe:	ab e0       	ldi	r26, 0x0B	; 11
    2900:	b1 e0       	ldi	r27, 0x01	; 1
    2902:	eb e0       	ldi	r30, 0x0B	; 11
    2904:	f1 e0       	ldi	r31, 0x01	; 1
    2906:	80 81       	ld	r24, Z
    2908:	80 61       	ori	r24, 0x10	; 16
    290a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    290c:	ab e0       	ldi	r26, 0x0B	; 11
    290e:	b1 e0       	ldi	r27, 0x01	; 1
    2910:	eb e0       	ldi	r30, 0x0B	; 11
    2912:	f1 e0       	ldi	r31, 0x01	; 1
    2914:	80 81       	ld	r24, Z
    2916:	8b 7f       	andi	r24, 0xFB	; 251
    2918:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    291a:	ab e0       	ldi	r26, 0x0B	; 11
    291c:	b1 e0       	ldi	r27, 0x01	; 1
    291e:	eb e0       	ldi	r30, 0x0B	; 11
    2920:	f1 e0       	ldi	r31, 0x01	; 1
    2922:	80 81       	ld	r24, Z
    2924:	8e 7f       	andi	r24, 0xFE	; 254
    2926:	8c 93       	st	X, r24
    2928:	90 c0       	rjmp	.+288    	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    292a:	ab e0       	ldi	r26, 0x0B	; 11
    292c:	b1 e0       	ldi	r27, 0x01	; 1
    292e:	eb e0       	ldi	r30, 0x0B	; 11
    2930:	f1 e0       	ldi	r31, 0x01	; 1
    2932:	80 81       	ld	r24, Z
    2934:	8f 7b       	andi	r24, 0xBF	; 191
    2936:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2938:	ab e0       	ldi	r26, 0x0B	; 11
    293a:	b1 e0       	ldi	r27, 0x01	; 1
    293c:	eb e0       	ldi	r30, 0x0B	; 11
    293e:	f1 e0       	ldi	r31, 0x01	; 1
    2940:	80 81       	ld	r24, Z
    2942:	80 61       	ori	r24, 0x10	; 16
    2944:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2946:	ab e0       	ldi	r26, 0x0B	; 11
    2948:	b1 e0       	ldi	r27, 0x01	; 1
    294a:	eb e0       	ldi	r30, 0x0B	; 11
    294c:	f1 e0       	ldi	r31, 0x01	; 1
    294e:	80 81       	ld	r24, Z
    2950:	84 60       	ori	r24, 0x04	; 4
    2952:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2954:	ab e0       	ldi	r26, 0x0B	; 11
    2956:	b1 e0       	ldi	r27, 0x01	; 1
    2958:	eb e0       	ldi	r30, 0x0B	; 11
    295a:	f1 e0       	ldi	r31, 0x01	; 1
    295c:	80 81       	ld	r24, Z
    295e:	8e 7f       	andi	r24, 0xFE	; 254
    2960:	8c 93       	st	X, r24
    2962:	73 c0       	rjmp	.+230    	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2964:	ab e0       	ldi	r26, 0x0B	; 11
    2966:	b1 e0       	ldi	r27, 0x01	; 1
    2968:	eb e0       	ldi	r30, 0x0B	; 11
    296a:	f1 e0       	ldi	r31, 0x01	; 1
    296c:	80 81       	ld	r24, Z
    296e:	8f 7b       	andi	r24, 0xBF	; 191
    2970:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2972:	ab e0       	ldi	r26, 0x0B	; 11
    2974:	b1 e0       	ldi	r27, 0x01	; 1
    2976:	eb e0       	ldi	r30, 0x0B	; 11
    2978:	f1 e0       	ldi	r31, 0x01	; 1
    297a:	80 81       	ld	r24, Z
    297c:	8f 7e       	andi	r24, 0xEF	; 239
    297e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2980:	ab e0       	ldi	r26, 0x0B	; 11
    2982:	b1 e0       	ldi	r27, 0x01	; 1
    2984:	eb e0       	ldi	r30, 0x0B	; 11
    2986:	f1 e0       	ldi	r31, 0x01	; 1
    2988:	80 81       	ld	r24, Z
    298a:	84 60       	ori	r24, 0x04	; 4
    298c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    298e:	ab e0       	ldi	r26, 0x0B	; 11
    2990:	b1 e0       	ldi	r27, 0x01	; 1
    2992:	eb e0       	ldi	r30, 0x0B	; 11
    2994:	f1 e0       	ldi	r31, 0x01	; 1
    2996:	80 81       	ld	r24, Z
    2998:	8e 7f       	andi	r24, 0xFE	; 254
    299a:	8c 93       	st	X, r24
    299c:	56 c0       	rjmp	.+172    	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    299e:	ab e0       	ldi	r26, 0x0B	; 11
    29a0:	b1 e0       	ldi	r27, 0x01	; 1
    29a2:	eb e0       	ldi	r30, 0x0B	; 11
    29a4:	f1 e0       	ldi	r31, 0x01	; 1
    29a6:	80 81       	ld	r24, Z
    29a8:	8f 7b       	andi	r24, 0xBF	; 191
    29aa:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    29ac:	ab e0       	ldi	r26, 0x0B	; 11
    29ae:	b1 e0       	ldi	r27, 0x01	; 1
    29b0:	eb e0       	ldi	r30, 0x0B	; 11
    29b2:	f1 e0       	ldi	r31, 0x01	; 1
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7e       	andi	r24, 0xEF	; 239
    29b8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    29ba:	ab e0       	ldi	r26, 0x0B	; 11
    29bc:	b1 e0       	ldi	r27, 0x01	; 1
    29be:	eb e0       	ldi	r30, 0x0B	; 11
    29c0:	f1 e0       	ldi	r31, 0x01	; 1
    29c2:	80 81       	ld	r24, Z
    29c4:	84 60       	ori	r24, 0x04	; 4
    29c6:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    29c8:	ab e0       	ldi	r26, 0x0B	; 11
    29ca:	b1 e0       	ldi	r27, 0x01	; 1
    29cc:	eb e0       	ldi	r30, 0x0B	; 11
    29ce:	f1 e0       	ldi	r31, 0x01	; 1
    29d0:	80 81       	ld	r24, Z
    29d2:	81 60       	ori	r24, 0x01	; 1
    29d4:	8c 93       	st	X, r24
    29d6:	39 c0       	rjmp	.+114    	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    29d8:	ab e0       	ldi	r26, 0x0B	; 11
    29da:	b1 e0       	ldi	r27, 0x01	; 1
    29dc:	eb e0       	ldi	r30, 0x0B	; 11
    29de:	f1 e0       	ldi	r31, 0x01	; 1
    29e0:	80 81       	ld	r24, Z
    29e2:	8f 7b       	andi	r24, 0xBF	; 191
    29e4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    29e6:	ab e0       	ldi	r26, 0x0B	; 11
    29e8:	b1 e0       	ldi	r27, 0x01	; 1
    29ea:	eb e0       	ldi	r30, 0x0B	; 11
    29ec:	f1 e0       	ldi	r31, 0x01	; 1
    29ee:	80 81       	ld	r24, Z
    29f0:	8f 7e       	andi	r24, 0xEF	; 239
    29f2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    29f4:	ab e0       	ldi	r26, 0x0B	; 11
    29f6:	b1 e0       	ldi	r27, 0x01	; 1
    29f8:	eb e0       	ldi	r30, 0x0B	; 11
    29fa:	f1 e0       	ldi	r31, 0x01	; 1
    29fc:	80 81       	ld	r24, Z
    29fe:	8b 7f       	andi	r24, 0xFB	; 251
    2a00:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2a02:	ab e0       	ldi	r26, 0x0B	; 11
    2a04:	b1 e0       	ldi	r27, 0x01	; 1
    2a06:	eb e0       	ldi	r30, 0x0B	; 11
    2a08:	f1 e0       	ldi	r31, 0x01	; 1
    2a0a:	80 81       	ld	r24, Z
    2a0c:	81 60       	ori	r24, 0x01	; 1
    2a0e:	8c 93       	st	X, r24
    2a10:	1c c0       	rjmp	.+56     	; 0x2a4a <steppermotor4Write+0x654>
                break;
            case 7 :
                PORTStepper4 |= (1 << PStepper4_1);
    2a12:	ab e0       	ldi	r26, 0x0B	; 11
    2a14:	b1 e0       	ldi	r27, 0x01	; 1
    2a16:	eb e0       	ldi	r30, 0x0B	; 11
    2a18:	f1 e0       	ldi	r31, 0x01	; 1
    2a1a:	80 81       	ld	r24, Z
    2a1c:	80 64       	ori	r24, 0x40	; 64
    2a1e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2a20:	ab e0       	ldi	r26, 0x0B	; 11
    2a22:	b1 e0       	ldi	r27, 0x01	; 1
    2a24:	eb e0       	ldi	r30, 0x0B	; 11
    2a26:	f1 e0       	ldi	r31, 0x01	; 1
    2a28:	80 81       	ld	r24, Z
    2a2a:	8f 7e       	andi	r24, 0xEF	; 239
    2a2c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2a2e:	ab e0       	ldi	r26, 0x0B	; 11
    2a30:	b1 e0       	ldi	r27, 0x01	; 1
    2a32:	eb e0       	ldi	r30, 0x0B	; 11
    2a34:	f1 e0       	ldi	r31, 0x01	; 1
    2a36:	80 81       	ld	r24, Z
    2a38:	8b 7f       	andi	r24, 0xFB	; 251
    2a3a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2a3c:	ab e0       	ldi	r26, 0x0B	; 11
    2a3e:	b1 e0       	ldi	r27, 0x01	; 1
    2a40:	eb e0       	ldi	r30, 0x0B	; 11
    2a42:	f1 e0       	ldi	r31, 0x01	; 1
    2a44:	80 81       	ld	r24, Z
    2a46:	81 60       	ori	r24, 0x01	; 1
    2a48:	8c 93       	st	X, r24
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	aa e7       	ldi	r26, 0x7A	; 122
    2a50:	b4 e4       	ldi	r27, 0x44	; 68
    2a52:	8d 8b       	std	Y+21, r24	; 0x15
    2a54:	9e 8b       	std	Y+22, r25	; 0x16
    2a56:	af 8b       	std	Y+23, r26	; 0x17
    2a58:	b8 8f       	std	Y+24, r27	; 0x18
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	2b ea       	ldi	r18, 0xAB	; 171
    260a:	3a ea       	ldi	r19, 0xAA	; 170
    260c:	4a ea       	ldi	r20, 0xAA	; 170
    260e:	50 e4       	ldi	r21, 0x40	; 64
    2610:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	89 8b       	std	Y+17, r24	; 0x11
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	ab 8b       	std	Y+19, r26	; 0x13
    261e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2620:	69 89       	ldd	r22, Y+17	; 0x11
    2622:	7a 89       	ldd	r23, Y+18	; 0x12
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	1c f4       	brge	.+6      	; 0x263e <__stack+0x43f>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	88 8b       	std	Y+16, r24	; 0x10
    263c:	91 c0       	rjmp	.+290    	; 0x2760 <__stack+0x561>
	else if (__tmp > 255)
    263e:	69 89       	ldd	r22, Y+17	; 0x11
    2640:	7a 89       	ldd	r23, Y+18	; 0x12
    2642:	8b 89       	ldd	r24, Y+19	; 0x13
    2644:	9c 89       	ldd	r25, Y+20	; 0x14
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	53 e4       	ldi	r21, 0x43	; 67
    264e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	0c f0       	brlt	.+2      	; 0x2658 <__stack+0x459>
    2656:	7b c0       	rjmp	.+246    	; 0x274e <__stack+0x54f>
	{
		_delay_ms(__us / 1000.0);
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8c 87       	std	Y+12, r24	; 0x0c
    2672:	9d 87       	std	Y+13, r25	; 0x0d
    2674:	ae 87       	std	Y+14, r26	; 0x0e
    2676:	bf 87       	std	Y+15, r27	; 0x0f
=======
    2a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a60:	98 8d       	ldd	r25, Y+24	; 0x18
    2a62:	2b ea       	ldi	r18, 0xAB	; 171
    2a64:	3a ea       	ldi	r19, 0xAA	; 170
    2a66:	4a ea       	ldi	r20, 0xAA	; 170
    2a68:	50 e4       	ldi	r21, 0x40	; 64
    2a6a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	89 8b       	std	Y+17, r24	; 0x11
    2a74:	9a 8b       	std	Y+18, r25	; 0x12
    2a76:	ab 8b       	std	Y+19, r26	; 0x13
    2a78:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a7a:	69 89       	ldd	r22, Y+17	; 0x11
    2a7c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	1c f4       	brge	.+6      	; 0x2a98 <steppermotor4Write+0x6a2>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	88 8b       	std	Y+16, r24	; 0x10
    2a96:	91 c0       	rjmp	.+290    	; 0x2bba <steppermotor4Write+0x7c4>
	else if (__tmp > 255)
    2a98:	69 89       	ldd	r22, Y+17	; 0x11
    2a9a:	7a 89       	ldd	r23, Y+18	; 0x12
    2a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4f e7       	ldi	r20, 0x7F	; 127
    2aa6:	53 e4       	ldi	r21, 0x43	; 67
    2aa8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    2aac:	18 16       	cp	r1, r24
    2aae:	0c f0       	brlt	.+2      	; 0x2ab2 <steppermotor4Write+0x6bc>
    2ab0:	7b c0       	rjmp	.+246    	; 0x2ba8 <steppermotor4Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    2ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a e7       	ldi	r20, 0x7A	; 122
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	8c 87       	std	Y+12, r24	; 0x0c
    2acc:	9d 87       	std	Y+13, r25	; 0x0d
    2ace:	ae 87       	std	Y+14, r26	; 0x0e
    2ad0:	bf 87       	std	Y+15, r27	; 0x0f
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    2678:	6c 85       	ldd	r22, Y+12	; 0x0c
    267a:	7d 85       	ldd	r23, Y+13	; 0x0d
    267c:	8e 85       	ldd	r24, Y+14	; 0x0e
    267e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	55 e4       	ldi	r21, 0x45	; 69
    2688:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	88 87       	std	Y+8, r24	; 0x08
    2692:	99 87       	std	Y+9, r25	; 0x09
    2694:	aa 87       	std	Y+10, r26	; 0x0a
    2696:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2698:	68 85       	ldd	r22, Y+8	; 0x08
    269a:	79 85       	ldd	r23, Y+9	; 0x09
    269c:	8a 85       	ldd	r24, Y+10	; 0x0a
    269e:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	2c f4       	brge	.+10     	; 0x26ba <__stack+0x4bb>
		__ticks = 1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9f 83       	std	Y+7, r25	; 0x07
    26b6:	8e 83       	std	Y+6, r24	; 0x06
    26b8:	3f c0       	rjmp	.+126    	; 0x2738 <__stack+0x539>
	else if (__tmp > 65535)
    26ba:	68 85       	ldd	r22, Y+8	; 0x08
    26bc:	79 85       	ldd	r23, Y+9	; 0x09
    26be:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	57 e4       	ldi	r21, 0x47	; 71
    26ca:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	4c f5       	brge	.+82     	; 0x2724 <__stack+0x525>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9f 83       	std	Y+7, r25	; 0x07
    26f8:	8e 83       	std	Y+6, r24	; 0x06
    26fa:	0f c0       	rjmp	.+30     	; 0x271a <__stack+0x51b>
    26fc:	80 e9       	ldi	r24, 0x90	; 144
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	9d 83       	std	Y+5, r25	; 0x05
    2702:	8c 83       	std	Y+4, r24	; 0x04
=======
    2ad2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ad4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ad6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ad8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a e7       	ldi	r20, 0x7A	; 122
    2ae0:	55 e4       	ldi	r21, 0x45	; 69
    2ae2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	88 87       	std	Y+8, r24	; 0x08
    2aec:	99 87       	std	Y+9, r25	; 0x09
    2aee:	aa 87       	std	Y+10, r26	; 0x0a
    2af0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2af2:	68 85       	ldd	r22, Y+8	; 0x08
    2af4:	79 85       	ldd	r23, Y+9	; 0x09
    2af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e8       	ldi	r20, 0x80	; 128
    2b00:	5f e3       	ldi	r21, 0x3F	; 63
    2b02:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2b06:	88 23       	and	r24, r24
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <steppermotor4Write+0x71e>
		__ticks = 1;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9f 83       	std	Y+7, r25	; 0x07
    2b10:	8e 83       	std	Y+6, r24	; 0x06
    2b12:	3f c0       	rjmp	.+126    	; 0x2b92 <steppermotor4Write+0x79c>
	else if (__tmp > 65535)
    2b14:	68 85       	ldd	r22, Y+8	; 0x08
    2b16:	79 85       	ldd	r23, Y+9	; 0x09
    2b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	3f ef       	ldi	r19, 0xFF	; 255
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	57 e4       	ldi	r21, 0x47	; 71
    2b24:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <steppermotor4Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b30:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b32:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9f 83       	std	Y+7, r25	; 0x07
    2b52:	8e 83       	std	Y+6, r24	; 0x06
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <steppermotor4Write+0x77e>
    2b56:	80 e9       	ldi	r24, 0x90	; 144
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	9d 83       	std	Y+5, r25	; 0x05
    2b5c:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	9d 81       	ldd	r25, Y+5	; 0x05
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <__stack+0x509>
    270c:	9d 83       	std	Y+5, r25	; 0x05
    270e:	8c 83       	std	Y+4, r24	; 0x04
=======
    2b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b60:	9d 81       	ldd	r25, Y+5	; 0x05
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <steppermotor4Write+0x76c>
    2b66:	9d 83       	std	Y+5, r25	; 0x05
    2b68:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	9f 81       	ldd	r25, Y+7	; 0x07
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	9f 83       	std	Y+7, r25	; 0x07
    2718:	8e 83       	std	Y+6, r24	; 0x06
=======
    2b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	9f 83       	std	Y+7, r25	; 0x07
    2b72:	8e 83       	std	Y+6, r24	; 0x06
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    271a:	8e 81       	ldd	r24, Y+6	; 0x06
    271c:	9f 81       	ldd	r25, Y+7	; 0x07
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	69 f7       	brne	.-38     	; 0x26fc <__stack+0x4fd>
    2722:	24 c0       	rjmp	.+72     	; 0x276c <__stack+0x56d>
=======
    2b74:	8e 81       	ldd	r24, Y+6	; 0x06
    2b76:	9f 81       	ldd	r25, Y+7	; 0x07
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	69 f7       	brne	.-38     	; 0x2b56 <steppermotor4Write+0x760>
    2b7c:	24 c0       	rjmp	.+72     	; 0x2bc6 <steppermotor4Write+0x7d0>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    2724:	68 85       	ldd	r22, Y+8	; 0x08
    2726:	79 85       	ldd	r23, Y+9	; 0x09
    2728:	8a 85       	ldd	r24, Y+10	; 0x0a
    272a:	9b 85       	ldd	r25, Y+11	; 0x0b
    272c:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9f 83       	std	Y+7, r25	; 0x07
    2736:	8e 83       	std	Y+6, r24	; 0x06
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	9f 81       	ldd	r25, Y+7	; 0x07
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <__stack+0x545>
    2748:	9b 83       	std	Y+3, r25	; 0x03
    274a:	8a 83       	std	Y+2, r24	; 0x02
    274c:	0f c0       	rjmp	.+30     	; 0x276c <__stack+0x56d>
=======
    2b7e:	68 85       	ldd	r22, Y+8	; 0x08
    2b80:	79 85       	ldd	r23, Y+9	; 0x09
    2b82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b86:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9f 83       	std	Y+7, r25	; 0x07
    2b90:	8e 83       	std	Y+6, r24	; 0x06
    2b92:	8e 81       	ldd	r24, Y+6	; 0x06
    2b94:	9f 81       	ldd	r25, Y+7	; 0x07
    2b96:	9b 83       	std	Y+3, r25	; 0x03
    2b98:	8a 83       	std	Y+2, r24	; 0x02
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <steppermotor4Write+0x7a8>
    2ba2:	9b 83       	std	Y+3, r25	; 0x03
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
    2ba6:	0f c0       	rjmp	.+30     	; 0x2bc6 <steppermotor4Write+0x7d0>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    274e:	69 89       	ldd	r22, Y+17	; 0x11
    2750:	7a 89       	ldd	r23, Y+18	; 0x12
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	88 8b       	std	Y+16, r24	; 0x10
    2760:	88 89       	ldd	r24, Y+16	; 0x10
    2762:	89 83       	std	Y+1, r24	; 0x01
=======
    2ba8:	69 89       	ldd	r22, Y+17	; 0x11
    2baa:	7a 89       	ldd	r23, Y+18	; 0x12
    2bac:	8b 89       	ldd	r24, Y+19	; 0x13
    2bae:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb0:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	88 8b       	std	Y+16, r24	; 0x10
    2bba:	88 89       	ldd	r24, Y+16	; 0x10
    2bbc:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	8a 95       	dec	r24
    2768:	f1 f7       	brne	.-4      	; 0x2766 <__stack+0x567>
    276a:	89 83       	std	Y+1, r24	; 0x01
=======
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8a 95       	dec	r24
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <steppermotor4Write+0x7ca>
    2bc4:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
<<<<<<< Updated upstream
    276c:	89 a9       	ldd	r24, Y+49	; 0x31
    276e:	9a a9       	ldd	r25, Y+50	; 0x32
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9a ab       	std	Y+50, r25	; 0x32
    2774:	89 ab       	std	Y+49, r24	; 0x31
    2776:	89 a9       	ldd	r24, Y+49	; 0x31
    2778:	9a a9       	ldd	r25, Y+50	; 0x32
    277a:	18 16       	cp	r1, r24
    277c:	19 06       	cpc	r1, r25
    277e:	0c f4       	brge	.+2      	; 0x2782 <__stack+0x583>
    2780:	17 ce       	rjmp	.-978    	; 0x23b0 <__stack+0x1b1>
=======
    2bc6:	89 a9       	ldd	r24, Y+49	; 0x31
    2bc8:	9a a9       	ldd	r25, Y+50	; 0x32
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	9a ab       	std	Y+50, r25	; 0x32
    2bce:	89 ab       	std	Y+49, r24	; 0x31
    2bd0:	89 a9       	ldd	r24, Y+49	; 0x31
    2bd2:	9a a9       	ldd	r25, Y+50	; 0x32
    2bd4:	18 16       	cp	r1, r24
    2bd6:	19 06       	cpc	r1, r25
    2bd8:	0c f4       	brge	.+2      	; 0x2bdc <steppermotor4Write+0x7e6>
    2bda:	17 ce       	rjmp	.-978    	; 0x280a <steppermotor4Write+0x414>
>>>>>>> Stashed changes
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
<<<<<<< Updated upstream
    2782:	1e aa       	std	Y+54, r1	; 0x36
    2784:	1d aa       	std	Y+53, r1	; 0x35
=======
    2bdc:	1e aa       	std	Y+54, r1	; 0x36
    2bde:	1d aa       	std	Y+53, r1	; 0x35
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
<<<<<<< Updated upstream
    2786:	8d a9       	ldd	r24, Y+53	; 0x35
    2788:	9e a9       	ldd	r25, Y+54	; 0x36
    278a:	82 30       	cpi	r24, 0x02	; 2
    278c:	91 05       	cpc	r25, r1
    278e:	09 f4       	brne	.+2      	; 0x2792 <__stack+0x593>
    2790:	0a ce       	rjmp	.-1004   	; 0x23a6 <__stack+0x1a7>
=======
    2be0:	8d a9       	ldd	r24, Y+53	; 0x35
    2be2:	9e a9       	ldd	r25, Y+54	; 0x36
    2be4:	82 30       	cpi	r24, 0x02	; 2
    2be6:	91 05       	cpc	r25, r1
    2be8:	09 f4       	brne	.+2      	; 0x2bec <steppermotor4Write+0x7f6>
    2bea:	0a ce       	rjmp	.-1004   	; 0x2800 <steppermotor4Write+0x40a>
>>>>>>> Stashed changes
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
<<<<<<< Updated upstream
    2792:	ea 96       	adiw	r28, 0x3a	; 58
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <Vooruit>:

void Vooruit(int Steppermotortijd)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <Vooruit+0x6>
    27aa:	0f 92       	push	r0
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    27b4:	1a 82       	std	Y+2, r1	; 0x02
    27b6:	19 82       	std	Y+1, r1	; 0x01
    27b8:	15 c0       	rjmp	.+42     	; 0x27e4 <Vooruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 c2 03 	call	0x784	; 0x784 <steppermotor1Write>
        steppermotor2Write(1);
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <steppermotor2Write>
        steppermotor3Write(1);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 ca 0b 	call	0x1794	; 0x1794 <steppermotor3Write>
        steppermotor4Write(1);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <steppermotor4Write>
        j++;
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
=======
    2bec:	ea 96       	adiw	r28, 0x3a	; 58
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <Vooruit>:

void Vooruit(int Steppermotortijd)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <Vooruit+0x6>
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2c0e:	1a 82       	std	Y+2, r1	; 0x02
    2c10:	19 82       	std	Y+1, r1	; 0x01
    2c12:	15 c0       	rjmp	.+42     	; 0x2c3e <Vooruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 ef 05 	call	0xbde	; 0xbde <steppermotor1Write>
        steppermotor2Write(1);
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <steppermotor2Write>
        steppermotor3Write(1);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <steppermotor3Write>
        steppermotor4Write(1);
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <steppermotor4Write>
        j++;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
}

void Vooruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
<<<<<<< Updated upstream
    27e4:	29 81       	ldd	r18, Y+1	; 0x01
    27e6:	3a 81       	ldd	r19, Y+2	; 0x02
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	24 f3       	brlt	.-56     	; 0x27ba <Vooruit+0x16>
=======
    2c3e:	29 81       	ldd	r18, Y+1	; 0x01
    2c40:	3a 81       	ldd	r19, Y+2	; 0x02
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	28 17       	cp	r18, r24
    2c48:	39 07       	cpc	r19, r25
    2c4a:	24 f3       	brlt	.-56     	; 0x2c14 <Vooruit+0x16>
>>>>>>> Stashed changes
        steppermotor2Write(1);
        steppermotor3Write(1);
        steppermotor4Write(1);
        j++;
    }
}
<<<<<<< Updated upstream
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <Achteruit>:

void Achteruit(int Steppermotortijd)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <Achteruit+0x6>
    2806:	0f 92       	push	r0
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2810:	1a 82       	std	Y+2, r1	; 0x02
    2812:	19 82       	std	Y+1, r1	; 0x01
    2814:	15 c0       	rjmp	.+42     	; 0x2840 <Achteruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 c2 03 	call	0x784	; 0x784 <steppermotor1Write>
        steppermotor2Write(2);
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 c6 07 	call	0xf8c	; 0xf8c <steppermotor2Write>
        steppermotor3Write(2);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <steppermotor3Write>
        steppermotor4Write(2);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <steppermotor4Write>
        j++;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
=======
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <Achteruit>:

void Achteruit(int Steppermotortijd)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <Achteruit+0x6>
    2c60:	0f 92       	push	r0
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2c6a:	1a 82       	std	Y+2, r1	; 0x02
    2c6c:	19 82       	std	Y+1, r1	; 0x01
    2c6e:	15 c0       	rjmp	.+42     	; 0x2c9a <Achteruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 ef 05 	call	0xbde	; 0xbde <steppermotor1Write>
        steppermotor2Write(2);
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <steppermotor2Write>
        steppermotor3Write(2);
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <steppermotor3Write>
        steppermotor4Write(2);
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <steppermotor4Write>
        j++;
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
}

void Achteruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
<<<<<<< Updated upstream
    2840:	29 81       	ldd	r18, Y+1	; 0x01
    2842:	3a 81       	ldd	r19, Y+2	; 0x02
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	28 17       	cp	r18, r24
    284a:	39 07       	cpc	r19, r25
    284c:	24 f3       	brlt	.-56     	; 0x2816 <Achteruit+0x16>
=======
    2c9a:	29 81       	ldd	r18, Y+1	; 0x01
    2c9c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	28 17       	cp	r18, r24
    2ca4:	39 07       	cpc	r19, r25
    2ca6:	24 f3       	brlt	.-56     	; 0x2c70 <Achteruit+0x16>
>>>>>>> Stashed changes
        steppermotor2Write(2);
        steppermotor3Write(2);
        steppermotor4Write(2);
        j++;
    }
}
<<<<<<< Updated upstream
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <Rechtsaf>:

void Rechtsaf(int Steppermotortijd)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <Rechtsaf+0x6>
    2862:	0f 92       	push	r0
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    286c:	1a 82       	std	Y+2, r1	; 0x02
    286e:	19 82       	std	Y+1, r1	; 0x01
    2870:	15 c0       	rjmp	.+42     	; 0x289c <Rechtsaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 c2 03 	call	0x784	; 0x784 <steppermotor1Write>
        steppermotor2Write(2);
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <steppermotor2Write>
        steppermotor3Write(1);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 ca 0b 	call	0x1794	; 0x1794 <steppermotor3Write>
        steppermotor4Write(2);
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <steppermotor4Write>
        j++;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	01 96       	adiw	r24, 0x01	; 1
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
=======
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <Rechtsaf>:

void Rechtsaf(int Steppermotortijd)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <Rechtsaf+0x6>
    2cbc:	0f 92       	push	r0
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2cc6:	1a 82       	std	Y+2, r1	; 0x02
    2cc8:	19 82       	std	Y+1, r1	; 0x01
    2cca:	15 c0       	rjmp	.+42     	; 0x2cf6 <Rechtsaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 ef 05 	call	0xbde	; 0xbde <steppermotor1Write>
        steppermotor2Write(2);
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <steppermotor2Write>
        steppermotor3Write(1);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <steppermotor3Write>
        steppermotor4Write(2);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <steppermotor4Write>
        j++;
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
}

void Rechtsaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
<<<<<<< Updated upstream
    289c:	29 81       	ldd	r18, Y+1	; 0x01
    289e:	3a 81       	ldd	r19, Y+2	; 0x02
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	28 17       	cp	r18, r24
    28a6:	39 07       	cpc	r19, r25
    28a8:	24 f3       	brlt	.-56     	; 0x2872 <Rechtsaf+0x16>
=======
    2cf6:	29 81       	ldd	r18, Y+1	; 0x01
    2cf8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	28 17       	cp	r18, r24
    2d00:	39 07       	cpc	r19, r25
    2d02:	24 f3       	brlt	.-56     	; 0x2ccc <Rechtsaf+0x16>
>>>>>>> Stashed changes
        steppermotor2Write(2);
        steppermotor3Write(1);
        steppermotor4Write(2);
        j++;
    }
}
<<<<<<< Updated upstream
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <Linksaf>:

void Linksaf(int Steppermotortijd)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <Linksaf+0x6>
    28be:	0f 92       	push	r0
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	9c 83       	std	Y+4, r25	; 0x04
    28c6:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    28c8:	1a 82       	std	Y+2, r1	; 0x02
    28ca:	19 82       	std	Y+1, r1	; 0x01
    28cc:	15 c0       	rjmp	.+42     	; 0x28f8 <Linksaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 c2 03 	call	0x784	; 0x784 <steppermotor1Write>
        steppermotor2Write(1);
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 c6 07 	call	0xf8c	; 0xf8c <steppermotor2Write>
        steppermotor3Write(2);
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <steppermotor3Write>
        steppermotor4Write(1);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <steppermotor4Write>
        j++;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
=======
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <Linksaf>:

void Linksaf(int Steppermotortijd)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <Linksaf+0x6>
    2d18:	0f 92       	push	r0
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	9c 83       	std	Y+4, r25	; 0x04
    2d20:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2d22:	1a 82       	std	Y+2, r1	; 0x02
    2d24:	19 82       	std	Y+1, r1	; 0x01
    2d26:	15 c0       	rjmp	.+42     	; 0x2d52 <Linksaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 ef 05 	call	0xbde	; 0xbde <steppermotor1Write>
        steppermotor2Write(1);
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <steppermotor2Write>
        steppermotor3Write(2);
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <steppermotor3Write>
        steppermotor4Write(1);
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <steppermotor4Write>
        j++;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
}

void Linksaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
<<<<<<< Updated upstream
    28f8:	29 81       	ldd	r18, Y+1	; 0x01
    28fa:	3a 81       	ldd	r19, Y+2	; 0x02
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	28 17       	cp	r18, r24
    2902:	39 07       	cpc	r19, r25
    2904:	24 f3       	brlt	.-56     	; 0x28ce <Linksaf+0x16>
=======
    2d52:	29 81       	ldd	r18, Y+1	; 0x01
    2d54:	3a 81       	ldd	r19, Y+2	; 0x02
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	28 17       	cp	r18, r24
    2d5c:	39 07       	cpc	r19, r25
    2d5e:	24 f3       	brlt	.-56     	; 0x2d28 <Linksaf+0x16>
>>>>>>> Stashed changes
        steppermotor2Write(1);
        steppermotor3Write(2);
        steppermotor4Write(1);
        j++;
    }
}
<<<<<<< Updated upstream
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <distance>:
=======
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <distance>:
>>>>>>> Stashed changes
static volatile unsigned long pulse = 0; //the variable for the pulse
static volatile int echo_pin = 0; //logic for the ultrasoon
volatile int isTriggerd = 0;    // used in the while loop
volatile int overflows = 0;

int distance(int triggerpin) {
<<<<<<< Updated upstream
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	ea 97       	sbiw	r28, 0x3a	; 58
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	9e ab       	std	Y+54, r25	; 0x36
    292a:	8d ab       	std	Y+53, r24	; 0x35

    switch(triggerpin)
    292c:	8d a9       	ldd	r24, Y+53	; 0x35
    292e:	9e a9       	ldd	r25, Y+54	; 0x36
    2930:	9a af       	std	Y+58, r25	; 0x3a
    2932:	89 af       	std	Y+57, r24	; 0x39
    2934:	89 ad       	ldd	r24, Y+57	; 0x39
    2936:	9a ad       	ldd	r25, Y+58	; 0x3a
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	31 f0       	breq	.+12     	; 0x2948 <distance+0x34>
    293c:	89 ad       	ldd	r24, Y+57	; 0x39
    293e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2940:	81 30       	cpi	r24, 0x01	; 1
    2942:	91 05       	cpc	r25, r1
    2944:	49 f0       	breq	.+18     	; 0x2958 <distance+0x44>
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <distance+0x52>
    {
        case ultra_1_trigger:
            PCMASK = 0;
    2948:	eb e6       	ldi	r30, 0x6B	; 107
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	10 82       	st	Z, r1
            PCMASK = ultra_1_pin;
    294e:	eb e6       	ldi	r30, 0x6B	; 107
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	80 83       	st	Z, r24
    2956:	07 c0       	rjmp	.+14     	; 0x2966 <distance+0x52>
=======
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	ea 97       	sbiw	r28, 0x3a	; 58
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	9e ab       	std	Y+54, r25	; 0x36
    2d84:	8d ab       	std	Y+53, r24	; 0x35

    switch(triggerpin)
    2d86:	8d a9       	ldd	r24, Y+53	; 0x35
    2d88:	9e a9       	ldd	r25, Y+54	; 0x36
    2d8a:	9a af       	std	Y+58, r25	; 0x3a
    2d8c:	89 af       	std	Y+57, r24	; 0x39
    2d8e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d90:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	31 f0       	breq	.+12     	; 0x2da2 <distance+0x34>
    2d96:	89 ad       	ldd	r24, Y+57	; 0x39
    2d98:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	49 f0       	breq	.+18     	; 0x2db2 <distance+0x44>
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <distance+0x52>
    {
        case ultra_1_trigger:
            PCMASK = 0;
    2da2:	eb e6       	ldi	r30, 0x6B	; 107
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	10 82       	st	Z, r1
            PCMASK = ultra_1_pin;
    2da8:	eb e6       	ldi	r30, 0x6B	; 107
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	80 83       	st	Z, r24
    2db0:	07 c0       	rjmp	.+14     	; 0x2dc0 <distance+0x52>
>>>>>>> Stashed changes
        break;

        case ultra_2_trigger:
            PCMASK = 0;
<<<<<<< Updated upstream
    2958:	eb e6       	ldi	r30, 0x6B	; 107
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	10 82       	st	Z, r1
            PCMASK = ultra_2_pin;
    295e:	eb e6       	ldi	r30, 0x6B	; 107
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	80 83       	st	Z, r24
=======
    2db2:	eb e6       	ldi	r30, 0x6B	; 107
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	10 82       	st	Z, r1
            PCMASK = ultra_2_pin;
    2db8:	eb e6       	ldi	r30, 0x6B	; 107
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	80 83       	st	Z, r24
>>>>>>> Stashed changes
        break;
    }

    TRIGGERPORT |= (1 << triggerpin);
<<<<<<< Updated upstream
    2966:	ab e2       	ldi	r26, 0x2B	; 43
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	eb e2       	ldi	r30, 0x2B	; 43
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	28 2f       	mov	r18, r24
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0d a8       	ldd	r0, Y+53	; 0x35
    2978:	02 c0       	rjmp	.+4      	; 0x297e <distance+0x6a>
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	0a 94       	dec	r0
    2980:	e2 f7       	brpl	.-8      	; 0x297a <distance+0x66>
    2982:	82 2b       	or	r24, r18
    2984:	8c 93       	st	X, r24
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e7       	ldi	r26, 0x70	; 112
    298c:	b1 e4       	ldi	r27, 0x41	; 65
    298e:	8d a7       	std	Y+45, r24	; 0x2d
    2990:	9e a7       	std	Y+46, r25	; 0x2e
    2992:	af a7       	std	Y+47, r26	; 0x2f
    2994:	b8 ab       	std	Y+48, r27	; 0x30
=======
    2dc0:	ab e2       	ldi	r26, 0x2B	; 43
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	eb e2       	ldi	r30, 0x2B	; 43
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	28 2f       	mov	r18, r24
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0d a8       	ldd	r0, Y+53	; 0x35
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <distance+0x6a>
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	0a 94       	dec	r0
    2dda:	e2 f7       	brpl	.-8      	; 0x2dd4 <distance+0x66>
    2ddc:	82 2b       	or	r24, r18
    2dde:	8c 93       	st	X, r24
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e7       	ldi	r26, 0x70	; 112
    2de6:	b1 e4       	ldi	r27, 0x41	; 65
    2de8:	8d a7       	std	Y+45, r24	; 0x2d
    2dea:	9e a7       	std	Y+46, r25	; 0x2e
    2dec:	af a7       	std	Y+47, r26	; 0x2f
    2dee:	b8 ab       	std	Y+48, r27	; 0x30
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    2996:	6d a5       	ldd	r22, Y+45	; 0x2d
    2998:	7e a5       	ldd	r23, Y+46	; 0x2e
    299a:	8f a5       	ldd	r24, Y+47	; 0x2f
    299c:	98 a9       	ldd	r25, Y+48	; 0x30
    299e:	2b ea       	ldi	r18, 0xAB	; 171
    29a0:	3a ea       	ldi	r19, 0xAA	; 170
    29a2:	4a ea       	ldi	r20, 0xAA	; 170
    29a4:	50 e4       	ldi	r21, 0x40	; 64
    29a6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	89 a7       	std	Y+41, r24	; 0x29
    29b0:	9a a7       	std	Y+42, r25	; 0x2a
    29b2:	ab a7       	std	Y+43, r26	; 0x2b
    29b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29b6:	69 a5       	ldd	r22, Y+41	; 0x29
    29b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    29bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	1c f4       	brge	.+6      	; 0x29d4 <distance+0xc0>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	88 a7       	std	Y+40, r24	; 0x28
    29d2:	91 c0       	rjmp	.+290    	; 0x2af6 <distance+0x1e2>
	else if (__tmp > 255)
    29d4:	69 a5       	ldd	r22, Y+41	; 0x29
    29d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    29d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29da:	9c a5       	ldd	r25, Y+44	; 0x2c
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4f e7       	ldi	r20, 0x7F	; 127
    29e2:	53 e4       	ldi	r21, 0x43	; 67
    29e4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    29e8:	18 16       	cp	r1, r24
    29ea:	0c f0       	brlt	.+2      	; 0x29ee <distance+0xda>
    29ec:	7b c0       	rjmp	.+246    	; 0x2ae4 <distance+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    29ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    29f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    29f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f4:	98 a9       	ldd	r25, Y+48	; 0x30
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	4a e7       	ldi	r20, 0x7A	; 122
    29fc:	54 e4       	ldi	r21, 0x44	; 68
    29fe:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8c a3       	std	Y+36, r24	; 0x24
    2a08:	9d a3       	std	Y+37, r25	; 0x25
    2a0a:	ae a3       	std	Y+38, r26	; 0x26
    2a0c:	bf a3       	std	Y+39, r27	; 0x27
=======
    2df0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2df2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df6:	98 a9       	ldd	r25, Y+48	; 0x30
    2df8:	2b ea       	ldi	r18, 0xAB	; 171
    2dfa:	3a ea       	ldi	r19, 0xAA	; 170
    2dfc:	4a ea       	ldi	r20, 0xAA	; 170
    2dfe:	50 e4       	ldi	r21, 0x40	; 64
    2e00:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	89 a7       	std	Y+41, r24	; 0x29
    2e0a:	9a a7       	std	Y+42, r25	; 0x2a
    2e0c:	ab a7       	std	Y+43, r26	; 0x2b
    2e0e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e10:	69 a5       	ldd	r22, Y+41	; 0x29
    2e12:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e14:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e16:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	1c f4       	brge	.+6      	; 0x2e2e <distance+0xc0>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	88 a7       	std	Y+40, r24	; 0x28
    2e2c:	91 c0       	rjmp	.+290    	; 0x2f50 <distance+0x1e2>
	else if (__tmp > 255)
    2e2e:	69 a5       	ldd	r22, Y+41	; 0x29
    2e30:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	53 e4       	ldi	r21, 0x43	; 67
    2e3e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	0c f0       	brlt	.+2      	; 0x2e48 <distance+0xda>
    2e46:	7b c0       	rjmp	.+246    	; 0x2f3e <distance+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    2e48:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e4a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a e7       	ldi	r20, 0x7A	; 122
    2e56:	54 e4       	ldi	r21, 0x44	; 68
    2e58:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8c a3       	std	Y+36, r24	; 0x24
    2e62:	9d a3       	std	Y+37, r25	; 0x25
    2e64:	ae a3       	std	Y+38, r26	; 0x26
    2e66:	bf a3       	std	Y+39, r27	; 0x27
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    2a0e:	6c a1       	ldd	r22, Y+36	; 0x24
    2a10:	7d a1       	ldd	r23, Y+37	; 0x25
    2a12:	8e a1       	ldd	r24, Y+38	; 0x26
    2a14:	9f a1       	ldd	r25, Y+39	; 0x27
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a e7       	ldi	r20, 0x7A	; 122
    2a1c:	55 e4       	ldi	r21, 0x45	; 69
    2a1e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	88 a3       	std	Y+32, r24	; 0x20
    2a28:	99 a3       	std	Y+33, r25	; 0x21
    2a2a:	aa a3       	std	Y+34, r26	; 0x22
    2a2c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a2e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a30:	79 a1       	ldd	r23, Y+33	; 0x21
    2a32:	8a a1       	ldd	r24, Y+34	; 0x22
    2a34:	9b a1       	ldd	r25, Y+35	; 0x23
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <distance+0x13c>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a4c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <distance+0x1ba>
	else if (__tmp > 65535)
    2a50:	68 a1       	ldd	r22, Y+32	; 0x20
    2a52:	79 a1       	ldd	r23, Y+33	; 0x21
    2a54:	8a a1       	ldd	r24, Y+34	; 0x22
    2a56:	9b a1       	ldd	r25, Y+35	; 0x23
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <distance+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	6c a1       	ldd	r22, Y+36	; 0x24
    2a6a:	7d a1       	ldd	r23, Y+37	; 0x25
    2a6c:	8e a1       	ldd	r24, Y+38	; 0x26
    2a6e:	9f a1       	ldd	r25, Y+39	; 0x27
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a8e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <distance+0x19c>
    2a92:	80 e9       	ldi	r24, 0x90	; 144
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	9d 8f       	std	Y+29, r25	; 0x1d
    2a98:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    2e68:	6c a1       	ldd	r22, Y+36	; 0x24
    2e6a:	7d a1       	ldd	r23, Y+37	; 0x25
    2e6c:	8e a1       	ldd	r24, Y+38	; 0x26
    2e6e:	9f a1       	ldd	r25, Y+39	; 0x27
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a e7       	ldi	r20, 0x7A	; 122
    2e76:	55 e4       	ldi	r21, 0x45	; 69
    2e78:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	88 a3       	std	Y+32, r24	; 0x20
    2e82:	99 a3       	std	Y+33, r25	; 0x21
    2e84:	aa a3       	std	Y+34, r26	; 0x22
    2e86:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2e88:	68 a1       	ldd	r22, Y+32	; 0x20
    2e8a:	79 a1       	ldd	r23, Y+33	; 0x21
    2e8c:	8a a1       	ldd	r24, Y+34	; 0x22
    2e8e:	9b a1       	ldd	r25, Y+35	; 0x23
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <distance+0x13c>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ea6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <distance+0x1ba>
	else if (__tmp > 65535)
    2eaa:	68 a1       	ldd	r22, Y+32	; 0x20
    2eac:	79 a1       	ldd	r23, Y+33	; 0x21
    2eae:	8a a1       	ldd	r24, Y+34	; 0x22
    2eb0:	9b a1       	ldd	r25, Y+35	; 0x23
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <distance+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	6c a1       	ldd	r22, Y+36	; 0x24
    2ec4:	7d a1       	ldd	r23, Y+37	; 0x25
    2ec6:	8e a1       	ldd	r24, Y+38	; 0x26
    2ec8:	9f a1       	ldd	r25, Y+39	; 0x27
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ee8:	8e 8f       	std	Y+30, r24	; 0x1e
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <distance+0x19c>
    2eec:	80 e9       	ldi	r24, 0x90	; 144
    2eee:	91 e0       	ldi	r25, 0x01	; 1
    2ef0:	9d 8f       	std	Y+29, r25	; 0x1d
    2ef2:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2a9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a9c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <distance+0x18a>
    2aa2:	9d 8f       	std	Y+29, r25	; 0x1d
    2aa4:	8c 8f       	std	Y+28, r24	; 0x1c
=======
    2ef4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ef6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <distance+0x18a>
    2efc:	9d 8f       	std	Y+29, r25	; 0x1d
    2efe:	8c 8f       	std	Y+28, r24	; 0x1c
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    2aa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9f 8f       	std	Y+31, r25	; 0x1f
    2aae:	8e 8f       	std	Y+30, r24	; 0x1e
=======
    2f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9f 8f       	std	Y+31, r25	; 0x1f
    2f08:	8e 8f       	std	Y+30, r24	; 0x1e
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    2ab0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <distance+0x17e>
    2ab8:	24 c0       	rjmp	.+72     	; 0x2b02 <distance+0x1ee>
=======
    2f0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <distance+0x17e>
    2f12:	24 c0       	rjmp	.+72     	; 0x2f5c <distance+0x1ee>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    2aba:	68 a1       	ldd	r22, Y+32	; 0x20
    2abc:	79 a1       	ldd	r23, Y+33	; 0x21
    2abe:	8a a1       	ldd	r24, Y+34	; 0x22
    2ac0:	9b a1       	ldd	r25, Y+35	; 0x23
    2ac2:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9f 8f       	std	Y+31, r25	; 0x1f
    2acc:	8e 8f       	std	Y+30, r24	; 0x1e
    2ace:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ad0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ad2:	9b 8f       	std	Y+27, r25	; 0x1b
    2ad4:	8a 8f       	std	Y+26, r24	; 0x1a
    2ad6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ad8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <distance+0x1c6>
    2ade:	9b 8f       	std	Y+27, r25	; 0x1b
    2ae0:	8a 8f       	std	Y+26, r24	; 0x1a
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <distance+0x1ee>
=======
    2f14:	68 a1       	ldd	r22, Y+32	; 0x20
    2f16:	79 a1       	ldd	r23, Y+33	; 0x21
    2f18:	8a a1       	ldd	r24, Y+34	; 0x22
    2f1a:	9b a1       	ldd	r25, Y+35	; 0x23
    2f1c:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9f 8f       	std	Y+31, r25	; 0x1f
    2f26:	8e 8f       	std	Y+30, r24	; 0x1e
    2f28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f2c:	9b 8f       	std	Y+27, r25	; 0x1b
    2f2e:	8a 8f       	std	Y+26, r24	; 0x1a
    2f30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f32:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <distance+0x1c6>
    2f38:	9b 8f       	std	Y+27, r25	; 0x1b
    2f3a:	8a 8f       	std	Y+26, r24	; 0x1a
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <distance+0x1ee>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    2ae4:	69 a5       	ldd	r22, Y+41	; 0x29
    2ae6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ae8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aea:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aec:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	88 a7       	std	Y+40, r24	; 0x28
    2af6:	88 a5       	ldd	r24, Y+40	; 0x28
    2af8:	89 8f       	std	Y+25, r24	; 0x19
=======
    2f3e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f40:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f44:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f46:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	88 a7       	std	Y+40, r24	; 0x28
    2f50:	88 a5       	ldd	r24, Y+40	; 0x28
    2f52:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2afa:	89 8d       	ldd	r24, Y+25	; 0x19
    2afc:	8a 95       	dec	r24
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <distance+0x1e8>
    2b00:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(15);
    TRIGGERPORT &= ~( 1 << triggerpin);
    2b02:	ab e2       	ldi	r26, 0x2B	; 43
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	eb e2       	ldi	r30, 0x2B	; 43
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0d a8       	ldd	r0, Y+53	; 0x35
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <distance+0x206>
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	0a 94       	dec	r0
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <distance+0x202>
    2b1e:	80 95       	com	r24
    2b20:	82 23       	and	r24, r18
    2b22:	8c 93       	st	X, r24
    isTriggerd = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	90 93 09 03 	sts	0x0309, r25
    2b2c:	80 93 08 03 	sts	0x0308, r24
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e7       	ldi	r26, 0x70	; 112
    2b36:	b1 e4       	ldi	r27, 0x41	; 65
    2b38:	8d 8b       	std	Y+21, r24	; 0x15
    2b3a:	9e 8b       	std	Y+22, r25	; 0x16
    2b3c:	af 8b       	std	Y+23, r26	; 0x17
    2b3e:	b8 8f       	std	Y+24, r27	; 0x18
=======
    2f54:	89 8d       	ldd	r24, Y+25	; 0x19
    2f56:	8a 95       	dec	r24
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <distance+0x1e8>
    2f5a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(15);
    TRIGGERPORT &= ~( 1 << triggerpin);
    2f5c:	ab e2       	ldi	r26, 0x2B	; 43
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	eb e2       	ldi	r30, 0x2B	; 43
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	28 2f       	mov	r18, r24
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0d a8       	ldd	r0, Y+53	; 0x35
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <distance+0x206>
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	0a 94       	dec	r0
    2f76:	e2 f7       	brpl	.-8      	; 0x2f70 <distance+0x202>
    2f78:	80 95       	com	r24
    2f7a:	82 23       	and	r24, r18
    2f7c:	8c 93       	st	X, r24
    isTriggerd = 1;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	90 93 09 03 	sts	0x0309, r25
    2f86:	80 93 08 03 	sts	0x0308, r24
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a0 e7       	ldi	r26, 0x70	; 112
    2f90:	b1 e4       	ldi	r27, 0x41	; 65
    2f92:	8d 8b       	std	Y+21, r24	; 0x15
    2f94:	9e 8b       	std	Y+22, r25	; 0x16
    2f96:	af 8b       	std	Y+23, r26	; 0x17
    2f98:	b8 8f       	std	Y+24, r27	; 0x18
>>>>>>> Stashed changes
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
<<<<<<< Updated upstream
    2b40:	6d 89       	ldd	r22, Y+21	; 0x15
    2b42:	7e 89       	ldd	r23, Y+22	; 0x16
    2b44:	8f 89       	ldd	r24, Y+23	; 0x17
    2b46:	98 8d       	ldd	r25, Y+24	; 0x18
    2b48:	2b ea       	ldi	r18, 0xAB	; 171
    2b4a:	3a ea       	ldi	r19, 0xAA	; 170
    2b4c:	4a ea       	ldi	r20, 0xAA	; 170
    2b4e:	50 e4       	ldi	r21, 0x40	; 64
    2b50:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	89 8b       	std	Y+17, r24	; 0x11
    2b5a:	9a 8b       	std	Y+18, r25	; 0x12
    2b5c:	ab 8b       	std	Y+19, r26	; 0x13
    2b5e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b60:	69 89       	ldd	r22, Y+17	; 0x11
    2b62:	7a 89       	ldd	r23, Y+18	; 0x12
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	1c f4       	brge	.+6      	; 0x2b7e <distance+0x26a>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	88 8b       	std	Y+16, r24	; 0x10
    2b7c:	91 c0       	rjmp	.+290    	; 0x2ca0 <distance+0x38c>
	else if (__tmp > 255)
    2b7e:	69 89       	ldd	r22, Y+17	; 0x11
    2b80:	7a 89       	ldd	r23, Y+18	; 0x12
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	53 e4       	ldi	r21, 0x43	; 67
    2b8e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	0c f0       	brlt	.+2      	; 0x2b98 <distance+0x284>
    2b96:	7b c0       	rjmp	.+246    	; 0x2c8e <distance+0x37a>
	{
		_delay_ms(__us / 1000.0);
    2b98:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	4a e7       	ldi	r20, 0x7A	; 122
    2ba6:	54 e4       	ldi	r21, 0x44	; 68
    2ba8:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	8c 87       	std	Y+12, r24	; 0x0c
    2bb2:	9d 87       	std	Y+13, r25	; 0x0d
    2bb4:	ae 87       	std	Y+14, r26	; 0x0e
    2bb6:	bf 87       	std	Y+15, r27	; 0x0f
=======
    2f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa2:	2b ea       	ldi	r18, 0xAB	; 171
    2fa4:	3a ea       	ldi	r19, 0xAA	; 170
    2fa6:	4a ea       	ldi	r20, 0xAA	; 170
    2fa8:	50 e4       	ldi	r21, 0x40	; 64
    2faa:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	89 8b       	std	Y+17, r24	; 0x11
    2fb4:	9a 8b       	std	Y+18, r25	; 0x12
    2fb6:	ab 8b       	std	Y+19, r26	; 0x13
    2fb8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2fba:	69 89       	ldd	r22, Y+17	; 0x11
    2fbc:	7a 89       	ldd	r23, Y+18	; 0x12
    2fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e8       	ldi	r20, 0x80	; 128
    2fc8:	5f e3       	ldi	r21, 0x3F	; 63
    2fca:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    2fce:	88 23       	and	r24, r24
    2fd0:	1c f4       	brge	.+6      	; 0x2fd8 <distance+0x26a>
		__ticks = 1;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	88 8b       	std	Y+16, r24	; 0x10
    2fd6:	91 c0       	rjmp	.+290    	; 0x30fa <distance+0x38c>
	else if (__tmp > 255)
    2fd8:	69 89       	ldd	r22, Y+17	; 0x11
    2fda:	7a 89       	ldd	r23, Y+18	; 0x12
    2fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fde:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	4f e7       	ldi	r20, 0x7F	; 127
    2fe6:	53 e4       	ldi	r21, 0x43	; 67
    2fe8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    2fec:	18 16       	cp	r1, r24
    2fee:	0c f0       	brlt	.+2      	; 0x2ff2 <distance+0x284>
    2ff0:	7b c0       	rjmp	.+246    	; 0x30e8 <distance+0x37a>
	{
		_delay_ms(__us / 1000.0);
    2ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a e7       	ldi	r20, 0x7A	; 122
    3000:	54 e4       	ldi	r21, 0x44	; 68
    3002:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8c 87       	std	Y+12, r24	; 0x0c
    300c:	9d 87       	std	Y+13, r25	; 0x0d
    300e:	ae 87       	std	Y+14, r26	; 0x0e
    3010:	bf 87       	std	Y+15, r27	; 0x0f
>>>>>>> Stashed changes
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< Updated upstream
    2bb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bba:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a e7       	ldi	r20, 0x7A	; 122
    2bc6:	55 e4       	ldi	r21, 0x45	; 69
    2bc8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	88 87       	std	Y+8, r24	; 0x08
    2bd2:	99 87       	std	Y+9, r25	; 0x09
    2bd4:	aa 87       	std	Y+10, r26	; 0x0a
    2bd6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bd8:	68 85       	ldd	r22, Y+8	; 0x08
    2bda:	79 85       	ldd	r23, Y+9	; 0x09
    2bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bde:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <distance+0x2e6>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9f 83       	std	Y+7, r25	; 0x07
    2bf6:	8e 83       	std	Y+6, r24	; 0x06
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <distance+0x364>
	else if (__tmp > 65535)
    2bfa:	68 85       	ldd	r22, Y+8	; 0x08
    2bfc:	79 85       	ldd	r23, Y+9	; 0x09
    2bfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <distance+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c14:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c16:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c18:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9f 83       	std	Y+7, r25	; 0x07
    2c38:	8e 83       	std	Y+6, r24	; 0x06
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <distance+0x346>
    2c3c:	80 e9       	ldi	r24, 0x90	; 144
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	9d 83       	std	Y+5, r25	; 0x05
    2c42:	8c 83       	std	Y+4, r24	; 0x04
=======
    3012:	6c 85       	ldd	r22, Y+12	; 0x0c
    3014:	7d 85       	ldd	r23, Y+13	; 0x0d
    3016:	8e 85       	ldd	r24, Y+14	; 0x0e
    3018:	9f 85       	ldd	r25, Y+15	; 0x0f
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a e7       	ldi	r20, 0x7A	; 122
    3020:	55 e4       	ldi	r21, 0x45	; 69
    3022:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	88 87       	std	Y+8, r24	; 0x08
    302c:	99 87       	std	Y+9, r25	; 0x09
    302e:	aa 87       	std	Y+10, r26	; 0x0a
    3030:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3032:	68 85       	ldd	r22, Y+8	; 0x08
    3034:	79 85       	ldd	r23, Y+9	; 0x09
    3036:	8a 85       	ldd	r24, Y+10	; 0x0a
    3038:	9b 85       	ldd	r25, Y+11	; 0x0b
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <distance+0x2e6>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9f 83       	std	Y+7, r25	; 0x07
    3050:	8e 83       	std	Y+6, r24	; 0x06
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <distance+0x364>
	else if (__tmp > 65535)
    3054:	68 85       	ldd	r22, Y+8	; 0x08
    3056:	79 85       	ldd	r23, Y+9	; 0x09
    3058:	8a 85       	ldd	r24, Y+10	; 0x0a
    305a:	9b 85       	ldd	r25, Y+11	; 0x0b
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <distance+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6c 85       	ldd	r22, Y+12	; 0x0c
    306e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3070:	8e 85       	ldd	r24, Y+14	; 0x0e
    3072:	9f 85       	ldd	r25, Y+15	; 0x0f
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9f 83       	std	Y+7, r25	; 0x07
    3092:	8e 83       	std	Y+6, r24	; 0x06
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <distance+0x346>
    3096:	80 e9       	ldi	r24, 0x90	; 144
    3098:	91 e0       	ldi	r25, 0x01	; 1
    309a:	9d 83       	std	Y+5, r25	; 0x05
    309c:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	9d 81       	ldd	r25, Y+5	; 0x05
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <distance+0x334>
    2c4c:	9d 83       	std	Y+5, r25	; 0x05
    2c4e:	8c 83       	std	Y+4, r24	; 0x04
=======
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	9d 81       	ldd	r25, Y+5	; 0x05
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <distance+0x334>
    30a6:	9d 83       	std	Y+5, r25	; 0x05
    30a8:	8c 83       	std	Y+4, r24	; 0x04
>>>>>>> Stashed changes
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< Updated upstream
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	9f 81       	ldd	r25, Y+7	; 0x07
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9f 83       	std	Y+7, r25	; 0x07
    2c58:	8e 83       	std	Y+6, r24	; 0x06
=======
    30aa:	8e 81       	ldd	r24, Y+6	; 0x06
    30ac:	9f 81       	ldd	r25, Y+7	; 0x07
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9f 83       	std	Y+7, r25	; 0x07
    30b2:	8e 83       	std	Y+6, r24	; 0x06
>>>>>>> Stashed changes
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< Updated upstream
    2c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <distance+0x328>
    2c62:	24 c0       	rjmp	.+72     	; 0x2cac <distance+0x398>
=======
    30b4:	8e 81       	ldd	r24, Y+6	; 0x06
    30b6:	9f 81       	ldd	r25, Y+7	; 0x07
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <distance+0x328>
    30bc:	24 c0       	rjmp	.+72     	; 0x3106 <distance+0x398>
>>>>>>> Stashed changes
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< Updated upstream
    2c64:	68 85       	ldd	r22, Y+8	; 0x08
    2c66:	79 85       	ldd	r23, Y+9	; 0x09
    2c68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c6c:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9f 83       	std	Y+7, r25	; 0x07
    2c76:	8e 83       	std	Y+6, r24	; 0x06
    2c78:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7c:	9b 83       	std	Y+3, r25	; 0x03
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <distance+0x370>
    2c88:	9b 83       	std	Y+3, r25	; 0x03
    2c8a:	8a 83       	std	Y+2, r24	; 0x02
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <distance+0x398>
=======
    30be:	68 85       	ldd	r22, Y+8	; 0x08
    30c0:	79 85       	ldd	r23, Y+9	; 0x09
    30c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    30c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    30c6:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9f 83       	std	Y+7, r25	; 0x07
    30d0:	8e 83       	std	Y+6, r24	; 0x06
    30d2:	8e 81       	ldd	r24, Y+6	; 0x06
    30d4:	9f 81       	ldd	r25, Y+7	; 0x07
    30d6:	9b 83       	std	Y+3, r25	; 0x03
    30d8:	8a 83       	std	Y+2, r24	; 0x02
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	9b 81       	ldd	r25, Y+3	; 0x03
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <distance+0x370>
    30e2:	9b 83       	std	Y+3, r25	; 0x03
    30e4:	8a 83       	std	Y+2, r24	; 0x02
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <distance+0x398>
>>>>>>> Stashed changes
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
<<<<<<< Updated upstream
    2c8e:	69 89       	ldd	r22, Y+17	; 0x11
    2c90:	7a 89       	ldd	r23, Y+18	; 0x12
    2c92:	8b 89       	ldd	r24, Y+19	; 0x13
    2c94:	9c 89       	ldd	r25, Y+20	; 0x14
    2c96:	0e 94 75 17 	call	0x2eea	; 0x2eea <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	88 8b       	std	Y+16, r24	; 0x10
    2ca0:	88 89       	ldd	r24, Y+16	; 0x10
    2ca2:	89 83       	std	Y+1, r24	; 0x01
=======
    30e8:	69 89       	ldd	r22, Y+17	; 0x11
    30ea:	7a 89       	ldd	r23, Y+18	; 0x12
    30ec:	8b 89       	ldd	r24, Y+19	; 0x13
    30ee:	9c 89       	ldd	r25, Y+20	; 0x14
    30f0:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	88 8b       	std	Y+16, r24	; 0x10
    30fa:	88 89       	ldd	r24, Y+16	; 0x10
    30fc:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
<<<<<<< Updated upstream
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	8a 95       	dec	r24
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <distance+0x392>
    2caa:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);

    unsigned long i = 0;
    2cac:	19 aa       	std	Y+49, r1	; 0x31
    2cae:	1a aa       	std	Y+50, r1	; 0x32
    2cb0:	1b aa       	std	Y+51, r1	; 0x33
    2cb2:	1c aa       	std	Y+52, r1	; 0x34
    2cb4:	1f c0       	rjmp	.+62     	; 0x2cf4 <distance+0x3e0>
    while(isTriggerd){
       if(i > ((RETURNVALUE+10)*16))
    2cb6:	89 a9       	ldd	r24, Y+49	; 0x31
    2cb8:	9a a9       	ldd	r25, Y+50	; 0x32
    2cba:	ab a9       	ldd	r26, Y+51	; 0x33
    2cbc:	bc a9       	ldd	r27, Y+52	; 0x34
    2cbe:	81 3e       	cpi	r24, 0xE1	; 225
    2cc0:	26 e0       	ldi	r18, 0x06	; 6
    2cc2:	92 07       	cpc	r25, r18
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	a2 07       	cpc	r26, r18
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	b2 07       	cpc	r27, r18
    2ccc:	40 f0       	brcs	.+16     	; 0x2cde <distance+0x3ca>
       {
           PCMASK = 0;
    2cce:	eb e6       	ldi	r30, 0x6B	; 107
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	10 82       	st	Z, r1
           return RETURNVALUE;
    2cd4:	84 e6       	ldi	r24, 0x64	; 100
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	98 af       	std	Y+56, r25	; 0x38
    2cda:	8f ab       	std	Y+55, r24	; 0x37
    2cdc:	31 c0       	rjmp	.+98     	; 0x2d40 <distance+0x42c>
       }
       i++;
    2cde:	89 a9       	ldd	r24, Y+49	; 0x31
    2ce0:	9a a9       	ldd	r25, Y+50	; 0x32
    2ce2:	ab a9       	ldd	r26, Y+51	; 0x33
    2ce4:	bc a9       	ldd	r27, Y+52	; 0x34
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	a1 1d       	adc	r26, r1
    2cea:	b1 1d       	adc	r27, r1
    2cec:	89 ab       	std	Y+49, r24	; 0x31
    2cee:	9a ab       	std	Y+50, r25	; 0x32
    2cf0:	ab ab       	std	Y+51, r26	; 0x33
    2cf2:	bc ab       	std	Y+52, r27	; 0x34
=======
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	8a 95       	dec	r24
    3102:	f1 f7       	brne	.-4      	; 0x3100 <distance+0x392>
    3104:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);

    unsigned long i = 0;
    3106:	19 aa       	std	Y+49, r1	; 0x31
    3108:	1a aa       	std	Y+50, r1	; 0x32
    310a:	1b aa       	std	Y+51, r1	; 0x33
    310c:	1c aa       	std	Y+52, r1	; 0x34
    310e:	1f c0       	rjmp	.+62     	; 0x314e <distance+0x3e0>
    while(isTriggerd){
       if(i > ((RETURNVALUE+10)*16))
    3110:	89 a9       	ldd	r24, Y+49	; 0x31
    3112:	9a a9       	ldd	r25, Y+50	; 0x32
    3114:	ab a9       	ldd	r26, Y+51	; 0x33
    3116:	bc a9       	ldd	r27, Y+52	; 0x34
    3118:	81 3e       	cpi	r24, 0xE1	; 225
    311a:	26 e0       	ldi	r18, 0x06	; 6
    311c:	92 07       	cpc	r25, r18
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	a2 07       	cpc	r26, r18
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	b2 07       	cpc	r27, r18
    3126:	40 f0       	brcs	.+16     	; 0x3138 <distance+0x3ca>
       {
           PCMASK = 0;
    3128:	eb e6       	ldi	r30, 0x6B	; 107
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	10 82       	st	Z, r1
           return RETURNVALUE;
    312e:	84 e6       	ldi	r24, 0x64	; 100
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	98 af       	std	Y+56, r25	; 0x38
    3134:	8f ab       	std	Y+55, r24	; 0x37
    3136:	31 c0       	rjmp	.+98     	; 0x319a <distance+0x42c>
       }
       i++;
    3138:	89 a9       	ldd	r24, Y+49	; 0x31
    313a:	9a a9       	ldd	r25, Y+50	; 0x32
    313c:	ab a9       	ldd	r26, Y+51	; 0x33
    313e:	bc a9       	ldd	r27, Y+52	; 0x34
    3140:	01 96       	adiw	r24, 0x01	; 1
    3142:	a1 1d       	adc	r26, r1
    3144:	b1 1d       	adc	r27, r1
    3146:	89 ab       	std	Y+49, r24	; 0x31
    3148:	9a ab       	std	Y+50, r25	; 0x32
    314a:	ab ab       	std	Y+51, r26	; 0x33
    314c:	bc ab       	std	Y+52, r27	; 0x34
>>>>>>> Stashed changes
    TRIGGERPORT &= ~( 1 << triggerpin);
    isTriggerd = 1;
    _delay_us(15);

    unsigned long i = 0;
    while(isTriggerd){
<<<<<<< Updated upstream
    2cf4:	80 91 08 03 	lds	r24, 0x0308
    2cf8:	90 91 09 03 	lds	r25, 0x0309
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	d9 f6       	brne	.-74     	; 0x2cb6 <distance+0x3a2>
=======
    314e:	80 91 08 03 	lds	r24, 0x0308
    3152:	90 91 09 03 	lds	r25, 0x0309
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	d9 f6       	brne	.-74     	; 0x3110 <distance+0x3a2>
>>>>>>> Stashed changes
       }
       i++;

    }

    return pulse/928.0;
<<<<<<< Updated upstream
    2d00:	80 91 0c 03 	lds	r24, 0x030C
    2d04:	90 91 0d 03 	lds	r25, 0x030D
    2d08:	a0 91 0e 03 	lds	r26, 0x030E
    2d0c:	b0 91 0f 03 	lds	r27, 0x030F
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 33 1c 	call	0x3866	; 0x3866 <__floatunsisf>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	48 e6       	ldi	r20, 0x68	; 104
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 45 1a 	call	0x348a	; 0x348a <__divsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 df 1b 	call	0x37be	; 0x37be <__fixsfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	98 af       	std	Y+56, r25	; 0x38
    2d3e:	8f ab       	std	Y+55, r24	; 0x37
    2d40:	8f a9       	ldd	r24, Y+55	; 0x37
    2d42:	98 ad       	ldd	r25, Y+56	; 0x38
}
    2d44:	ea 96       	adiw	r28, 0x3a	; 58
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <init_ultrasoon>:
void init_ultrasoon(){
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    TRIGGERDDR |= (1 << ultra_1_trigger) | (1 << ultra_2_trigger);
    2d5e:	aa e2       	ldi	r26, 0x2A	; 42
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	ea e2       	ldi	r30, 0x2A	; 42
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	83 60       	ori	r24, 0x03	; 3
    2d6a:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_1_trigger);
    2d6c:	ab e2       	ldi	r26, 0x2B	; 43
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	eb e2       	ldi	r30, 0x2B	; 43
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8e 7f       	andi	r24, 0xFE	; 254
    2d78:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_2_trigger);
    2d7a:	ab e2       	ldi	r26, 0x2B	; 43
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	eb e2       	ldi	r30, 0x2B	; 43
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	8d 7f       	andi	r24, 0xFD	; 253
    2d86:	8c 93       	st	X, r24
    PCICR |= (1 << PCREG);
    2d88:	a8 e6       	ldi	r26, 0x68	; 104
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e8 e6       	ldi	r30, 0x68	; 104
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	81 60       	ori	r24, 0x01	; 1
    2d94:	8c 93       	st	X, r24
    PCMASK = 0;
    2d96:	eb e6       	ldi	r30, 0x6B	; 107
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	10 82       	st	Z, r1
}
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <__vector_9>:

ISR(PCISR)   // Interrupt service routine.
{
    2da2:	1f 92       	push	r1
    2da4:	0f 92       	push	r0
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	0f 92       	push	r0
    2daa:	00 90 5b 00 	lds	r0, 0x005B
    2dae:	0f 92       	push	r0
    2db0:	11 24       	eor	r1, r1
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	2f 93       	push	r18
    2dbc:	3f 93       	push	r19
    2dbe:	4f 93       	push	r20
    2dc0:	5f 93       	push	r21
    2dc2:	6f 93       	push	r22
    2dc4:	7f 93       	push	r23
    2dc6:	8f 93       	push	r24
    2dc8:	9f 93       	push	r25
    2dca:	af 93       	push	r26
    2dcc:	bf 93       	push	r27
    2dce:	ef 93       	push	r30
    2dd0:	ff 93       	push	r31
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    if (echo_pin==1)
    2dda:	80 91 10 03 	lds	r24, 0x0310
    2dde:	90 91 11 03 	lds	r25, 0x0311
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	91 05       	cpc	r25, r1
    2de6:	c9 f5       	brne	.+114    	; 0x2e5a <__vector_9+0xb8>
	{
		TIMER_B = 0;    //TIMER COUNTER CONTROL REGITER (Stop the counter)
    2de8:	e1 e2       	ldi	r30, 0x21	; 33
    2dea:	f1 e0       	ldi	r31, 0x01	; 1
    2dec:	10 82       	st	Z, r1
		pulse=TNCT_timer+(overflows*OVERFLOW);  // store the value of counter
    2dee:	e4 e2       	ldi	r30, 0x24	; 36
    2df0:	f1 e0       	ldi	r31, 0x01	; 1
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	7c 01       	movw	r14, r24
    2df8:	00 e0       	ldi	r16, 0x00	; 0
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
    2dfc:	80 91 0a 03 	lds	r24, 0x030A
    2e00:	90 91 0b 03 	lds	r25, 0x030B
    2e04:	aa 27       	eor	r26, r26
    2e06:	97 fd       	sbrc	r25, 7
    2e08:	a0 95       	com	r26
    2e0a:	ba 2f       	mov	r27, r26
    2e0c:	2f ef       	ldi	r18, 0xFF	; 255
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__mulsi3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	8e 0d       	add	r24, r14
    2e22:	9f 1d       	adc	r25, r15
    2e24:	a0 1f       	adc	r26, r16
    2e26:	b1 1f       	adc	r27, r17
    2e28:	80 93 0c 03 	sts	0x030C, r24
    2e2c:	90 93 0d 03 	sts	0x030D, r25
    2e30:	a0 93 0e 03 	sts	0x030E, r26
    2e34:	b0 93 0f 03 	sts	0x030F, r27
		TNCT_timer=0;     // reset the counter
    2e38:	e4 e2       	ldi	r30, 0x24	; 36
    2e3a:	f1 e0       	ldi	r31, 0x01	; 1
    2e3c:	11 82       	std	Z+1, r1	; 0x01
    2e3e:	10 82       	st	Z, r1
		echo_pin=0;
    2e40:	10 92 11 03 	sts	0x0311, r1
    2e44:	10 92 10 03 	sts	0x0310, r1
		isTriggerd = 0;
    2e48:	10 92 09 03 	sts	0x0309, r1
    2e4c:	10 92 08 03 	sts	0x0308, r1
		overflows = 0;
    2e50:	10 92 0b 03 	sts	0x030B, r1
    2e54:	10 92 0a 03 	sts	0x030A, r1
    2e58:	11 c0       	rjmp	.+34     	; 0x2e7c <__vector_9+0xda>
=======
    315a:	80 91 0c 03 	lds	r24, 0x030C
    315e:	90 91 0d 03 	lds	r25, 0x030D
    3162:	a0 91 0e 03 	lds	r26, 0x030E
    3166:	b0 91 0f 03 	lds	r27, 0x030F
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__floatunsisf>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	48 e6       	ldi	r20, 0x68	; 104
    3180:	54 e4       	ldi	r21, 0x44	; 68
    3182:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__fixsfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	98 af       	std	Y+56, r25	; 0x38
    3198:	8f ab       	std	Y+55, r24	; 0x37
    319a:	8f a9       	ldd	r24, Y+55	; 0x37
    319c:	98 ad       	ldd	r25, Y+56	; 0x38
}
    319e:	ea 96       	adiw	r28, 0x3a	; 58
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <init_ultrasoon>:
void init_ultrasoon(){
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    TRIGGERDDR |= (1 << ultra_1_trigger) | (1 << ultra_2_trigger);
    31b8:	aa e2       	ldi	r26, 0x2A	; 42
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ea e2       	ldi	r30, 0x2A	; 42
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	83 60       	ori	r24, 0x03	; 3
    31c4:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_1_trigger);
    31c6:	ab e2       	ldi	r26, 0x2B	; 43
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	eb e2       	ldi	r30, 0x2B	; 43
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	8e 7f       	andi	r24, 0xFE	; 254
    31d2:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_2_trigger);
    31d4:	ab e2       	ldi	r26, 0x2B	; 43
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	eb e2       	ldi	r30, 0x2B	; 43
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8d 7f       	andi	r24, 0xFD	; 253
    31e0:	8c 93       	st	X, r24
    PCICR |= (1 << PCREG);
    31e2:	a8 e6       	ldi	r26, 0x68	; 104
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e8 e6       	ldi	r30, 0x68	; 104
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	81 60       	ori	r24, 0x01	; 1
    31ee:	8c 93       	st	X, r24
    PCMASK = 0;
    31f0:	eb e6       	ldi	r30, 0x6B	; 107
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	10 82       	st	Z, r1
}
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	08 95       	ret

000031fc <__vector_9>:

ISR(PCISR)   // Interrupt service routine.
{
    31fc:	1f 92       	push	r1
    31fe:	0f 92       	push	r0
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	0f 92       	push	r0
    3204:	00 90 5b 00 	lds	r0, 0x005B
    3208:	0f 92       	push	r0
    320a:	11 24       	eor	r1, r1
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	2f 93       	push	r18
    3216:	3f 93       	push	r19
    3218:	4f 93       	push	r20
    321a:	5f 93       	push	r21
    321c:	6f 93       	push	r22
    321e:	7f 93       	push	r23
    3220:	8f 93       	push	r24
    3222:	9f 93       	push	r25
    3224:	af 93       	push	r26
    3226:	bf 93       	push	r27
    3228:	ef 93       	push	r30
    322a:	ff 93       	push	r31
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    if (echo_pin==1)
    3234:	80 91 10 03 	lds	r24, 0x0310
    3238:	90 91 11 03 	lds	r25, 0x0311
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	91 05       	cpc	r25, r1
    3240:	c9 f5       	brne	.+114    	; 0x32b4 <__vector_9+0xb8>
	{
		TIMER_B = 0;    //TIMER COUNTER CONTROL REGITER (Stop the counter)
    3242:	e1 e2       	ldi	r30, 0x21	; 33
    3244:	f1 e0       	ldi	r31, 0x01	; 1
    3246:	10 82       	st	Z, r1
		pulse=TNCT_timer+(overflows*OVERFLOW);  // store the value of counter
    3248:	e4 e2       	ldi	r30, 0x24	; 36
    324a:	f1 e0       	ldi	r31, 0x01	; 1
    324c:	80 81       	ld	r24, Z
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	7c 01       	movw	r14, r24
    3252:	00 e0       	ldi	r16, 0x00	; 0
    3254:	10 e0       	ldi	r17, 0x00	; 0
    3256:	80 91 0a 03 	lds	r24, 0x030A
    325a:	90 91 0b 03 	lds	r25, 0x030B
    325e:	aa 27       	eor	r26, r26
    3260:	97 fd       	sbrc	r25, 7
    3262:	a0 95       	com	r26
    3264:	ba 2f       	mov	r27, r26
    3266:	2f ef       	ldi	r18, 0xFF	; 255
    3268:	3f ef       	ldi	r19, 0xFF	; 255
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 ce 20 	call	0x419c	; 0x419c <__mulsi3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	8e 0d       	add	r24, r14
    327c:	9f 1d       	adc	r25, r15
    327e:	a0 1f       	adc	r26, r16
    3280:	b1 1f       	adc	r27, r17
    3282:	80 93 0c 03 	sts	0x030C, r24
    3286:	90 93 0d 03 	sts	0x030D, r25
    328a:	a0 93 0e 03 	sts	0x030E, r26
    328e:	b0 93 0f 03 	sts	0x030F, r27
		TNCT_timer=0;     // reset the counter
    3292:	e4 e2       	ldi	r30, 0x24	; 36
    3294:	f1 e0       	ldi	r31, 0x01	; 1
    3296:	11 82       	std	Z+1, r1	; 0x01
    3298:	10 82       	st	Z, r1
		echo_pin=0;
    329a:	10 92 11 03 	sts	0x0311, r1
    329e:	10 92 10 03 	sts	0x0310, r1
		isTriggerd = 0;
    32a2:	10 92 09 03 	sts	0x0309, r1
    32a6:	10 92 08 03 	sts	0x0308, r1
		overflows = 0;
    32aa:	10 92 0b 03 	sts	0x030B, r1
    32ae:	10 92 0a 03 	sts	0x030A, r1
    32b2:	11 c0       	rjmp	.+34     	; 0x32d6 <__vector_9+0xda>
>>>>>>> Stashed changes
	}
	else
	{
		TIMER_B |=(1<<CS10);  // used to start the internal counter of microcontroller
<<<<<<< Updated upstream
    2e5a:	a1 e2       	ldi	r26, 0x21	; 33
    2e5c:	b1 e0       	ldi	r27, 0x01	; 1
    2e5e:	e1 e2       	ldi	r30, 0x21	; 33
    2e60:	f1 e0       	ldi	r31, 0x01	; 1
    2e62:	80 81       	ld	r24, Z
    2e64:	81 60       	ori	r24, 0x01	; 1
    2e66:	8c 93       	st	X, r24
		TIMSK_timer = (1 <<TIMSK_bit);
    2e68:	e3 e7       	ldi	r30, 0x73	; 115
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	80 83       	st	Z, r24
		echo_pin=1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	90 93 11 03 	sts	0x0311, r25
    2e78:	80 93 10 03 	sts	0x0310, r24
	}
}
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	ff 91       	pop	r31
    2e82:	ef 91       	pop	r30
    2e84:	bf 91       	pop	r27
    2e86:	af 91       	pop	r26
    2e88:	9f 91       	pop	r25
    2e8a:	8f 91       	pop	r24
    2e8c:	7f 91       	pop	r23
    2e8e:	6f 91       	pop	r22
    2e90:	5f 91       	pop	r21
    2e92:	4f 91       	pop	r20
    2e94:	3f 91       	pop	r19
    2e96:	2f 91       	pop	r18
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	ff 90       	pop	r15
    2e9e:	ef 90       	pop	r14
    2ea0:	0f 90       	pop	r0
    2ea2:	00 92 5b 00 	sts	0x005B, r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	0f 90       	pop	r0
    2eac:	1f 90       	pop	r1
    2eae:	18 95       	reti

00002eb0 <__vector_50>:

ISR(ISR_TIMER_OVF){
    2eb0:	1f 92       	push	r1
    2eb2:	0f 92       	push	r0
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	0f 92       	push	r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    overflows++;
    2ec6:	80 91 0a 03 	lds	r24, 0x030A
    2eca:	90 91 0b 03 	lds	r25, 0x030B
    2ece:	01 96       	adiw	r24, 0x01	; 1
    2ed0:	90 93 0b 03 	sts	0x030B, r25
    2ed4:	80 93 0a 03 	sts	0x030A, r24
}
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	9f 91       	pop	r25
    2ede:	8f 91       	pop	r24
    2ee0:	0f 90       	pop	r0
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	0f 90       	pop	r0
    2ee6:	1f 90       	pop	r1
    2ee8:	18 95       	reti

00002eea <__fixunssfsi>:
    2eea:	ef 92       	push	r14
    2eec:	ff 92       	push	r15
    2eee:	0f 93       	push	r16
    2ef0:	1f 93       	push	r17
    2ef2:	7b 01       	movw	r14, r22
    2ef4:	8c 01       	movw	r16, r24
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	5f e4       	ldi	r21, 0x4F	; 79
    2efe:	0e 94 21 1b 	call	0x3642	; 0x3642 <__gesf2>
    2f02:	88 23       	and	r24, r24
    2f04:	8c f0       	brlt	.+34     	; 0x2f28 <__fixunssfsi+0x3e>
    2f06:	c8 01       	movw	r24, r16
    2f08:	b7 01       	movw	r22, r14
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	5f e4       	ldi	r21, 0x4F	; 79
    2f12:	0e 94 ed 18 	call	0x31da	; 0x31da <__subsf3>
    2f16:	0e 94 df 1b 	call	0x37be	; 0x37be <__fixsfsi>
    2f1a:	9b 01       	movw	r18, r22
    2f1c:	ac 01       	movw	r20, r24
    2f1e:	20 50       	subi	r18, 0x00	; 0
    2f20:	30 40       	sbci	r19, 0x00	; 0
    2f22:	40 40       	sbci	r20, 0x00	; 0
    2f24:	50 48       	sbci	r21, 0x80	; 128
    2f26:	06 c0       	rjmp	.+12     	; 0x2f34 <__fixunssfsi+0x4a>
    2f28:	c8 01       	movw	r24, r16
    2f2a:	b7 01       	movw	r22, r14
    2f2c:	0e 94 df 1b 	call	0x37be	; 0x37be <__fixsfsi>
    2f30:	9b 01       	movw	r18, r22
    2f32:	ac 01       	movw	r20, r24
    2f34:	b9 01       	movw	r22, r18
    2f36:	ca 01       	movw	r24, r20
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	08 95       	ret

00002f42 <_fpadd_parts>:
    2f42:	a0 e0       	ldi	r26, 0x00	; 0
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e7 ea       	ldi	r30, 0xA7	; 167
    2f48:	f7 e1       	ldi	r31, 0x17	; 23
    2f4a:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__prologue_saves__>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	2b 01       	movw	r4, r22
    2f52:	fa 01       	movw	r30, r20
    2f54:	9c 91       	ld	r25, X
    2f56:	92 30       	cpi	r25, 0x02	; 2
    2f58:	08 f4       	brcc	.+2      	; 0x2f5c <_fpadd_parts+0x1a>
    2f5a:	39 c1       	rjmp	.+626    	; 0x31ce <_fpadd_parts+0x28c>
    2f5c:	eb 01       	movw	r28, r22
    2f5e:	88 81       	ld	r24, Y
    2f60:	82 30       	cpi	r24, 0x02	; 2
    2f62:	08 f4       	brcc	.+2      	; 0x2f66 <_fpadd_parts+0x24>
    2f64:	33 c1       	rjmp	.+614    	; 0x31cc <_fpadd_parts+0x28a>
    2f66:	94 30       	cpi	r25, 0x04	; 4
    2f68:	69 f4       	brne	.+26     	; 0x2f84 <_fpadd_parts+0x42>
    2f6a:	84 30       	cpi	r24, 0x04	; 4
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <_fpadd_parts+0x2e>
    2f6e:	2f c1       	rjmp	.+606    	; 0x31ce <_fpadd_parts+0x28c>
    2f70:	11 96       	adiw	r26, 0x01	; 1
    2f72:	9c 91       	ld	r25, X
    2f74:	11 97       	sbiw	r26, 0x01	; 1
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	98 17       	cp	r25, r24
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <_fpadd_parts+0x3c>
    2f7c:	28 c1       	rjmp	.+592    	; 0x31ce <_fpadd_parts+0x28c>
    2f7e:	a0 e0       	ldi	r26, 0x00	; 0
    2f80:	b2 e0       	ldi	r27, 0x02	; 2
    2f82:	25 c1       	rjmp	.+586    	; 0x31ce <_fpadd_parts+0x28c>
    2f84:	84 30       	cpi	r24, 0x04	; 4
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <_fpadd_parts+0x48>
    2f88:	21 c1       	rjmp	.+578    	; 0x31cc <_fpadd_parts+0x28a>
    2f8a:	82 30       	cpi	r24, 0x02	; 2
    2f8c:	a9 f4       	brne	.+42     	; 0x2fb8 <_fpadd_parts+0x76>
    2f8e:	92 30       	cpi	r25, 0x02	; 2
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <_fpadd_parts+0x52>
    2f92:	1d c1       	rjmp	.+570    	; 0x31ce <_fpadd_parts+0x28c>
    2f94:	9a 01       	movw	r18, r20
    2f96:	ad 01       	movw	r20, r26
    2f98:	88 e0       	ldi	r24, 0x08	; 8
    2f9a:	ea 01       	movw	r28, r20
    2f9c:	09 90       	ld	r0, Y+
    2f9e:	ae 01       	movw	r20, r28
    2fa0:	e9 01       	movw	r28, r18
    2fa2:	09 92       	st	Y+, r0
    2fa4:	9e 01       	movw	r18, r28
    2fa6:	81 50       	subi	r24, 0x01	; 1
    2fa8:	c1 f7       	brne	.-16     	; 0x2f9a <_fpadd_parts+0x58>
    2faa:	e2 01       	movw	r28, r4
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	11 96       	adiw	r26, 0x01	; 1
    2fb0:	9c 91       	ld	r25, X
    2fb2:	89 23       	and	r24, r25
    2fb4:	81 83       	std	Z+1, r24	; 0x01
    2fb6:	08 c1       	rjmp	.+528    	; 0x31c8 <_fpadd_parts+0x286>
    2fb8:	92 30       	cpi	r25, 0x02	; 2
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <_fpadd_parts+0x7c>
    2fbc:	07 c1       	rjmp	.+526    	; 0x31cc <_fpadd_parts+0x28a>
    2fbe:	12 96       	adiw	r26, 0x02	; 2
    2fc0:	2d 90       	ld	r2, X+
    2fc2:	3c 90       	ld	r3, X
    2fc4:	13 97       	sbiw	r26, 0x03	; 3
    2fc6:	eb 01       	movw	r28, r22
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	14 96       	adiw	r26, 0x04	; 4
    2fce:	ad 90       	ld	r10, X+
    2fd0:	bd 90       	ld	r11, X+
    2fd2:	cd 90       	ld	r12, X+
    2fd4:	dc 90       	ld	r13, X
    2fd6:	17 97       	sbiw	r26, 0x07	; 7
    2fd8:	ec 80       	ldd	r14, Y+4	; 0x04
    2fda:	fd 80       	ldd	r15, Y+5	; 0x05
    2fdc:	0e 81       	ldd	r16, Y+6	; 0x06
    2fde:	1f 81       	ldd	r17, Y+7	; 0x07
    2fe0:	91 01       	movw	r18, r2
    2fe2:	28 1b       	sub	r18, r24
    2fe4:	39 0b       	sbc	r19, r25
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	37 ff       	sbrs	r19, 7
    2fea:	04 c0       	rjmp	.+8      	; 0x2ff4 <_fpadd_parts+0xb2>
    2fec:	66 27       	eor	r22, r22
    2fee:	77 27       	eor	r23, r23
    2ff0:	62 1b       	sub	r22, r18
    2ff2:	73 0b       	sbc	r23, r19
    2ff4:	60 32       	cpi	r22, 0x20	; 32
    2ff6:	71 05       	cpc	r23, r1
    2ff8:	0c f0       	brlt	.+2      	; 0x2ffc <_fpadd_parts+0xba>
    2ffa:	61 c0       	rjmp	.+194    	; 0x30be <_fpadd_parts+0x17c>
    2ffc:	12 16       	cp	r1, r18
    2ffe:	13 06       	cpc	r1, r19
    3000:	6c f5       	brge	.+90     	; 0x305c <_fpadd_parts+0x11a>
    3002:	37 01       	movw	r6, r14
    3004:	48 01       	movw	r8, r16
    3006:	06 2e       	mov	r0, r22
    3008:	04 c0       	rjmp	.+8      	; 0x3012 <_fpadd_parts+0xd0>
    300a:	96 94       	lsr	r9
    300c:	87 94       	ror	r8
    300e:	77 94       	ror	r7
    3010:	67 94       	ror	r6
    3012:	0a 94       	dec	r0
    3014:	d2 f7       	brpl	.-12     	; 0x300a <_fpadd_parts+0xc8>
    3016:	21 e0       	ldi	r18, 0x01	; 1
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	04 c0       	rjmp	.+8      	; 0x3028 <_fpadd_parts+0xe6>
    3020:	22 0f       	add	r18, r18
    3022:	33 1f       	adc	r19, r19
    3024:	44 1f       	adc	r20, r20
    3026:	55 1f       	adc	r21, r21
    3028:	6a 95       	dec	r22
    302a:	d2 f7       	brpl	.-12     	; 0x3020 <_fpadd_parts+0xde>
    302c:	21 50       	subi	r18, 0x01	; 1
    302e:	30 40       	sbci	r19, 0x00	; 0
    3030:	40 40       	sbci	r20, 0x00	; 0
    3032:	50 40       	sbci	r21, 0x00	; 0
    3034:	2e 21       	and	r18, r14
    3036:	3f 21       	and	r19, r15
    3038:	40 23       	and	r20, r16
    303a:	51 23       	and	r21, r17
    303c:	21 15       	cp	r18, r1
    303e:	31 05       	cpc	r19, r1
    3040:	41 05       	cpc	r20, r1
    3042:	51 05       	cpc	r21, r1
    3044:	21 f0       	breq	.+8      	; 0x304e <_fpadd_parts+0x10c>
    3046:	21 e0       	ldi	r18, 0x01	; 1
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	79 01       	movw	r14, r18
    3050:	8a 01       	movw	r16, r20
    3052:	e6 28       	or	r14, r6
    3054:	f7 28       	or	r15, r7
    3056:	08 29       	or	r16, r8
    3058:	19 29       	or	r17, r9
    305a:	3c c0       	rjmp	.+120    	; 0x30d4 <_fpadd_parts+0x192>
    305c:	23 2b       	or	r18, r19
    305e:	d1 f1       	breq	.+116    	; 0x30d4 <_fpadd_parts+0x192>
    3060:	26 0e       	add	r2, r22
    3062:	37 1e       	adc	r3, r23
    3064:	35 01       	movw	r6, r10
    3066:	46 01       	movw	r8, r12
    3068:	06 2e       	mov	r0, r22
    306a:	04 c0       	rjmp	.+8      	; 0x3074 <_fpadd_parts+0x132>
    306c:	96 94       	lsr	r9
    306e:	87 94       	ror	r8
    3070:	77 94       	ror	r7
    3072:	67 94       	ror	r6
    3074:	0a 94       	dec	r0
    3076:	d2 f7       	brpl	.-12     	; 0x306c <_fpadd_parts+0x12a>
    3078:	21 e0       	ldi	r18, 0x01	; 1
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	04 c0       	rjmp	.+8      	; 0x308a <_fpadd_parts+0x148>
    3082:	22 0f       	add	r18, r18
    3084:	33 1f       	adc	r19, r19
    3086:	44 1f       	adc	r20, r20
    3088:	55 1f       	adc	r21, r21
    308a:	6a 95       	dec	r22
    308c:	d2 f7       	brpl	.-12     	; 0x3082 <_fpadd_parts+0x140>
    308e:	21 50       	subi	r18, 0x01	; 1
    3090:	30 40       	sbci	r19, 0x00	; 0
    3092:	40 40       	sbci	r20, 0x00	; 0
    3094:	50 40       	sbci	r21, 0x00	; 0
    3096:	2a 21       	and	r18, r10
    3098:	3b 21       	and	r19, r11
    309a:	4c 21       	and	r20, r12
    309c:	5d 21       	and	r21, r13
    309e:	21 15       	cp	r18, r1
    30a0:	31 05       	cpc	r19, r1
    30a2:	41 05       	cpc	r20, r1
    30a4:	51 05       	cpc	r21, r1
    30a6:	21 f0       	breq	.+8      	; 0x30b0 <_fpadd_parts+0x16e>
    30a8:	21 e0       	ldi	r18, 0x01	; 1
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	59 01       	movw	r10, r18
    30b2:	6a 01       	movw	r12, r20
    30b4:	a6 28       	or	r10, r6
    30b6:	b7 28       	or	r11, r7
    30b8:	c8 28       	or	r12, r8
    30ba:	d9 28       	or	r13, r9
    30bc:	0b c0       	rjmp	.+22     	; 0x30d4 <_fpadd_parts+0x192>
    30be:	82 15       	cp	r24, r2
    30c0:	93 05       	cpc	r25, r3
    30c2:	2c f0       	brlt	.+10     	; 0x30ce <_fpadd_parts+0x18c>
    30c4:	1c 01       	movw	r2, r24
    30c6:	aa 24       	eor	r10, r10
    30c8:	bb 24       	eor	r11, r11
    30ca:	65 01       	movw	r12, r10
    30cc:	03 c0       	rjmp	.+6      	; 0x30d4 <_fpadd_parts+0x192>
    30ce:	ee 24       	eor	r14, r14
    30d0:	ff 24       	eor	r15, r15
    30d2:	87 01       	movw	r16, r14
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	9c 91       	ld	r25, X
    30d8:	d2 01       	movw	r26, r4
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	8c 91       	ld	r24, X
    30de:	98 17       	cp	r25, r24
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <_fpadd_parts+0x1a2>
    30e2:	45 c0       	rjmp	.+138    	; 0x316e <_fpadd_parts+0x22c>
    30e4:	99 23       	and	r25, r25
    30e6:	39 f0       	breq	.+14     	; 0x30f6 <_fpadd_parts+0x1b4>
    30e8:	a8 01       	movw	r20, r16
    30ea:	97 01       	movw	r18, r14
    30ec:	2a 19       	sub	r18, r10
    30ee:	3b 09       	sbc	r19, r11
    30f0:	4c 09       	sbc	r20, r12
    30f2:	5d 09       	sbc	r21, r13
    30f4:	06 c0       	rjmp	.+12     	; 0x3102 <_fpadd_parts+0x1c0>
    30f6:	a6 01       	movw	r20, r12
    30f8:	95 01       	movw	r18, r10
    30fa:	2e 19       	sub	r18, r14
    30fc:	3f 09       	sbc	r19, r15
    30fe:	40 0b       	sbc	r20, r16
    3100:	51 0b       	sbc	r21, r17
    3102:	57 fd       	sbrc	r21, 7
    3104:	08 c0       	rjmp	.+16     	; 0x3116 <_fpadd_parts+0x1d4>
    3106:	11 82       	std	Z+1, r1	; 0x01
    3108:	33 82       	std	Z+3, r3	; 0x03
    310a:	22 82       	std	Z+2, r2	; 0x02
    310c:	24 83       	std	Z+4, r18	; 0x04
    310e:	35 83       	std	Z+5, r19	; 0x05
    3110:	46 83       	std	Z+6, r20	; 0x06
    3112:	57 83       	std	Z+7, r21	; 0x07
    3114:	1d c0       	rjmp	.+58     	; 0x3150 <_fpadd_parts+0x20e>
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	81 83       	std	Z+1, r24	; 0x01
    311a:	33 82       	std	Z+3, r3	; 0x03
    311c:	22 82       	std	Z+2, r2	; 0x02
    311e:	88 27       	eor	r24, r24
    3120:	99 27       	eor	r25, r25
    3122:	dc 01       	movw	r26, r24
    3124:	82 1b       	sub	r24, r18
    3126:	93 0b       	sbc	r25, r19
    3128:	a4 0b       	sbc	r26, r20
    312a:	b5 0b       	sbc	r27, r21
    312c:	84 83       	std	Z+4, r24	; 0x04
    312e:	95 83       	std	Z+5, r25	; 0x05
    3130:	a6 83       	std	Z+6, r26	; 0x06
    3132:	b7 83       	std	Z+7, r27	; 0x07
    3134:	0d c0       	rjmp	.+26     	; 0x3150 <_fpadd_parts+0x20e>
    3136:	22 0f       	add	r18, r18
    3138:	33 1f       	adc	r19, r19
    313a:	44 1f       	adc	r20, r20
    313c:	55 1f       	adc	r21, r21
    313e:	24 83       	std	Z+4, r18	; 0x04
    3140:	35 83       	std	Z+5, r19	; 0x05
    3142:	46 83       	std	Z+6, r20	; 0x06
    3144:	57 83       	std	Z+7, r21	; 0x07
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	93 81       	ldd	r25, Z+3	; 0x03
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	93 83       	std	Z+3, r25	; 0x03
    314e:	82 83       	std	Z+2, r24	; 0x02
    3150:	24 81       	ldd	r18, Z+4	; 0x04
    3152:	35 81       	ldd	r19, Z+5	; 0x05
    3154:	46 81       	ldd	r20, Z+6	; 0x06
    3156:	57 81       	ldd	r21, Z+7	; 0x07
    3158:	da 01       	movw	r26, r20
    315a:	c9 01       	movw	r24, r18
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	a1 09       	sbc	r26, r1
    3160:	b1 09       	sbc	r27, r1
    3162:	8f 5f       	subi	r24, 0xFF	; 255
    3164:	9f 4f       	sbci	r25, 0xFF	; 255
    3166:	af 4f       	sbci	r26, 0xFF	; 255
    3168:	bf 43       	sbci	r27, 0x3F	; 63
    316a:	28 f3       	brcs	.-54     	; 0x3136 <_fpadd_parts+0x1f4>
    316c:	0b c0       	rjmp	.+22     	; 0x3184 <_fpadd_parts+0x242>
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	33 82       	std	Z+3, r3	; 0x03
    3172:	22 82       	std	Z+2, r2	; 0x02
    3174:	ea 0c       	add	r14, r10
    3176:	fb 1c       	adc	r15, r11
    3178:	0c 1d       	adc	r16, r12
    317a:	1d 1d       	adc	r17, r13
    317c:	e4 82       	std	Z+4, r14	; 0x04
    317e:	f5 82       	std	Z+5, r15	; 0x05
    3180:	06 83       	std	Z+6, r16	; 0x06
    3182:	17 83       	std	Z+7, r17	; 0x07
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	80 83       	st	Z, r24
    3188:	24 81       	ldd	r18, Z+4	; 0x04
    318a:	35 81       	ldd	r19, Z+5	; 0x05
    318c:	46 81       	ldd	r20, Z+6	; 0x06
    318e:	57 81       	ldd	r21, Z+7	; 0x07
    3190:	57 ff       	sbrs	r21, 7
    3192:	1a c0       	rjmp	.+52     	; 0x31c8 <_fpadd_parts+0x286>
    3194:	c9 01       	movw	r24, r18
    3196:	aa 27       	eor	r26, r26
    3198:	97 fd       	sbrc	r25, 7
    319a:	a0 95       	com	r26
    319c:	ba 2f       	mov	r27, r26
    319e:	81 70       	andi	r24, 0x01	; 1
    31a0:	90 70       	andi	r25, 0x00	; 0
    31a2:	a0 70       	andi	r26, 0x00	; 0
    31a4:	b0 70       	andi	r27, 0x00	; 0
    31a6:	56 95       	lsr	r21
    31a8:	47 95       	ror	r20
    31aa:	37 95       	ror	r19
    31ac:	27 95       	ror	r18
    31ae:	82 2b       	or	r24, r18
    31b0:	93 2b       	or	r25, r19
    31b2:	a4 2b       	or	r26, r20
    31b4:	b5 2b       	or	r27, r21
    31b6:	84 83       	std	Z+4, r24	; 0x04
    31b8:	95 83       	std	Z+5, r25	; 0x05
    31ba:	a6 83       	std	Z+6, r26	; 0x06
    31bc:	b7 83       	std	Z+7, r27	; 0x07
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	01 96       	adiw	r24, 0x01	; 1
    31c4:	93 83       	std	Z+3, r25	; 0x03
    31c6:	82 83       	std	Z+2, r24	; 0x02
    31c8:	df 01       	movw	r26, r30
    31ca:	01 c0       	rjmp	.+2      	; 0x31ce <_fpadd_parts+0x28c>
    31cc:	d2 01       	movw	r26, r4
    31ce:	cd 01       	movw	r24, r26
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	e2 e1       	ldi	r30, 0x12	; 18
    31d6:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__epilogue_restores__>

000031da <__subsf3>:
    31da:	a0 e2       	ldi	r26, 0x20	; 32
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e3 ef       	ldi	r30, 0xF3	; 243
    31e0:	f8 e1       	ldi	r31, 0x18	; 24
    31e2:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    31e6:	69 83       	std	Y+1, r22	; 0x01
    31e8:	7a 83       	std	Y+2, r23	; 0x02
    31ea:	8b 83       	std	Y+3, r24	; 0x03
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	2d 83       	std	Y+5, r18	; 0x05
    31f0:	3e 83       	std	Y+6, r19	; 0x06
    31f2:	4f 83       	std	Y+7, r20	; 0x07
    31f4:	58 87       	std	Y+8, r21	; 0x08
    31f6:	e9 e0       	ldi	r30, 0x09	; 9
    31f8:	ee 2e       	mov	r14, r30
    31fa:	f1 2c       	mov	r15, r1
    31fc:	ec 0e       	add	r14, r28
    31fe:	fd 1e       	adc	r15, r29
    3200:	ce 01       	movw	r24, r28
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	b7 01       	movw	r22, r14
    3206:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    320a:	8e 01       	movw	r16, r28
    320c:	0f 5e       	subi	r16, 0xEF	; 239
    320e:	1f 4f       	sbci	r17, 0xFF	; 255
    3210:	ce 01       	movw	r24, r28
    3212:	05 96       	adiw	r24, 0x05	; 5
    3214:	b8 01       	movw	r22, r16
    3216:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    321a:	8a 89       	ldd	r24, Y+18	; 0x12
    321c:	91 e0       	ldi	r25, 0x01	; 1
    321e:	89 27       	eor	r24, r25
    3220:	8a 8b       	std	Y+18, r24	; 0x12
    3222:	c7 01       	movw	r24, r14
    3224:	b8 01       	movw	r22, r16
    3226:	ae 01       	movw	r20, r28
    3228:	47 5e       	subi	r20, 0xE7	; 231
    322a:	5f 4f       	sbci	r21, 0xFF	; 255
    322c:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <_fpadd_parts>
    3230:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__pack_f>
    3234:	a0 96       	adiw	r28, 0x20	; 32
    3236:	e6 e0       	ldi	r30, 0x06	; 6
    3238:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

0000323c <__addsf3>:
    323c:	a0 e2       	ldi	r26, 0x20	; 32
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e4 e2       	ldi	r30, 0x24	; 36
    3242:	f9 e1       	ldi	r31, 0x19	; 25
    3244:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    3248:	69 83       	std	Y+1, r22	; 0x01
    324a:	7a 83       	std	Y+2, r23	; 0x02
    324c:	8b 83       	std	Y+3, r24	; 0x03
    324e:	9c 83       	std	Y+4, r25	; 0x04
    3250:	2d 83       	std	Y+5, r18	; 0x05
    3252:	3e 83       	std	Y+6, r19	; 0x06
    3254:	4f 83       	std	Y+7, r20	; 0x07
    3256:	58 87       	std	Y+8, r21	; 0x08
    3258:	f9 e0       	ldi	r31, 0x09	; 9
    325a:	ef 2e       	mov	r14, r31
    325c:	f1 2c       	mov	r15, r1
    325e:	ec 0e       	add	r14, r28
    3260:	fd 1e       	adc	r15, r29
    3262:	ce 01       	movw	r24, r28
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	b7 01       	movw	r22, r14
    3268:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    326c:	8e 01       	movw	r16, r28
    326e:	0f 5e       	subi	r16, 0xEF	; 239
    3270:	1f 4f       	sbci	r17, 0xFF	; 255
    3272:	ce 01       	movw	r24, r28
    3274:	05 96       	adiw	r24, 0x05	; 5
    3276:	b8 01       	movw	r22, r16
    3278:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    327c:	c7 01       	movw	r24, r14
    327e:	b8 01       	movw	r22, r16
    3280:	ae 01       	movw	r20, r28
    3282:	47 5e       	subi	r20, 0xE7	; 231
    3284:	5f 4f       	sbci	r21, 0xFF	; 255
    3286:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <_fpadd_parts>
    328a:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__pack_f>
    328e:	a0 96       	adiw	r28, 0x20	; 32
    3290:	e6 e0       	ldi	r30, 0x06	; 6
    3292:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

00003296 <__mulsf3>:
    3296:	a0 e2       	ldi	r26, 0x20	; 32
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e1 e5       	ldi	r30, 0x51	; 81
    329c:	f9 e1       	ldi	r31, 0x19	; 25
    329e:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__prologue_saves__>
    32a2:	69 83       	std	Y+1, r22	; 0x01
    32a4:	7a 83       	std	Y+2, r23	; 0x02
    32a6:	8b 83       	std	Y+3, r24	; 0x03
    32a8:	9c 83       	std	Y+4, r25	; 0x04
    32aa:	2d 83       	std	Y+5, r18	; 0x05
    32ac:	3e 83       	std	Y+6, r19	; 0x06
    32ae:	4f 83       	std	Y+7, r20	; 0x07
    32b0:	58 87       	std	Y+8, r21	; 0x08
    32b2:	ce 01       	movw	r24, r28
    32b4:	01 96       	adiw	r24, 0x01	; 1
    32b6:	be 01       	movw	r22, r28
    32b8:	67 5f       	subi	r22, 0xF7	; 247
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    32c0:	ce 01       	movw	r24, r28
    32c2:	05 96       	adiw	r24, 0x05	; 5
    32c4:	be 01       	movw	r22, r28
    32c6:	6f 5e       	subi	r22, 0xEF	; 239
    32c8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ca:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    32ce:	99 85       	ldd	r25, Y+9	; 0x09
    32d0:	92 30       	cpi	r25, 0x02	; 2
    32d2:	88 f0       	brcs	.+34     	; 0x32f6 <__mulsf3+0x60>
    32d4:	89 89       	ldd	r24, Y+17	; 0x11
    32d6:	82 30       	cpi	r24, 0x02	; 2
    32d8:	c8 f0       	brcs	.+50     	; 0x330c <__mulsf3+0x76>
    32da:	94 30       	cpi	r25, 0x04	; 4
    32dc:	19 f4       	brne	.+6      	; 0x32e4 <__mulsf3+0x4e>
    32de:	82 30       	cpi	r24, 0x02	; 2
    32e0:	51 f4       	brne	.+20     	; 0x32f6 <__mulsf3+0x60>
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <__mulsf3+0x56>
    32e4:	84 30       	cpi	r24, 0x04	; 4
    32e6:	29 f4       	brne	.+10     	; 0x32f2 <__mulsf3+0x5c>
    32e8:	92 30       	cpi	r25, 0x02	; 2
    32ea:	81 f4       	brne	.+32     	; 0x330c <__mulsf3+0x76>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	c6 c0       	rjmp	.+396    	; 0x347e <__mulsf3+0x1e8>
    32f2:	92 30       	cpi	r25, 0x02	; 2
    32f4:	49 f4       	brne	.+18     	; 0x3308 <__mulsf3+0x72>
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fa:	8a 89       	ldd	r24, Y+18	; 0x12
    32fc:	98 13       	cpse	r25, r24
    32fe:	21 e0       	ldi	r18, 0x01	; 1
    3300:	2a 87       	std	Y+10, r18	; 0x0a
    3302:	ce 01       	movw	r24, r28
    3304:	09 96       	adiw	r24, 0x09	; 9
    3306:	bb c0       	rjmp	.+374    	; 0x347e <__mulsf3+0x1e8>
    3308:	82 30       	cpi	r24, 0x02	; 2
    330a:	49 f4       	brne	.+18     	; 0x331e <__mulsf3+0x88>
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	8a 89       	ldd	r24, Y+18	; 0x12
    3312:	98 13       	cpse	r25, r24
    3314:	21 e0       	ldi	r18, 0x01	; 1
    3316:	2a 8b       	std	Y+18, r18	; 0x12
    3318:	ce 01       	movw	r24, r28
    331a:	41 96       	adiw	r24, 0x11	; 17
    331c:	b0 c0       	rjmp	.+352    	; 0x347e <__mulsf3+0x1e8>
    331e:	2d 84       	ldd	r2, Y+13	; 0x0d
    3320:	3e 84       	ldd	r3, Y+14	; 0x0e
    3322:	4f 84       	ldd	r4, Y+15	; 0x0f
    3324:	58 88       	ldd	r5, Y+16	; 0x10
    3326:	6d 88       	ldd	r6, Y+21	; 0x15
    3328:	7e 88       	ldd	r7, Y+22	; 0x16
    332a:	8f 88       	ldd	r8, Y+23	; 0x17
    332c:	98 8c       	ldd	r9, Y+24	; 0x18
    332e:	ee 24       	eor	r14, r14
    3330:	ff 24       	eor	r15, r15
    3332:	87 01       	movw	r16, r14
    3334:	aa 24       	eor	r10, r10
    3336:	bb 24       	eor	r11, r11
    3338:	65 01       	movw	r12, r10
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	e0 e0       	ldi	r30, 0x00	; 0
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	c1 01       	movw	r24, r2
    3348:	81 70       	andi	r24, 0x01	; 1
    334a:	90 70       	andi	r25, 0x00	; 0
    334c:	89 2b       	or	r24, r25
    334e:	e9 f0       	breq	.+58     	; 0x338a <__mulsf3+0xf4>
    3350:	e6 0c       	add	r14, r6
    3352:	f7 1c       	adc	r15, r7
    3354:	08 1d       	adc	r16, r8
    3356:	19 1d       	adc	r17, r9
    3358:	9a 01       	movw	r18, r20
    335a:	ab 01       	movw	r20, r22
    335c:	2a 0d       	add	r18, r10
    335e:	3b 1d       	adc	r19, r11
    3360:	4c 1d       	adc	r20, r12
    3362:	5d 1d       	adc	r21, r13
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	a0 e0       	ldi	r26, 0x00	; 0
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e6 14       	cp	r14, r6
    336e:	f7 04       	cpc	r15, r7
    3370:	08 05       	cpc	r16, r8
    3372:	19 05       	cpc	r17, r9
    3374:	20 f4       	brcc	.+8      	; 0x337e <__mulsf3+0xe8>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	a0 e0       	ldi	r26, 0x00	; 0
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	ba 01       	movw	r22, r20
    3380:	a9 01       	movw	r20, r18
    3382:	48 0f       	add	r20, r24
    3384:	59 1f       	adc	r21, r25
    3386:	6a 1f       	adc	r22, r26
    3388:	7b 1f       	adc	r23, r27
    338a:	aa 0c       	add	r10, r10
    338c:	bb 1c       	adc	r11, r11
    338e:	cc 1c       	adc	r12, r12
    3390:	dd 1c       	adc	r13, r13
    3392:	97 fe       	sbrs	r9, 7
    3394:	08 c0       	rjmp	.+16     	; 0x33a6 <__mulsf3+0x110>
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	a0 e0       	ldi	r26, 0x00	; 0
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	a8 2a       	or	r10, r24
    33a0:	b9 2a       	or	r11, r25
    33a2:	ca 2a       	or	r12, r26
    33a4:	db 2a       	or	r13, r27
    33a6:	31 96       	adiw	r30, 0x01	; 1
    33a8:	e0 32       	cpi	r30, 0x20	; 32
    33aa:	f1 05       	cpc	r31, r1
    33ac:	49 f0       	breq	.+18     	; 0x33c0 <__mulsf3+0x12a>
    33ae:	66 0c       	add	r6, r6
    33b0:	77 1c       	adc	r7, r7
    33b2:	88 1c       	adc	r8, r8
    33b4:	99 1c       	adc	r9, r9
    33b6:	56 94       	lsr	r5
    33b8:	47 94       	ror	r4
    33ba:	37 94       	ror	r3
    33bc:	27 94       	ror	r2
    33be:	c3 cf       	rjmp	.-122    	; 0x3346 <__mulsf3+0xb0>
    33c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    33c2:	ea 89       	ldd	r30, Y+18	; 0x12
    33c4:	2b 89       	ldd	r18, Y+19	; 0x13
    33c6:	3c 89       	ldd	r19, Y+20	; 0x14
    33c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    33ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    33cc:	28 0f       	add	r18, r24
    33ce:	39 1f       	adc	r19, r25
    33d0:	2e 5f       	subi	r18, 0xFE	; 254
    33d2:	3f 4f       	sbci	r19, 0xFF	; 255
    33d4:	17 c0       	rjmp	.+46     	; 0x3404 <__mulsf3+0x16e>
    33d6:	ca 01       	movw	r24, r20
    33d8:	81 70       	andi	r24, 0x01	; 1
    33da:	90 70       	andi	r25, 0x00	; 0
    33dc:	89 2b       	or	r24, r25
    33de:	61 f0       	breq	.+24     	; 0x33f8 <__mulsf3+0x162>
    33e0:	16 95       	lsr	r17
    33e2:	07 95       	ror	r16
    33e4:	f7 94       	ror	r15
    33e6:	e7 94       	ror	r14
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	a0 e0       	ldi	r26, 0x00	; 0
    33ee:	b0 e8       	ldi	r27, 0x80	; 128
    33f0:	e8 2a       	or	r14, r24
    33f2:	f9 2a       	or	r15, r25
    33f4:	0a 2b       	or	r16, r26
    33f6:	1b 2b       	or	r17, r27
    33f8:	76 95       	lsr	r23
    33fa:	67 95       	ror	r22
    33fc:	57 95       	ror	r21
    33fe:	47 95       	ror	r20
    3400:	2f 5f       	subi	r18, 0xFF	; 255
    3402:	3f 4f       	sbci	r19, 0xFF	; 255
    3404:	77 fd       	sbrc	r23, 7
    3406:	e7 cf       	rjmp	.-50     	; 0x33d6 <__mulsf3+0x140>
    3408:	0c c0       	rjmp	.+24     	; 0x3422 <__mulsf3+0x18c>
    340a:	44 0f       	add	r20, r20
    340c:	55 1f       	adc	r21, r21
    340e:	66 1f       	adc	r22, r22
    3410:	77 1f       	adc	r23, r23
    3412:	17 fd       	sbrc	r17, 7
    3414:	41 60       	ori	r20, 0x01	; 1
    3416:	ee 0c       	add	r14, r14
    3418:	ff 1c       	adc	r15, r15
    341a:	00 1f       	adc	r16, r16
    341c:	11 1f       	adc	r17, r17
    341e:	21 50       	subi	r18, 0x01	; 1
    3420:	30 40       	sbci	r19, 0x00	; 0
    3422:	40 30       	cpi	r20, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	59 07       	cpc	r21, r25
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	69 07       	cpc	r22, r25
    342c:	90 e4       	ldi	r25, 0x40	; 64
    342e:	79 07       	cpc	r23, r25
    3430:	60 f3       	brcs	.-40     	; 0x340a <__mulsf3+0x174>
    3432:	2b 8f       	std	Y+27, r18	; 0x1b
    3434:	3c 8f       	std	Y+28, r19	; 0x1c
    3436:	db 01       	movw	r26, r22
    3438:	ca 01       	movw	r24, r20
    343a:	8f 77       	andi	r24, 0x7F	; 127
    343c:	90 70       	andi	r25, 0x00	; 0
    343e:	a0 70       	andi	r26, 0x00	; 0
    3440:	b0 70       	andi	r27, 0x00	; 0
    3442:	80 34       	cpi	r24, 0x40	; 64
    3444:	91 05       	cpc	r25, r1
    3446:	a1 05       	cpc	r26, r1
    3448:	b1 05       	cpc	r27, r1
    344a:	61 f4       	brne	.+24     	; 0x3464 <__mulsf3+0x1ce>
    344c:	47 fd       	sbrc	r20, 7
    344e:	0a c0       	rjmp	.+20     	; 0x3464 <__mulsf3+0x1ce>
    3450:	e1 14       	cp	r14, r1
    3452:	f1 04       	cpc	r15, r1
    3454:	01 05       	cpc	r16, r1
    3456:	11 05       	cpc	r17, r1
    3458:	29 f0       	breq	.+10     	; 0x3464 <__mulsf3+0x1ce>
    345a:	40 5c       	subi	r20, 0xC0	; 192
    345c:	5f 4f       	sbci	r21, 0xFF	; 255
    345e:	6f 4f       	sbci	r22, 0xFF	; 255
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	40 78       	andi	r20, 0x80	; 128
    3464:	1a 8e       	std	Y+26, r1	; 0x1a
    3466:	fe 17       	cp	r31, r30
    3468:	11 f0       	breq	.+4      	; 0x346e <__mulsf3+0x1d8>
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	8a 8f       	std	Y+26, r24	; 0x1a
    346e:	4d 8f       	std	Y+29, r20	; 0x1d
    3470:	5e 8f       	std	Y+30, r21	; 0x1e
    3472:	6f 8f       	std	Y+31, r22	; 0x1f
    3474:	78 a3       	std	Y+32, r23	; 0x20
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	89 8f       	std	Y+25, r24	; 0x19
    347a:	ce 01       	movw	r24, r28
    347c:	49 96       	adiw	r24, 0x19	; 25
    347e:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__pack_f>
    3482:	a0 96       	adiw	r28, 0x20	; 32
    3484:	e2 e1       	ldi	r30, 0x12	; 18
    3486:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__epilogue_restores__>

0000348a <__divsf3>:
    348a:	a8 e1       	ldi	r26, 0x18	; 24
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	eb e4       	ldi	r30, 0x4B	; 75
    3490:	fa e1       	ldi	r31, 0x1A	; 26
    3492:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__prologue_saves__+0x10>
    3496:	69 83       	std	Y+1, r22	; 0x01
    3498:	7a 83       	std	Y+2, r23	; 0x02
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	9c 83       	std	Y+4, r25	; 0x04
    349e:	2d 83       	std	Y+5, r18	; 0x05
    34a0:	3e 83       	std	Y+6, r19	; 0x06
    34a2:	4f 83       	std	Y+7, r20	; 0x07
    34a4:	58 87       	std	Y+8, r21	; 0x08
    34a6:	b9 e0       	ldi	r27, 0x09	; 9
    34a8:	eb 2e       	mov	r14, r27
    34aa:	f1 2c       	mov	r15, r1
    34ac:	ec 0e       	add	r14, r28
    34ae:	fd 1e       	adc	r15, r29
    34b0:	ce 01       	movw	r24, r28
    34b2:	01 96       	adiw	r24, 0x01	; 1
    34b4:	b7 01       	movw	r22, r14
    34b6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    34ba:	8e 01       	movw	r16, r28
    34bc:	0f 5e       	subi	r16, 0xEF	; 239
    34be:	1f 4f       	sbci	r17, 0xFF	; 255
    34c0:	ce 01       	movw	r24, r28
    34c2:	05 96       	adiw	r24, 0x05	; 5
    34c4:	b8 01       	movw	r22, r16
    34c6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    34ca:	29 85       	ldd	r18, Y+9	; 0x09
    34cc:	22 30       	cpi	r18, 0x02	; 2
    34ce:	08 f4       	brcc	.+2      	; 0x34d2 <__divsf3+0x48>
    34d0:	7e c0       	rjmp	.+252    	; 0x35ce <__divsf3+0x144>
    34d2:	39 89       	ldd	r19, Y+17	; 0x11
    34d4:	32 30       	cpi	r19, 0x02	; 2
    34d6:	10 f4       	brcc	.+4      	; 0x34dc <__divsf3+0x52>
    34d8:	b8 01       	movw	r22, r16
    34da:	7c c0       	rjmp	.+248    	; 0x35d4 <__divsf3+0x14a>
    34dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    34de:	9a 89       	ldd	r25, Y+18	; 0x12
    34e0:	89 27       	eor	r24, r25
    34e2:	8a 87       	std	Y+10, r24	; 0x0a
    34e4:	24 30       	cpi	r18, 0x04	; 4
    34e6:	11 f0       	breq	.+4      	; 0x34ec <__divsf3+0x62>
    34e8:	22 30       	cpi	r18, 0x02	; 2
    34ea:	31 f4       	brne	.+12     	; 0x34f8 <__divsf3+0x6e>
    34ec:	23 17       	cp	r18, r19
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <__divsf3+0x68>
    34f0:	6e c0       	rjmp	.+220    	; 0x35ce <__divsf3+0x144>
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	72 e0       	ldi	r23, 0x02	; 2
    34f6:	6e c0       	rjmp	.+220    	; 0x35d4 <__divsf3+0x14a>
    34f8:	34 30       	cpi	r19, 0x04	; 4
    34fa:	39 f4       	brne	.+14     	; 0x350a <__divsf3+0x80>
    34fc:	1d 86       	std	Y+13, r1	; 0x0d
    34fe:	1e 86       	std	Y+14, r1	; 0x0e
    3500:	1f 86       	std	Y+15, r1	; 0x0f
    3502:	18 8a       	std	Y+16, r1	; 0x10
    3504:	1c 86       	std	Y+12, r1	; 0x0c
    3506:	1b 86       	std	Y+11, r1	; 0x0b
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <__divsf3+0x88>
    350a:	32 30       	cpi	r19, 0x02	; 2
    350c:	21 f4       	brne	.+8      	; 0x3516 <__divsf3+0x8c>
    350e:	84 e0       	ldi	r24, 0x04	; 4
    3510:	89 87       	std	Y+9, r24	; 0x09
    3512:	b7 01       	movw	r22, r14
    3514:	5f c0       	rjmp	.+190    	; 0x35d4 <__divsf3+0x14a>
    3516:	2b 85       	ldd	r18, Y+11	; 0x0b
    3518:	3c 85       	ldd	r19, Y+12	; 0x0c
    351a:	8b 89       	ldd	r24, Y+19	; 0x13
    351c:	9c 89       	ldd	r25, Y+20	; 0x14
    351e:	28 1b       	sub	r18, r24
    3520:	39 0b       	sbc	r19, r25
    3522:	3c 87       	std	Y+12, r19	; 0x0c
    3524:	2b 87       	std	Y+11, r18	; 0x0b
    3526:	ed 84       	ldd	r14, Y+13	; 0x0d
    3528:	fe 84       	ldd	r15, Y+14	; 0x0e
    352a:	0f 85       	ldd	r16, Y+15	; 0x0f
    352c:	18 89       	ldd	r17, Y+16	; 0x10
    352e:	ad 88       	ldd	r10, Y+21	; 0x15
    3530:	be 88       	ldd	r11, Y+22	; 0x16
    3532:	cf 88       	ldd	r12, Y+23	; 0x17
    3534:	d8 8c       	ldd	r13, Y+24	; 0x18
    3536:	ea 14       	cp	r14, r10
    3538:	fb 04       	cpc	r15, r11
    353a:	0c 05       	cpc	r16, r12
    353c:	1d 05       	cpc	r17, r13
    353e:	40 f4       	brcc	.+16     	; 0x3550 <__divsf3+0xc6>
    3540:	ee 0c       	add	r14, r14
    3542:	ff 1c       	adc	r15, r15
    3544:	00 1f       	adc	r16, r16
    3546:	11 1f       	adc	r17, r17
    3548:	21 50       	subi	r18, 0x01	; 1
    354a:	30 40       	sbci	r19, 0x00	; 0
    354c:	3c 87       	std	Y+12, r19	; 0x0c
    354e:	2b 87       	std	Y+11, r18	; 0x0b
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	a0 e0       	ldi	r26, 0x00	; 0
    355e:	b0 e4       	ldi	r27, 0x40	; 64
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	ea 14       	cp	r14, r10
    3566:	fb 04       	cpc	r15, r11
    3568:	0c 05       	cpc	r16, r12
    356a:	1d 05       	cpc	r17, r13
    356c:	40 f0       	brcs	.+16     	; 0x357e <__divsf3+0xf4>
    356e:	28 2b       	or	r18, r24
    3570:	39 2b       	or	r19, r25
    3572:	4a 2b       	or	r20, r26
    3574:	5b 2b       	or	r21, r27
    3576:	ea 18       	sub	r14, r10
    3578:	fb 08       	sbc	r15, r11
    357a:	0c 09       	sbc	r16, r12
    357c:	1d 09       	sbc	r17, r13
    357e:	b6 95       	lsr	r27
    3580:	a7 95       	ror	r26
    3582:	97 95       	ror	r25
    3584:	87 95       	ror	r24
    3586:	ee 0c       	add	r14, r14
    3588:	ff 1c       	adc	r15, r15
    358a:	00 1f       	adc	r16, r16
    358c:	11 1f       	adc	r17, r17
    358e:	6f 5f       	subi	r22, 0xFF	; 255
    3590:	7f 4f       	sbci	r23, 0xFF	; 255
    3592:	6f 31       	cpi	r22, 0x1F	; 31
    3594:	71 05       	cpc	r23, r1
    3596:	31 f7       	brne	.-52     	; 0x3564 <__divsf3+0xda>
    3598:	da 01       	movw	r26, r20
    359a:	c9 01       	movw	r24, r18
    359c:	8f 77       	andi	r24, 0x7F	; 127
    359e:	90 70       	andi	r25, 0x00	; 0
    35a0:	a0 70       	andi	r26, 0x00	; 0
    35a2:	b0 70       	andi	r27, 0x00	; 0
    35a4:	80 34       	cpi	r24, 0x40	; 64
    35a6:	91 05       	cpc	r25, r1
    35a8:	a1 05       	cpc	r26, r1
    35aa:	b1 05       	cpc	r27, r1
    35ac:	61 f4       	brne	.+24     	; 0x35c6 <__divsf3+0x13c>
    35ae:	27 fd       	sbrc	r18, 7
    35b0:	0a c0       	rjmp	.+20     	; 0x35c6 <__divsf3+0x13c>
    35b2:	e1 14       	cp	r14, r1
    35b4:	f1 04       	cpc	r15, r1
    35b6:	01 05       	cpc	r16, r1
    35b8:	11 05       	cpc	r17, r1
    35ba:	29 f0       	breq	.+10     	; 0x35c6 <__divsf3+0x13c>
    35bc:	20 5c       	subi	r18, 0xC0	; 192
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	4f 4f       	sbci	r20, 0xFF	; 255
    35c2:	5f 4f       	sbci	r21, 0xFF	; 255
    35c4:	20 78       	andi	r18, 0x80	; 128
    35c6:	2d 87       	std	Y+13, r18	; 0x0d
    35c8:	3e 87       	std	Y+14, r19	; 0x0e
    35ca:	4f 87       	std	Y+15, r20	; 0x0f
    35cc:	58 8b       	std	Y+16, r21	; 0x10
    35ce:	be 01       	movw	r22, r28
    35d0:	67 5f       	subi	r22, 0xF7	; 247
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255
    35d4:	cb 01       	movw	r24, r22
    35d6:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__pack_f>
    35da:	68 96       	adiw	r28, 0x18	; 24
    35dc:	ea e0       	ldi	r30, 0x0A	; 10
    35de:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__epilogue_restores__+0x10>

000035e2 <__gtsf2>:
    35e2:	a8 e1       	ldi	r26, 0x18	; 24
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e7 ef       	ldi	r30, 0xF7	; 247
    35e8:	fa e1       	ldi	r31, 0x1A	; 26
    35ea:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    35ee:	69 83       	std	Y+1, r22	; 0x01
    35f0:	7a 83       	std	Y+2, r23	; 0x02
    35f2:	8b 83       	std	Y+3, r24	; 0x03
    35f4:	9c 83       	std	Y+4, r25	; 0x04
    35f6:	2d 83       	std	Y+5, r18	; 0x05
    35f8:	3e 83       	std	Y+6, r19	; 0x06
    35fa:	4f 83       	std	Y+7, r20	; 0x07
    35fc:	58 87       	std	Y+8, r21	; 0x08
    35fe:	89 e0       	ldi	r24, 0x09	; 9
    3600:	e8 2e       	mov	r14, r24
    3602:	f1 2c       	mov	r15, r1
    3604:	ec 0e       	add	r14, r28
    3606:	fd 1e       	adc	r15, r29
    3608:	ce 01       	movw	r24, r28
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	b7 01       	movw	r22, r14
    360e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    3612:	8e 01       	movw	r16, r28
    3614:	0f 5e       	subi	r16, 0xEF	; 239
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	ce 01       	movw	r24, r28
    361a:	05 96       	adiw	r24, 0x05	; 5
    361c:	b8 01       	movw	r22, r16
    361e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	82 30       	cpi	r24, 0x02	; 2
    3626:	40 f0       	brcs	.+16     	; 0x3638 <__gtsf2+0x56>
    3628:	89 89       	ldd	r24, Y+17	; 0x11
    362a:	82 30       	cpi	r24, 0x02	; 2
    362c:	28 f0       	brcs	.+10     	; 0x3638 <__gtsf2+0x56>
    362e:	c7 01       	movw	r24, r14
    3630:	b8 01       	movw	r22, r16
    3632:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__fpcmp_parts_f>
    3636:	01 c0       	rjmp	.+2      	; 0x363a <__gtsf2+0x58>
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	68 96       	adiw	r28, 0x18	; 24
    363c:	e6 e0       	ldi	r30, 0x06	; 6
    363e:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

00003642 <__gesf2>:
    3642:	a8 e1       	ldi	r26, 0x18	; 24
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	e7 e2       	ldi	r30, 0x27	; 39
    3648:	fb e1       	ldi	r31, 0x1B	; 27
    364a:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    364e:	69 83       	std	Y+1, r22	; 0x01
    3650:	7a 83       	std	Y+2, r23	; 0x02
    3652:	8b 83       	std	Y+3, r24	; 0x03
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	2d 83       	std	Y+5, r18	; 0x05
    3658:	3e 83       	std	Y+6, r19	; 0x06
    365a:	4f 83       	std	Y+7, r20	; 0x07
    365c:	58 87       	std	Y+8, r21	; 0x08
    365e:	89 e0       	ldi	r24, 0x09	; 9
    3660:	e8 2e       	mov	r14, r24
    3662:	f1 2c       	mov	r15, r1
    3664:	ec 0e       	add	r14, r28
    3666:	fd 1e       	adc	r15, r29
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	b7 01       	movw	r22, r14
    366e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    3672:	8e 01       	movw	r16, r28
    3674:	0f 5e       	subi	r16, 0xEF	; 239
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	ce 01       	movw	r24, r28
    367a:	05 96       	adiw	r24, 0x05	; 5
    367c:	b8 01       	movw	r22, r16
    367e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	40 f0       	brcs	.+16     	; 0x3698 <__gesf2+0x56>
    3688:	89 89       	ldd	r24, Y+17	; 0x11
    368a:	82 30       	cpi	r24, 0x02	; 2
    368c:	28 f0       	brcs	.+10     	; 0x3698 <__gesf2+0x56>
    368e:	c7 01       	movw	r24, r14
    3690:	b8 01       	movw	r22, r16
    3692:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__fpcmp_parts_f>
    3696:	01 c0       	rjmp	.+2      	; 0x369a <__gesf2+0x58>
    3698:	8f ef       	ldi	r24, 0xFF	; 255
    369a:	68 96       	adiw	r28, 0x18	; 24
    369c:	e6 e0       	ldi	r30, 0x06	; 6
    369e:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

000036a2 <__ltsf2>:
    36a2:	a8 e1       	ldi	r26, 0x18	; 24
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	e7 e5       	ldi	r30, 0x57	; 87
    36a8:	fb e1       	ldi	r31, 0x1B	; 27
    36aa:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    36ae:	69 83       	std	Y+1, r22	; 0x01
    36b0:	7a 83       	std	Y+2, r23	; 0x02
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	9c 83       	std	Y+4, r25	; 0x04
    36b6:	2d 83       	std	Y+5, r18	; 0x05
    36b8:	3e 83       	std	Y+6, r19	; 0x06
    36ba:	4f 83       	std	Y+7, r20	; 0x07
    36bc:	58 87       	std	Y+8, r21	; 0x08
    36be:	89 e0       	ldi	r24, 0x09	; 9
    36c0:	e8 2e       	mov	r14, r24
    36c2:	f1 2c       	mov	r15, r1
    36c4:	ec 0e       	add	r14, r28
    36c6:	fd 1e       	adc	r15, r29
    36c8:	ce 01       	movw	r24, r28
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	b7 01       	movw	r22, r14
    36ce:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    36d2:	8e 01       	movw	r16, r28
    36d4:	0f 5e       	subi	r16, 0xEF	; 239
    36d6:	1f 4f       	sbci	r17, 0xFF	; 255
    36d8:	ce 01       	movw	r24, r28
    36da:	05 96       	adiw	r24, 0x05	; 5
    36dc:	b8 01       	movw	r22, r16
    36de:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    36e2:	89 85       	ldd	r24, Y+9	; 0x09
    36e4:	82 30       	cpi	r24, 0x02	; 2
    36e6:	40 f0       	brcs	.+16     	; 0x36f8 <__ltsf2+0x56>
    36e8:	89 89       	ldd	r24, Y+17	; 0x11
    36ea:	82 30       	cpi	r24, 0x02	; 2
    36ec:	28 f0       	brcs	.+10     	; 0x36f8 <__ltsf2+0x56>
    36ee:	c7 01       	movw	r24, r14
    36f0:	b8 01       	movw	r22, r16
    36f2:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__fpcmp_parts_f>
    36f6:	01 c0       	rjmp	.+2      	; 0x36fa <__ltsf2+0x58>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	68 96       	adiw	r28, 0x18	; 24
    36fc:	e6 e0       	ldi	r30, 0x06	; 6
    36fe:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

00003702 <__floatsisf>:
    3702:	a8 e0       	ldi	r26, 0x08	; 8
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	e7 e8       	ldi	r30, 0x87	; 135
    3708:	fb e1       	ldi	r31, 0x1B	; 27
    370a:	0c 94 c9 1e 	jmp	0x3d92	; 0x3d92 <__prologue_saves__+0x12>
    370e:	9b 01       	movw	r18, r22
    3710:	ac 01       	movw	r20, r24
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	89 83       	std	Y+1, r24	; 0x01
    3716:	da 01       	movw	r26, r20
    3718:	c9 01       	movw	r24, r18
    371a:	88 27       	eor	r24, r24
    371c:	b7 fd       	sbrc	r27, 7
    371e:	83 95       	inc	r24
    3720:	99 27       	eor	r25, r25
    3722:	aa 27       	eor	r26, r26
    3724:	bb 27       	eor	r27, r27
    3726:	b8 2e       	mov	r11, r24
    3728:	21 15       	cp	r18, r1
    372a:	31 05       	cpc	r19, r1
    372c:	41 05       	cpc	r20, r1
    372e:	51 05       	cpc	r21, r1
    3730:	19 f4       	brne	.+6      	; 0x3738 <__floatsisf+0x36>
    3732:	82 e0       	ldi	r24, 0x02	; 2
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	3a c0       	rjmp	.+116    	; 0x37ac <__floatsisf+0xaa>
    3738:	88 23       	and	r24, r24
    373a:	a9 f0       	breq	.+42     	; 0x3766 <__floatsisf+0x64>
    373c:	20 30       	cpi	r18, 0x00	; 0
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	38 07       	cpc	r19, r24
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	48 07       	cpc	r20, r24
    3746:	80 e8       	ldi	r24, 0x80	; 128
    3748:	58 07       	cpc	r21, r24
    374a:	29 f4       	brne	.+10     	; 0x3756 <__floatsisf+0x54>
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	9f ec       	ldi	r25, 0xCF	; 207
    3754:	30 c0       	rjmp	.+96     	; 0x37b6 <__floatsisf+0xb4>
    3756:	ee 24       	eor	r14, r14
    3758:	ff 24       	eor	r15, r15
    375a:	87 01       	movw	r16, r14
    375c:	e2 1a       	sub	r14, r18
    375e:	f3 0a       	sbc	r15, r19
    3760:	04 0b       	sbc	r16, r20
    3762:	15 0b       	sbc	r17, r21
    3764:	02 c0       	rjmp	.+4      	; 0x376a <__floatsisf+0x68>
    3766:	79 01       	movw	r14, r18
    3768:	8a 01       	movw	r16, r20
    376a:	8e e1       	ldi	r24, 0x1E	; 30
    376c:	c8 2e       	mov	r12, r24
    376e:	d1 2c       	mov	r13, r1
    3770:	dc 82       	std	Y+4, r13	; 0x04
    3772:	cb 82       	std	Y+3, r12	; 0x03
    3774:	ed 82       	std	Y+5, r14	; 0x05
    3776:	fe 82       	std	Y+6, r15	; 0x06
    3778:	0f 83       	std	Y+7, r16	; 0x07
    377a:	18 87       	std	Y+8, r17	; 0x08
    377c:	c8 01       	movw	r24, r16
    377e:	b7 01       	movw	r22, r14
    3780:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__clzsi2>
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	18 16       	cp	r1, r24
    3788:	19 06       	cpc	r1, r25
    378a:	84 f4       	brge	.+32     	; 0x37ac <__floatsisf+0xaa>
    378c:	08 2e       	mov	r0, r24
    378e:	04 c0       	rjmp	.+8      	; 0x3798 <__floatsisf+0x96>
    3790:	ee 0c       	add	r14, r14
    3792:	ff 1c       	adc	r15, r15
    3794:	00 1f       	adc	r16, r16
    3796:	11 1f       	adc	r17, r17
    3798:	0a 94       	dec	r0
    379a:	d2 f7       	brpl	.-12     	; 0x3790 <__floatsisf+0x8e>
    379c:	ed 82       	std	Y+5, r14	; 0x05
    379e:	fe 82       	std	Y+6, r15	; 0x06
    37a0:	0f 83       	std	Y+7, r16	; 0x07
    37a2:	18 87       	std	Y+8, r17	; 0x08
    37a4:	c8 1a       	sub	r12, r24
    37a6:	d9 0a       	sbc	r13, r25
    37a8:	dc 82       	std	Y+4, r13	; 0x04
    37aa:	cb 82       	std	Y+3, r12	; 0x03
    37ac:	ba 82       	std	Y+2, r11	; 0x02
    37ae:	ce 01       	movw	r24, r28
    37b0:	01 96       	adiw	r24, 0x01	; 1
    37b2:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__pack_f>
    37b6:	28 96       	adiw	r28, 0x08	; 8
    37b8:	e9 e0       	ldi	r30, 0x09	; 9
    37ba:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__epilogue_restores__+0x12>

000037be <__fixsfsi>:
    37be:	ac e0       	ldi	r26, 0x0C	; 12
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	e5 ee       	ldi	r30, 0xE5	; 229
    37c4:	fb e1       	ldi	r31, 0x1B	; 27
    37c6:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__prologue_saves__+0x20>
    37ca:	69 83       	std	Y+1, r22	; 0x01
    37cc:	7a 83       	std	Y+2, r23	; 0x02
    37ce:	8b 83       	std	Y+3, r24	; 0x03
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	ce 01       	movw	r24, r28
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	be 01       	movw	r22, r28
    37d8:	6b 5f       	subi	r22, 0xFB	; 251
    37da:	7f 4f       	sbci	r23, 0xFF	; 255
    37dc:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__unpack_f>
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	82 30       	cpi	r24, 0x02	; 2
    37e4:	61 f1       	breq	.+88     	; 0x383e <__fixsfsi+0x80>
    37e6:	82 30       	cpi	r24, 0x02	; 2
    37e8:	50 f1       	brcs	.+84     	; 0x383e <__fixsfsi+0x80>
    37ea:	84 30       	cpi	r24, 0x04	; 4
    37ec:	21 f4       	brne	.+8      	; 0x37f6 <__fixsfsi+0x38>
    37ee:	8e 81       	ldd	r24, Y+6	; 0x06
    37f0:	88 23       	and	r24, r24
    37f2:	51 f1       	breq	.+84     	; 0x3848 <__fixsfsi+0x8a>
    37f4:	2e c0       	rjmp	.+92     	; 0x3852 <__fixsfsi+0x94>
    37f6:	2f 81       	ldd	r18, Y+7	; 0x07
    37f8:	38 85       	ldd	r19, Y+8	; 0x08
    37fa:	37 fd       	sbrc	r19, 7
    37fc:	20 c0       	rjmp	.+64     	; 0x383e <__fixsfsi+0x80>
    37fe:	6e 81       	ldd	r22, Y+6	; 0x06
    3800:	2f 31       	cpi	r18, 0x1F	; 31
    3802:	31 05       	cpc	r19, r1
    3804:	1c f0       	brlt	.+6      	; 0x380c <__fixsfsi+0x4e>
    3806:	66 23       	and	r22, r22
    3808:	f9 f0       	breq	.+62     	; 0x3848 <__fixsfsi+0x8a>
    380a:	23 c0       	rjmp	.+70     	; 0x3852 <__fixsfsi+0x94>
    380c:	8e e1       	ldi	r24, 0x1E	; 30
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	82 1b       	sub	r24, r18
    3812:	93 0b       	sbc	r25, r19
    3814:	29 85       	ldd	r18, Y+9	; 0x09
    3816:	3a 85       	ldd	r19, Y+10	; 0x0a
    3818:	4b 85       	ldd	r20, Y+11	; 0x0b
    381a:	5c 85       	ldd	r21, Y+12	; 0x0c
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <__fixsfsi+0x68>
    381e:	56 95       	lsr	r21
    3820:	47 95       	ror	r20
    3822:	37 95       	ror	r19
    3824:	27 95       	ror	r18
    3826:	8a 95       	dec	r24
    3828:	d2 f7       	brpl	.-12     	; 0x381e <__fixsfsi+0x60>
    382a:	66 23       	and	r22, r22
    382c:	b1 f0       	breq	.+44     	; 0x385a <__fixsfsi+0x9c>
    382e:	50 95       	com	r21
    3830:	40 95       	com	r20
    3832:	30 95       	com	r19
    3834:	21 95       	neg	r18
    3836:	3f 4f       	sbci	r19, 0xFF	; 255
    3838:	4f 4f       	sbci	r20, 0xFF	; 255
    383a:	5f 4f       	sbci	r21, 0xFF	; 255
    383c:	0e c0       	rjmp	.+28     	; 0x385a <__fixsfsi+0x9c>
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	09 c0       	rjmp	.+18     	; 0x385a <__fixsfsi+0x9c>
    3848:	2f ef       	ldi	r18, 0xFF	; 255
    384a:	3f ef       	ldi	r19, 0xFF	; 255
    384c:	4f ef       	ldi	r20, 0xFF	; 255
    384e:	5f e7       	ldi	r21, 0x7F	; 127
    3850:	04 c0       	rjmp	.+8      	; 0x385a <__fixsfsi+0x9c>
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	50 e8       	ldi	r21, 0x80	; 128
    385a:	b9 01       	movw	r22, r18
    385c:	ca 01       	movw	r24, r20
    385e:	2c 96       	adiw	r28, 0x0c	; 12
    3860:	e2 e0       	ldi	r30, 0x02	; 2
    3862:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__epilogue_restores__+0x20>

00003866 <__floatunsisf>:
    3866:	a8 e0       	ldi	r26, 0x08	; 8
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	e9 e3       	ldi	r30, 0x39	; 57
    386c:	fc e1       	ldi	r31, 0x1C	; 28
    386e:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__prologue_saves__+0x10>
    3872:	7b 01       	movw	r14, r22
    3874:	8c 01       	movw	r16, r24
    3876:	61 15       	cp	r22, r1
    3878:	71 05       	cpc	r23, r1
    387a:	81 05       	cpc	r24, r1
    387c:	91 05       	cpc	r25, r1
    387e:	19 f4       	brne	.+6      	; 0x3886 <__floatunsisf+0x20>
    3880:	82 e0       	ldi	r24, 0x02	; 2
    3882:	89 83       	std	Y+1, r24	; 0x01
    3884:	60 c0       	rjmp	.+192    	; 0x3946 <__floatunsisf+0xe0>
    3886:	83 e0       	ldi	r24, 0x03	; 3
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	8e e1       	ldi	r24, 0x1E	; 30
    388c:	c8 2e       	mov	r12, r24
    388e:	d1 2c       	mov	r13, r1
    3890:	dc 82       	std	Y+4, r13	; 0x04
    3892:	cb 82       	std	Y+3, r12	; 0x03
    3894:	ed 82       	std	Y+5, r14	; 0x05
    3896:	fe 82       	std	Y+6, r15	; 0x06
    3898:	0f 83       	std	Y+7, r16	; 0x07
    389a:	18 87       	std	Y+8, r17	; 0x08
    389c:	c8 01       	movw	r24, r16
    389e:	b7 01       	movw	r22, r14
    38a0:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__clzsi2>
    38a4:	fc 01       	movw	r30, r24
    38a6:	31 97       	sbiw	r30, 0x01	; 1
    38a8:	f7 ff       	sbrs	r31, 7
    38aa:	3b c0       	rjmp	.+118    	; 0x3922 <__floatunsisf+0xbc>
    38ac:	22 27       	eor	r18, r18
    38ae:	33 27       	eor	r19, r19
    38b0:	2e 1b       	sub	r18, r30
    38b2:	3f 0b       	sbc	r19, r31
    38b4:	57 01       	movw	r10, r14
    38b6:	68 01       	movw	r12, r16
    38b8:	02 2e       	mov	r0, r18
    38ba:	04 c0       	rjmp	.+8      	; 0x38c4 <__floatunsisf+0x5e>
    38bc:	d6 94       	lsr	r13
    38be:	c7 94       	ror	r12
    38c0:	b7 94       	ror	r11
    38c2:	a7 94       	ror	r10
    38c4:	0a 94       	dec	r0
    38c6:	d2 f7       	brpl	.-12     	; 0x38bc <__floatunsisf+0x56>
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	a0 e0       	ldi	r26, 0x00	; 0
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <__floatunsisf+0x7c>
    38da:	88 0f       	add	r24, r24
    38dc:	99 1f       	adc	r25, r25
    38de:	aa 1f       	adc	r26, r26
    38e0:	bb 1f       	adc	r27, r27
    38e2:	2a 95       	dec	r18
    38e4:	d2 f7       	brpl	.-12     	; 0x38da <__floatunsisf+0x74>
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	a1 09       	sbc	r26, r1
    38ea:	b1 09       	sbc	r27, r1
    38ec:	8e 21       	and	r24, r14
    38ee:	9f 21       	and	r25, r15
    38f0:	a0 23       	and	r26, r16
    38f2:	b1 23       	and	r27, r17
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	a1 05       	cpc	r26, r1
    38f8:	b1 05       	cpc	r27, r1
    38fa:	21 f0       	breq	.+8      	; 0x3904 <__floatunsisf+0x9e>
    38fc:	41 e0       	ldi	r20, 0x01	; 1
    38fe:	50 e0       	ldi	r21, 0x00	; 0
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	4a 29       	or	r20, r10
    3906:	5b 29       	or	r21, r11
    3908:	6c 29       	or	r22, r12
    390a:	7d 29       	or	r23, r13
    390c:	4d 83       	std	Y+5, r20	; 0x05
    390e:	5e 83       	std	Y+6, r21	; 0x06
    3910:	6f 83       	std	Y+7, r22	; 0x07
    3912:	78 87       	std	Y+8, r23	; 0x08
    3914:	8e e1       	ldi	r24, 0x1E	; 30
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	8e 1b       	sub	r24, r30
    391a:	9f 0b       	sbc	r25, r31
    391c:	9c 83       	std	Y+4, r25	; 0x04
    391e:	8b 83       	std	Y+3, r24	; 0x03
    3920:	12 c0       	rjmp	.+36     	; 0x3946 <__floatunsisf+0xe0>
    3922:	30 97       	sbiw	r30, 0x00	; 0
    3924:	81 f0       	breq	.+32     	; 0x3946 <__floatunsisf+0xe0>
    3926:	0e 2e       	mov	r0, r30
    3928:	04 c0       	rjmp	.+8      	; 0x3932 <__floatunsisf+0xcc>
    392a:	ee 0c       	add	r14, r14
    392c:	ff 1c       	adc	r15, r15
    392e:	00 1f       	adc	r16, r16
    3930:	11 1f       	adc	r17, r17
    3932:	0a 94       	dec	r0
    3934:	d2 f7       	brpl	.-12     	; 0x392a <__floatunsisf+0xc4>
    3936:	ed 82       	std	Y+5, r14	; 0x05
    3938:	fe 82       	std	Y+6, r15	; 0x06
    393a:	0f 83       	std	Y+7, r16	; 0x07
    393c:	18 87       	std	Y+8, r17	; 0x08
    393e:	ce 1a       	sub	r12, r30
    3940:	df 0a       	sbc	r13, r31
    3942:	dc 82       	std	Y+4, r13	; 0x04
    3944:	cb 82       	std	Y+3, r12	; 0x03
    3946:	1a 82       	std	Y+2, r1	; 0x02
    3948:	ce 01       	movw	r24, r28
    394a:	01 96       	adiw	r24, 0x01	; 1
    394c:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__pack_f>
    3950:	28 96       	adiw	r28, 0x08	; 8
    3952:	ea e0       	ldi	r30, 0x0A	; 10
    3954:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__epilogue_restores__+0x10>

00003958 <__clzsi2>:
    3958:	ef 92       	push	r14
    395a:	ff 92       	push	r15
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	7b 01       	movw	r14, r22
    3962:	8c 01       	movw	r16, r24
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	e8 16       	cp	r14, r24
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	f8 06       	cpc	r15, r24
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	08 07       	cpc	r16, r24
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	18 07       	cpc	r17, r24
    3974:	88 f4       	brcc	.+34     	; 0x3998 <__clzsi2+0x40>
    3976:	8f ef       	ldi	r24, 0xFF	; 255
    3978:	e8 16       	cp	r14, r24
    397a:	f1 04       	cpc	r15, r1
    397c:	01 05       	cpc	r16, r1
    397e:	11 05       	cpc	r17, r1
    3980:	31 f0       	breq	.+12     	; 0x398e <__clzsi2+0x36>
    3982:	28 f0       	brcs	.+10     	; 0x398e <__clzsi2+0x36>
    3984:	88 e0       	ldi	r24, 0x08	; 8
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	a0 e0       	ldi	r26, 0x00	; 0
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	17 c0       	rjmp	.+46     	; 0x39bc <__clzsi2+0x64>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	a0 e0       	ldi	r26, 0x00	; 0
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	12 c0       	rjmp	.+36     	; 0x39bc <__clzsi2+0x64>
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	e8 16       	cp	r14, r24
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	f8 06       	cpc	r15, r24
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	08 07       	cpc	r16, r24
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	18 07       	cpc	r17, r24
    39a8:	28 f0       	brcs	.+10     	; 0x39b4 <__clzsi2+0x5c>
    39aa:	88 e1       	ldi	r24, 0x18	; 24
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	a0 e0       	ldi	r26, 0x00	; 0
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	04 c0       	rjmp	.+8      	; 0x39bc <__clzsi2+0x64>
    39b4:	80 e1       	ldi	r24, 0x10	; 16
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e0       	ldi	r26, 0x00	; 0
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	20 e2       	ldi	r18, 0x20	; 32
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e0       	ldi	r20, 0x00	; 0
    39c2:	50 e0       	ldi	r21, 0x00	; 0
    39c4:	28 1b       	sub	r18, r24
    39c6:	39 0b       	sbc	r19, r25
    39c8:	4a 0b       	sbc	r20, r26
    39ca:	5b 0b       	sbc	r21, r27
    39cc:	04 c0       	rjmp	.+8      	; 0x39d6 <__clzsi2+0x7e>
    39ce:	16 95       	lsr	r17
    39d0:	07 95       	ror	r16
    39d2:	f7 94       	ror	r15
    39d4:	e7 94       	ror	r14
    39d6:	8a 95       	dec	r24
    39d8:	d2 f7       	brpl	.-12     	; 0x39ce <__clzsi2+0x76>
    39da:	f7 01       	movw	r30, r14
    39dc:	e8 5f       	subi	r30, 0xF8	; 248
    39de:	fd 4f       	sbci	r31, 0xFD	; 253
    39e0:	80 81       	ld	r24, Z
    39e2:	28 1b       	sub	r18, r24
    39e4:	31 09       	sbc	r19, r1
    39e6:	41 09       	sbc	r20, r1
    39e8:	51 09       	sbc	r21, r1
    39ea:	c9 01       	movw	r24, r18
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	08 95       	ret

000039f6 <__pack_f>:
    39f6:	df 92       	push	r13
    39f8:	ef 92       	push	r14
    39fa:	ff 92       	push	r15
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	fc 01       	movw	r30, r24
    3a02:	e4 80       	ldd	r14, Z+4	; 0x04
    3a04:	f5 80       	ldd	r15, Z+5	; 0x05
    3a06:	06 81       	ldd	r16, Z+6	; 0x06
    3a08:	17 81       	ldd	r17, Z+7	; 0x07
    3a0a:	d1 80       	ldd	r13, Z+1	; 0x01
    3a0c:	80 81       	ld	r24, Z
    3a0e:	82 30       	cpi	r24, 0x02	; 2
    3a10:	48 f4       	brcc	.+18     	; 0x3a24 <__pack_f+0x2e>
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a0 e1       	ldi	r26, 0x10	; 16
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e8 2a       	or	r14, r24
    3a1c:	f9 2a       	or	r15, r25
    3a1e:	0a 2b       	or	r16, r26
    3a20:	1b 2b       	or	r17, r27
    3a22:	a5 c0       	rjmp	.+330    	; 0x3b6e <__pack_f+0x178>
    3a24:	84 30       	cpi	r24, 0x04	; 4
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <__pack_f+0x34>
    3a28:	9f c0       	rjmp	.+318    	; 0x3b68 <__pack_f+0x172>
    3a2a:	82 30       	cpi	r24, 0x02	; 2
    3a2c:	21 f4       	brne	.+8      	; 0x3a36 <__pack_f+0x40>
    3a2e:	ee 24       	eor	r14, r14
    3a30:	ff 24       	eor	r15, r15
    3a32:	87 01       	movw	r16, r14
    3a34:	05 c0       	rjmp	.+10     	; 0x3a40 <__pack_f+0x4a>
    3a36:	e1 14       	cp	r14, r1
    3a38:	f1 04       	cpc	r15, r1
    3a3a:	01 05       	cpc	r16, r1
    3a3c:	11 05       	cpc	r17, r1
    3a3e:	19 f4       	brne	.+6      	; 0x3a46 <__pack_f+0x50>
    3a40:	e0 e0       	ldi	r30, 0x00	; 0
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	96 c0       	rjmp	.+300    	; 0x3b72 <__pack_f+0x17c>
    3a46:	62 81       	ldd	r22, Z+2	; 0x02
    3a48:	73 81       	ldd	r23, Z+3	; 0x03
    3a4a:	9f ef       	ldi	r25, 0xFF	; 255
    3a4c:	62 38       	cpi	r22, 0x82	; 130
    3a4e:	79 07       	cpc	r23, r25
    3a50:	0c f0       	brlt	.+2      	; 0x3a54 <__pack_f+0x5e>
    3a52:	5b c0       	rjmp	.+182    	; 0x3b0a <__pack_f+0x114>
    3a54:	22 e8       	ldi	r18, 0x82	; 130
    3a56:	3f ef       	ldi	r19, 0xFF	; 255
    3a58:	26 1b       	sub	r18, r22
    3a5a:	37 0b       	sbc	r19, r23
    3a5c:	2a 31       	cpi	r18, 0x1A	; 26
    3a5e:	31 05       	cpc	r19, r1
    3a60:	2c f0       	brlt	.+10     	; 0x3a6c <__pack_f+0x76>
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	2a c0       	rjmp	.+84     	; 0x3ac0 <__pack_f+0xca>
    3a6c:	b8 01       	movw	r22, r16
    3a6e:	a7 01       	movw	r20, r14
    3a70:	02 2e       	mov	r0, r18
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <__pack_f+0x86>
    3a74:	76 95       	lsr	r23
    3a76:	67 95       	ror	r22
    3a78:	57 95       	ror	r21
    3a7a:	47 95       	ror	r20
    3a7c:	0a 94       	dec	r0
    3a7e:	d2 f7       	brpl	.-12     	; 0x3a74 <__pack_f+0x7e>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	a0 e0       	ldi	r26, 0x00	; 0
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	04 c0       	rjmp	.+8      	; 0x3a92 <__pack_f+0x9c>
    3a8a:	88 0f       	add	r24, r24
    3a8c:	99 1f       	adc	r25, r25
    3a8e:	aa 1f       	adc	r26, r26
    3a90:	bb 1f       	adc	r27, r27
    3a92:	2a 95       	dec	r18
    3a94:	d2 f7       	brpl	.-12     	; 0x3a8a <__pack_f+0x94>
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	a1 09       	sbc	r26, r1
    3a9a:	b1 09       	sbc	r27, r1
    3a9c:	8e 21       	and	r24, r14
    3a9e:	9f 21       	and	r25, r15
    3aa0:	a0 23       	and	r26, r16
    3aa2:	b1 23       	and	r27, r17
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	a1 05       	cpc	r26, r1
    3aa8:	b1 05       	cpc	r27, r1
    3aaa:	21 f0       	breq	.+8      	; 0x3ab4 <__pack_f+0xbe>
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	a0 e0       	ldi	r26, 0x00	; 0
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	9a 01       	movw	r18, r20
    3ab6:	ab 01       	movw	r20, r22
    3ab8:	28 2b       	or	r18, r24
    3aba:	39 2b       	or	r19, r25
    3abc:	4a 2b       	or	r20, r26
    3abe:	5b 2b       	or	r21, r27
    3ac0:	da 01       	movw	r26, r20
    3ac2:	c9 01       	movw	r24, r18
    3ac4:	8f 77       	andi	r24, 0x7F	; 127
    3ac6:	90 70       	andi	r25, 0x00	; 0
    3ac8:	a0 70       	andi	r26, 0x00	; 0
    3aca:	b0 70       	andi	r27, 0x00	; 0
    3acc:	80 34       	cpi	r24, 0x40	; 64
    3ace:	91 05       	cpc	r25, r1
    3ad0:	a1 05       	cpc	r26, r1
    3ad2:	b1 05       	cpc	r27, r1
    3ad4:	39 f4       	brne	.+14     	; 0x3ae4 <__pack_f+0xee>
    3ad6:	27 ff       	sbrs	r18, 7
    3ad8:	09 c0       	rjmp	.+18     	; 0x3aec <__pack_f+0xf6>
    3ada:	20 5c       	subi	r18, 0xC0	; 192
    3adc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ade:	4f 4f       	sbci	r20, 0xFF	; 255
    3ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae2:	04 c0       	rjmp	.+8      	; 0x3aec <__pack_f+0xf6>
    3ae4:	21 5c       	subi	r18, 0xC1	; 193
    3ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae8:	4f 4f       	sbci	r20, 0xFF	; 255
    3aea:	5f 4f       	sbci	r21, 0xFF	; 255
    3aec:	e0 e0       	ldi	r30, 0x00	; 0
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	20 30       	cpi	r18, 0x00	; 0
    3af2:	a0 e0       	ldi	r26, 0x00	; 0
    3af4:	3a 07       	cpc	r19, r26
    3af6:	a0 e0       	ldi	r26, 0x00	; 0
    3af8:	4a 07       	cpc	r20, r26
    3afa:	a0 e4       	ldi	r26, 0x40	; 64
    3afc:	5a 07       	cpc	r21, r26
    3afe:	10 f0       	brcs	.+4      	; 0x3b04 <__pack_f+0x10e>
    3b00:	e1 e0       	ldi	r30, 0x01	; 1
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	79 01       	movw	r14, r18
    3b06:	8a 01       	movw	r16, r20
    3b08:	27 c0       	rjmp	.+78     	; 0x3b58 <__pack_f+0x162>
    3b0a:	60 38       	cpi	r22, 0x80	; 128
    3b0c:	71 05       	cpc	r23, r1
    3b0e:	64 f5       	brge	.+88     	; 0x3b68 <__pack_f+0x172>
    3b10:	fb 01       	movw	r30, r22
    3b12:	e1 58       	subi	r30, 0x81	; 129
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	d8 01       	movw	r26, r16
    3b18:	c7 01       	movw	r24, r14
    3b1a:	8f 77       	andi	r24, 0x7F	; 127
    3b1c:	90 70       	andi	r25, 0x00	; 0
    3b1e:	a0 70       	andi	r26, 0x00	; 0
    3b20:	b0 70       	andi	r27, 0x00	; 0
    3b22:	80 34       	cpi	r24, 0x40	; 64
    3b24:	91 05       	cpc	r25, r1
    3b26:	a1 05       	cpc	r26, r1
    3b28:	b1 05       	cpc	r27, r1
    3b2a:	39 f4       	brne	.+14     	; 0x3b3a <__pack_f+0x144>
    3b2c:	e7 fe       	sbrs	r14, 7
    3b2e:	0d c0       	rjmp	.+26     	; 0x3b4a <__pack_f+0x154>
    3b30:	80 e4       	ldi	r24, 0x40	; 64
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	a0 e0       	ldi	r26, 0x00	; 0
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	04 c0       	rjmp	.+8      	; 0x3b42 <__pack_f+0x14c>
    3b3a:	8f e3       	ldi	r24, 0x3F	; 63
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	a0 e0       	ldi	r26, 0x00	; 0
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e8 0e       	add	r14, r24
    3b44:	f9 1e       	adc	r15, r25
    3b46:	0a 1f       	adc	r16, r26
    3b48:	1b 1f       	adc	r17, r27
    3b4a:	17 ff       	sbrs	r17, 7
    3b4c:	05 c0       	rjmp	.+10     	; 0x3b58 <__pack_f+0x162>
    3b4e:	16 95       	lsr	r17
    3b50:	07 95       	ror	r16
    3b52:	f7 94       	ror	r15
    3b54:	e7 94       	ror	r14
    3b56:	31 96       	adiw	r30, 0x01	; 1
    3b58:	87 e0       	ldi	r24, 0x07	; 7
    3b5a:	16 95       	lsr	r17
    3b5c:	07 95       	ror	r16
    3b5e:	f7 94       	ror	r15
    3b60:	e7 94       	ror	r14
    3b62:	8a 95       	dec	r24
    3b64:	d1 f7       	brne	.-12     	; 0x3b5a <__pack_f+0x164>
    3b66:	05 c0       	rjmp	.+10     	; 0x3b72 <__pack_f+0x17c>
    3b68:	ee 24       	eor	r14, r14
    3b6a:	ff 24       	eor	r15, r15
    3b6c:	87 01       	movw	r16, r14
    3b6e:	ef ef       	ldi	r30, 0xFF	; 255
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	6e 2f       	mov	r22, r30
    3b74:	67 95       	ror	r22
    3b76:	66 27       	eor	r22, r22
    3b78:	67 95       	ror	r22
    3b7a:	90 2f       	mov	r25, r16
    3b7c:	9f 77       	andi	r25, 0x7F	; 127
    3b7e:	d7 94       	ror	r13
    3b80:	dd 24       	eor	r13, r13
    3b82:	d7 94       	ror	r13
    3b84:	8e 2f       	mov	r24, r30
    3b86:	86 95       	lsr	r24
    3b88:	49 2f       	mov	r20, r25
    3b8a:	46 2b       	or	r20, r22
    3b8c:	58 2f       	mov	r21, r24
    3b8e:	5d 29       	or	r21, r13
    3b90:	b7 01       	movw	r22, r14
    3b92:	ca 01       	movw	r24, r20
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	ff 90       	pop	r15
    3b9a:	ef 90       	pop	r14
    3b9c:	df 90       	pop	r13
    3b9e:	08 95       	ret

00003ba0 <__unpack_f>:
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	db 01       	movw	r26, r22
    3ba4:	40 81       	ld	r20, Z
    3ba6:	51 81       	ldd	r21, Z+1	; 0x01
    3ba8:	22 81       	ldd	r18, Z+2	; 0x02
    3baa:	62 2f       	mov	r22, r18
    3bac:	6f 77       	andi	r22, 0x7F	; 127
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	22 1f       	adc	r18, r18
    3bb2:	22 27       	eor	r18, r18
    3bb4:	22 1f       	adc	r18, r18
    3bb6:	93 81       	ldd	r25, Z+3	; 0x03
    3bb8:	89 2f       	mov	r24, r25
    3bba:	88 0f       	add	r24, r24
    3bbc:	82 2b       	or	r24, r18
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	99 27       	eor	r25, r25
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	11 96       	adiw	r26, 0x01	; 1
    3bca:	9c 93       	st	X, r25
    3bcc:	11 97       	sbiw	r26, 0x01	; 1
    3bce:	21 15       	cp	r18, r1
    3bd0:	31 05       	cpc	r19, r1
    3bd2:	a9 f5       	brne	.+106    	; 0x3c3e <__unpack_f+0x9e>
    3bd4:	41 15       	cp	r20, r1
    3bd6:	51 05       	cpc	r21, r1
    3bd8:	61 05       	cpc	r22, r1
    3bda:	71 05       	cpc	r23, r1
    3bdc:	11 f4       	brne	.+4      	; 0x3be2 <__unpack_f+0x42>
    3bde:	82 e0       	ldi	r24, 0x02	; 2
    3be0:	37 c0       	rjmp	.+110    	; 0x3c50 <__unpack_f+0xb0>
    3be2:	82 e8       	ldi	r24, 0x82	; 130
    3be4:	9f ef       	ldi	r25, 0xFF	; 255
    3be6:	13 96       	adiw	r26, 0x03	; 3
    3be8:	9c 93       	st	X, r25
    3bea:	8e 93       	st	-X, r24
    3bec:	12 97       	sbiw	r26, 0x02	; 2
    3bee:	9a 01       	movw	r18, r20
    3bf0:	ab 01       	movw	r20, r22
    3bf2:	67 e0       	ldi	r22, 0x07	; 7
    3bf4:	22 0f       	add	r18, r18
    3bf6:	33 1f       	adc	r19, r19
    3bf8:	44 1f       	adc	r20, r20
    3bfa:	55 1f       	adc	r21, r21
    3bfc:	6a 95       	dec	r22
    3bfe:	d1 f7       	brne	.-12     	; 0x3bf4 <__unpack_f+0x54>
    3c00:	83 e0       	ldi	r24, 0x03	; 3
    3c02:	8c 93       	st	X, r24
    3c04:	0d c0       	rjmp	.+26     	; 0x3c20 <__unpack_f+0x80>
    3c06:	22 0f       	add	r18, r18
    3c08:	33 1f       	adc	r19, r19
    3c0a:	44 1f       	adc	r20, r20
    3c0c:	55 1f       	adc	r21, r21
    3c0e:	12 96       	adiw	r26, 0x02	; 2
    3c10:	8d 91       	ld	r24, X+
    3c12:	9c 91       	ld	r25, X
    3c14:	13 97       	sbiw	r26, 0x03	; 3
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	13 96       	adiw	r26, 0x03	; 3
    3c1a:	9c 93       	st	X, r25
    3c1c:	8e 93       	st	-X, r24
    3c1e:	12 97       	sbiw	r26, 0x02	; 2
    3c20:	20 30       	cpi	r18, 0x00	; 0
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	38 07       	cpc	r19, r24
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	48 07       	cpc	r20, r24
    3c2a:	80 e4       	ldi	r24, 0x40	; 64
    3c2c:	58 07       	cpc	r21, r24
    3c2e:	58 f3       	brcs	.-42     	; 0x3c06 <__unpack_f+0x66>
    3c30:	14 96       	adiw	r26, 0x04	; 4
    3c32:	2d 93       	st	X+, r18
    3c34:	3d 93       	st	X+, r19
    3c36:	4d 93       	st	X+, r20
    3c38:	5c 93       	st	X, r21
    3c3a:	17 97       	sbiw	r26, 0x07	; 7
    3c3c:	08 95       	ret
    3c3e:	2f 3f       	cpi	r18, 0xFF	; 255
    3c40:	31 05       	cpc	r19, r1
    3c42:	79 f4       	brne	.+30     	; 0x3c62 <__unpack_f+0xc2>
    3c44:	41 15       	cp	r20, r1
    3c46:	51 05       	cpc	r21, r1
    3c48:	61 05       	cpc	r22, r1
    3c4a:	71 05       	cpc	r23, r1
    3c4c:	19 f4       	brne	.+6      	; 0x3c54 <__unpack_f+0xb4>
    3c4e:	84 e0       	ldi	r24, 0x04	; 4
    3c50:	8c 93       	st	X, r24
    3c52:	08 95       	ret
    3c54:	64 ff       	sbrs	r22, 4
    3c56:	03 c0       	rjmp	.+6      	; 0x3c5e <__unpack_f+0xbe>
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	8c 93       	st	X, r24
    3c5c:	12 c0       	rjmp	.+36     	; 0x3c82 <__unpack_f+0xe2>
    3c5e:	1c 92       	st	X, r1
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <__unpack_f+0xe2>
    3c62:	2f 57       	subi	r18, 0x7F	; 127
    3c64:	30 40       	sbci	r19, 0x00	; 0
    3c66:	13 96       	adiw	r26, 0x03	; 3
    3c68:	3c 93       	st	X, r19
    3c6a:	2e 93       	st	-X, r18
    3c6c:	12 97       	sbiw	r26, 0x02	; 2
    3c6e:	83 e0       	ldi	r24, 0x03	; 3
    3c70:	8c 93       	st	X, r24
    3c72:	87 e0       	ldi	r24, 0x07	; 7
    3c74:	44 0f       	add	r20, r20
    3c76:	55 1f       	adc	r21, r21
    3c78:	66 1f       	adc	r22, r22
    3c7a:	77 1f       	adc	r23, r23
    3c7c:	8a 95       	dec	r24
    3c7e:	d1 f7       	brne	.-12     	; 0x3c74 <__unpack_f+0xd4>
    3c80:	70 64       	ori	r23, 0x40	; 64
    3c82:	14 96       	adiw	r26, 0x04	; 4
    3c84:	4d 93       	st	X+, r20
    3c86:	5d 93       	st	X+, r21
    3c88:	6d 93       	st	X+, r22
    3c8a:	7c 93       	st	X, r23
    3c8c:	17 97       	sbiw	r26, 0x07	; 7
    3c8e:	08 95       	ret

00003c90 <__fpcmp_parts_f>:
    3c90:	1f 93       	push	r17
    3c92:	dc 01       	movw	r26, r24
    3c94:	fb 01       	movw	r30, r22
    3c96:	9c 91       	ld	r25, X
    3c98:	92 30       	cpi	r25, 0x02	; 2
    3c9a:	08 f4       	brcc	.+2      	; 0x3c9e <__fpcmp_parts_f+0xe>
    3c9c:	47 c0       	rjmp	.+142    	; 0x3d2c <__fpcmp_parts_f+0x9c>
    3c9e:	80 81       	ld	r24, Z
    3ca0:	82 30       	cpi	r24, 0x02	; 2
    3ca2:	08 f4       	brcc	.+2      	; 0x3ca6 <__fpcmp_parts_f+0x16>
    3ca4:	43 c0       	rjmp	.+134    	; 0x3d2c <__fpcmp_parts_f+0x9c>
    3ca6:	94 30       	cpi	r25, 0x04	; 4
    3ca8:	51 f4       	brne	.+20     	; 0x3cbe <__fpcmp_parts_f+0x2e>
    3caa:	11 96       	adiw	r26, 0x01	; 1
    3cac:	1c 91       	ld	r17, X
    3cae:	84 30       	cpi	r24, 0x04	; 4
    3cb0:	99 f5       	brne	.+102    	; 0x3d18 <__fpcmp_parts_f+0x88>
    3cb2:	81 81       	ldd	r24, Z+1	; 0x01
    3cb4:	68 2f       	mov	r22, r24
    3cb6:	70 e0       	ldi	r23, 0x00	; 0
    3cb8:	61 1b       	sub	r22, r17
    3cba:	71 09       	sbc	r23, r1
    3cbc:	3f c0       	rjmp	.+126    	; 0x3d3c <__fpcmp_parts_f+0xac>
    3cbe:	84 30       	cpi	r24, 0x04	; 4
    3cc0:	21 f0       	breq	.+8      	; 0x3cca <__fpcmp_parts_f+0x3a>
    3cc2:	92 30       	cpi	r25, 0x02	; 2
    3cc4:	31 f4       	brne	.+12     	; 0x3cd2 <__fpcmp_parts_f+0x42>
    3cc6:	82 30       	cpi	r24, 0x02	; 2
    3cc8:	b9 f1       	breq	.+110    	; 0x3d38 <__fpcmp_parts_f+0xa8>
    3cca:	81 81       	ldd	r24, Z+1	; 0x01
    3ccc:	88 23       	and	r24, r24
    3cce:	89 f1       	breq	.+98     	; 0x3d32 <__fpcmp_parts_f+0xa2>
    3cd0:	2d c0       	rjmp	.+90     	; 0x3d2c <__fpcmp_parts_f+0x9c>
    3cd2:	11 96       	adiw	r26, 0x01	; 1
    3cd4:	1c 91       	ld	r17, X
    3cd6:	11 97       	sbiw	r26, 0x01	; 1
    3cd8:	82 30       	cpi	r24, 0x02	; 2
    3cda:	f1 f0       	breq	.+60     	; 0x3d18 <__fpcmp_parts_f+0x88>
    3cdc:	81 81       	ldd	r24, Z+1	; 0x01
    3cde:	18 17       	cp	r17, r24
    3ce0:	d9 f4       	brne	.+54     	; 0x3d18 <__fpcmp_parts_f+0x88>
    3ce2:	12 96       	adiw	r26, 0x02	; 2
    3ce4:	2d 91       	ld	r18, X+
    3ce6:	3c 91       	ld	r19, X
    3ce8:	13 97       	sbiw	r26, 0x03	; 3
    3cea:	82 81       	ldd	r24, Z+2	; 0x02
    3cec:	93 81       	ldd	r25, Z+3	; 0x03
    3cee:	82 17       	cp	r24, r18
    3cf0:	93 07       	cpc	r25, r19
    3cf2:	94 f0       	brlt	.+36     	; 0x3d18 <__fpcmp_parts_f+0x88>
    3cf4:	28 17       	cp	r18, r24
    3cf6:	39 07       	cpc	r19, r25
    3cf8:	bc f0       	brlt	.+46     	; 0x3d28 <__fpcmp_parts_f+0x98>
    3cfa:	14 96       	adiw	r26, 0x04	; 4
    3cfc:	8d 91       	ld	r24, X+
    3cfe:	9d 91       	ld	r25, X+
    3d00:	0d 90       	ld	r0, X+
    3d02:	bc 91       	ld	r27, X
    3d04:	a0 2d       	mov	r26, r0
    3d06:	24 81       	ldd	r18, Z+4	; 0x04
    3d08:	35 81       	ldd	r19, Z+5	; 0x05
    3d0a:	46 81       	ldd	r20, Z+6	; 0x06
    3d0c:	57 81       	ldd	r21, Z+7	; 0x07
    3d0e:	28 17       	cp	r18, r24
    3d10:	39 07       	cpc	r19, r25
    3d12:	4a 07       	cpc	r20, r26
    3d14:	5b 07       	cpc	r21, r27
    3d16:	18 f4       	brcc	.+6      	; 0x3d1e <__fpcmp_parts_f+0x8e>
    3d18:	11 23       	and	r17, r17
    3d1a:	41 f0       	breq	.+16     	; 0x3d2c <__fpcmp_parts_f+0x9c>
    3d1c:	0a c0       	rjmp	.+20     	; 0x3d32 <__fpcmp_parts_f+0xa2>
    3d1e:	82 17       	cp	r24, r18
    3d20:	93 07       	cpc	r25, r19
    3d22:	a4 07       	cpc	r26, r20
    3d24:	b5 07       	cpc	r27, r21
    3d26:	40 f4       	brcc	.+16     	; 0x3d38 <__fpcmp_parts_f+0xa8>
    3d28:	11 23       	and	r17, r17
    3d2a:	19 f0       	breq	.+6      	; 0x3d32 <__fpcmp_parts_f+0xa2>
    3d2c:	61 e0       	ldi	r22, 0x01	; 1
    3d2e:	70 e0       	ldi	r23, 0x00	; 0
    3d30:	05 c0       	rjmp	.+10     	; 0x3d3c <__fpcmp_parts_f+0xac>
    3d32:	6f ef       	ldi	r22, 0xFF	; 255
    3d34:	7f ef       	ldi	r23, 0xFF	; 255
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <__fpcmp_parts_f+0xac>
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	70 e0       	ldi	r23, 0x00	; 0
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	1f 91       	pop	r17
    3d40:	08 95       	ret

00003d42 <__mulsi3>:
    3d42:	62 9f       	mul	r22, r18
    3d44:	d0 01       	movw	r26, r0
    3d46:	73 9f       	mul	r23, r19
    3d48:	f0 01       	movw	r30, r0
    3d4a:	82 9f       	mul	r24, r18
    3d4c:	e0 0d       	add	r30, r0
    3d4e:	f1 1d       	adc	r31, r1
    3d50:	64 9f       	mul	r22, r20
    3d52:	e0 0d       	add	r30, r0
    3d54:	f1 1d       	adc	r31, r1
    3d56:	92 9f       	mul	r25, r18
    3d58:	f0 0d       	add	r31, r0
    3d5a:	83 9f       	mul	r24, r19
    3d5c:	f0 0d       	add	r31, r0
    3d5e:	74 9f       	mul	r23, r20
    3d60:	f0 0d       	add	r31, r0
    3d62:	65 9f       	mul	r22, r21
    3d64:	f0 0d       	add	r31, r0
    3d66:	99 27       	eor	r25, r25
    3d68:	72 9f       	mul	r23, r18
    3d6a:	b0 0d       	add	r27, r0
    3d6c:	e1 1d       	adc	r30, r1
    3d6e:	f9 1f       	adc	r31, r25
    3d70:	63 9f       	mul	r22, r19
    3d72:	b0 0d       	add	r27, r0
    3d74:	e1 1d       	adc	r30, r1
    3d76:	f9 1f       	adc	r31, r25
    3d78:	bd 01       	movw	r22, r26
    3d7a:	cf 01       	movw	r24, r30
    3d7c:	11 24       	eor	r1, r1
    3d7e:	08 95       	ret

00003d80 <__prologue_saves__>:
    3d80:	2f 92       	push	r2
    3d82:	3f 92       	push	r3
    3d84:	4f 92       	push	r4
    3d86:	5f 92       	push	r5
    3d88:	6f 92       	push	r6
    3d8a:	7f 92       	push	r7
    3d8c:	8f 92       	push	r8
    3d8e:	9f 92       	push	r9
    3d90:	af 92       	push	r10
    3d92:	bf 92       	push	r11
    3d94:	cf 92       	push	r12
    3d96:	df 92       	push	r13
    3d98:	ef 92       	push	r14
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	ca 1b       	sub	r28, r26
    3daa:	db 0b       	sbc	r29, r27
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	cd bf       	out	0x3d, r28	; 61
    3db6:	19 94       	eijmp

00003db8 <__epilogue_restores__>:
    3db8:	2a 88       	ldd	r2, Y+18	; 0x12
    3dba:	39 88       	ldd	r3, Y+17	; 0x11
    3dbc:	48 88       	ldd	r4, Y+16	; 0x10
    3dbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dca:	b9 84       	ldd	r11, Y+9	; 0x09
    3dcc:	c8 84       	ldd	r12, Y+8	; 0x08
    3dce:	df 80       	ldd	r13, Y+7	; 0x07
    3dd0:	ee 80       	ldd	r14, Y+6	; 0x06
    3dd2:	fd 80       	ldd	r15, Y+5	; 0x05
    3dd4:	0c 81       	ldd	r16, Y+4	; 0x04
    3dd6:	1b 81       	ldd	r17, Y+3	; 0x03
    3dd8:	aa 81       	ldd	r26, Y+2	; 0x02
    3dda:	b9 81       	ldd	r27, Y+1	; 0x01
    3ddc:	ce 0f       	add	r28, r30
    3dde:	d1 1d       	adc	r29, r1
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	ed 01       	movw	r28, r26
    3dec:	08 95       	ret

00003dee <_exit>:
    3dee:	f8 94       	cli

00003df0 <__stop_program>:
    3df0:	ff cf       	rjmp	.-2      	; 0x3df0 <__stop_program>
=======
    32b4:	a1 e2       	ldi	r26, 0x21	; 33
    32b6:	b1 e0       	ldi	r27, 0x01	; 1
    32b8:	e1 e2       	ldi	r30, 0x21	; 33
    32ba:	f1 e0       	ldi	r31, 0x01	; 1
    32bc:	80 81       	ld	r24, Z
    32be:	81 60       	ori	r24, 0x01	; 1
    32c0:	8c 93       	st	X, r24
		TIMSK_timer = (1 <<TIMSK_bit);
    32c2:	e3 e7       	ldi	r30, 0x73	; 115
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 83       	st	Z, r24
		echo_pin=1;
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	90 93 11 03 	sts	0x0311, r25
    32d2:	80 93 10 03 	sts	0x0310, r24
	}
}
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	ff 91       	pop	r31
    32dc:	ef 91       	pop	r30
    32de:	bf 91       	pop	r27
    32e0:	af 91       	pop	r26
    32e2:	9f 91       	pop	r25
    32e4:	8f 91       	pop	r24
    32e6:	7f 91       	pop	r23
    32e8:	6f 91       	pop	r22
    32ea:	5f 91       	pop	r21
    32ec:	4f 91       	pop	r20
    32ee:	3f 91       	pop	r19
    32f0:	2f 91       	pop	r18
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	0f 90       	pop	r0
    32fc:	00 92 5b 00 	sts	0x005B, r0
    3300:	0f 90       	pop	r0
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	0f 90       	pop	r0
    3306:	1f 90       	pop	r1
    3308:	18 95       	reti

0000330a <__vector_50>:

ISR(ISR_TIMER_OVF){
    330a:	1f 92       	push	r1
    330c:	0f 92       	push	r0
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	0f 92       	push	r0
    3312:	11 24       	eor	r1, r1
    3314:	8f 93       	push	r24
    3316:	9f 93       	push	r25
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    overflows++;
    3320:	80 91 0a 03 	lds	r24, 0x030A
    3324:	90 91 0b 03 	lds	r25, 0x030B
    3328:	01 96       	adiw	r24, 0x01	; 1
    332a:	90 93 0b 03 	sts	0x030B, r25
    332e:	80 93 0a 03 	sts	0x030A, r24
}
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	9f 91       	pop	r25
    3338:	8f 91       	pop	r24
    333a:	0f 90       	pop	r0
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	0f 90       	pop	r0
    3340:	1f 90       	pop	r1
    3342:	18 95       	reti

00003344 <__fixunssfsi>:
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	7b 01       	movw	r14, r22
    334e:	8c 01       	movw	r16, r24
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	5f e4       	ldi	r21, 0x4F	; 79
    3358:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__gesf2>
    335c:	88 23       	and	r24, r24
    335e:	8c f0       	brlt	.+34     	; 0x3382 <__fixunssfsi+0x3e>
    3360:	c8 01       	movw	r24, r16
    3362:	b7 01       	movw	r22, r14
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	5f e4       	ldi	r21, 0x4F	; 79
    336c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__subsf3>
    3370:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__fixsfsi>
    3374:	9b 01       	movw	r18, r22
    3376:	ac 01       	movw	r20, r24
    3378:	20 50       	subi	r18, 0x00	; 0
    337a:	30 40       	sbci	r19, 0x00	; 0
    337c:	40 40       	sbci	r20, 0x00	; 0
    337e:	50 48       	sbci	r21, 0x80	; 128
    3380:	06 c0       	rjmp	.+12     	; 0x338e <__fixunssfsi+0x4a>
    3382:	c8 01       	movw	r24, r16
    3384:	b7 01       	movw	r22, r14
    3386:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__fixsfsi>
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	b9 01       	movw	r22, r18
    3390:	ca 01       	movw	r24, r20
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	ff 90       	pop	r15
    3398:	ef 90       	pop	r14
    339a:	08 95       	ret

0000339c <_fpadd_parts>:
    339c:	a0 e0       	ldi	r26, 0x00	; 0
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e4 ed       	ldi	r30, 0xD4	; 212
    33a2:	f9 e1       	ldi	r31, 0x19	; 25
    33a4:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__>
    33a8:	dc 01       	movw	r26, r24
    33aa:	2b 01       	movw	r4, r22
    33ac:	fa 01       	movw	r30, r20
    33ae:	9c 91       	ld	r25, X
    33b0:	92 30       	cpi	r25, 0x02	; 2
    33b2:	08 f4       	brcc	.+2      	; 0x33b6 <_fpadd_parts+0x1a>
    33b4:	39 c1       	rjmp	.+626    	; 0x3628 <_fpadd_parts+0x28c>
    33b6:	eb 01       	movw	r28, r22
    33b8:	88 81       	ld	r24, Y
    33ba:	82 30       	cpi	r24, 0x02	; 2
    33bc:	08 f4       	brcc	.+2      	; 0x33c0 <_fpadd_parts+0x24>
    33be:	33 c1       	rjmp	.+614    	; 0x3626 <_fpadd_parts+0x28a>
    33c0:	94 30       	cpi	r25, 0x04	; 4
    33c2:	69 f4       	brne	.+26     	; 0x33de <_fpadd_parts+0x42>
    33c4:	84 30       	cpi	r24, 0x04	; 4
    33c6:	09 f0       	breq	.+2      	; 0x33ca <_fpadd_parts+0x2e>
    33c8:	2f c1       	rjmp	.+606    	; 0x3628 <_fpadd_parts+0x28c>
    33ca:	11 96       	adiw	r26, 0x01	; 1
    33cc:	9c 91       	ld	r25, X
    33ce:	11 97       	sbiw	r26, 0x01	; 1
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	98 17       	cp	r25, r24
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <_fpadd_parts+0x3c>
    33d6:	28 c1       	rjmp	.+592    	; 0x3628 <_fpadd_parts+0x28c>
    33d8:	a0 e0       	ldi	r26, 0x00	; 0
    33da:	b2 e0       	ldi	r27, 0x02	; 2
    33dc:	25 c1       	rjmp	.+586    	; 0x3628 <_fpadd_parts+0x28c>
    33de:	84 30       	cpi	r24, 0x04	; 4
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <_fpadd_parts+0x48>
    33e2:	21 c1       	rjmp	.+578    	; 0x3626 <_fpadd_parts+0x28a>
    33e4:	82 30       	cpi	r24, 0x02	; 2
    33e6:	a9 f4       	brne	.+42     	; 0x3412 <_fpadd_parts+0x76>
    33e8:	92 30       	cpi	r25, 0x02	; 2
    33ea:	09 f0       	breq	.+2      	; 0x33ee <_fpadd_parts+0x52>
    33ec:	1d c1       	rjmp	.+570    	; 0x3628 <_fpadd_parts+0x28c>
    33ee:	9a 01       	movw	r18, r20
    33f0:	ad 01       	movw	r20, r26
    33f2:	88 e0       	ldi	r24, 0x08	; 8
    33f4:	ea 01       	movw	r28, r20
    33f6:	09 90       	ld	r0, Y+
    33f8:	ae 01       	movw	r20, r28
    33fa:	e9 01       	movw	r28, r18
    33fc:	09 92       	st	Y+, r0
    33fe:	9e 01       	movw	r18, r28
    3400:	81 50       	subi	r24, 0x01	; 1
    3402:	c1 f7       	brne	.-16     	; 0x33f4 <_fpadd_parts+0x58>
    3404:	e2 01       	movw	r28, r4
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	11 96       	adiw	r26, 0x01	; 1
    340a:	9c 91       	ld	r25, X
    340c:	89 23       	and	r24, r25
    340e:	81 83       	std	Z+1, r24	; 0x01
    3410:	08 c1       	rjmp	.+528    	; 0x3622 <_fpadd_parts+0x286>
    3412:	92 30       	cpi	r25, 0x02	; 2
    3414:	09 f4       	brne	.+2      	; 0x3418 <_fpadd_parts+0x7c>
    3416:	07 c1       	rjmp	.+526    	; 0x3626 <_fpadd_parts+0x28a>
    3418:	12 96       	adiw	r26, 0x02	; 2
    341a:	2d 90       	ld	r2, X+
    341c:	3c 90       	ld	r3, X
    341e:	13 97       	sbiw	r26, 0x03	; 3
    3420:	eb 01       	movw	r28, r22
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	14 96       	adiw	r26, 0x04	; 4
    3428:	ad 90       	ld	r10, X+
    342a:	bd 90       	ld	r11, X+
    342c:	cd 90       	ld	r12, X+
    342e:	dc 90       	ld	r13, X
    3430:	17 97       	sbiw	r26, 0x07	; 7
    3432:	ec 80       	ldd	r14, Y+4	; 0x04
    3434:	fd 80       	ldd	r15, Y+5	; 0x05
    3436:	0e 81       	ldd	r16, Y+6	; 0x06
    3438:	1f 81       	ldd	r17, Y+7	; 0x07
    343a:	91 01       	movw	r18, r2
    343c:	28 1b       	sub	r18, r24
    343e:	39 0b       	sbc	r19, r25
    3440:	b9 01       	movw	r22, r18
    3442:	37 ff       	sbrs	r19, 7
    3444:	04 c0       	rjmp	.+8      	; 0x344e <_fpadd_parts+0xb2>
    3446:	66 27       	eor	r22, r22
    3448:	77 27       	eor	r23, r23
    344a:	62 1b       	sub	r22, r18
    344c:	73 0b       	sbc	r23, r19
    344e:	60 32       	cpi	r22, 0x20	; 32
    3450:	71 05       	cpc	r23, r1
    3452:	0c f0       	brlt	.+2      	; 0x3456 <_fpadd_parts+0xba>
    3454:	61 c0       	rjmp	.+194    	; 0x3518 <_fpadd_parts+0x17c>
    3456:	12 16       	cp	r1, r18
    3458:	13 06       	cpc	r1, r19
    345a:	6c f5       	brge	.+90     	; 0x34b6 <_fpadd_parts+0x11a>
    345c:	37 01       	movw	r6, r14
    345e:	48 01       	movw	r8, r16
    3460:	06 2e       	mov	r0, r22
    3462:	04 c0       	rjmp	.+8      	; 0x346c <_fpadd_parts+0xd0>
    3464:	96 94       	lsr	r9
    3466:	87 94       	ror	r8
    3468:	77 94       	ror	r7
    346a:	67 94       	ror	r6
    346c:	0a 94       	dec	r0
    346e:	d2 f7       	brpl	.-12     	; 0x3464 <_fpadd_parts+0xc8>
    3470:	21 e0       	ldi	r18, 0x01	; 1
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	04 c0       	rjmp	.+8      	; 0x3482 <_fpadd_parts+0xe6>
    347a:	22 0f       	add	r18, r18
    347c:	33 1f       	adc	r19, r19
    347e:	44 1f       	adc	r20, r20
    3480:	55 1f       	adc	r21, r21
    3482:	6a 95       	dec	r22
    3484:	d2 f7       	brpl	.-12     	; 0x347a <_fpadd_parts+0xde>
    3486:	21 50       	subi	r18, 0x01	; 1
    3488:	30 40       	sbci	r19, 0x00	; 0
    348a:	40 40       	sbci	r20, 0x00	; 0
    348c:	50 40       	sbci	r21, 0x00	; 0
    348e:	2e 21       	and	r18, r14
    3490:	3f 21       	and	r19, r15
    3492:	40 23       	and	r20, r16
    3494:	51 23       	and	r21, r17
    3496:	21 15       	cp	r18, r1
    3498:	31 05       	cpc	r19, r1
    349a:	41 05       	cpc	r20, r1
    349c:	51 05       	cpc	r21, r1
    349e:	21 f0       	breq	.+8      	; 0x34a8 <_fpadd_parts+0x10c>
    34a0:	21 e0       	ldi	r18, 0x01	; 1
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	79 01       	movw	r14, r18
    34aa:	8a 01       	movw	r16, r20
    34ac:	e6 28       	or	r14, r6
    34ae:	f7 28       	or	r15, r7
    34b0:	08 29       	or	r16, r8
    34b2:	19 29       	or	r17, r9
    34b4:	3c c0       	rjmp	.+120    	; 0x352e <_fpadd_parts+0x192>
    34b6:	23 2b       	or	r18, r19
    34b8:	d1 f1       	breq	.+116    	; 0x352e <_fpadd_parts+0x192>
    34ba:	26 0e       	add	r2, r22
    34bc:	37 1e       	adc	r3, r23
    34be:	35 01       	movw	r6, r10
    34c0:	46 01       	movw	r8, r12
    34c2:	06 2e       	mov	r0, r22
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <_fpadd_parts+0x132>
    34c6:	96 94       	lsr	r9
    34c8:	87 94       	ror	r8
    34ca:	77 94       	ror	r7
    34cc:	67 94       	ror	r6
    34ce:	0a 94       	dec	r0
    34d0:	d2 f7       	brpl	.-12     	; 0x34c6 <_fpadd_parts+0x12a>
    34d2:	21 e0       	ldi	r18, 0x01	; 1
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    34da:	04 c0       	rjmp	.+8      	; 0x34e4 <_fpadd_parts+0x148>
    34dc:	22 0f       	add	r18, r18
    34de:	33 1f       	adc	r19, r19
    34e0:	44 1f       	adc	r20, r20
    34e2:	55 1f       	adc	r21, r21
    34e4:	6a 95       	dec	r22
    34e6:	d2 f7       	brpl	.-12     	; 0x34dc <_fpadd_parts+0x140>
    34e8:	21 50       	subi	r18, 0x01	; 1
    34ea:	30 40       	sbci	r19, 0x00	; 0
    34ec:	40 40       	sbci	r20, 0x00	; 0
    34ee:	50 40       	sbci	r21, 0x00	; 0
    34f0:	2a 21       	and	r18, r10
    34f2:	3b 21       	and	r19, r11
    34f4:	4c 21       	and	r20, r12
    34f6:	5d 21       	and	r21, r13
    34f8:	21 15       	cp	r18, r1
    34fa:	31 05       	cpc	r19, r1
    34fc:	41 05       	cpc	r20, r1
    34fe:	51 05       	cpc	r21, r1
    3500:	21 f0       	breq	.+8      	; 0x350a <_fpadd_parts+0x16e>
    3502:	21 e0       	ldi	r18, 0x01	; 1
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	59 01       	movw	r10, r18
    350c:	6a 01       	movw	r12, r20
    350e:	a6 28       	or	r10, r6
    3510:	b7 28       	or	r11, r7
    3512:	c8 28       	or	r12, r8
    3514:	d9 28       	or	r13, r9
    3516:	0b c0       	rjmp	.+22     	; 0x352e <_fpadd_parts+0x192>
    3518:	82 15       	cp	r24, r2
    351a:	93 05       	cpc	r25, r3
    351c:	2c f0       	brlt	.+10     	; 0x3528 <_fpadd_parts+0x18c>
    351e:	1c 01       	movw	r2, r24
    3520:	aa 24       	eor	r10, r10
    3522:	bb 24       	eor	r11, r11
    3524:	65 01       	movw	r12, r10
    3526:	03 c0       	rjmp	.+6      	; 0x352e <_fpadd_parts+0x192>
    3528:	ee 24       	eor	r14, r14
    352a:	ff 24       	eor	r15, r15
    352c:	87 01       	movw	r16, r14
    352e:	11 96       	adiw	r26, 0x01	; 1
    3530:	9c 91       	ld	r25, X
    3532:	d2 01       	movw	r26, r4
    3534:	11 96       	adiw	r26, 0x01	; 1
    3536:	8c 91       	ld	r24, X
    3538:	98 17       	cp	r25, r24
    353a:	09 f4       	brne	.+2      	; 0x353e <_fpadd_parts+0x1a2>
    353c:	45 c0       	rjmp	.+138    	; 0x35c8 <_fpadd_parts+0x22c>
    353e:	99 23       	and	r25, r25
    3540:	39 f0       	breq	.+14     	; 0x3550 <_fpadd_parts+0x1b4>
    3542:	a8 01       	movw	r20, r16
    3544:	97 01       	movw	r18, r14
    3546:	2a 19       	sub	r18, r10
    3548:	3b 09       	sbc	r19, r11
    354a:	4c 09       	sbc	r20, r12
    354c:	5d 09       	sbc	r21, r13
    354e:	06 c0       	rjmp	.+12     	; 0x355c <_fpadd_parts+0x1c0>
    3550:	a6 01       	movw	r20, r12
    3552:	95 01       	movw	r18, r10
    3554:	2e 19       	sub	r18, r14
    3556:	3f 09       	sbc	r19, r15
    3558:	40 0b       	sbc	r20, r16
    355a:	51 0b       	sbc	r21, r17
    355c:	57 fd       	sbrc	r21, 7
    355e:	08 c0       	rjmp	.+16     	; 0x3570 <_fpadd_parts+0x1d4>
    3560:	11 82       	std	Z+1, r1	; 0x01
    3562:	33 82       	std	Z+3, r3	; 0x03
    3564:	22 82       	std	Z+2, r2	; 0x02
    3566:	24 83       	std	Z+4, r18	; 0x04
    3568:	35 83       	std	Z+5, r19	; 0x05
    356a:	46 83       	std	Z+6, r20	; 0x06
    356c:	57 83       	std	Z+7, r21	; 0x07
    356e:	1d c0       	rjmp	.+58     	; 0x35aa <_fpadd_parts+0x20e>
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	81 83       	std	Z+1, r24	; 0x01
    3574:	33 82       	std	Z+3, r3	; 0x03
    3576:	22 82       	std	Z+2, r2	; 0x02
    3578:	88 27       	eor	r24, r24
    357a:	99 27       	eor	r25, r25
    357c:	dc 01       	movw	r26, r24
    357e:	82 1b       	sub	r24, r18
    3580:	93 0b       	sbc	r25, r19
    3582:	a4 0b       	sbc	r26, r20
    3584:	b5 0b       	sbc	r27, r21
    3586:	84 83       	std	Z+4, r24	; 0x04
    3588:	95 83       	std	Z+5, r25	; 0x05
    358a:	a6 83       	std	Z+6, r26	; 0x06
    358c:	b7 83       	std	Z+7, r27	; 0x07
    358e:	0d c0       	rjmp	.+26     	; 0x35aa <_fpadd_parts+0x20e>
    3590:	22 0f       	add	r18, r18
    3592:	33 1f       	adc	r19, r19
    3594:	44 1f       	adc	r20, r20
    3596:	55 1f       	adc	r21, r21
    3598:	24 83       	std	Z+4, r18	; 0x04
    359a:	35 83       	std	Z+5, r19	; 0x05
    359c:	46 83       	std	Z+6, r20	; 0x06
    359e:	57 83       	std	Z+7, r21	; 0x07
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	93 83       	std	Z+3, r25	; 0x03
    35a8:	82 83       	std	Z+2, r24	; 0x02
    35aa:	24 81       	ldd	r18, Z+4	; 0x04
    35ac:	35 81       	ldd	r19, Z+5	; 0x05
    35ae:	46 81       	ldd	r20, Z+6	; 0x06
    35b0:	57 81       	ldd	r21, Z+7	; 0x07
    35b2:	da 01       	movw	r26, r20
    35b4:	c9 01       	movw	r24, r18
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	a1 09       	sbc	r26, r1
    35ba:	b1 09       	sbc	r27, r1
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	9f 4f       	sbci	r25, 0xFF	; 255
    35c0:	af 4f       	sbci	r26, 0xFF	; 255
    35c2:	bf 43       	sbci	r27, 0x3F	; 63
    35c4:	28 f3       	brcs	.-54     	; 0x3590 <_fpadd_parts+0x1f4>
    35c6:	0b c0       	rjmp	.+22     	; 0x35de <_fpadd_parts+0x242>
    35c8:	91 83       	std	Z+1, r25	; 0x01
    35ca:	33 82       	std	Z+3, r3	; 0x03
    35cc:	22 82       	std	Z+2, r2	; 0x02
    35ce:	ea 0c       	add	r14, r10
    35d0:	fb 1c       	adc	r15, r11
    35d2:	0c 1d       	adc	r16, r12
    35d4:	1d 1d       	adc	r17, r13
    35d6:	e4 82       	std	Z+4, r14	; 0x04
    35d8:	f5 82       	std	Z+5, r15	; 0x05
    35da:	06 83       	std	Z+6, r16	; 0x06
    35dc:	17 83       	std	Z+7, r17	; 0x07
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	80 83       	st	Z, r24
    35e2:	24 81       	ldd	r18, Z+4	; 0x04
    35e4:	35 81       	ldd	r19, Z+5	; 0x05
    35e6:	46 81       	ldd	r20, Z+6	; 0x06
    35e8:	57 81       	ldd	r21, Z+7	; 0x07
    35ea:	57 ff       	sbrs	r21, 7
    35ec:	1a c0       	rjmp	.+52     	; 0x3622 <_fpadd_parts+0x286>
    35ee:	c9 01       	movw	r24, r18
    35f0:	aa 27       	eor	r26, r26
    35f2:	97 fd       	sbrc	r25, 7
    35f4:	a0 95       	com	r26
    35f6:	ba 2f       	mov	r27, r26
    35f8:	81 70       	andi	r24, 0x01	; 1
    35fa:	90 70       	andi	r25, 0x00	; 0
    35fc:	a0 70       	andi	r26, 0x00	; 0
    35fe:	b0 70       	andi	r27, 0x00	; 0
    3600:	56 95       	lsr	r21
    3602:	47 95       	ror	r20
    3604:	37 95       	ror	r19
    3606:	27 95       	ror	r18
    3608:	82 2b       	or	r24, r18
    360a:	93 2b       	or	r25, r19
    360c:	a4 2b       	or	r26, r20
    360e:	b5 2b       	or	r27, r21
    3610:	84 83       	std	Z+4, r24	; 0x04
    3612:	95 83       	std	Z+5, r25	; 0x05
    3614:	a6 83       	std	Z+6, r26	; 0x06
    3616:	b7 83       	std	Z+7, r27	; 0x07
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	01 96       	adiw	r24, 0x01	; 1
    361e:	93 83       	std	Z+3, r25	; 0x03
    3620:	82 83       	std	Z+2, r24	; 0x02
    3622:	df 01       	movw	r26, r30
    3624:	01 c0       	rjmp	.+2      	; 0x3628 <_fpadd_parts+0x28c>
    3626:	d2 01       	movw	r26, r4
    3628:	cd 01       	movw	r24, r26
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	e2 e1       	ldi	r30, 0x12	; 18
    3630:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__>

00003634 <__subsf3>:
    3634:	a0 e2       	ldi	r26, 0x20	; 32
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	e0 e2       	ldi	r30, 0x20	; 32
    363a:	fb e1       	ldi	r31, 0x1B	; 27
    363c:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
    3640:	69 83       	std	Y+1, r22	; 0x01
    3642:	7a 83       	std	Y+2, r23	; 0x02
    3644:	8b 83       	std	Y+3, r24	; 0x03
    3646:	9c 83       	std	Y+4, r25	; 0x04
    3648:	2d 83       	std	Y+5, r18	; 0x05
    364a:	3e 83       	std	Y+6, r19	; 0x06
    364c:	4f 83       	std	Y+7, r20	; 0x07
    364e:	58 87       	std	Y+8, r21	; 0x08
    3650:	e9 e0       	ldi	r30, 0x09	; 9
    3652:	ee 2e       	mov	r14, r30
    3654:	f1 2c       	mov	r15, r1
    3656:	ec 0e       	add	r14, r28
    3658:	fd 1e       	adc	r15, r29
    365a:	ce 01       	movw	r24, r28
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	b7 01       	movw	r22, r14
    3660:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3664:	8e 01       	movw	r16, r28
    3666:	0f 5e       	subi	r16, 0xEF	; 239
    3668:	1f 4f       	sbci	r17, 0xFF	; 255
    366a:	ce 01       	movw	r24, r28
    366c:	05 96       	adiw	r24, 0x05	; 5
    366e:	b8 01       	movw	r22, r16
    3670:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3674:	8a 89       	ldd	r24, Y+18	; 0x12
    3676:	91 e0       	ldi	r25, 0x01	; 1
    3678:	89 27       	eor	r24, r25
    367a:	8a 8b       	std	Y+18, r24	; 0x12
    367c:	c7 01       	movw	r24, r14
    367e:	b8 01       	movw	r22, r16
    3680:	ae 01       	movw	r20, r28
    3682:	47 5e       	subi	r20, 0xE7	; 231
    3684:	5f 4f       	sbci	r21, 0xFF	; 255
    3686:	0e 94 ce 19 	call	0x339c	; 0x339c <_fpadd_parts>
    368a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__pack_f>
    368e:	a0 96       	adiw	r28, 0x20	; 32
    3690:	e6 e0       	ldi	r30, 0x06	; 6
    3692:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

00003696 <__addsf3>:
    3696:	a0 e2       	ldi	r26, 0x20	; 32
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e1 e5       	ldi	r30, 0x51	; 81
    369c:	fb e1       	ldi	r31, 0x1B	; 27
    369e:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
    36a2:	69 83       	std	Y+1, r22	; 0x01
    36a4:	7a 83       	std	Y+2, r23	; 0x02
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	9c 83       	std	Y+4, r25	; 0x04
    36aa:	2d 83       	std	Y+5, r18	; 0x05
    36ac:	3e 83       	std	Y+6, r19	; 0x06
    36ae:	4f 83       	std	Y+7, r20	; 0x07
    36b0:	58 87       	std	Y+8, r21	; 0x08
    36b2:	f9 e0       	ldi	r31, 0x09	; 9
    36b4:	ef 2e       	mov	r14, r31
    36b6:	f1 2c       	mov	r15, r1
    36b8:	ec 0e       	add	r14, r28
    36ba:	fd 1e       	adc	r15, r29
    36bc:	ce 01       	movw	r24, r28
    36be:	01 96       	adiw	r24, 0x01	; 1
    36c0:	b7 01       	movw	r22, r14
    36c2:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    36c6:	8e 01       	movw	r16, r28
    36c8:	0f 5e       	subi	r16, 0xEF	; 239
    36ca:	1f 4f       	sbci	r17, 0xFF	; 255
    36cc:	ce 01       	movw	r24, r28
    36ce:	05 96       	adiw	r24, 0x05	; 5
    36d0:	b8 01       	movw	r22, r16
    36d2:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    36d6:	c7 01       	movw	r24, r14
    36d8:	b8 01       	movw	r22, r16
    36da:	ae 01       	movw	r20, r28
    36dc:	47 5e       	subi	r20, 0xE7	; 231
    36de:	5f 4f       	sbci	r21, 0xFF	; 255
    36e0:	0e 94 ce 19 	call	0x339c	; 0x339c <_fpadd_parts>
    36e4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__pack_f>
    36e8:	a0 96       	adiw	r28, 0x20	; 32
    36ea:	e6 e0       	ldi	r30, 0x06	; 6
    36ec:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

000036f0 <__mulsf3>:
    36f0:	a0 e2       	ldi	r26, 0x20	; 32
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	ee e7       	ldi	r30, 0x7E	; 126
    36f6:	fb e1       	ldi	r31, 0x1B	; 27
    36f8:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__>
    36fc:	69 83       	std	Y+1, r22	; 0x01
    36fe:	7a 83       	std	Y+2, r23	; 0x02
    3700:	8b 83       	std	Y+3, r24	; 0x03
    3702:	9c 83       	std	Y+4, r25	; 0x04
    3704:	2d 83       	std	Y+5, r18	; 0x05
    3706:	3e 83       	std	Y+6, r19	; 0x06
    3708:	4f 83       	std	Y+7, r20	; 0x07
    370a:	58 87       	std	Y+8, r21	; 0x08
    370c:	ce 01       	movw	r24, r28
    370e:	01 96       	adiw	r24, 0x01	; 1
    3710:	be 01       	movw	r22, r28
    3712:	67 5f       	subi	r22, 0xF7	; 247
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    371a:	ce 01       	movw	r24, r28
    371c:	05 96       	adiw	r24, 0x05	; 5
    371e:	be 01       	movw	r22, r28
    3720:	6f 5e       	subi	r22, 0xEF	; 239
    3722:	7f 4f       	sbci	r23, 0xFF	; 255
    3724:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3728:	99 85       	ldd	r25, Y+9	; 0x09
    372a:	92 30       	cpi	r25, 0x02	; 2
    372c:	88 f0       	brcs	.+34     	; 0x3750 <__mulsf3+0x60>
    372e:	89 89       	ldd	r24, Y+17	; 0x11
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	c8 f0       	brcs	.+50     	; 0x3766 <__mulsf3+0x76>
    3734:	94 30       	cpi	r25, 0x04	; 4
    3736:	19 f4       	brne	.+6      	; 0x373e <__mulsf3+0x4e>
    3738:	82 30       	cpi	r24, 0x02	; 2
    373a:	51 f4       	brne	.+20     	; 0x3750 <__mulsf3+0x60>
    373c:	04 c0       	rjmp	.+8      	; 0x3746 <__mulsf3+0x56>
    373e:	84 30       	cpi	r24, 0x04	; 4
    3740:	29 f4       	brne	.+10     	; 0x374c <__mulsf3+0x5c>
    3742:	92 30       	cpi	r25, 0x02	; 2
    3744:	81 f4       	brne	.+32     	; 0x3766 <__mulsf3+0x76>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	92 e0       	ldi	r25, 0x02	; 2
    374a:	c6 c0       	rjmp	.+396    	; 0x38d8 <__mulsf3+0x1e8>
    374c:	92 30       	cpi	r25, 0x02	; 2
    374e:	49 f4       	brne	.+18     	; 0x3762 <__mulsf3+0x72>
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	8a 89       	ldd	r24, Y+18	; 0x12
    3756:	98 13       	cpse	r25, r24
    3758:	21 e0       	ldi	r18, 0x01	; 1
    375a:	2a 87       	std	Y+10, r18	; 0x0a
    375c:	ce 01       	movw	r24, r28
    375e:	09 96       	adiw	r24, 0x09	; 9
    3760:	bb c0       	rjmp	.+374    	; 0x38d8 <__mulsf3+0x1e8>
    3762:	82 30       	cpi	r24, 0x02	; 2
    3764:	49 f4       	brne	.+18     	; 0x3778 <__mulsf3+0x88>
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	9a 85       	ldd	r25, Y+10	; 0x0a
    376a:	8a 89       	ldd	r24, Y+18	; 0x12
    376c:	98 13       	cpse	r25, r24
    376e:	21 e0       	ldi	r18, 0x01	; 1
    3770:	2a 8b       	std	Y+18, r18	; 0x12
    3772:	ce 01       	movw	r24, r28
    3774:	41 96       	adiw	r24, 0x11	; 17
    3776:	b0 c0       	rjmp	.+352    	; 0x38d8 <__mulsf3+0x1e8>
    3778:	2d 84       	ldd	r2, Y+13	; 0x0d
    377a:	3e 84       	ldd	r3, Y+14	; 0x0e
    377c:	4f 84       	ldd	r4, Y+15	; 0x0f
    377e:	58 88       	ldd	r5, Y+16	; 0x10
    3780:	6d 88       	ldd	r6, Y+21	; 0x15
    3782:	7e 88       	ldd	r7, Y+22	; 0x16
    3784:	8f 88       	ldd	r8, Y+23	; 0x17
    3786:	98 8c       	ldd	r9, Y+24	; 0x18
    3788:	ee 24       	eor	r14, r14
    378a:	ff 24       	eor	r15, r15
    378c:	87 01       	movw	r16, r14
    378e:	aa 24       	eor	r10, r10
    3790:	bb 24       	eor	r11, r11
    3792:	65 01       	movw	r12, r10
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	e0 e0       	ldi	r30, 0x00	; 0
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	c1 01       	movw	r24, r2
    37a2:	81 70       	andi	r24, 0x01	; 1
    37a4:	90 70       	andi	r25, 0x00	; 0
    37a6:	89 2b       	or	r24, r25
    37a8:	e9 f0       	breq	.+58     	; 0x37e4 <__mulsf3+0xf4>
    37aa:	e6 0c       	add	r14, r6
    37ac:	f7 1c       	adc	r15, r7
    37ae:	08 1d       	adc	r16, r8
    37b0:	19 1d       	adc	r17, r9
    37b2:	9a 01       	movw	r18, r20
    37b4:	ab 01       	movw	r20, r22
    37b6:	2a 0d       	add	r18, r10
    37b8:	3b 1d       	adc	r19, r11
    37ba:	4c 1d       	adc	r20, r12
    37bc:	5d 1d       	adc	r21, r13
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	a0 e0       	ldi	r26, 0x00	; 0
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	e6 14       	cp	r14, r6
    37c8:	f7 04       	cpc	r15, r7
    37ca:	08 05       	cpc	r16, r8
    37cc:	19 05       	cpc	r17, r9
    37ce:	20 f4       	brcc	.+8      	; 0x37d8 <__mulsf3+0xe8>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	a0 e0       	ldi	r26, 0x00	; 0
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	ba 01       	movw	r22, r20
    37da:	a9 01       	movw	r20, r18
    37dc:	48 0f       	add	r20, r24
    37de:	59 1f       	adc	r21, r25
    37e0:	6a 1f       	adc	r22, r26
    37e2:	7b 1f       	adc	r23, r27
    37e4:	aa 0c       	add	r10, r10
    37e6:	bb 1c       	adc	r11, r11
    37e8:	cc 1c       	adc	r12, r12
    37ea:	dd 1c       	adc	r13, r13
    37ec:	97 fe       	sbrs	r9, 7
    37ee:	08 c0       	rjmp	.+16     	; 0x3800 <__mulsf3+0x110>
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	a0 e0       	ldi	r26, 0x00	; 0
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	a8 2a       	or	r10, r24
    37fa:	b9 2a       	or	r11, r25
    37fc:	ca 2a       	or	r12, r26
    37fe:	db 2a       	or	r13, r27
    3800:	31 96       	adiw	r30, 0x01	; 1
    3802:	e0 32       	cpi	r30, 0x20	; 32
    3804:	f1 05       	cpc	r31, r1
    3806:	49 f0       	breq	.+18     	; 0x381a <__mulsf3+0x12a>
    3808:	66 0c       	add	r6, r6
    380a:	77 1c       	adc	r7, r7
    380c:	88 1c       	adc	r8, r8
    380e:	99 1c       	adc	r9, r9
    3810:	56 94       	lsr	r5
    3812:	47 94       	ror	r4
    3814:	37 94       	ror	r3
    3816:	27 94       	ror	r2
    3818:	c3 cf       	rjmp	.-122    	; 0x37a0 <__mulsf3+0xb0>
    381a:	fa 85       	ldd	r31, Y+10	; 0x0a
    381c:	ea 89       	ldd	r30, Y+18	; 0x12
    381e:	2b 89       	ldd	r18, Y+19	; 0x13
    3820:	3c 89       	ldd	r19, Y+20	; 0x14
    3822:	8b 85       	ldd	r24, Y+11	; 0x0b
    3824:	9c 85       	ldd	r25, Y+12	; 0x0c
    3826:	28 0f       	add	r18, r24
    3828:	39 1f       	adc	r19, r25
    382a:	2e 5f       	subi	r18, 0xFE	; 254
    382c:	3f 4f       	sbci	r19, 0xFF	; 255
    382e:	17 c0       	rjmp	.+46     	; 0x385e <__mulsf3+0x16e>
    3830:	ca 01       	movw	r24, r20
    3832:	81 70       	andi	r24, 0x01	; 1
    3834:	90 70       	andi	r25, 0x00	; 0
    3836:	89 2b       	or	r24, r25
    3838:	61 f0       	breq	.+24     	; 0x3852 <__mulsf3+0x162>
    383a:	16 95       	lsr	r17
    383c:	07 95       	ror	r16
    383e:	f7 94       	ror	r15
    3840:	e7 94       	ror	r14
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	a0 e0       	ldi	r26, 0x00	; 0
    3848:	b0 e8       	ldi	r27, 0x80	; 128
    384a:	e8 2a       	or	r14, r24
    384c:	f9 2a       	or	r15, r25
    384e:	0a 2b       	or	r16, r26
    3850:	1b 2b       	or	r17, r27
    3852:	76 95       	lsr	r23
    3854:	67 95       	ror	r22
    3856:	57 95       	ror	r21
    3858:	47 95       	ror	r20
    385a:	2f 5f       	subi	r18, 0xFF	; 255
    385c:	3f 4f       	sbci	r19, 0xFF	; 255
    385e:	77 fd       	sbrc	r23, 7
    3860:	e7 cf       	rjmp	.-50     	; 0x3830 <__mulsf3+0x140>
    3862:	0c c0       	rjmp	.+24     	; 0x387c <__mulsf3+0x18c>
    3864:	44 0f       	add	r20, r20
    3866:	55 1f       	adc	r21, r21
    3868:	66 1f       	adc	r22, r22
    386a:	77 1f       	adc	r23, r23
    386c:	17 fd       	sbrc	r17, 7
    386e:	41 60       	ori	r20, 0x01	; 1
    3870:	ee 0c       	add	r14, r14
    3872:	ff 1c       	adc	r15, r15
    3874:	00 1f       	adc	r16, r16
    3876:	11 1f       	adc	r17, r17
    3878:	21 50       	subi	r18, 0x01	; 1
    387a:	30 40       	sbci	r19, 0x00	; 0
    387c:	40 30       	cpi	r20, 0x00	; 0
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	59 07       	cpc	r21, r25
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	69 07       	cpc	r22, r25
    3886:	90 e4       	ldi	r25, 0x40	; 64
    3888:	79 07       	cpc	r23, r25
    388a:	60 f3       	brcs	.-40     	; 0x3864 <__mulsf3+0x174>
    388c:	2b 8f       	std	Y+27, r18	; 0x1b
    388e:	3c 8f       	std	Y+28, r19	; 0x1c
    3890:	db 01       	movw	r26, r22
    3892:	ca 01       	movw	r24, r20
    3894:	8f 77       	andi	r24, 0x7F	; 127
    3896:	90 70       	andi	r25, 0x00	; 0
    3898:	a0 70       	andi	r26, 0x00	; 0
    389a:	b0 70       	andi	r27, 0x00	; 0
    389c:	80 34       	cpi	r24, 0x40	; 64
    389e:	91 05       	cpc	r25, r1
    38a0:	a1 05       	cpc	r26, r1
    38a2:	b1 05       	cpc	r27, r1
    38a4:	61 f4       	brne	.+24     	; 0x38be <__mulsf3+0x1ce>
    38a6:	47 fd       	sbrc	r20, 7
    38a8:	0a c0       	rjmp	.+20     	; 0x38be <__mulsf3+0x1ce>
    38aa:	e1 14       	cp	r14, r1
    38ac:	f1 04       	cpc	r15, r1
    38ae:	01 05       	cpc	r16, r1
    38b0:	11 05       	cpc	r17, r1
    38b2:	29 f0       	breq	.+10     	; 0x38be <__mulsf3+0x1ce>
    38b4:	40 5c       	subi	r20, 0xC0	; 192
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
    38b8:	6f 4f       	sbci	r22, 0xFF	; 255
    38ba:	7f 4f       	sbci	r23, 0xFF	; 255
    38bc:	40 78       	andi	r20, 0x80	; 128
    38be:	1a 8e       	std	Y+26, r1	; 0x1a
    38c0:	fe 17       	cp	r31, r30
    38c2:	11 f0       	breq	.+4      	; 0x38c8 <__mulsf3+0x1d8>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	8a 8f       	std	Y+26, r24	; 0x1a
    38c8:	4d 8f       	std	Y+29, r20	; 0x1d
    38ca:	5e 8f       	std	Y+30, r21	; 0x1e
    38cc:	6f 8f       	std	Y+31, r22	; 0x1f
    38ce:	78 a3       	std	Y+32, r23	; 0x20
    38d0:	83 e0       	ldi	r24, 0x03	; 3
    38d2:	89 8f       	std	Y+25, r24	; 0x19
    38d4:	ce 01       	movw	r24, r28
    38d6:	49 96       	adiw	r24, 0x19	; 25
    38d8:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__pack_f>
    38dc:	a0 96       	adiw	r28, 0x20	; 32
    38de:	e2 e1       	ldi	r30, 0x12	; 18
    38e0:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__>

000038e4 <__divsf3>:
    38e4:	a8 e1       	ldi	r26, 0x18	; 24
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	e8 e7       	ldi	r30, 0x78	; 120
    38ea:	fc e1       	ldi	r31, 0x1C	; 28
    38ec:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__+0x10>
    38f0:	69 83       	std	Y+1, r22	; 0x01
    38f2:	7a 83       	std	Y+2, r23	; 0x02
    38f4:	8b 83       	std	Y+3, r24	; 0x03
    38f6:	9c 83       	std	Y+4, r25	; 0x04
    38f8:	2d 83       	std	Y+5, r18	; 0x05
    38fa:	3e 83       	std	Y+6, r19	; 0x06
    38fc:	4f 83       	std	Y+7, r20	; 0x07
    38fe:	58 87       	std	Y+8, r21	; 0x08
    3900:	b9 e0       	ldi	r27, 0x09	; 9
    3902:	eb 2e       	mov	r14, r27
    3904:	f1 2c       	mov	r15, r1
    3906:	ec 0e       	add	r14, r28
    3908:	fd 1e       	adc	r15, r29
    390a:	ce 01       	movw	r24, r28
    390c:	01 96       	adiw	r24, 0x01	; 1
    390e:	b7 01       	movw	r22, r14
    3910:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3914:	8e 01       	movw	r16, r28
    3916:	0f 5e       	subi	r16, 0xEF	; 239
    3918:	1f 4f       	sbci	r17, 0xFF	; 255
    391a:	ce 01       	movw	r24, r28
    391c:	05 96       	adiw	r24, 0x05	; 5
    391e:	b8 01       	movw	r22, r16
    3920:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3924:	29 85       	ldd	r18, Y+9	; 0x09
    3926:	22 30       	cpi	r18, 0x02	; 2
    3928:	08 f4       	brcc	.+2      	; 0x392c <__divsf3+0x48>
    392a:	7e c0       	rjmp	.+252    	; 0x3a28 <__divsf3+0x144>
    392c:	39 89       	ldd	r19, Y+17	; 0x11
    392e:	32 30       	cpi	r19, 0x02	; 2
    3930:	10 f4       	brcc	.+4      	; 0x3936 <__divsf3+0x52>
    3932:	b8 01       	movw	r22, r16
    3934:	7c c0       	rjmp	.+248    	; 0x3a2e <__divsf3+0x14a>
    3936:	8a 85       	ldd	r24, Y+10	; 0x0a
    3938:	9a 89       	ldd	r25, Y+18	; 0x12
    393a:	89 27       	eor	r24, r25
    393c:	8a 87       	std	Y+10, r24	; 0x0a
    393e:	24 30       	cpi	r18, 0x04	; 4
    3940:	11 f0       	breq	.+4      	; 0x3946 <__divsf3+0x62>
    3942:	22 30       	cpi	r18, 0x02	; 2
    3944:	31 f4       	brne	.+12     	; 0x3952 <__divsf3+0x6e>
    3946:	23 17       	cp	r18, r19
    3948:	09 f0       	breq	.+2      	; 0x394c <__divsf3+0x68>
    394a:	6e c0       	rjmp	.+220    	; 0x3a28 <__divsf3+0x144>
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	72 e0       	ldi	r23, 0x02	; 2
    3950:	6e c0       	rjmp	.+220    	; 0x3a2e <__divsf3+0x14a>
    3952:	34 30       	cpi	r19, 0x04	; 4
    3954:	39 f4       	brne	.+14     	; 0x3964 <__divsf3+0x80>
    3956:	1d 86       	std	Y+13, r1	; 0x0d
    3958:	1e 86       	std	Y+14, r1	; 0x0e
    395a:	1f 86       	std	Y+15, r1	; 0x0f
    395c:	18 8a       	std	Y+16, r1	; 0x10
    395e:	1c 86       	std	Y+12, r1	; 0x0c
    3960:	1b 86       	std	Y+11, r1	; 0x0b
    3962:	04 c0       	rjmp	.+8      	; 0x396c <__divsf3+0x88>
    3964:	32 30       	cpi	r19, 0x02	; 2
    3966:	21 f4       	brne	.+8      	; 0x3970 <__divsf3+0x8c>
    3968:	84 e0       	ldi	r24, 0x04	; 4
    396a:	89 87       	std	Y+9, r24	; 0x09
    396c:	b7 01       	movw	r22, r14
    396e:	5f c0       	rjmp	.+190    	; 0x3a2e <__divsf3+0x14a>
    3970:	2b 85       	ldd	r18, Y+11	; 0x0b
    3972:	3c 85       	ldd	r19, Y+12	; 0x0c
    3974:	8b 89       	ldd	r24, Y+19	; 0x13
    3976:	9c 89       	ldd	r25, Y+20	; 0x14
    3978:	28 1b       	sub	r18, r24
    397a:	39 0b       	sbc	r19, r25
    397c:	3c 87       	std	Y+12, r19	; 0x0c
    397e:	2b 87       	std	Y+11, r18	; 0x0b
    3980:	ed 84       	ldd	r14, Y+13	; 0x0d
    3982:	fe 84       	ldd	r15, Y+14	; 0x0e
    3984:	0f 85       	ldd	r16, Y+15	; 0x0f
    3986:	18 89       	ldd	r17, Y+16	; 0x10
    3988:	ad 88       	ldd	r10, Y+21	; 0x15
    398a:	be 88       	ldd	r11, Y+22	; 0x16
    398c:	cf 88       	ldd	r12, Y+23	; 0x17
    398e:	d8 8c       	ldd	r13, Y+24	; 0x18
    3990:	ea 14       	cp	r14, r10
    3992:	fb 04       	cpc	r15, r11
    3994:	0c 05       	cpc	r16, r12
    3996:	1d 05       	cpc	r17, r13
    3998:	40 f4       	brcc	.+16     	; 0x39aa <__divsf3+0xc6>
    399a:	ee 0c       	add	r14, r14
    399c:	ff 1c       	adc	r15, r15
    399e:	00 1f       	adc	r16, r16
    39a0:	11 1f       	adc	r17, r17
    39a2:	21 50       	subi	r18, 0x01	; 1
    39a4:	30 40       	sbci	r19, 0x00	; 0
    39a6:	3c 87       	std	Y+12, r19	; 0x0c
    39a8:	2b 87       	std	Y+11, r18	; 0x0b
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	a0 e0       	ldi	r26, 0x00	; 0
    39b8:	b0 e4       	ldi	r27, 0x40	; 64
    39ba:	60 e0       	ldi	r22, 0x00	; 0
    39bc:	70 e0       	ldi	r23, 0x00	; 0
    39be:	ea 14       	cp	r14, r10
    39c0:	fb 04       	cpc	r15, r11
    39c2:	0c 05       	cpc	r16, r12
    39c4:	1d 05       	cpc	r17, r13
    39c6:	40 f0       	brcs	.+16     	; 0x39d8 <__divsf3+0xf4>
    39c8:	28 2b       	or	r18, r24
    39ca:	39 2b       	or	r19, r25
    39cc:	4a 2b       	or	r20, r26
    39ce:	5b 2b       	or	r21, r27
    39d0:	ea 18       	sub	r14, r10
    39d2:	fb 08       	sbc	r15, r11
    39d4:	0c 09       	sbc	r16, r12
    39d6:	1d 09       	sbc	r17, r13
    39d8:	b6 95       	lsr	r27
    39da:	a7 95       	ror	r26
    39dc:	97 95       	ror	r25
    39de:	87 95       	ror	r24
    39e0:	ee 0c       	add	r14, r14
    39e2:	ff 1c       	adc	r15, r15
    39e4:	00 1f       	adc	r16, r16
    39e6:	11 1f       	adc	r17, r17
    39e8:	6f 5f       	subi	r22, 0xFF	; 255
    39ea:	7f 4f       	sbci	r23, 0xFF	; 255
    39ec:	6f 31       	cpi	r22, 0x1F	; 31
    39ee:	71 05       	cpc	r23, r1
    39f0:	31 f7       	brne	.-52     	; 0x39be <__divsf3+0xda>
    39f2:	da 01       	movw	r26, r20
    39f4:	c9 01       	movw	r24, r18
    39f6:	8f 77       	andi	r24, 0x7F	; 127
    39f8:	90 70       	andi	r25, 0x00	; 0
    39fa:	a0 70       	andi	r26, 0x00	; 0
    39fc:	b0 70       	andi	r27, 0x00	; 0
    39fe:	80 34       	cpi	r24, 0x40	; 64
    3a00:	91 05       	cpc	r25, r1
    3a02:	a1 05       	cpc	r26, r1
    3a04:	b1 05       	cpc	r27, r1
    3a06:	61 f4       	brne	.+24     	; 0x3a20 <__divsf3+0x13c>
    3a08:	27 fd       	sbrc	r18, 7
    3a0a:	0a c0       	rjmp	.+20     	; 0x3a20 <__divsf3+0x13c>
    3a0c:	e1 14       	cp	r14, r1
    3a0e:	f1 04       	cpc	r15, r1
    3a10:	01 05       	cpc	r16, r1
    3a12:	11 05       	cpc	r17, r1
    3a14:	29 f0       	breq	.+10     	; 0x3a20 <__divsf3+0x13c>
    3a16:	20 5c       	subi	r18, 0xC0	; 192
    3a18:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a1e:	20 78       	andi	r18, 0x80	; 128
    3a20:	2d 87       	std	Y+13, r18	; 0x0d
    3a22:	3e 87       	std	Y+14, r19	; 0x0e
    3a24:	4f 87       	std	Y+15, r20	; 0x0f
    3a26:	58 8b       	std	Y+16, r21	; 0x10
    3a28:	be 01       	movw	r22, r28
    3a2a:	67 5f       	subi	r22, 0xF7	; 247
    3a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2e:	cb 01       	movw	r24, r22
    3a30:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__pack_f>
    3a34:	68 96       	adiw	r28, 0x18	; 24
    3a36:	ea e0       	ldi	r30, 0x0A	; 10
    3a38:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__+0x10>

00003a3c <__gtsf2>:
    3a3c:	a8 e1       	ldi	r26, 0x18	; 24
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e4 e2       	ldi	r30, 0x24	; 36
    3a42:	fd e1       	ldi	r31, 0x1D	; 29
    3a44:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
    3a48:	69 83       	std	Y+1, r22	; 0x01
    3a4a:	7a 83       	std	Y+2, r23	; 0x02
    3a4c:	8b 83       	std	Y+3, r24	; 0x03
    3a4e:	9c 83       	std	Y+4, r25	; 0x04
    3a50:	2d 83       	std	Y+5, r18	; 0x05
    3a52:	3e 83       	std	Y+6, r19	; 0x06
    3a54:	4f 83       	std	Y+7, r20	; 0x07
    3a56:	58 87       	std	Y+8, r21	; 0x08
    3a58:	89 e0       	ldi	r24, 0x09	; 9
    3a5a:	e8 2e       	mov	r14, r24
    3a5c:	f1 2c       	mov	r15, r1
    3a5e:	ec 0e       	add	r14, r28
    3a60:	fd 1e       	adc	r15, r29
    3a62:	ce 01       	movw	r24, r28
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	b7 01       	movw	r22, r14
    3a68:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3a6c:	8e 01       	movw	r16, r28
    3a6e:	0f 5e       	subi	r16, 0xEF	; 239
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	ce 01       	movw	r24, r28
    3a74:	05 96       	adiw	r24, 0x05	; 5
    3a76:	b8 01       	movw	r22, r16
    3a78:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	82 30       	cpi	r24, 0x02	; 2
    3a80:	40 f0       	brcs	.+16     	; 0x3a92 <__gtsf2+0x56>
    3a82:	89 89       	ldd	r24, Y+17	; 0x11
    3a84:	82 30       	cpi	r24, 0x02	; 2
    3a86:	28 f0       	brcs	.+10     	; 0x3a92 <__gtsf2+0x56>
    3a88:	c7 01       	movw	r24, r14
    3a8a:	b8 01       	movw	r22, r16
    3a8c:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fpcmp_parts_f>
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <__gtsf2+0x58>
    3a92:	8f ef       	ldi	r24, 0xFF	; 255
    3a94:	68 96       	adiw	r28, 0x18	; 24
    3a96:	e6 e0       	ldi	r30, 0x06	; 6
    3a98:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

00003a9c <__gesf2>:
    3a9c:	a8 e1       	ldi	r26, 0x18	; 24
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	e4 e5       	ldi	r30, 0x54	; 84
    3aa2:	fd e1       	ldi	r31, 0x1D	; 29
    3aa4:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
    3aa8:	69 83       	std	Y+1, r22	; 0x01
    3aaa:	7a 83       	std	Y+2, r23	; 0x02
    3aac:	8b 83       	std	Y+3, r24	; 0x03
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	2d 83       	std	Y+5, r18	; 0x05
    3ab2:	3e 83       	std	Y+6, r19	; 0x06
    3ab4:	4f 83       	std	Y+7, r20	; 0x07
    3ab6:	58 87       	std	Y+8, r21	; 0x08
    3ab8:	89 e0       	ldi	r24, 0x09	; 9
    3aba:	e8 2e       	mov	r14, r24
    3abc:	f1 2c       	mov	r15, r1
    3abe:	ec 0e       	add	r14, r28
    3ac0:	fd 1e       	adc	r15, r29
    3ac2:	ce 01       	movw	r24, r28
    3ac4:	01 96       	adiw	r24, 0x01	; 1
    3ac6:	b7 01       	movw	r22, r14
    3ac8:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3acc:	8e 01       	movw	r16, r28
    3ace:	0f 5e       	subi	r16, 0xEF	; 239
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	ce 01       	movw	r24, r28
    3ad4:	05 96       	adiw	r24, 0x05	; 5
    3ad6:	b8 01       	movw	r22, r16
    3ad8:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3adc:	89 85       	ldd	r24, Y+9	; 0x09
    3ade:	82 30       	cpi	r24, 0x02	; 2
    3ae0:	40 f0       	brcs	.+16     	; 0x3af2 <__gesf2+0x56>
    3ae2:	89 89       	ldd	r24, Y+17	; 0x11
    3ae4:	82 30       	cpi	r24, 0x02	; 2
    3ae6:	28 f0       	brcs	.+10     	; 0x3af2 <__gesf2+0x56>
    3ae8:	c7 01       	movw	r24, r14
    3aea:	b8 01       	movw	r22, r16
    3aec:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fpcmp_parts_f>
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <__gesf2+0x58>
    3af2:	8f ef       	ldi	r24, 0xFF	; 255
    3af4:	68 96       	adiw	r28, 0x18	; 24
    3af6:	e6 e0       	ldi	r30, 0x06	; 6
    3af8:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

00003afc <__ltsf2>:
    3afc:	a8 e1       	ldi	r26, 0x18	; 24
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	e4 e8       	ldi	r30, 0x84	; 132
    3b02:	fd e1       	ldi	r31, 0x1D	; 29
    3b04:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
    3b08:	69 83       	std	Y+1, r22	; 0x01
    3b0a:	7a 83       	std	Y+2, r23	; 0x02
    3b0c:	8b 83       	std	Y+3, r24	; 0x03
    3b0e:	9c 83       	std	Y+4, r25	; 0x04
    3b10:	2d 83       	std	Y+5, r18	; 0x05
    3b12:	3e 83       	std	Y+6, r19	; 0x06
    3b14:	4f 83       	std	Y+7, r20	; 0x07
    3b16:	58 87       	std	Y+8, r21	; 0x08
    3b18:	89 e0       	ldi	r24, 0x09	; 9
    3b1a:	e8 2e       	mov	r14, r24
    3b1c:	f1 2c       	mov	r15, r1
    3b1e:	ec 0e       	add	r14, r28
    3b20:	fd 1e       	adc	r15, r29
    3b22:	ce 01       	movw	r24, r28
    3b24:	01 96       	adiw	r24, 0x01	; 1
    3b26:	b7 01       	movw	r22, r14
    3b28:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3b2c:	8e 01       	movw	r16, r28
    3b2e:	0f 5e       	subi	r16, 0xEF	; 239
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
    3b32:	ce 01       	movw	r24, r28
    3b34:	05 96       	adiw	r24, 0x05	; 5
    3b36:	b8 01       	movw	r22, r16
    3b38:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3b3c:	89 85       	ldd	r24, Y+9	; 0x09
    3b3e:	82 30       	cpi	r24, 0x02	; 2
    3b40:	40 f0       	brcs	.+16     	; 0x3b52 <__ltsf2+0x56>
    3b42:	89 89       	ldd	r24, Y+17	; 0x11
    3b44:	82 30       	cpi	r24, 0x02	; 2
    3b46:	28 f0       	brcs	.+10     	; 0x3b52 <__ltsf2+0x56>
    3b48:	c7 01       	movw	r24, r14
    3b4a:	b8 01       	movw	r22, r16
    3b4c:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fpcmp_parts_f>
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <__ltsf2+0x58>
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	68 96       	adiw	r28, 0x18	; 24
    3b56:	e6 e0       	ldi	r30, 0x06	; 6
    3b58:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

00003b5c <__floatsisf>:
    3b5c:	a8 e0       	ldi	r26, 0x08	; 8
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	e4 eb       	ldi	r30, 0xB4	; 180
    3b62:	fd e1       	ldi	r31, 0x1D	; 29
    3b64:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__prologue_saves__+0x12>
    3b68:	9b 01       	movw	r18, r22
    3b6a:	ac 01       	movw	r20, r24
    3b6c:	83 e0       	ldi	r24, 0x03	; 3
    3b6e:	89 83       	std	Y+1, r24	; 0x01
    3b70:	da 01       	movw	r26, r20
    3b72:	c9 01       	movw	r24, r18
    3b74:	88 27       	eor	r24, r24
    3b76:	b7 fd       	sbrc	r27, 7
    3b78:	83 95       	inc	r24
    3b7a:	99 27       	eor	r25, r25
    3b7c:	aa 27       	eor	r26, r26
    3b7e:	bb 27       	eor	r27, r27
    3b80:	b8 2e       	mov	r11, r24
    3b82:	21 15       	cp	r18, r1
    3b84:	31 05       	cpc	r19, r1
    3b86:	41 05       	cpc	r20, r1
    3b88:	51 05       	cpc	r21, r1
    3b8a:	19 f4       	brne	.+6      	; 0x3b92 <__floatsisf+0x36>
    3b8c:	82 e0       	ldi	r24, 0x02	; 2
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	3a c0       	rjmp	.+116    	; 0x3c06 <__floatsisf+0xaa>
    3b92:	88 23       	and	r24, r24
    3b94:	a9 f0       	breq	.+42     	; 0x3bc0 <__floatsisf+0x64>
    3b96:	20 30       	cpi	r18, 0x00	; 0
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	38 07       	cpc	r19, r24
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	48 07       	cpc	r20, r24
    3ba0:	80 e8       	ldi	r24, 0x80	; 128
    3ba2:	58 07       	cpc	r21, r24
    3ba4:	29 f4       	brne	.+10     	; 0x3bb0 <__floatsisf+0x54>
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	9f ec       	ldi	r25, 0xCF	; 207
    3bae:	30 c0       	rjmp	.+96     	; 0x3c10 <__floatsisf+0xb4>
    3bb0:	ee 24       	eor	r14, r14
    3bb2:	ff 24       	eor	r15, r15
    3bb4:	87 01       	movw	r16, r14
    3bb6:	e2 1a       	sub	r14, r18
    3bb8:	f3 0a       	sbc	r15, r19
    3bba:	04 0b       	sbc	r16, r20
    3bbc:	15 0b       	sbc	r17, r21
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <__floatsisf+0x68>
    3bc0:	79 01       	movw	r14, r18
    3bc2:	8a 01       	movw	r16, r20
    3bc4:	8e e1       	ldi	r24, 0x1E	; 30
    3bc6:	c8 2e       	mov	r12, r24
    3bc8:	d1 2c       	mov	r13, r1
    3bca:	dc 82       	std	Y+4, r13	; 0x04
    3bcc:	cb 82       	std	Y+3, r12	; 0x03
    3bce:	ed 82       	std	Y+5, r14	; 0x05
    3bd0:	fe 82       	std	Y+6, r15	; 0x06
    3bd2:	0f 83       	std	Y+7, r16	; 0x07
    3bd4:	18 87       	std	Y+8, r17	; 0x08
    3bd6:	c8 01       	movw	r24, r16
    3bd8:	b7 01       	movw	r22, r14
    3bda:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__clzsi2>
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	18 16       	cp	r1, r24
    3be2:	19 06       	cpc	r1, r25
    3be4:	84 f4       	brge	.+32     	; 0x3c06 <__floatsisf+0xaa>
    3be6:	08 2e       	mov	r0, r24
    3be8:	04 c0       	rjmp	.+8      	; 0x3bf2 <__floatsisf+0x96>
    3bea:	ee 0c       	add	r14, r14
    3bec:	ff 1c       	adc	r15, r15
    3bee:	00 1f       	adc	r16, r16
    3bf0:	11 1f       	adc	r17, r17
    3bf2:	0a 94       	dec	r0
    3bf4:	d2 f7       	brpl	.-12     	; 0x3bea <__floatsisf+0x8e>
    3bf6:	ed 82       	std	Y+5, r14	; 0x05
    3bf8:	fe 82       	std	Y+6, r15	; 0x06
    3bfa:	0f 83       	std	Y+7, r16	; 0x07
    3bfc:	18 87       	std	Y+8, r17	; 0x08
    3bfe:	c8 1a       	sub	r12, r24
    3c00:	d9 0a       	sbc	r13, r25
    3c02:	dc 82       	std	Y+4, r13	; 0x04
    3c04:	cb 82       	std	Y+3, r12	; 0x03
    3c06:	ba 82       	std	Y+2, r11	; 0x02
    3c08:	ce 01       	movw	r24, r28
    3c0a:	01 96       	adiw	r24, 0x01	; 1
    3c0c:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__pack_f>
    3c10:	28 96       	adiw	r28, 0x08	; 8
    3c12:	e9 e0       	ldi	r30, 0x09	; 9
    3c14:	0c 94 12 21 	jmp	0x4224	; 0x4224 <__epilogue_restores__+0x12>

00003c18 <__fixsfsi>:
    3c18:	ac e0       	ldi	r26, 0x0C	; 12
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	e2 e1       	ldi	r30, 0x12	; 18
    3c1e:	fe e1       	ldi	r31, 0x1E	; 30
    3c20:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__prologue_saves__+0x20>
    3c24:	69 83       	std	Y+1, r22	; 0x01
    3c26:	7a 83       	std	Y+2, r23	; 0x02
    3c28:	8b 83       	std	Y+3, r24	; 0x03
    3c2a:	9c 83       	std	Y+4, r25	; 0x04
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	be 01       	movw	r22, r28
    3c32:	6b 5f       	subi	r22, 0xFB	; 251
    3c34:	7f 4f       	sbci	r23, 0xFF	; 255
    3c36:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <__unpack_f>
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	82 30       	cpi	r24, 0x02	; 2
    3c3e:	61 f1       	breq	.+88     	; 0x3c98 <__fixsfsi+0x80>
    3c40:	82 30       	cpi	r24, 0x02	; 2
    3c42:	50 f1       	brcs	.+84     	; 0x3c98 <__fixsfsi+0x80>
    3c44:	84 30       	cpi	r24, 0x04	; 4
    3c46:	21 f4       	brne	.+8      	; 0x3c50 <__fixsfsi+0x38>
    3c48:	8e 81       	ldd	r24, Y+6	; 0x06
    3c4a:	88 23       	and	r24, r24
    3c4c:	51 f1       	breq	.+84     	; 0x3ca2 <__fixsfsi+0x8a>
    3c4e:	2e c0       	rjmp	.+92     	; 0x3cac <__fixsfsi+0x94>
    3c50:	2f 81       	ldd	r18, Y+7	; 0x07
    3c52:	38 85       	ldd	r19, Y+8	; 0x08
    3c54:	37 fd       	sbrc	r19, 7
    3c56:	20 c0       	rjmp	.+64     	; 0x3c98 <__fixsfsi+0x80>
    3c58:	6e 81       	ldd	r22, Y+6	; 0x06
    3c5a:	2f 31       	cpi	r18, 0x1F	; 31
    3c5c:	31 05       	cpc	r19, r1
    3c5e:	1c f0       	brlt	.+6      	; 0x3c66 <__fixsfsi+0x4e>
    3c60:	66 23       	and	r22, r22
    3c62:	f9 f0       	breq	.+62     	; 0x3ca2 <__fixsfsi+0x8a>
    3c64:	23 c0       	rjmp	.+70     	; 0x3cac <__fixsfsi+0x94>
    3c66:	8e e1       	ldi	r24, 0x1E	; 30
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	82 1b       	sub	r24, r18
    3c6c:	93 0b       	sbc	r25, r19
    3c6e:	29 85       	ldd	r18, Y+9	; 0x09
    3c70:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c72:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c74:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c76:	04 c0       	rjmp	.+8      	; 0x3c80 <__fixsfsi+0x68>
    3c78:	56 95       	lsr	r21
    3c7a:	47 95       	ror	r20
    3c7c:	37 95       	ror	r19
    3c7e:	27 95       	ror	r18
    3c80:	8a 95       	dec	r24
    3c82:	d2 f7       	brpl	.-12     	; 0x3c78 <__fixsfsi+0x60>
    3c84:	66 23       	and	r22, r22
    3c86:	b1 f0       	breq	.+44     	; 0x3cb4 <__fixsfsi+0x9c>
    3c88:	50 95       	com	r21
    3c8a:	40 95       	com	r20
    3c8c:	30 95       	com	r19
    3c8e:	21 95       	neg	r18
    3c90:	3f 4f       	sbci	r19, 0xFF	; 255
    3c92:	4f 4f       	sbci	r20, 0xFF	; 255
    3c94:	5f 4f       	sbci	r21, 0xFF	; 255
    3c96:	0e c0       	rjmp	.+28     	; 0x3cb4 <__fixsfsi+0x9c>
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e0       	ldi	r20, 0x00	; 0
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	09 c0       	rjmp	.+18     	; 0x3cb4 <__fixsfsi+0x9c>
    3ca2:	2f ef       	ldi	r18, 0xFF	; 255
    3ca4:	3f ef       	ldi	r19, 0xFF	; 255
    3ca6:	4f ef       	ldi	r20, 0xFF	; 255
    3ca8:	5f e7       	ldi	r21, 0x7F	; 127
    3caa:	04 c0       	rjmp	.+8      	; 0x3cb4 <__fixsfsi+0x9c>
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	50 e8       	ldi	r21, 0x80	; 128
    3cb4:	b9 01       	movw	r22, r18
    3cb6:	ca 01       	movw	r24, r20
    3cb8:	2c 96       	adiw	r28, 0x0c	; 12
    3cba:	e2 e0       	ldi	r30, 0x02	; 2
    3cbc:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__epilogue_restores__+0x20>

00003cc0 <__floatunsisf>:
    3cc0:	a8 e0       	ldi	r26, 0x08	; 8
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e6 e6       	ldi	r30, 0x66	; 102
    3cc6:	fe e1       	ldi	r31, 0x1E	; 30
    3cc8:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__+0x10>
    3ccc:	7b 01       	movw	r14, r22
    3cce:	8c 01       	movw	r16, r24
    3cd0:	61 15       	cp	r22, r1
    3cd2:	71 05       	cpc	r23, r1
    3cd4:	81 05       	cpc	r24, r1
    3cd6:	91 05       	cpc	r25, r1
    3cd8:	19 f4       	brne	.+6      	; 0x3ce0 <__floatunsisf+0x20>
    3cda:	82 e0       	ldi	r24, 0x02	; 2
    3cdc:	89 83       	std	Y+1, r24	; 0x01
    3cde:	60 c0       	rjmp	.+192    	; 0x3da0 <__floatunsisf+0xe0>
    3ce0:	83 e0       	ldi	r24, 0x03	; 3
    3ce2:	89 83       	std	Y+1, r24	; 0x01
    3ce4:	8e e1       	ldi	r24, 0x1E	; 30
    3ce6:	c8 2e       	mov	r12, r24
    3ce8:	d1 2c       	mov	r13, r1
    3cea:	dc 82       	std	Y+4, r13	; 0x04
    3cec:	cb 82       	std	Y+3, r12	; 0x03
    3cee:	ed 82       	std	Y+5, r14	; 0x05
    3cf0:	fe 82       	std	Y+6, r15	; 0x06
    3cf2:	0f 83       	std	Y+7, r16	; 0x07
    3cf4:	18 87       	std	Y+8, r17	; 0x08
    3cf6:	c8 01       	movw	r24, r16
    3cf8:	b7 01       	movw	r22, r14
    3cfa:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__clzsi2>
    3cfe:	fc 01       	movw	r30, r24
    3d00:	31 97       	sbiw	r30, 0x01	; 1
    3d02:	f7 ff       	sbrs	r31, 7
    3d04:	3b c0       	rjmp	.+118    	; 0x3d7c <__floatunsisf+0xbc>
    3d06:	22 27       	eor	r18, r18
    3d08:	33 27       	eor	r19, r19
    3d0a:	2e 1b       	sub	r18, r30
    3d0c:	3f 0b       	sbc	r19, r31
    3d0e:	57 01       	movw	r10, r14
    3d10:	68 01       	movw	r12, r16
    3d12:	02 2e       	mov	r0, r18
    3d14:	04 c0       	rjmp	.+8      	; 0x3d1e <__floatunsisf+0x5e>
    3d16:	d6 94       	lsr	r13
    3d18:	c7 94       	ror	r12
    3d1a:	b7 94       	ror	r11
    3d1c:	a7 94       	ror	r10
    3d1e:	0a 94       	dec	r0
    3d20:	d2 f7       	brpl	.-12     	; 0x3d16 <__floatunsisf+0x56>
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	50 e0       	ldi	r21, 0x00	; 0
    3d26:	60 e0       	ldi	r22, 0x00	; 0
    3d28:	70 e0       	ldi	r23, 0x00	; 0
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	a0 e0       	ldi	r26, 0x00	; 0
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	04 c0       	rjmp	.+8      	; 0x3d3c <__floatunsisf+0x7c>
    3d34:	88 0f       	add	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	aa 1f       	adc	r26, r26
    3d3a:	bb 1f       	adc	r27, r27
    3d3c:	2a 95       	dec	r18
    3d3e:	d2 f7       	brpl	.-12     	; 0x3d34 <__floatunsisf+0x74>
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	a1 09       	sbc	r26, r1
    3d44:	b1 09       	sbc	r27, r1
    3d46:	8e 21       	and	r24, r14
    3d48:	9f 21       	and	r25, r15
    3d4a:	a0 23       	and	r26, r16
    3d4c:	b1 23       	and	r27, r17
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	a1 05       	cpc	r26, r1
    3d52:	b1 05       	cpc	r27, r1
    3d54:	21 f0       	breq	.+8      	; 0x3d5e <__floatunsisf+0x9e>
    3d56:	41 e0       	ldi	r20, 0x01	; 1
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	4a 29       	or	r20, r10
    3d60:	5b 29       	or	r21, r11
    3d62:	6c 29       	or	r22, r12
    3d64:	7d 29       	or	r23, r13
    3d66:	4d 83       	std	Y+5, r20	; 0x05
    3d68:	5e 83       	std	Y+6, r21	; 0x06
    3d6a:	6f 83       	std	Y+7, r22	; 0x07
    3d6c:	78 87       	std	Y+8, r23	; 0x08
    3d6e:	8e e1       	ldi	r24, 0x1E	; 30
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	8e 1b       	sub	r24, r30
    3d74:	9f 0b       	sbc	r25, r31
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
    3d7a:	12 c0       	rjmp	.+36     	; 0x3da0 <__floatunsisf+0xe0>
    3d7c:	30 97       	sbiw	r30, 0x00	; 0
    3d7e:	81 f0       	breq	.+32     	; 0x3da0 <__floatunsisf+0xe0>
    3d80:	0e 2e       	mov	r0, r30
    3d82:	04 c0       	rjmp	.+8      	; 0x3d8c <__floatunsisf+0xcc>
    3d84:	ee 0c       	add	r14, r14
    3d86:	ff 1c       	adc	r15, r15
    3d88:	00 1f       	adc	r16, r16
    3d8a:	11 1f       	adc	r17, r17
    3d8c:	0a 94       	dec	r0
    3d8e:	d2 f7       	brpl	.-12     	; 0x3d84 <__floatunsisf+0xc4>
    3d90:	ed 82       	std	Y+5, r14	; 0x05
    3d92:	fe 82       	std	Y+6, r15	; 0x06
    3d94:	0f 83       	std	Y+7, r16	; 0x07
    3d96:	18 87       	std	Y+8, r17	; 0x08
    3d98:	ce 1a       	sub	r12, r30
    3d9a:	df 0a       	sbc	r13, r31
    3d9c:	dc 82       	std	Y+4, r13	; 0x04
    3d9e:	cb 82       	std	Y+3, r12	; 0x03
    3da0:	1a 82       	std	Y+2, r1	; 0x02
    3da2:	ce 01       	movw	r24, r28
    3da4:	01 96       	adiw	r24, 0x01	; 1
    3da6:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__pack_f>
    3daa:	28 96       	adiw	r28, 0x08	; 8
    3dac:	ea e0       	ldi	r30, 0x0A	; 10
    3dae:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__+0x10>

00003db2 <__clzsi2>:
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	7b 01       	movw	r14, r22
    3dbc:	8c 01       	movw	r16, r24
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	e8 16       	cp	r14, r24
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	f8 06       	cpc	r15, r24
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	08 07       	cpc	r16, r24
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	18 07       	cpc	r17, r24
    3dce:	88 f4       	brcc	.+34     	; 0x3df2 <__clzsi2+0x40>
    3dd0:	8f ef       	ldi	r24, 0xFF	; 255
    3dd2:	e8 16       	cp	r14, r24
    3dd4:	f1 04       	cpc	r15, r1
    3dd6:	01 05       	cpc	r16, r1
    3dd8:	11 05       	cpc	r17, r1
    3dda:	31 f0       	breq	.+12     	; 0x3de8 <__clzsi2+0x36>
    3ddc:	28 f0       	brcs	.+10     	; 0x3de8 <__clzsi2+0x36>
    3dde:	88 e0       	ldi	r24, 0x08	; 8
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	a0 e0       	ldi	r26, 0x00	; 0
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	17 c0       	rjmp	.+46     	; 0x3e16 <__clzsi2+0x64>
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	a0 e0       	ldi	r26, 0x00	; 0
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	12 c0       	rjmp	.+36     	; 0x3e16 <__clzsi2+0x64>
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	e8 16       	cp	r14, r24
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	f8 06       	cpc	r15, r24
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	08 07       	cpc	r16, r24
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	18 07       	cpc	r17, r24
    3e02:	28 f0       	brcs	.+10     	; 0x3e0e <__clzsi2+0x5c>
    3e04:	88 e1       	ldi	r24, 0x18	; 24
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	a0 e0       	ldi	r26, 0x00	; 0
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	04 c0       	rjmp	.+8      	; 0x3e16 <__clzsi2+0x64>
    3e0e:	80 e1       	ldi	r24, 0x10	; 16
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	a0 e0       	ldi	r26, 0x00	; 0
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	20 e2       	ldi	r18, 0x20	; 32
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	28 1b       	sub	r18, r24
    3e20:	39 0b       	sbc	r19, r25
    3e22:	4a 0b       	sbc	r20, r26
    3e24:	5b 0b       	sbc	r21, r27
    3e26:	04 c0       	rjmp	.+8      	; 0x3e30 <__clzsi2+0x7e>
    3e28:	16 95       	lsr	r17
    3e2a:	07 95       	ror	r16
    3e2c:	f7 94       	ror	r15
    3e2e:	e7 94       	ror	r14
    3e30:	8a 95       	dec	r24
    3e32:	d2 f7       	brpl	.-12     	; 0x3e28 <__clzsi2+0x76>
    3e34:	f7 01       	movw	r30, r14
    3e36:	e8 5f       	subi	r30, 0xF8	; 248
    3e38:	fd 4f       	sbci	r31, 0xFD	; 253
    3e3a:	80 81       	ld	r24, Z
    3e3c:	28 1b       	sub	r18, r24
    3e3e:	31 09       	sbc	r19, r1
    3e40:	41 09       	sbc	r20, r1
    3e42:	51 09       	sbc	r21, r1
    3e44:	c9 01       	movw	r24, r18
    3e46:	1f 91       	pop	r17
    3e48:	0f 91       	pop	r16
    3e4a:	ff 90       	pop	r15
    3e4c:	ef 90       	pop	r14
    3e4e:	08 95       	ret

00003e50 <__pack_f>:
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	e4 80       	ldd	r14, Z+4	; 0x04
    3e5e:	f5 80       	ldd	r15, Z+5	; 0x05
    3e60:	06 81       	ldd	r16, Z+6	; 0x06
    3e62:	17 81       	ldd	r17, Z+7	; 0x07
    3e64:	d1 80       	ldd	r13, Z+1	; 0x01
    3e66:	80 81       	ld	r24, Z
    3e68:	82 30       	cpi	r24, 0x02	; 2
    3e6a:	48 f4       	brcc	.+18     	; 0x3e7e <__pack_f+0x2e>
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	a0 e1       	ldi	r26, 0x10	; 16
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	e8 2a       	or	r14, r24
    3e76:	f9 2a       	or	r15, r25
    3e78:	0a 2b       	or	r16, r26
    3e7a:	1b 2b       	or	r17, r27
    3e7c:	a5 c0       	rjmp	.+330    	; 0x3fc8 <__pack_f+0x178>
    3e7e:	84 30       	cpi	r24, 0x04	; 4
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <__pack_f+0x34>
    3e82:	9f c0       	rjmp	.+318    	; 0x3fc2 <__pack_f+0x172>
    3e84:	82 30       	cpi	r24, 0x02	; 2
    3e86:	21 f4       	brne	.+8      	; 0x3e90 <__pack_f+0x40>
    3e88:	ee 24       	eor	r14, r14
    3e8a:	ff 24       	eor	r15, r15
    3e8c:	87 01       	movw	r16, r14
    3e8e:	05 c0       	rjmp	.+10     	; 0x3e9a <__pack_f+0x4a>
    3e90:	e1 14       	cp	r14, r1
    3e92:	f1 04       	cpc	r15, r1
    3e94:	01 05       	cpc	r16, r1
    3e96:	11 05       	cpc	r17, r1
    3e98:	19 f4       	brne	.+6      	; 0x3ea0 <__pack_f+0x50>
    3e9a:	e0 e0       	ldi	r30, 0x00	; 0
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	96 c0       	rjmp	.+300    	; 0x3fcc <__pack_f+0x17c>
    3ea0:	62 81       	ldd	r22, Z+2	; 0x02
    3ea2:	73 81       	ldd	r23, Z+3	; 0x03
    3ea4:	9f ef       	ldi	r25, 0xFF	; 255
    3ea6:	62 38       	cpi	r22, 0x82	; 130
    3ea8:	79 07       	cpc	r23, r25
    3eaa:	0c f0       	brlt	.+2      	; 0x3eae <__pack_f+0x5e>
    3eac:	5b c0       	rjmp	.+182    	; 0x3f64 <__pack_f+0x114>
    3eae:	22 e8       	ldi	r18, 0x82	; 130
    3eb0:	3f ef       	ldi	r19, 0xFF	; 255
    3eb2:	26 1b       	sub	r18, r22
    3eb4:	37 0b       	sbc	r19, r23
    3eb6:	2a 31       	cpi	r18, 0x1A	; 26
    3eb8:	31 05       	cpc	r19, r1
    3eba:	2c f0       	brlt	.+10     	; 0x3ec6 <__pack_f+0x76>
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	40 e0       	ldi	r20, 0x00	; 0
    3ec2:	50 e0       	ldi	r21, 0x00	; 0
    3ec4:	2a c0       	rjmp	.+84     	; 0x3f1a <__pack_f+0xca>
    3ec6:	b8 01       	movw	r22, r16
    3ec8:	a7 01       	movw	r20, r14
    3eca:	02 2e       	mov	r0, r18
    3ecc:	04 c0       	rjmp	.+8      	; 0x3ed6 <__pack_f+0x86>
    3ece:	76 95       	lsr	r23
    3ed0:	67 95       	ror	r22
    3ed2:	57 95       	ror	r21
    3ed4:	47 95       	ror	r20
    3ed6:	0a 94       	dec	r0
    3ed8:	d2 f7       	brpl	.-12     	; 0x3ece <__pack_f+0x7e>
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	a0 e0       	ldi	r26, 0x00	; 0
    3ee0:	b0 e0       	ldi	r27, 0x00	; 0
    3ee2:	04 c0       	rjmp	.+8      	; 0x3eec <__pack_f+0x9c>
    3ee4:	88 0f       	add	r24, r24
    3ee6:	99 1f       	adc	r25, r25
    3ee8:	aa 1f       	adc	r26, r26
    3eea:	bb 1f       	adc	r27, r27
    3eec:	2a 95       	dec	r18
    3eee:	d2 f7       	brpl	.-12     	; 0x3ee4 <__pack_f+0x94>
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	a1 09       	sbc	r26, r1
    3ef4:	b1 09       	sbc	r27, r1
    3ef6:	8e 21       	and	r24, r14
    3ef8:	9f 21       	and	r25, r15
    3efa:	a0 23       	and	r26, r16
    3efc:	b1 23       	and	r27, r17
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	a1 05       	cpc	r26, r1
    3f02:	b1 05       	cpc	r27, r1
    3f04:	21 f0       	breq	.+8      	; 0x3f0e <__pack_f+0xbe>
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	a0 e0       	ldi	r26, 0x00	; 0
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	9a 01       	movw	r18, r20
    3f10:	ab 01       	movw	r20, r22
    3f12:	28 2b       	or	r18, r24
    3f14:	39 2b       	or	r19, r25
    3f16:	4a 2b       	or	r20, r26
    3f18:	5b 2b       	or	r21, r27
    3f1a:	da 01       	movw	r26, r20
    3f1c:	c9 01       	movw	r24, r18
    3f1e:	8f 77       	andi	r24, 0x7F	; 127
    3f20:	90 70       	andi	r25, 0x00	; 0
    3f22:	a0 70       	andi	r26, 0x00	; 0
    3f24:	b0 70       	andi	r27, 0x00	; 0
    3f26:	80 34       	cpi	r24, 0x40	; 64
    3f28:	91 05       	cpc	r25, r1
    3f2a:	a1 05       	cpc	r26, r1
    3f2c:	b1 05       	cpc	r27, r1
    3f2e:	39 f4       	brne	.+14     	; 0x3f3e <__pack_f+0xee>
    3f30:	27 ff       	sbrs	r18, 7
    3f32:	09 c0       	rjmp	.+18     	; 0x3f46 <__pack_f+0xf6>
    3f34:	20 5c       	subi	r18, 0xC0	; 192
    3f36:	3f 4f       	sbci	r19, 0xFF	; 255
    3f38:	4f 4f       	sbci	r20, 0xFF	; 255
    3f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3c:	04 c0       	rjmp	.+8      	; 0x3f46 <__pack_f+0xf6>
    3f3e:	21 5c       	subi	r18, 0xC1	; 193
    3f40:	3f 4f       	sbci	r19, 0xFF	; 255
    3f42:	4f 4f       	sbci	r20, 0xFF	; 255
    3f44:	5f 4f       	sbci	r21, 0xFF	; 255
    3f46:	e0 e0       	ldi	r30, 0x00	; 0
    3f48:	f0 e0       	ldi	r31, 0x00	; 0
    3f4a:	20 30       	cpi	r18, 0x00	; 0
    3f4c:	a0 e0       	ldi	r26, 0x00	; 0
    3f4e:	3a 07       	cpc	r19, r26
    3f50:	a0 e0       	ldi	r26, 0x00	; 0
    3f52:	4a 07       	cpc	r20, r26
    3f54:	a0 e4       	ldi	r26, 0x40	; 64
    3f56:	5a 07       	cpc	r21, r26
    3f58:	10 f0       	brcs	.+4      	; 0x3f5e <__pack_f+0x10e>
    3f5a:	e1 e0       	ldi	r30, 0x01	; 1
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	79 01       	movw	r14, r18
    3f60:	8a 01       	movw	r16, r20
    3f62:	27 c0       	rjmp	.+78     	; 0x3fb2 <__pack_f+0x162>
    3f64:	60 38       	cpi	r22, 0x80	; 128
    3f66:	71 05       	cpc	r23, r1
    3f68:	64 f5       	brge	.+88     	; 0x3fc2 <__pack_f+0x172>
    3f6a:	fb 01       	movw	r30, r22
    3f6c:	e1 58       	subi	r30, 0x81	; 129
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	d8 01       	movw	r26, r16
    3f72:	c7 01       	movw	r24, r14
    3f74:	8f 77       	andi	r24, 0x7F	; 127
    3f76:	90 70       	andi	r25, 0x00	; 0
    3f78:	a0 70       	andi	r26, 0x00	; 0
    3f7a:	b0 70       	andi	r27, 0x00	; 0
    3f7c:	80 34       	cpi	r24, 0x40	; 64
    3f7e:	91 05       	cpc	r25, r1
    3f80:	a1 05       	cpc	r26, r1
    3f82:	b1 05       	cpc	r27, r1
    3f84:	39 f4       	brne	.+14     	; 0x3f94 <__pack_f+0x144>
    3f86:	e7 fe       	sbrs	r14, 7
    3f88:	0d c0       	rjmp	.+26     	; 0x3fa4 <__pack_f+0x154>
    3f8a:	80 e4       	ldi	r24, 0x40	; 64
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	a0 e0       	ldi	r26, 0x00	; 0
    3f90:	b0 e0       	ldi	r27, 0x00	; 0
    3f92:	04 c0       	rjmp	.+8      	; 0x3f9c <__pack_f+0x14c>
    3f94:	8f e3       	ldi	r24, 0x3F	; 63
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	a0 e0       	ldi	r26, 0x00	; 0
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e8 0e       	add	r14, r24
    3f9e:	f9 1e       	adc	r15, r25
    3fa0:	0a 1f       	adc	r16, r26
    3fa2:	1b 1f       	adc	r17, r27
    3fa4:	17 ff       	sbrs	r17, 7
    3fa6:	05 c0       	rjmp	.+10     	; 0x3fb2 <__pack_f+0x162>
    3fa8:	16 95       	lsr	r17
    3faa:	07 95       	ror	r16
    3fac:	f7 94       	ror	r15
    3fae:	e7 94       	ror	r14
    3fb0:	31 96       	adiw	r30, 0x01	; 1
    3fb2:	87 e0       	ldi	r24, 0x07	; 7
    3fb4:	16 95       	lsr	r17
    3fb6:	07 95       	ror	r16
    3fb8:	f7 94       	ror	r15
    3fba:	e7 94       	ror	r14
    3fbc:	8a 95       	dec	r24
    3fbe:	d1 f7       	brne	.-12     	; 0x3fb4 <__pack_f+0x164>
    3fc0:	05 c0       	rjmp	.+10     	; 0x3fcc <__pack_f+0x17c>
    3fc2:	ee 24       	eor	r14, r14
    3fc4:	ff 24       	eor	r15, r15
    3fc6:	87 01       	movw	r16, r14
    3fc8:	ef ef       	ldi	r30, 0xFF	; 255
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	6e 2f       	mov	r22, r30
    3fce:	67 95       	ror	r22
    3fd0:	66 27       	eor	r22, r22
    3fd2:	67 95       	ror	r22
    3fd4:	90 2f       	mov	r25, r16
    3fd6:	9f 77       	andi	r25, 0x7F	; 127
    3fd8:	d7 94       	ror	r13
    3fda:	dd 24       	eor	r13, r13
    3fdc:	d7 94       	ror	r13
    3fde:	8e 2f       	mov	r24, r30
    3fe0:	86 95       	lsr	r24
    3fe2:	49 2f       	mov	r20, r25
    3fe4:	46 2b       	or	r20, r22
    3fe6:	58 2f       	mov	r21, r24
    3fe8:	5d 29       	or	r21, r13
    3fea:	b7 01       	movw	r22, r14
    3fec:	ca 01       	movw	r24, r20
    3fee:	1f 91       	pop	r17
    3ff0:	0f 91       	pop	r16
    3ff2:	ff 90       	pop	r15
    3ff4:	ef 90       	pop	r14
    3ff6:	df 90       	pop	r13
    3ff8:	08 95       	ret

00003ffa <__unpack_f>:
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	db 01       	movw	r26, r22
    3ffe:	40 81       	ld	r20, Z
    4000:	51 81       	ldd	r21, Z+1	; 0x01
    4002:	22 81       	ldd	r18, Z+2	; 0x02
    4004:	62 2f       	mov	r22, r18
    4006:	6f 77       	andi	r22, 0x7F	; 127
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	22 1f       	adc	r18, r18
    400c:	22 27       	eor	r18, r18
    400e:	22 1f       	adc	r18, r18
    4010:	93 81       	ldd	r25, Z+3	; 0x03
    4012:	89 2f       	mov	r24, r25
    4014:	88 0f       	add	r24, r24
    4016:	82 2b       	or	r24, r18
    4018:	28 2f       	mov	r18, r24
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	99 1f       	adc	r25, r25
    401e:	99 27       	eor	r25, r25
    4020:	99 1f       	adc	r25, r25
    4022:	11 96       	adiw	r26, 0x01	; 1
    4024:	9c 93       	st	X, r25
    4026:	11 97       	sbiw	r26, 0x01	; 1
    4028:	21 15       	cp	r18, r1
    402a:	31 05       	cpc	r19, r1
    402c:	a9 f5       	brne	.+106    	; 0x4098 <__unpack_f+0x9e>
    402e:	41 15       	cp	r20, r1
    4030:	51 05       	cpc	r21, r1
    4032:	61 05       	cpc	r22, r1
    4034:	71 05       	cpc	r23, r1
    4036:	11 f4       	brne	.+4      	; 0x403c <__unpack_f+0x42>
    4038:	82 e0       	ldi	r24, 0x02	; 2
    403a:	37 c0       	rjmp	.+110    	; 0x40aa <__unpack_f+0xb0>
    403c:	82 e8       	ldi	r24, 0x82	; 130
    403e:	9f ef       	ldi	r25, 0xFF	; 255
    4040:	13 96       	adiw	r26, 0x03	; 3
    4042:	9c 93       	st	X, r25
    4044:	8e 93       	st	-X, r24
    4046:	12 97       	sbiw	r26, 0x02	; 2
    4048:	9a 01       	movw	r18, r20
    404a:	ab 01       	movw	r20, r22
    404c:	67 e0       	ldi	r22, 0x07	; 7
    404e:	22 0f       	add	r18, r18
    4050:	33 1f       	adc	r19, r19
    4052:	44 1f       	adc	r20, r20
    4054:	55 1f       	adc	r21, r21
    4056:	6a 95       	dec	r22
    4058:	d1 f7       	brne	.-12     	; 0x404e <__unpack_f+0x54>
    405a:	83 e0       	ldi	r24, 0x03	; 3
    405c:	8c 93       	st	X, r24
    405e:	0d c0       	rjmp	.+26     	; 0x407a <__unpack_f+0x80>
    4060:	22 0f       	add	r18, r18
    4062:	33 1f       	adc	r19, r19
    4064:	44 1f       	adc	r20, r20
    4066:	55 1f       	adc	r21, r21
    4068:	12 96       	adiw	r26, 0x02	; 2
    406a:	8d 91       	ld	r24, X+
    406c:	9c 91       	ld	r25, X
    406e:	13 97       	sbiw	r26, 0x03	; 3
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	13 96       	adiw	r26, 0x03	; 3
    4074:	9c 93       	st	X, r25
    4076:	8e 93       	st	-X, r24
    4078:	12 97       	sbiw	r26, 0x02	; 2
    407a:	20 30       	cpi	r18, 0x00	; 0
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	38 07       	cpc	r19, r24
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	48 07       	cpc	r20, r24
    4084:	80 e4       	ldi	r24, 0x40	; 64
    4086:	58 07       	cpc	r21, r24
    4088:	58 f3       	brcs	.-42     	; 0x4060 <__unpack_f+0x66>
    408a:	14 96       	adiw	r26, 0x04	; 4
    408c:	2d 93       	st	X+, r18
    408e:	3d 93       	st	X+, r19
    4090:	4d 93       	st	X+, r20
    4092:	5c 93       	st	X, r21
    4094:	17 97       	sbiw	r26, 0x07	; 7
    4096:	08 95       	ret
    4098:	2f 3f       	cpi	r18, 0xFF	; 255
    409a:	31 05       	cpc	r19, r1
    409c:	79 f4       	brne	.+30     	; 0x40bc <__unpack_f+0xc2>
    409e:	41 15       	cp	r20, r1
    40a0:	51 05       	cpc	r21, r1
    40a2:	61 05       	cpc	r22, r1
    40a4:	71 05       	cpc	r23, r1
    40a6:	19 f4       	brne	.+6      	; 0x40ae <__unpack_f+0xb4>
    40a8:	84 e0       	ldi	r24, 0x04	; 4
    40aa:	8c 93       	st	X, r24
    40ac:	08 95       	ret
    40ae:	64 ff       	sbrs	r22, 4
    40b0:	03 c0       	rjmp	.+6      	; 0x40b8 <__unpack_f+0xbe>
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	8c 93       	st	X, r24
    40b6:	12 c0       	rjmp	.+36     	; 0x40dc <__unpack_f+0xe2>
    40b8:	1c 92       	st	X, r1
    40ba:	10 c0       	rjmp	.+32     	; 0x40dc <__unpack_f+0xe2>
    40bc:	2f 57       	subi	r18, 0x7F	; 127
    40be:	30 40       	sbci	r19, 0x00	; 0
    40c0:	13 96       	adiw	r26, 0x03	; 3
    40c2:	3c 93       	st	X, r19
    40c4:	2e 93       	st	-X, r18
    40c6:	12 97       	sbiw	r26, 0x02	; 2
    40c8:	83 e0       	ldi	r24, 0x03	; 3
    40ca:	8c 93       	st	X, r24
    40cc:	87 e0       	ldi	r24, 0x07	; 7
    40ce:	44 0f       	add	r20, r20
    40d0:	55 1f       	adc	r21, r21
    40d2:	66 1f       	adc	r22, r22
    40d4:	77 1f       	adc	r23, r23
    40d6:	8a 95       	dec	r24
    40d8:	d1 f7       	brne	.-12     	; 0x40ce <__unpack_f+0xd4>
    40da:	70 64       	ori	r23, 0x40	; 64
    40dc:	14 96       	adiw	r26, 0x04	; 4
    40de:	4d 93       	st	X+, r20
    40e0:	5d 93       	st	X+, r21
    40e2:	6d 93       	st	X+, r22
    40e4:	7c 93       	st	X, r23
    40e6:	17 97       	sbiw	r26, 0x07	; 7
    40e8:	08 95       	ret

000040ea <__fpcmp_parts_f>:
    40ea:	1f 93       	push	r17
    40ec:	dc 01       	movw	r26, r24
    40ee:	fb 01       	movw	r30, r22
    40f0:	9c 91       	ld	r25, X
    40f2:	92 30       	cpi	r25, 0x02	; 2
    40f4:	08 f4       	brcc	.+2      	; 0x40f8 <__fpcmp_parts_f+0xe>
    40f6:	47 c0       	rjmp	.+142    	; 0x4186 <__fpcmp_parts_f+0x9c>
    40f8:	80 81       	ld	r24, Z
    40fa:	82 30       	cpi	r24, 0x02	; 2
    40fc:	08 f4       	brcc	.+2      	; 0x4100 <__fpcmp_parts_f+0x16>
    40fe:	43 c0       	rjmp	.+134    	; 0x4186 <__fpcmp_parts_f+0x9c>
    4100:	94 30       	cpi	r25, 0x04	; 4
    4102:	51 f4       	brne	.+20     	; 0x4118 <__fpcmp_parts_f+0x2e>
    4104:	11 96       	adiw	r26, 0x01	; 1
    4106:	1c 91       	ld	r17, X
    4108:	84 30       	cpi	r24, 0x04	; 4
    410a:	99 f5       	brne	.+102    	; 0x4172 <__fpcmp_parts_f+0x88>
    410c:	81 81       	ldd	r24, Z+1	; 0x01
    410e:	68 2f       	mov	r22, r24
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	61 1b       	sub	r22, r17
    4114:	71 09       	sbc	r23, r1
    4116:	3f c0       	rjmp	.+126    	; 0x4196 <__fpcmp_parts_f+0xac>
    4118:	84 30       	cpi	r24, 0x04	; 4
    411a:	21 f0       	breq	.+8      	; 0x4124 <__fpcmp_parts_f+0x3a>
    411c:	92 30       	cpi	r25, 0x02	; 2
    411e:	31 f4       	brne	.+12     	; 0x412c <__fpcmp_parts_f+0x42>
    4120:	82 30       	cpi	r24, 0x02	; 2
    4122:	b9 f1       	breq	.+110    	; 0x4192 <__fpcmp_parts_f+0xa8>
    4124:	81 81       	ldd	r24, Z+1	; 0x01
    4126:	88 23       	and	r24, r24
    4128:	89 f1       	breq	.+98     	; 0x418c <__fpcmp_parts_f+0xa2>
    412a:	2d c0       	rjmp	.+90     	; 0x4186 <__fpcmp_parts_f+0x9c>
    412c:	11 96       	adiw	r26, 0x01	; 1
    412e:	1c 91       	ld	r17, X
    4130:	11 97       	sbiw	r26, 0x01	; 1
    4132:	82 30       	cpi	r24, 0x02	; 2
    4134:	f1 f0       	breq	.+60     	; 0x4172 <__fpcmp_parts_f+0x88>
    4136:	81 81       	ldd	r24, Z+1	; 0x01
    4138:	18 17       	cp	r17, r24
    413a:	d9 f4       	brne	.+54     	; 0x4172 <__fpcmp_parts_f+0x88>
    413c:	12 96       	adiw	r26, 0x02	; 2
    413e:	2d 91       	ld	r18, X+
    4140:	3c 91       	ld	r19, X
    4142:	13 97       	sbiw	r26, 0x03	; 3
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	93 81       	ldd	r25, Z+3	; 0x03
    4148:	82 17       	cp	r24, r18
    414a:	93 07       	cpc	r25, r19
    414c:	94 f0       	brlt	.+36     	; 0x4172 <__fpcmp_parts_f+0x88>
    414e:	28 17       	cp	r18, r24
    4150:	39 07       	cpc	r19, r25
    4152:	bc f0       	brlt	.+46     	; 0x4182 <__fpcmp_parts_f+0x98>
    4154:	14 96       	adiw	r26, 0x04	; 4
    4156:	8d 91       	ld	r24, X+
    4158:	9d 91       	ld	r25, X+
    415a:	0d 90       	ld	r0, X+
    415c:	bc 91       	ld	r27, X
    415e:	a0 2d       	mov	r26, r0
    4160:	24 81       	ldd	r18, Z+4	; 0x04
    4162:	35 81       	ldd	r19, Z+5	; 0x05
    4164:	46 81       	ldd	r20, Z+6	; 0x06
    4166:	57 81       	ldd	r21, Z+7	; 0x07
    4168:	28 17       	cp	r18, r24
    416a:	39 07       	cpc	r19, r25
    416c:	4a 07       	cpc	r20, r26
    416e:	5b 07       	cpc	r21, r27
    4170:	18 f4       	brcc	.+6      	; 0x4178 <__fpcmp_parts_f+0x8e>
    4172:	11 23       	and	r17, r17
    4174:	41 f0       	breq	.+16     	; 0x4186 <__fpcmp_parts_f+0x9c>
    4176:	0a c0       	rjmp	.+20     	; 0x418c <__fpcmp_parts_f+0xa2>
    4178:	82 17       	cp	r24, r18
    417a:	93 07       	cpc	r25, r19
    417c:	a4 07       	cpc	r26, r20
    417e:	b5 07       	cpc	r27, r21
    4180:	40 f4       	brcc	.+16     	; 0x4192 <__fpcmp_parts_f+0xa8>
    4182:	11 23       	and	r17, r17
    4184:	19 f0       	breq	.+6      	; 0x418c <__fpcmp_parts_f+0xa2>
    4186:	61 e0       	ldi	r22, 0x01	; 1
    4188:	70 e0       	ldi	r23, 0x00	; 0
    418a:	05 c0       	rjmp	.+10     	; 0x4196 <__fpcmp_parts_f+0xac>
    418c:	6f ef       	ldi	r22, 0xFF	; 255
    418e:	7f ef       	ldi	r23, 0xFF	; 255
    4190:	02 c0       	rjmp	.+4      	; 0x4196 <__fpcmp_parts_f+0xac>
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	cb 01       	movw	r24, r22
    4198:	1f 91       	pop	r17
    419a:	08 95       	ret

0000419c <__mulsi3>:
    419c:	62 9f       	mul	r22, r18
    419e:	d0 01       	movw	r26, r0
    41a0:	73 9f       	mul	r23, r19
    41a2:	f0 01       	movw	r30, r0
    41a4:	82 9f       	mul	r24, r18
    41a6:	e0 0d       	add	r30, r0
    41a8:	f1 1d       	adc	r31, r1
    41aa:	64 9f       	mul	r22, r20
    41ac:	e0 0d       	add	r30, r0
    41ae:	f1 1d       	adc	r31, r1
    41b0:	92 9f       	mul	r25, r18
    41b2:	f0 0d       	add	r31, r0
    41b4:	83 9f       	mul	r24, r19
    41b6:	f0 0d       	add	r31, r0
    41b8:	74 9f       	mul	r23, r20
    41ba:	f0 0d       	add	r31, r0
    41bc:	65 9f       	mul	r22, r21
    41be:	f0 0d       	add	r31, r0
    41c0:	99 27       	eor	r25, r25
    41c2:	72 9f       	mul	r23, r18
    41c4:	b0 0d       	add	r27, r0
    41c6:	e1 1d       	adc	r30, r1
    41c8:	f9 1f       	adc	r31, r25
    41ca:	63 9f       	mul	r22, r19
    41cc:	b0 0d       	add	r27, r0
    41ce:	e1 1d       	adc	r30, r1
    41d0:	f9 1f       	adc	r31, r25
    41d2:	bd 01       	movw	r22, r26
    41d4:	cf 01       	movw	r24, r30
    41d6:	11 24       	eor	r1, r1
    41d8:	08 95       	ret

000041da <__prologue_saves__>:
    41da:	2f 92       	push	r2
    41dc:	3f 92       	push	r3
    41de:	4f 92       	push	r4
    41e0:	5f 92       	push	r5
    41e2:	6f 92       	push	r6
    41e4:	7f 92       	push	r7
    41e6:	8f 92       	push	r8
    41e8:	9f 92       	push	r9
    41ea:	af 92       	push	r10
    41ec:	bf 92       	push	r11
    41ee:	cf 92       	push	r12
    41f0:	df 92       	push	r13
    41f2:	ef 92       	push	r14
    41f4:	ff 92       	push	r15
    41f6:	0f 93       	push	r16
    41f8:	1f 93       	push	r17
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
    4202:	ca 1b       	sub	r28, r26
    4204:	db 0b       	sbc	r29, r27
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	19 94       	eijmp

00004212 <__epilogue_restores__>:
    4212:	2a 88       	ldd	r2, Y+18	; 0x12
    4214:	39 88       	ldd	r3, Y+17	; 0x11
    4216:	48 88       	ldd	r4, Y+16	; 0x10
    4218:	5f 84       	ldd	r5, Y+15	; 0x0f
    421a:	6e 84       	ldd	r6, Y+14	; 0x0e
    421c:	7d 84       	ldd	r7, Y+13	; 0x0d
    421e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4220:	9b 84       	ldd	r9, Y+11	; 0x0b
    4222:	aa 84       	ldd	r10, Y+10	; 0x0a
    4224:	b9 84       	ldd	r11, Y+9	; 0x09
    4226:	c8 84       	ldd	r12, Y+8	; 0x08
    4228:	df 80       	ldd	r13, Y+7	; 0x07
    422a:	ee 80       	ldd	r14, Y+6	; 0x06
    422c:	fd 80       	ldd	r15, Y+5	; 0x05
    422e:	0c 81       	ldd	r16, Y+4	; 0x04
    4230:	1b 81       	ldd	r17, Y+3	; 0x03
    4232:	aa 81       	ldd	r26, Y+2	; 0x02
    4234:	b9 81       	ldd	r27, Y+1	; 0x01
    4236:	ce 0f       	add	r28, r30
    4238:	d1 1d       	adc	r29, r1
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	ed 01       	movw	r28, r26
    4246:	08 95       	ret

00004248 <_exit>:
    4248:	f8 94       	cli

0000424a <__stop_program>:
    424a:	ff cf       	rjmp	.-2      	; 0x424a <__stop_program>
>>>>>>> Stashed changes
