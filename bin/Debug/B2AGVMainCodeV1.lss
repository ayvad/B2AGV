
bin\Debug\B2AGVMainCodeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00004240  000042f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004240  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800308  00800308  000043fc  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000043fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  000043ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000382  00000000  00000000  0000461f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033b5  00000000  00000000  000049a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018bb  00000000  00000000  00007d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d25  00000000  00000000  00009611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000c338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  0000c648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__vector_50>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e4       	ldi	r30, 0x40	; 64
      fc:	f2 e4       	ldi	r31, 0x42	; 66
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 31       	cpi	r26, 0x12	; 18
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ab 02 	call	0x556	; 0x556 <main>
     122:	0c 94 1e 21 	jmp	0x423c	; 0x423c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED>:

#define PINIRsensor1 PINJ
#define PINIRsensor2 PINJ

void LED(int Richting)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <LED+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
    switch (Richting)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	9c 83       	std	Y+4, r25	; 0x04
     140:	8b 83       	std	Y+3, r24	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	83 30       	cpi	r24, 0x03	; 3
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <LED+0x24>
     14c:	96 c0       	rjmp	.+300    	; 0x27a <LED+0x150>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	91 05       	cpc	r25, r1
     156:	64 f4       	brge	.+24     	; 0x170 <LED+0x46>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	d1 f0       	breq	.+52     	; 0x196 <LED+0x6c>
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	91 05       	cpc	r25, r1
     16a:	09 f4       	brne	.+2      	; 0x16e <LED+0x44>
     16c:	4d c0       	rjmp	.+154    	; 0x208 <LED+0xde>
     16e:	69 c1       	rjmp	.+722    	; 0x442 <LED+0x318>
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	85 30       	cpi	r24, 0x05	; 5
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <LED+0x52>
     17a:	f1 c0       	rjmp	.+482    	; 0x35e <LED+0x234>
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	85 30       	cpi	r24, 0x05	; 5
     182:	91 05       	cpc	r25, r1
     184:	0c f4       	brge	.+2      	; 0x188 <LED+0x5e>
     186:	b2 c0       	rjmp	.+356    	; 0x2ec <LED+0x1c2>
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	9c 81       	ldd	r25, Y+4	; 0x04
     18c:	86 30       	cpi	r24, 0x06	; 6
     18e:	91 05       	cpc	r25, r1
     190:	09 f4       	brne	.+2      	; 0x194 <LED+0x6a>
     192:	1e c1       	rjmp	.+572    	; 0x3d0 <LED+0x2a6>
     194:	56 c1       	rjmp	.+684    	; 0x442 <LED+0x318>
    {
    case 1 :            //Vooruit
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     196:	a2 e2       	ldi	r26, 0x22	; 34
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e2 e2       	ldi	r30, 0x22	; 34
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     1a4:	a2 e2       	ldi	r26, 0x22	; 34
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e2 e2       	ldi	r30, 0x22	; 34
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     1b2:	a2 e2       	ldi	r26, 0x22	; 34
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e2 e2       	ldi	r30, 0x22	; 34
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8b 7f       	andi	r24, 0xFB	; 251
     1be:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     1c0:	a2 e2       	ldi	r26, 0x22	; 34
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e2 e2       	ldi	r30, 0x22	; 34
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     1ce:	a2 e2       	ldi	r26, 0x22	; 34
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e2 e2       	ldi	r30, 0x22	; 34
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     1dc:	a2 e2       	ldi	r26, 0x22	; 34
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e2 e2       	ldi	r30, 0x22	; 34
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7d       	andi	r24, 0xDF	; 223
     1e8:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     1ea:	a2 e2       	ldi	r26, 0x22	; 34
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e2 e2       	ldi	r30, 0x22	; 34
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 7b       	andi	r24, 0xBF	; 191
     1f6:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     1f8:	a2 e2       	ldi	r26, 0x22	; 34
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e2 e2       	ldi	r30, 0x22	; 34
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	8c 93       	st	X, r24
     206:	55 c1       	rjmp	.+682    	; 0x4b2 <LED+0x388>
        break;
    case 2 :        //Achteruit
        PORTLEDRood |= (1 << PLEDRoodVoor);
     208:	a2 e2       	ldi	r26, 0x22	; 34
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e2 e2       	ldi	r30, 0x22	; 34
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     216:	a2 e2       	ldi	r26, 0x22	; 34
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e2 e2       	ldi	r30, 0x22	; 34
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8d 7f       	andi	r24, 0xFD	; 253
     222:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     224:	a2 e2       	ldi	r26, 0x22	; 34
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e2 e2       	ldi	r30, 0x22	; 34
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     240:	a2 e2       	ldi	r26, 0x22	; 34
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7e       	andi	r24, 0xEF	; 239
     24c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     24e:	a2 e2       	ldi	r26, 0x22	; 34
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e2 e2       	ldi	r30, 0x22	; 34
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 62       	ori	r24, 0x20	; 32
     25a:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     25c:	a2 e2       	ldi	r26, 0x22	; 34
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e2 e2       	ldi	r30, 0x22	; 34
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 7b       	andi	r24, 0xBF	; 191
     268:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     26a:	a2 e2       	ldi	r26, 0x22	; 34
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e2       	ldi	r30, 0x22	; 34
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	8c 93       	st	X, r24
     278:	1c c1       	rjmp	.+568    	; 0x4b2 <LED+0x388>
        break;
    case 3 :        //Rechts
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     27a:	a2 e2       	ldi	r26, 0x22	; 34
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e2 e2       	ldi	r30, 0x22	; 34
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8e 7f       	andi	r24, 0xFE	; 254
     286:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     288:	a2 e2       	ldi	r26, 0x22	; 34
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e2 e2       	ldi	r30, 0x22	; 34
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	8d 7f       	andi	r24, 0xFD	; 253
     294:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     296:	a2 e2       	ldi	r26, 0x22	; 34
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 e2       	ldi	r30, 0x22	; 34
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8b 7f       	andi	r24, 0xFB	; 251
     2a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     2a4:	a2 e2       	ldi	r26, 0x22	; 34
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e2 e2       	ldi	r30, 0x22	; 34
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     2b2:	a2 e2       	ldi	r26, 0x22	; 34
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e2 e2       	ldi	r30, 0x22	; 34
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     2c0:	a2 e2       	ldi	r26, 0x22	; 34
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e2 e2       	ldi	r30, 0x22	; 34
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e2       	ldi	r30, 0x22	; 34
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     2dc:	a2 e2       	ldi	r26, 0x22	; 34
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 77       	andi	r24, 0x7F	; 127
     2e8:	8c 93       	st	X, r24
     2ea:	e3 c0       	rjmp	.+454    	; 0x4b2 <LED+0x388>
        break;
    case 4 :        //Links
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     2ec:	a2 e2       	ldi	r26, 0x22	; 34
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e2 e2       	ldi	r30, 0x22	; 34
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     2fa:	a2 e2       	ldi	r26, 0x22	; 34
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e2 e2       	ldi	r30, 0x22	; 34
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     308:	a2 e2       	ldi	r26, 0x22	; 34
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	e2 e2       	ldi	r30, 0x22	; 34
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	84 60       	ori	r24, 0x04	; 4
     314:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e2 e2       	ldi	r30, 0x22	; 34
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     324:	a2 e2       	ldi	r26, 0x22	; 34
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e2 e2       	ldi	r30, 0x22	; 34
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7e       	andi	r24, 0xEF	; 239
     330:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     332:	a2 e2       	ldi	r26, 0x22	; 34
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e2 e2       	ldi	r30, 0x22	; 34
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7d       	andi	r24, 0xDF	; 223
     33e:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     340:	a2 e2       	ldi	r26, 0x22	; 34
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e2 e2       	ldi	r30, 0x22	; 34
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     34e:	a2 e2       	ldi	r26, 0x22	; 34
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e2 e2       	ldi	r30, 0x22	; 34
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	8c 93       	st	X, r24
     35c:	aa c0       	rjmp	.+340    	; 0x4b2 <LED+0x388>
        break;
    case 5 :        //Stop/stilstand
        PORTLEDRood |= (1 << PLEDRoodVoor);
     35e:	a2 e2       	ldi	r26, 0x22	; 34
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	e2 e2       	ldi	r30, 0x22	; 34
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     36c:	a2 e2       	ldi	r26, 0x22	; 34
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e2 e2       	ldi	r30, 0x22	; 34
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	82 60       	ori	r24, 0x02	; 2
     378:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     37a:	a2 e2       	ldi	r26, 0x22	; 34
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e2 e2       	ldi	r30, 0x22	; 34
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     388:	a2 e2       	ldi	r26, 0x22	; 34
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e2 e2       	ldi	r30, 0x22	; 34
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     396:	a2 e2       	ldi	r26, 0x22	; 34
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e2 e2       	ldi	r30, 0x22	; 34
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     3a4:	a2 e2       	ldi	r26, 0x22	; 34
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e2 e2       	ldi	r30, 0x22	; 34
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 7d       	andi	r24, 0xDF	; 223
     3b0:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     3b2:	a2 e2       	ldi	r26, 0x22	; 34
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7b       	andi	r24, 0xBF	; 191
     3be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     3c0:	a2 e2       	ldi	r26, 0x22	; 34
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e2 e2       	ldi	r30, 0x22	; 34
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	8c 93       	st	X, r24
     3ce:	71 c0       	rjmp	.+226    	; 0x4b2 <LED+0x388>
        break;
    case 6 :        //Stoppen voor detectieboom
        PORTLEDRood |= (1 << PLEDRoodVoor);
     3d0:	a2 e2       	ldi	r26, 0x22	; 34
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e2       	ldi	r30, 0x22	; 34
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     3de:	a2 e2       	ldi	r26, 0x22	; 34
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e2 e2       	ldi	r30, 0x22	; 34
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     3ec:	a2 e2       	ldi	r26, 0x22	; 34
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	e2 e2       	ldi	r30, 0x22	; 34
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	84 60       	ori	r24, 0x04	; 4
     3f8:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     3fa:	a2 e2       	ldi	r26, 0x22	; 34
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e2 e2       	ldi	r30, 0x22	; 34
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 60       	ori	r24, 0x08	; 8
     406:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     408:	a2 e2       	ldi	r26, 0x22	; 34
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e2 e2       	ldi	r30, 0x22	; 34
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     416:	a2 e2       	ldi	r26, 0x22	; 34
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e2 e2       	ldi	r30, 0x22	; 34
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     424:	a2 e2       	ldi	r26, 0x22	; 34
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e2 e2       	ldi	r30, 0x22	; 34
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     432:	a2 e2       	ldi	r26, 0x22	; 34
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e2 e2       	ldi	r30, 0x22	; 34
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8c 93       	st	X, r24
     440:	38 c0       	rjmp	.+112    	; 0x4b2 <LED+0x388>
        break;
    default :       //Alles uit
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     442:	a2 e2       	ldi	r26, 0x22	; 34
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e2 e2       	ldi	r30, 0x22	; 34
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     450:	a2 e2       	ldi	r26, 0x22	; 34
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e2 e2       	ldi	r30, 0x22	; 34
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     45e:	a2 e2       	ldi	r26, 0x22	; 34
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e2 e2       	ldi	r30, 0x22	; 34
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8b 7f       	andi	r24, 0xFB	; 251
     46a:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     46c:	a2 e2       	ldi	r26, 0x22	; 34
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e2 e2       	ldi	r30, 0x22	; 34
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     47a:	a2 e2       	ldi	r26, 0x22	; 34
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e2 e2       	ldi	r30, 0x22	; 34
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 7e       	andi	r24, 0xEF	; 239
     486:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     488:	a2 e2       	ldi	r26, 0x22	; 34
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e2 e2       	ldi	r30, 0x22	; 34
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     496:	a2 e2       	ldi	r26, 0x22	; 34
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e2 e2       	ldi	r30, 0x22	; 34
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     4a4:	a2 e2       	ldi	r26, 0x22	; 34
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e2 e2       	ldi	r30, 0x22	; 34
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	8c 93       	st	X, r24
    }
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <init>:


void init(void)
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
    //Data direction register:
    DDRLEDRood |= (1 << PLEDRoodVoor);
     4c8:	a1 e2       	ldi	r26, 0x21	; 33
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
     4cc:	e1 e2       	ldi	r30, 0x21	; 33
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodAchter);
     4d6:	a1 e2       	ldi	r26, 0x21	; 33
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e1 e2       	ldi	r30, 0x21	; 33
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodRechts);
     4e4:	a1 e2       	ldi	r26, 0x21	; 33
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	e1 e2       	ldi	r30, 0x21	; 33
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	84 60       	ori	r24, 0x04	; 4
     4f0:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodLinks);
     4f2:	a1 e2       	ldi	r26, 0x21	; 33
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e1 e2       	ldi	r30, 0x21	; 33
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	88 60       	ori	r24, 0x08	; 8
     4fe:	8c 93       	st	X, r24

    DDRLEDGeel |= (1 << PLEDGeelVoor);
     500:	a1 e2       	ldi	r26, 0x21	; 33
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e1 e2       	ldi	r30, 0x21	; 33
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	80 61       	ori	r24, 0x10	; 16
     50c:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelAchter);
     50e:	a1 e2       	ldi	r26, 0x21	; 33
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	e1 e2       	ldi	r30, 0x21	; 33
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelRechts);
     51c:	a1 e2       	ldi	r26, 0x21	; 33
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e1 e2       	ldi	r30, 0x21	; 33
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	80 64       	ori	r24, 0x40	; 64
     528:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelLinks);
     52a:	a1 e2       	ldi	r26, 0x21	; 33
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	e1 e2       	ldi	r30, 0x21	; 33
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	80 68       	ori	r24, 0x80	; 128
     536:	8c 93       	st	X, r24

    DDRLEDRood |= (1 << PLEDNoodstop);
     538:	a1 e2       	ldi	r26, 0x21	; 33
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e1 e2       	ldi	r30, 0x21	; 33
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 61       	ori	r24, 0x10	; 16
     544:	8c 93       	st	X, r24

    //init for other files
    init_steppermotor();
     546:	0e 94 72 05 	call	0xae4	; 0xae4 <init_steppermotor>
    init_ultrasoon();
     54a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <init_ultrasoon>
    sei();      //enabling global interupts
     54e:	78 94       	sei
}
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	08 95       	ret

00000556 <main>:

int main(void)
{
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	cb 54       	subi	r28, 0x4B	; 75
     564:	d0 40       	sbci	r29, 0x00	; 0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
    //int Steps = 512;//512 is een rondje.
    init();
     570:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>
    LED(1);
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     57c:	fe 01       	movw	r30, r28
     57e:	ed 5b       	subi	r30, 0xBD	; 189
     580:	ff 4f       	sbci	r31, 0xFF	; 255
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	aa ef       	ldi	r26, 0xFA	; 250
     588:	b4 e4       	ldi	r27, 0x44	; 68
     58a:	80 83       	st	Z, r24
     58c:	91 83       	std	Z+1, r25	; 0x01
     58e:	a2 83       	std	Z+2, r26	; 0x02
     590:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     592:	8e 01       	movw	r16, r28
     594:	01 5c       	subi	r16, 0xC1	; 193
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	fe 01       	movw	r30, r28
     59a:	ed 5b       	subi	r30, 0xBD	; 189
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	60 81       	ld	r22, Z
     5a0:	71 81       	ldd	r23, Z+1	; 0x01
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	4a e7       	ldi	r20, 0x7A	; 122
     5ac:	55 e4       	ldi	r21, 0x45	; 69
     5ae:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     5b2:	dc 01       	movw	r26, r24
     5b4:	cb 01       	movw	r24, r22
     5b6:	f8 01       	movw	r30, r16
     5b8:	80 83       	st	Z, r24
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	a2 83       	std	Z+2, r26	; 0x02
     5be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5c0:	fe 01       	movw	r30, r28
     5c2:	ff 96       	adiw	r30, 0x3f	; 63
     5c4:	60 81       	ld	r22, Z
     5c6:	71 81       	ldd	r23, Z+1	; 0x01
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	93 81       	ldd	r25, Z+3	; 0x03
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     5d8:	88 23       	and	r24, r24
     5da:	2c f4       	brge	.+10     	; 0x5e6 <main+0x90>
		__ticks = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	9e af       	std	Y+62, r25	; 0x3e
     5e2:	8d af       	std	Y+61, r24	; 0x3d
     5e4:	46 c0       	rjmp	.+140    	; 0x672 <main+0x11c>
	else if (__tmp > 65535)
     5e6:	fe 01       	movw	r30, r28
     5e8:	ff 96       	adiw	r30, 0x3f	; 63
     5ea:	60 81       	ld	r22, Z
     5ec:	71 81       	ldd	r23, Z+1	; 0x01
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	93 81       	ldd	r25, Z+3	; 0x03
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	3f ef       	ldi	r19, 0xFF	; 255
     5f6:	4f e7       	ldi	r20, 0x7F	; 127
     5f8:	57 e4       	ldi	r21, 0x47	; 71
     5fa:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     5fe:	18 16       	cp	r1, r24
     600:	64 f5       	brge	.+88     	; 0x65a <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     602:	fe 01       	movw	r30, r28
     604:	ed 5b       	subi	r30, 0xBD	; 189
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	60 81       	ld	r22, Z
     60a:	71 81       	ldd	r23, Z+1	; 0x01
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 e2       	ldi	r20, 0x20	; 32
     616:	51 e4       	ldi	r21, 0x41	; 65
     618:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	9e af       	std	Y+62, r25	; 0x3e
     62e:	8d af       	std	Y+61, r24	; 0x3d
     630:	0f c0       	rjmp	.+30     	; 0x650 <main+0xfa>
     632:	80 e9       	ldi	r24, 0x90	; 144
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	9c af       	std	Y+60, r25	; 0x3c
     638:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     63a:	8b ad       	ldd	r24, Y+59	; 0x3b
     63c:	9c ad       	ldd	r25, Y+60	; 0x3c
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <main+0xe8>
     642:	9c af       	std	Y+60, r25	; 0x3c
     644:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     646:	8d ad       	ldd	r24, Y+61	; 0x3d
     648:	9e ad       	ldd	r25, Y+62	; 0x3e
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     650:	8d ad       	ldd	r24, Y+61	; 0x3d
     652:	9e ad       	ldd	r25, Y+62	; 0x3e
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	69 f7       	brne	.-38     	; 0x632 <main+0xdc>
     658:	16 c0       	rjmp	.+44     	; 0x686 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     65a:	fe 01       	movw	r30, r28
     65c:	ff 96       	adiw	r30, 0x3f	; 63
     65e:	60 81       	ld	r22, Z
     660:	71 81       	ldd	r23, Z+1	; 0x01
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	93 81       	ldd	r25, Z+3	; 0x03
     666:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	9e af       	std	Y+62, r25	; 0x3e
     670:	8d af       	std	Y+61, r24	; 0x3d
     672:	8d ad       	ldd	r24, Y+61	; 0x3d
     674:	9e ad       	ldd	r25, Y+62	; 0x3e
     676:	9a af       	std	Y+58, r25	; 0x3a
     678:	89 af       	std	Y+57, r24	; 0x39
     67a:	89 ad       	ldd	r24, Y+57	; 0x39
     67c:	9a ad       	ldd	r25, Y+58	; 0x3a
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <main+0x128>
     682:	9a af       	std	Y+58, r25	; 0x3a
     684:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2000);
    LED(3);
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	aa ef       	ldi	r26, 0xFA	; 250
     694:	b4 e4       	ldi	r27, 0x44	; 68
     696:	8d ab       	std	Y+53, r24	; 0x35
     698:	9e ab       	std	Y+54, r25	; 0x36
     69a:	af ab       	std	Y+55, r26	; 0x37
     69c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     69e:	6d a9       	ldd	r22, Y+53	; 0x35
     6a0:	7e a9       	ldd	r23, Y+54	; 0x36
     6a2:	8f a9       	ldd	r24, Y+55	; 0x37
     6a4:	98 ad       	ldd	r25, Y+56	; 0x38
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	4a e7       	ldi	r20, 0x7A	; 122
     6ac:	55 e4       	ldi	r21, 0x45	; 69
     6ae:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	89 ab       	std	Y+49, r24	; 0x31
     6b8:	9a ab       	std	Y+50, r25	; 0x32
     6ba:	ab ab       	std	Y+51, r26	; 0x33
     6bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     6be:	69 a9       	ldd	r22, Y+49	; 0x31
     6c0:	7a a9       	ldd	r23, Y+50	; 0x32
     6c2:	8b a9       	ldd	r24, Y+51	; 0x33
     6c4:	9c a9       	ldd	r25, Y+52	; 0x34
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5f e3       	ldi	r21, 0x3F	; 63
     6ce:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     6d2:	88 23       	and	r24, r24
     6d4:	2c f4       	brge	.+10     	; 0x6e0 <main+0x18a>
		__ticks = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	98 ab       	std	Y+48, r25	; 0x30
     6dc:	8f a7       	std	Y+47, r24	; 0x2f
     6de:	3f c0       	rjmp	.+126    	; 0x75e <main+0x208>
	else if (__tmp > 65535)
     6e0:	69 a9       	ldd	r22, Y+49	; 0x31
     6e2:	7a a9       	ldd	r23, Y+50	; 0x32
     6e4:	8b a9       	ldd	r24, Y+51	; 0x33
     6e6:	9c a9       	ldd	r25, Y+52	; 0x34
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	3f ef       	ldi	r19, 0xFF	; 255
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	57 e4       	ldi	r21, 0x47	; 71
     6f0:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	4c f5       	brge	.+82     	; 0x74a <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f8:	6d a9       	ldd	r22, Y+53	; 0x35
     6fa:	7e a9       	ldd	r23, Y+54	; 0x36
     6fc:	8f a9       	ldd	r24, Y+55	; 0x37
     6fe:	98 ad       	ldd	r25, Y+56	; 0x38
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e2       	ldi	r20, 0x20	; 32
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	bc 01       	movw	r22, r24
     712:	cd 01       	movw	r24, r26
     714:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	98 ab       	std	Y+48, r25	; 0x30
     71e:	8f a7       	std	Y+47, r24	; 0x2f
     720:	0f c0       	rjmp	.+30     	; 0x740 <main+0x1ea>
     722:	80 e9       	ldi	r24, 0x90	; 144
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9e a7       	std	Y+46, r25	; 0x2e
     728:	8d a7       	std	Y+45, r24	; 0x2d
     72a:	8d a5       	ldd	r24, Y+45	; 0x2d
     72c:	9e a5       	ldd	r25, Y+46	; 0x2e
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <main+0x1d8>
     732:	9e a7       	std	Y+46, r25	; 0x2e
     734:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     736:	8f a5       	ldd	r24, Y+47	; 0x2f
     738:	98 a9       	ldd	r25, Y+48	; 0x30
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	98 ab       	std	Y+48, r25	; 0x30
     73e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     740:	8f a5       	ldd	r24, Y+47	; 0x2f
     742:	98 a9       	ldd	r25, Y+48	; 0x30
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	69 f7       	brne	.-38     	; 0x722 <main+0x1cc>
     748:	14 c0       	rjmp	.+40     	; 0x772 <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     74a:	69 a9       	ldd	r22, Y+49	; 0x31
     74c:	7a a9       	ldd	r23, Y+50	; 0x32
     74e:	8b a9       	ldd	r24, Y+51	; 0x33
     750:	9c a9       	ldd	r25, Y+52	; 0x34
     752:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	98 ab       	std	Y+48, r25	; 0x30
     75c:	8f a7       	std	Y+47, r24	; 0x2f
     75e:	8f a5       	ldd	r24, Y+47	; 0x2f
     760:	98 a9       	ldd	r25, Y+48	; 0x30
     762:	9c a7       	std	Y+44, r25	; 0x2c
     764:	8b a7       	std	Y+43, r24	; 0x2b
     766:	8b a5       	ldd	r24, Y+43	; 0x2b
     768:	9c a5       	ldd	r25, Y+44	; 0x2c
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <main+0x214>
     76e:	9c a7       	std	Y+44, r25	; 0x2c
     770:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2000);
    LED(2);
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	aa ef       	ldi	r26, 0xFA	; 250
     780:	b4 e4       	ldi	r27, 0x44	; 68
     782:	8f a3       	std	Y+39, r24	; 0x27
     784:	98 a7       	std	Y+40, r25	; 0x28
     786:	a9 a7       	std	Y+41, r26	; 0x29
     788:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     78a:	6f a1       	ldd	r22, Y+39	; 0x27
     78c:	78 a5       	ldd	r23, Y+40	; 0x28
     78e:	89 a5       	ldd	r24, Y+41	; 0x29
     790:	9a a5       	ldd	r25, Y+42	; 0x2a
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4a e7       	ldi	r20, 0x7A	; 122
     798:	55 e4       	ldi	r21, 0x45	; 69
     79a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	8b a3       	std	Y+35, r24	; 0x23
     7a4:	9c a3       	std	Y+36, r25	; 0x24
     7a6:	ad a3       	std	Y+37, r26	; 0x25
     7a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     7aa:	6b a1       	ldd	r22, Y+35	; 0x23
     7ac:	7c a1       	ldd	r23, Y+36	; 0x24
     7ae:	8d a1       	ldd	r24, Y+37	; 0x25
     7b0:	9e a1       	ldd	r25, Y+38	; 0x26
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	5f e3       	ldi	r21, 0x3F	; 63
     7ba:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     7be:	88 23       	and	r24, r24
     7c0:	2c f4       	brge	.+10     	; 0x7cc <main+0x276>
		__ticks = 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	9a a3       	std	Y+34, r25	; 0x22
     7c8:	89 a3       	std	Y+33, r24	; 0x21
     7ca:	3f c0       	rjmp	.+126    	; 0x84a <main+0x2f4>
	else if (__tmp > 65535)
     7cc:	6b a1       	ldd	r22, Y+35	; 0x23
     7ce:	7c a1       	ldd	r23, Y+36	; 0x24
     7d0:	8d a1       	ldd	r24, Y+37	; 0x25
     7d2:	9e a1       	ldd	r25, Y+38	; 0x26
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	3f ef       	ldi	r19, 0xFF	; 255
     7d8:	4f e7       	ldi	r20, 0x7F	; 127
     7da:	57 e4       	ldi	r21, 0x47	; 71
     7dc:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     7e0:	18 16       	cp	r1, r24
     7e2:	4c f5       	brge	.+82     	; 0x836 <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7e4:	6f a1       	ldd	r22, Y+39	; 0x27
     7e6:	78 a5       	ldd	r23, Y+40	; 0x28
     7e8:	89 a5       	ldd	r24, Y+41	; 0x29
     7ea:	9a a5       	ldd	r25, Y+42	; 0x2a
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e2       	ldi	r20, 0x20	; 32
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	bc 01       	movw	r22, r24
     7fe:	cd 01       	movw	r24, r26
     800:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	9a a3       	std	Y+34, r25	; 0x22
     80a:	89 a3       	std	Y+33, r24	; 0x21
     80c:	0f c0       	rjmp	.+30     	; 0x82c <main+0x2d6>
     80e:	80 e9       	ldi	r24, 0x90	; 144
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	98 a3       	std	Y+32, r25	; 0x20
     814:	8f 8f       	std	Y+31, r24	; 0x1f
     816:	8f 8d       	ldd	r24, Y+31	; 0x1f
     818:	98 a1       	ldd	r25, Y+32	; 0x20
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <main+0x2c4>
     81e:	98 a3       	std	Y+32, r25	; 0x20
     820:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     822:	89 a1       	ldd	r24, Y+33	; 0x21
     824:	9a a1       	ldd	r25, Y+34	; 0x22
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	9a a3       	std	Y+34, r25	; 0x22
     82a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     82c:	89 a1       	ldd	r24, Y+33	; 0x21
     82e:	9a a1       	ldd	r25, Y+34	; 0x22
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	69 f7       	brne	.-38     	; 0x80e <main+0x2b8>
     834:	14 c0       	rjmp	.+40     	; 0x85e <main+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     836:	6b a1       	ldd	r22, Y+35	; 0x23
     838:	7c a1       	ldd	r23, Y+36	; 0x24
     83a:	8d a1       	ldd	r24, Y+37	; 0x25
     83c:	9e a1       	ldd	r25, Y+38	; 0x26
     83e:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	9a a3       	std	Y+34, r25	; 0x22
     848:	89 a3       	std	Y+33, r24	; 0x21
     84a:	89 a1       	ldd	r24, Y+33	; 0x21
     84c:	9a a1       	ldd	r25, Y+34	; 0x22
     84e:	9e 8f       	std	Y+30, r25	; 0x1e
     850:	8d 8f       	std	Y+29, r24	; 0x1d
     852:	8d 8d       	ldd	r24, Y+29	; 0x1d
     854:	9e 8d       	ldd	r25, Y+30	; 0x1e
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <main+0x300>
     85a:	9e 8f       	std	Y+30, r25	; 0x1e
     85c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2000);
    LED(4);
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	aa ef       	ldi	r26, 0xFA	; 250
     86c:	b4 e4       	ldi	r27, 0x44	; 68
     86e:	89 8f       	std	Y+25, r24	; 0x19
     870:	9a 8f       	std	Y+26, r25	; 0x1a
     872:	ab 8f       	std	Y+27, r26	; 0x1b
     874:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     876:	69 8d       	ldd	r22, Y+25	; 0x19
     878:	7a 8d       	ldd	r23, Y+26	; 0x1a
     87a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     87c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	4a e7       	ldi	r20, 0x7A	; 122
     884:	55 e4       	ldi	r21, 0x45	; 69
     886:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	8d 8b       	std	Y+21, r24	; 0x15
     890:	9e 8b       	std	Y+22, r25	; 0x16
     892:	af 8b       	std	Y+23, r26	; 0x17
     894:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     896:	6d 89       	ldd	r22, Y+21	; 0x15
     898:	7e 89       	ldd	r23, Y+22	; 0x16
     89a:	8f 89       	ldd	r24, Y+23	; 0x17
     89c:	98 8d       	ldd	r25, Y+24	; 0x18
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	40 e8       	ldi	r20, 0x80	; 128
     8a4:	5f e3       	ldi	r21, 0x3F	; 63
     8a6:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     8aa:	88 23       	and	r24, r24
     8ac:	2c f4       	brge	.+10     	; 0x8b8 <main+0x362>
		__ticks = 1;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	9c 8b       	std	Y+20, r25	; 0x14
     8b4:	8b 8b       	std	Y+19, r24	; 0x13
     8b6:	3f c0       	rjmp	.+126    	; 0x936 <main+0x3e0>
	else if (__tmp > 65535)
     8b8:	6d 89       	ldd	r22, Y+21	; 0x15
     8ba:	7e 89       	ldd	r23, Y+22	; 0x16
     8bc:	8f 89       	ldd	r24, Y+23	; 0x17
     8be:	98 8d       	ldd	r25, Y+24	; 0x18
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	3f ef       	ldi	r19, 0xFF	; 255
     8c4:	4f e7       	ldi	r20, 0x7F	; 127
     8c6:	57 e4       	ldi	r21, 0x47	; 71
     8c8:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	4c f5       	brge	.+82     	; 0x922 <main+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d0:	69 8d       	ldd	r22, Y+25	; 0x19
     8d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e2       	ldi	r20, 0x20	; 32
     8de:	51 e4       	ldi	r21, 0x41	; 65
     8e0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	bc 01       	movw	r22, r24
     8ea:	cd 01       	movw	r24, r26
     8ec:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	9c 8b       	std	Y+20, r25	; 0x14
     8f6:	8b 8b       	std	Y+19, r24	; 0x13
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <main+0x3c2>
     8fa:	80 e9       	ldi	r24, 0x90	; 144
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9a 8b       	std	Y+18, r25	; 0x12
     900:	89 8b       	std	Y+17, r24	; 0x11
     902:	89 89       	ldd	r24, Y+17	; 0x11
     904:	9a 89       	ldd	r25, Y+18	; 0x12
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <main+0x3b0>
     90a:	9a 8b       	std	Y+18, r25	; 0x12
     90c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90e:	8b 89       	ldd	r24, Y+19	; 0x13
     910:	9c 89       	ldd	r25, Y+20	; 0x14
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	9c 8b       	std	Y+20, r25	; 0x14
     916:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     918:	8b 89       	ldd	r24, Y+19	; 0x13
     91a:	9c 89       	ldd	r25, Y+20	; 0x14
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	69 f7       	brne	.-38     	; 0x8fa <main+0x3a4>
     920:	14 c0       	rjmp	.+40     	; 0x94a <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     922:	6d 89       	ldd	r22, Y+21	; 0x15
     924:	7e 89       	ldd	r23, Y+22	; 0x16
     926:	8f 89       	ldd	r24, Y+23	; 0x17
     928:	98 8d       	ldd	r25, Y+24	; 0x18
     92a:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	9c 8b       	std	Y+20, r25	; 0x14
     934:	8b 8b       	std	Y+19, r24	; 0x13
     936:	8b 89       	ldd	r24, Y+19	; 0x13
     938:	9c 89       	ldd	r25, Y+20	; 0x14
     93a:	98 8b       	std	Y+16, r25	; 0x10
     93c:	8f 87       	std	Y+15, r24	; 0x0f
     93e:	8f 85       	ldd	r24, Y+15	; 0x0f
     940:	98 89       	ldd	r25, Y+16	; 0x10
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <main+0x3ec>
     946:	98 8b       	std	Y+16, r25	; 0x10
     948:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2000);
    while(1)
    {
        double distanceUS1 = distance(ultra_1_trigger);
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <distance>
     952:	8e 01       	movw	r16, r28
     954:	09 5b       	subi	r16, 0xB9	; 185
     956:	1f 4f       	sbci	r17, 0xFF	; 255
     958:	aa 27       	eor	r26, r26
     95a:	97 fd       	sbrc	r25, 7
     95c:	a0 95       	com	r26
     95e:	ba 2f       	mov	r27, r26
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__floatsisf>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	f8 01       	movw	r30, r16
     96e:	80 83       	st	Z, r24
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	a2 83       	std	Z+2, r26	; 0x02
     974:	b3 83       	std	Z+3, r27	; 0x03
 //    double distanceUS2 = distance(ultra_2_trigger);
        LED(5);
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     97e:	1e c0       	rjmp	.+60     	; 0x9bc <main+0x466>
        while((distanceUS1 < distanceToTree)==0)
        {
            Vooruit(100);
     980:	84 e6       	ldi	r24, 0x64	; 100
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <Vooruit>
            LED(1);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
            distanceUS1 = distance(ultra_1_trigger);
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <distance>
     998:	8e 01       	movw	r16, r28
     99a:	09 5b       	subi	r16, 0xB9	; 185
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	aa 27       	eor	r26, r26
     9a0:	97 fd       	sbrc	r25, 7
     9a2:	a0 95       	com	r26
     9a4:	ba 2f       	mov	r27, r26
     9a6:	bc 01       	movw	r22, r24
     9a8:	cd 01       	movw	r24, r26
     9aa:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__floatsisf>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	f8 01       	movw	r30, r16
     9b4:	80 83       	st	Z, r24
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	a2 83       	std	Z+2, r26	; 0x02
     9ba:	b3 83       	std	Z+3, r27	; 0x03
    while(1)
    {
        double distanceUS1 = distance(ultra_1_trigger);
 //    double distanceUS2 = distance(ultra_2_trigger);
        LED(5);
        while((distanceUS1 < distanceToTree)==0)
     9bc:	2c 96       	adiw	r28, 0x0c	; 12
     9be:	1f ae       	std	Y+63, r1	; 0x3f
     9c0:	2c 97       	sbiw	r28, 0x0c	; 12
     9c2:	fe 01       	movw	r30, r28
     9c4:	e9 5b       	subi	r30, 0xB9	; 185
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	60 81       	ld	r22, Z
     9ca:	71 81       	ldd	r23, Z+1	; 0x01
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 ea       	ldi	r20, 0xA0	; 160
     9d6:	51 e4       	ldi	r21, 0x41	; 65
     9d8:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     9dc:	88 23       	and	r24, r24
     9de:	24 f4       	brge	.+8      	; 0x9e8 <main+0x492>
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
     9e2:	2c 96       	adiw	r28, 0x0c	; 12
     9e4:	ff af       	std	Y+63, r31	; 0x3f
     9e6:	2c 97       	sbiw	r28, 0x0c	; 12
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	2c 96       	adiw	r28, 0x0c	; 12
     9ec:	9f ad       	ldd	r25, Y+63	; 0x3f
     9ee:	2c 97       	sbiw	r28, 0x0c	; 12
     9f0:	89 27       	eor	r24, r25
     9f2:	88 23       	and	r24, r24
     9f4:	29 f6       	brne	.-118    	; 0x980 <main+0x42a>
            Vooruit(100);
            LED(1);
            distanceUS1 = distance(ultra_1_trigger);
            //  distanceUS2 = distance(ultra_2_trigger);
        }
        LED(6);
     9f6:	86 e0       	ldi	r24, 0x06	; 6
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	aa e7       	ldi	r26, 0x7A	; 122
     a04:	b4 e4       	ldi	r27, 0x44	; 68
     a06:	8b 87       	std	Y+11, r24	; 0x0b
     a08:	9c 87       	std	Y+12, r25	; 0x0c
     a0a:	ad 87       	std	Y+13, r26	; 0x0d
     a0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a10:	7c 85       	ldd	r23, Y+12	; 0x0c
     a12:	8d 85       	ldd	r24, Y+13	; 0x0d
     a14:	9e 85       	ldd	r25, Y+14	; 0x0e
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	4a e7       	ldi	r20, 0x7A	; 122
     a1c:	55 e4       	ldi	r21, 0x45	; 69
     a1e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	8f 83       	std	Y+7, r24	; 0x07
     a28:	98 87       	std	Y+8, r25	; 0x08
     a2a:	a9 87       	std	Y+9, r26	; 0x09
     a2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a2e:	6f 81       	ldd	r22, Y+7	; 0x07
     a30:	78 85       	ldd	r23, Y+8	; 0x08
     a32:	89 85       	ldd	r24, Y+9	; 0x09
     a34:	9a 85       	ldd	r25, Y+10	; 0x0a
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e8       	ldi	r20, 0x80	; 128
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     a42:	88 23       	and	r24, r24
     a44:	2c f4       	brge	.+10     	; 0xa50 <main+0x4fa>
		__ticks = 1;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	9e 83       	std	Y+6, r25	; 0x06
     a4c:	8d 83       	std	Y+5, r24	; 0x05
     a4e:	3f c0       	rjmp	.+126    	; 0xace <main+0x578>
	else if (__tmp > 65535)
     a50:	6f 81       	ldd	r22, Y+7	; 0x07
     a52:	78 85       	ldd	r23, Y+8	; 0x08
     a54:	89 85       	ldd	r24, Y+9	; 0x09
     a56:	9a 85       	ldd	r25, Y+10	; 0x0a
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	3f ef       	ldi	r19, 0xFF	; 255
     a5c:	4f e7       	ldi	r20, 0x7F	; 127
     a5e:	57 e4       	ldi	r21, 0x47	; 71
     a60:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     a64:	18 16       	cp	r1, r24
     a66:	4c f5       	brge	.+82     	; 0xaba <main+0x564>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a68:	6b 85       	ldd	r22, Y+11	; 0x0b
     a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e2       	ldi	r20, 0x20	; 32
     a76:	51 e4       	ldi	r21, 0x41	; 65
     a78:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	9e 83       	std	Y+6, r25	; 0x06
     a8e:	8d 83       	std	Y+5, r24	; 0x05
     a90:	0f c0       	rjmp	.+30     	; 0xab0 <main+0x55a>
     a92:	80 e9       	ldi	r24, 0x90	; 144
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	9c 83       	std	Y+4, r25	; 0x04
     a98:	8b 83       	std	Y+3, r24	; 0x03
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	9c 81       	ldd	r25, Y+4	; 0x04
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <main+0x548>
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	9e 81       	ldd	r25, Y+6	; 0x06
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ab0:	8d 81       	ldd	r24, Y+5	; 0x05
     ab2:	9e 81       	ldd	r25, Y+6	; 0x06
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	69 f7       	brne	.-38     	; 0xa92 <main+0x53c>
     ab8:	48 cf       	rjmp	.-368    	; 0x94a <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aba:	6f 81       	ldd	r22, Y+7	; 0x07
     abc:	78 85       	ldd	r23, Y+8	; 0x08
     abe:	89 85       	ldd	r24, Y+9	; 0x09
     ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac2:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	9e 83       	std	Y+6, r25	; 0x06
     acc:	8d 83       	std	Y+5, r24	; 0x05
     ace:	8d 81       	ldd	r24, Y+5	; 0x05
     ad0:	9e 81       	ldd	r25, Y+6	; 0x06
     ad2:	9a 83       	std	Y+2, r25	; 0x02
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <main+0x584>
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	33 cf       	rjmp	.-410    	; 0x94a <main+0x3f4>

00000ae4 <init_steppermotor>:
#include <avr/io.h>
#include <util/delay.h>
#include "steppermotor.h"

void init_steppermotor(void)
{
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
    DDRStepper1 |= (1 << PStepper1_1); // PIN 30
     aec:	a7 e2       	ldi	r26, 0x27	; 39
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e7 e2       	ldi	r30, 0x27	; 39
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	80 68       	ori	r24, 0x80	; 128
     af8:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_2); // PIN 32
     afa:	a7 e2       	ldi	r26, 0x27	; 39
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e7 e2       	ldi	r30, 0x27	; 39
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	80 62       	ori	r24, 0x20	; 32
     b06:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_3); // PIN 34
     b08:	a7 e2       	ldi	r26, 0x27	; 39
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e7 e2       	ldi	r30, 0x27	; 39
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_4); // PIN 36
     b16:	a7 e2       	ldi	r26, 0x27	; 39
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e7 e2       	ldi	r30, 0x27	; 39
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	8c 93       	st	X, r24

    DDRStepper2 |= (1 << PStepper2_1); // PIN 31
     b24:	a7 e2       	ldi	r26, 0x27	; 39
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e7 e2       	ldi	r30, 0x27	; 39
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	80 64       	ori	r24, 0x40	; 64
     b30:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_2); // PIN 33
     b32:	a7 e2       	ldi	r26, 0x27	; 39
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e7 e2       	ldi	r30, 0x27	; 39
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_3); // PIN 35
     b40:	a7 e2       	ldi	r26, 0x27	; 39
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e7 e2       	ldi	r30, 0x27	; 39
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	84 60       	ori	r24, 0x04	; 4
     b4c:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_4); // PIN 37
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 42
     b5c:	aa e0       	ldi	r26, 0x0A	; 10
     b5e:	b1 e0       	ldi	r27, 0x01	; 1
     b60:	ea e0       	ldi	r30, 0x0A	; 10
     b62:	f1 e0       	ldi	r31, 0x01	; 1
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 44
     b6a:	aa e0       	ldi	r26, 0x0A	; 10
     b6c:	b1 e0       	ldi	r27, 0x01	; 1
     b6e:	ea e0       	ldi	r30, 0x0A	; 10
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 46
     b78:	aa e0       	ldi	r26, 0x0A	; 10
     b7a:	b1 e0       	ldi	r27, 0x01	; 1
     b7c:	ea e0       	ldi	r30, 0x0A	; 10
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 48
     b86:	aa e0       	ldi	r26, 0x0A	; 10
     b88:	b1 e0       	ldi	r27, 0x01	; 1
     b8a:	ea e0       	ldi	r30, 0x0A	; 10
     b8c:	f1 e0       	ldi	r31, 0x01	; 1
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 43
     b94:	aa e0       	ldi	r26, 0x0A	; 10
     b96:	b1 e0       	ldi	r27, 0x01	; 1
     b98:	ea e0       	ldi	r30, 0x0A	; 10
     b9a:	f1 e0       	ldi	r31, 0x01	; 1
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 45
     ba2:	aa e0       	ldi	r26, 0x0A	; 10
     ba4:	b1 e0       	ldi	r27, 0x01	; 1
     ba6:	ea e0       	ldi	r30, 0x0A	; 10
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	80 81       	ld	r24, Z
     bac:	80 62       	ori	r24, 0x20	; 32
     bae:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 47
     bb0:	aa e0       	ldi	r26, 0x0A	; 10
     bb2:	b1 e0       	ldi	r27, 0x01	; 1
     bb4:	ea e0       	ldi	r30, 0x0A	; 10
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
     bbe:	aa e0       	ldi	r26, 0x0A	; 10
     bc0:	b1 e0       	ldi	r27, 0x01	; 1
     bc2:	ea e0       	ldi	r30, 0x0A	; 10
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	80 81       	ld	r24, Z
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	8c 93       	st	X, r24
}
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <steppermotor1Write>:

void steppermotor1Write(int a)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	ea 97       	sbiw	r28, 0x3a	; 58
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	9e ab       	std	Y+54, r25	; 0x36
     be8:	8d ab       	std	Y+53, r24	; 0x35
     bea:	f1 c1       	rjmp	.+994    	; 0xfce <steppermotor1Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9c ab       	std	Y+52, r25	; 0x34
     bf2:	8b ab       	std	Y+51, r24	; 0x33
     bf4:	e4 c1       	rjmp	.+968    	; 0xfbe <steppermotor1Write+0x3ec>
        {
            switch (i)
     bf6:	8b a9       	ldd	r24, Y+51	; 0x33
     bf8:	9c a9       	ldd	r25, Y+52	; 0x34
     bfa:	98 af       	std	Y+56, r25	; 0x38
     bfc:	8f ab       	std	Y+55, r24	; 0x37
     bfe:	8f a9       	ldd	r24, Y+55	; 0x37
     c00:	98 ad       	ldd	r25, Y+56	; 0x38
     c02:	84 30       	cpi	r24, 0x04	; 4
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <steppermotor1Write+0x38>
     c08:	87 c0       	rjmp	.+270    	; 0xd18 <steppermotor1Write+0x146>
     c0a:	8f a9       	ldd	r24, Y+55	; 0x37
     c0c:	98 ad       	ldd	r25, Y+56	; 0x38
     c0e:	85 30       	cpi	r24, 0x05	; 5
     c10:	91 05       	cpc	r25, r1
     c12:	94 f4       	brge	.+36     	; 0xc38 <steppermotor1Write+0x66>
     c14:	8f a9       	ldd	r24, Y+55	; 0x37
     c16:	98 ad       	ldd	r25, Y+56	; 0x38
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <steppermotor1Write+0x4e>
     c1e:	42 c0       	rjmp	.+132    	; 0xca4 <steppermotor1Write+0xd2>
     c20:	8f a9       	ldd	r24, Y+55	; 0x37
     c22:	98 ad       	ldd	r25, Y+56	; 0x38
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	91 05       	cpc	r25, r1
     c28:	0c f0       	brlt	.+2      	; 0xc2c <steppermotor1Write+0x5a>
     c2a:	59 c0       	rjmp	.+178    	; 0xcde <steppermotor1Write+0x10c>
     c2c:	8f a9       	ldd	r24, Y+55	; 0x37
     c2e:	98 ad       	ldd	r25, Y+56	; 0x38
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	91 05       	cpc	r25, r1
     c34:	d1 f0       	breq	.+52     	; 0xc6a <steppermotor1Write+0x98>
     c36:	00 c1       	rjmp	.+512    	; 0xe38 <steppermotor1Write+0x266>
     c38:	8f a9       	ldd	r24, Y+55	; 0x37
     c3a:	98 ad       	ldd	r25, Y+56	; 0x38
     c3c:	86 30       	cpi	r24, 0x06	; 6
     c3e:	91 05       	cpc	r25, r1
     c40:	09 f4       	brne	.+2      	; 0xc44 <steppermotor1Write+0x72>
     c42:	a4 c0       	rjmp	.+328    	; 0xd8c <steppermotor1Write+0x1ba>
     c44:	8f a9       	ldd	r24, Y+55	; 0x37
     c46:	98 ad       	ldd	r25, Y+56	; 0x38
     c48:	86 30       	cpi	r24, 0x06	; 6
     c4a:	91 05       	cpc	r25, r1
     c4c:	0c f4       	brge	.+2      	; 0xc50 <steppermotor1Write+0x7e>
     c4e:	81 c0       	rjmp	.+258    	; 0xd52 <steppermotor1Write+0x180>
     c50:	8f a9       	ldd	r24, Y+55	; 0x37
     c52:	98 ad       	ldd	r25, Y+56	; 0x38
     c54:	87 30       	cpi	r24, 0x07	; 7
     c56:	91 05       	cpc	r25, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <steppermotor1Write+0x8a>
     c5a:	b5 c0       	rjmp	.+362    	; 0xdc6 <steppermotor1Write+0x1f4>
     c5c:	8f a9       	ldd	r24, Y+55	; 0x37
     c5e:	98 ad       	ldd	r25, Y+56	; 0x38
     c60:	88 30       	cpi	r24, 0x08	; 8
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <steppermotor1Write+0x96>
     c66:	cc c0       	rjmp	.+408    	; 0xe00 <steppermotor1Write+0x22e>
     c68:	e7 c0       	rjmp	.+462    	; 0xe38 <steppermotor1Write+0x266>
            {
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     c6a:	a8 e2       	ldi	r26, 0x28	; 40
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e8 e2       	ldi	r30, 0x28	; 40
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     c78:	a8 e2       	ldi	r26, 0x28	; 40
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e8 e2       	ldi	r30, 0x28	; 40
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c86:	a8 e2       	ldi	r26, 0x28	; 40
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 e2       	ldi	r30, 0x28	; 40
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	87 7f       	andi	r24, 0xF7	; 247
     c92:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     c94:	a8 e2       	ldi	r26, 0x28	; 40
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e8 e2       	ldi	r30, 0x28	; 40
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8d 7f       	andi	r24, 0xFD	; 253
     ca0:	8c 93       	st	X, r24
     ca2:	ca c0       	rjmp	.+404    	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 2 :
                PORTStepper1 |= (1 << PStepper1_1);
     ca4:	a8 e2       	ldi	r26, 0x28	; 40
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e2       	ldi	r30, 0x28	; 40
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	80 68       	ori	r24, 0x80	; 128
     cb0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cb2:	a8 e2       	ldi	r26, 0x28	; 40
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e8 e2       	ldi	r30, 0x28	; 40
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 62       	ori	r24, 0x20	; 32
     cbe:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     cc0:	a8 e2       	ldi	r26, 0x28	; 40
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e8 e2       	ldi	r30, 0x28	; 40
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     cce:	a8 e2       	ldi	r26, 0x28	; 40
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e8 e2       	ldi	r30, 0x28	; 40
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8d 7f       	andi	r24, 0xFD	; 253
     cda:	8c 93       	st	X, r24
     cdc:	ad c0       	rjmp	.+346    	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     cde:	a8 e2       	ldi	r26, 0x28	; 40
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 e2       	ldi	r30, 0x28	; 40
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cec:	a8 e2       	ldi	r26, 0x28	; 40
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e8 e2       	ldi	r30, 0x28	; 40
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     cfa:	a8 e2       	ldi	r26, 0x28	; 40
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e8 e2       	ldi	r30, 0x28	; 40
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d08:	a8 e2       	ldi	r26, 0x28	; 40
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e8 e2       	ldi	r30, 0x28	; 40
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	8c 93       	st	X, r24
     d16:	90 c0       	rjmp	.+288    	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d18:	a8 e2       	ldi	r26, 0x28	; 40
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e8 e2       	ldi	r30, 0x28	; 40
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     d26:	a8 e2       	ldi	r26, 0x28	; 40
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e8 e2       	ldi	r30, 0x28	; 40
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 62       	ori	r24, 0x20	; 32
     d32:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d34:	a8 e2       	ldi	r26, 0x28	; 40
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e8 e2       	ldi	r30, 0x28	; 40
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	88 60       	ori	r24, 0x08	; 8
     d40:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d42:	a8 e2       	ldi	r26, 0x28	; 40
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e8 e2       	ldi	r30, 0x28	; 40
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	8c 93       	st	X, r24
     d50:	73 c0       	rjmp	.+230    	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d52:	a8 e2       	ldi	r26, 0x28	; 40
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e8 e2       	ldi	r30, 0x28	; 40
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8f 77       	andi	r24, 0x7F	; 127
     d5e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d60:	a8 e2       	ldi	r26, 0x28	; 40
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e8 e2       	ldi	r30, 0x28	; 40
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7d       	andi	r24, 0xDF	; 223
     d6c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d6e:	a8 e2       	ldi	r26, 0x28	; 40
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e8 e2       	ldi	r30, 0x28	; 40
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 60       	ori	r24, 0x08	; 8
     d7a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d7c:	a8 e2       	ldi	r26, 0x28	; 40
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e8 e2       	ldi	r30, 0x28	; 40
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	8c 93       	st	X, r24
     d8a:	56 c0       	rjmp	.+172    	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d8c:	a8 e2       	ldi	r26, 0x28	; 40
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e8 e2       	ldi	r30, 0x28	; 40
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8f 77       	andi	r24, 0x7F	; 127
     d98:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d9a:	a8 e2       	ldi	r26, 0x28	; 40
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e8 e2       	ldi	r30, 0x28	; 40
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 7d       	andi	r24, 0xDF	; 223
     da6:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     da8:	a8 e2       	ldi	r26, 0x28	; 40
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e8 e2       	ldi	r30, 0x28	; 40
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     db6:	a8 e2       	ldi	r26, 0x28	; 40
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e8 e2       	ldi	r30, 0x28	; 40
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	8c 93       	st	X, r24
     dc4:	39 c0       	rjmp	.+114    	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 7 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     dd4:	a8 e2       	ldi	r26, 0x28	; 40
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e8 e2       	ldi	r30, 0x28	; 40
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 7d       	andi	r24, 0xDF	; 223
     de0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     de2:	a8 e2       	ldi	r26, 0x28	; 40
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e2       	ldi	r30, 0x28	; 40
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	87 7f       	andi	r24, 0xF7	; 247
     dee:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     df0:	a8 e2       	ldi	r26, 0x28	; 40
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e2       	ldi	r30, 0x28	; 40
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	8c 93       	st	X, r24
     dfe:	1c c0       	rjmp	.+56     	; 0xe38 <steppermotor1Write+0x266>
                break;
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     e00:	a8 e2       	ldi	r26, 0x28	; 40
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e2       	ldi	r30, 0x28	; 40
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     e0e:	a8 e2       	ldi	r26, 0x28	; 40
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e2       	ldi	r30, 0x28	; 40
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7d       	andi	r24, 0xDF	; 223
     e1a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     e1c:	a8 e2       	ldi	r26, 0x28	; 40
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 e2       	ldi	r30, 0x28	; 40
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	87 7f       	andi	r24, 0xF7	; 247
     e28:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     e2a:	a8 e2       	ldi	r26, 0x28	; 40
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 e2       	ldi	r30, 0x28	; 40
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	8c 93       	st	X, r24
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	aa e7       	ldi	r26, 0x7A	; 122
     e3e:	b4 e4       	ldi	r27, 0x44	; 68
     e40:	8d a7       	std	Y+45, r24	; 0x2d
     e42:	9e a7       	std	Y+46, r25	; 0x2e
     e44:	af a7       	std	Y+47, r26	; 0x2f
     e46:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e48:	6d a5       	ldd	r22, Y+45	; 0x2d
     e4a:	7e a5       	ldd	r23, Y+46	; 0x2e
     e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4e:	98 a9       	ldd	r25, Y+48	; 0x30
     e50:	2b ea       	ldi	r18, 0xAB	; 171
     e52:	3a ea       	ldi	r19, 0xAA	; 170
     e54:	4a ea       	ldi	r20, 0xAA	; 170
     e56:	50 e4       	ldi	r21, 0x40	; 64
     e58:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	89 a7       	std	Y+41, r24	; 0x29
     e62:	9a a7       	std	Y+42, r25	; 0x2a
     e64:	ab a7       	std	Y+43, r26	; 0x2b
     e66:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e68:	69 a5       	ldd	r22, Y+41	; 0x29
     e6a:	7a a5       	ldd	r23, Y+42	; 0x2a
     e6c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e6e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	1c f4       	brge	.+6      	; 0xe86 <steppermotor1Write+0x2b4>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	88 a7       	std	Y+40, r24	; 0x28
     e84:	91 c0       	rjmp	.+290    	; 0xfa8 <steppermotor1Write+0x3d6>
	else if (__tmp > 255)
     e86:	69 a5       	ldd	r22, Y+41	; 0x29
     e88:	7a a5       	ldd	r23, Y+42	; 0x2a
     e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e8c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	53 e4       	ldi	r21, 0x43	; 67
     e96:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <steppermotor1Write+0x2ce>
     e9e:	7b c0       	rjmp	.+246    	; 0xf96 <steppermotor1Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
     ea0:	6d a5       	ldd	r22, Y+45	; 0x2d
     ea2:	7e a5       	ldd	r23, Y+46	; 0x2e
     ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea6:	98 a9       	ldd	r25, Y+48	; 0x30
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8c a3       	std	Y+36, r24	; 0x24
     eba:	9d a3       	std	Y+37, r25	; 0x25
     ebc:	ae a3       	std	Y+38, r26	; 0x26
     ebe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec0:	6c a1       	ldd	r22, Y+36	; 0x24
     ec2:	7d a1       	ldd	r23, Y+37	; 0x25
     ec4:	8e a1       	ldd	r24, Y+38	; 0x26
     ec6:	9f a1       	ldd	r25, Y+39	; 0x27
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	55 e4       	ldi	r21, 0x45	; 69
     ed0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	88 a3       	std	Y+32, r24	; 0x20
     eda:	99 a3       	std	Y+33, r25	; 0x21
     edc:	aa a3       	std	Y+34, r26	; 0x22
     ede:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     ee0:	68 a1       	ldd	r22, Y+32	; 0x20
     ee2:	79 a1       	ldd	r23, Y+33	; 0x21
     ee4:	8a a1       	ldd	r24, Y+34	; 0x22
     ee6:	9b a1       	ldd	r25, Y+35	; 0x23
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	2c f4       	brge	.+10     	; 0xf02 <steppermotor1Write+0x330>
		__ticks = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9f 8f       	std	Y+31, r25	; 0x1f
     efe:	8e 8f       	std	Y+30, r24	; 0x1e
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <steppermotor1Write+0x3ae>
	else if (__tmp > 65535)
     f02:	68 a1       	ldd	r22, Y+32	; 0x20
     f04:	79 a1       	ldd	r23, Y+33	; 0x21
     f06:	8a a1       	ldd	r24, Y+34	; 0x22
     f08:	9b a1       	ldd	r25, Y+35	; 0x23
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
     f16:	18 16       	cp	r1, r24
     f18:	4c f5       	brge	.+82     	; 0xf6c <steppermotor1Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1a:	6c a1       	ldd	r22, Y+36	; 0x24
     f1c:	7d a1       	ldd	r23, Y+37	; 0x25
     f1e:	8e a1       	ldd	r24, Y+38	; 0x26
     f20:	9f a1       	ldd	r25, Y+39	; 0x27
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9f 8f       	std	Y+31, r25	; 0x1f
     f40:	8e 8f       	std	Y+30, r24	; 0x1e
     f42:	0f c0       	rjmp	.+30     	; 0xf62 <steppermotor1Write+0x390>
     f44:	80 e9       	ldi	r24, 0x90	; 144
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	9d 8f       	std	Y+29, r25	; 0x1d
     f4a:	8c 8f       	std	Y+28, r24	; 0x1c
     f4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <steppermotor1Write+0x37e>
     f54:	9d 8f       	std	Y+29, r25	; 0x1d
     f56:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	9f 8f       	std	Y+31, r25	; 0x1f
     f60:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f64:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	69 f7       	brne	.-38     	; 0xf44 <steppermotor1Write+0x372>
     f6a:	24 c0       	rjmp	.+72     	; 0xfb4 <steppermotor1Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	68 a1       	ldd	r22, Y+32	; 0x20
     f6e:	79 a1       	ldd	r23, Y+33	; 0x21
     f70:	8a a1       	ldd	r24, Y+34	; 0x22
     f72:	9b a1       	ldd	r25, Y+35	; 0x23
     f74:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9f 8f       	std	Y+31, r25	; 0x1f
     f7e:	8e 8f       	std	Y+30, r24	; 0x1e
     f80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f82:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f84:	9b 8f       	std	Y+27, r25	; 0x1b
     f86:	8a 8f       	std	Y+26, r24	; 0x1a
     f88:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <steppermotor1Write+0x3ba>
     f90:	9b 8f       	std	Y+27, r25	; 0x1b
     f92:	8a 8f       	std	Y+26, r24	; 0x1a
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <steppermotor1Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f96:	69 a5       	ldd	r22, Y+41	; 0x29
     f98:	7a a5       	ldd	r23, Y+42	; 0x2a
     f9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f9e:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	88 a7       	std	Y+40, r24	; 0x28
     fa8:	88 a5       	ldd	r24, Y+40	; 0x28
     faa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fac:	89 8d       	ldd	r24, Y+25	; 0x19
     fae:	8a 95       	dec	r24
     fb0:	f1 f7       	brne	.-4      	; 0xfae <steppermotor1Write+0x3dc>
     fb2:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor1Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     fb4:	8b a9       	ldd	r24, Y+51	; 0x33
     fb6:	9c a9       	ldd	r25, Y+52	; 0x34
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	9c ab       	std	Y+52, r25	; 0x34
     fbc:	8b ab       	std	Y+51, r24	; 0x33
     fbe:	8b a9       	ldd	r24, Y+51	; 0x33
     fc0:	9c a9       	ldd	r25, Y+52	; 0x34
     fc2:	88 30       	cpi	r24, 0x08	; 8
     fc4:	91 05       	cpc	r25, r1
     fc6:	0c f4       	brge	.+2      	; 0xfca <steppermotor1Write+0x3f8>
     fc8:	16 ce       	rjmp	.-980    	; 0xbf6 <steppermotor1Write+0x24>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
     fca:	1e aa       	std	Y+54, r1	; 0x36
     fcc:	1d aa       	std	Y+53, r1	; 0x35
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
}

void steppermotor1Write(int a)
{
    while(a  == 1)
     fce:	8d a9       	ldd	r24, Y+53	; 0x35
     fd0:	9e a9       	ldd	r25, Y+54	; 0x36
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <steppermotor1Write+0x408>
     fd8:	09 ce       	rjmp	.-1006   	; 0xbec <steppermotor1Write+0x1a>
     fda:	f0 c1       	rjmp	.+992    	; 0x13bc <steppermotor1Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
     fdc:	88 e0       	ldi	r24, 0x08	; 8
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9a ab       	std	Y+50, r25	; 0x32
     fe2:	89 ab       	std	Y+49, r24	; 0x31
     fe4:	e3 c1       	rjmp	.+966    	; 0x13ac <steppermotor1Write+0x7da>
        {
            switch (i)
     fe6:	89 a9       	ldd	r24, Y+49	; 0x31
     fe8:	9a a9       	ldd	r25, Y+50	; 0x32
     fea:	9a af       	std	Y+58, r25	; 0x3a
     fec:	89 af       	std	Y+57, r24	; 0x39
     fee:	89 ad       	ldd	r24, Y+57	; 0x39
     ff0:	9a ad       	ldd	r25, Y+58	; 0x3a
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	91 05       	cpc	r25, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <steppermotor1Write+0x428>
     ff8:	a3 c0       	rjmp	.+326    	; 0x1140 <steppermotor1Write+0x56e>
     ffa:	89 ad       	ldd	r24, Y+57	; 0x39
     ffc:	9a ad       	ldd	r25, Y+58	; 0x3a
     ffe:	85 30       	cpi	r24, 0x05	; 5
    1000:	91 05       	cpc	r25, r1
    1002:	94 f4       	brge	.+36     	; 0x1028 <steppermotor1Write+0x456>
    1004:	89 ad       	ldd	r24, Y+57	; 0x39
    1006:	9a ad       	ldd	r25, Y+58	; 0x3a
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	91 05       	cpc	r25, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <steppermotor1Write+0x43e>
    100e:	5e c0       	rjmp	.+188    	; 0x10cc <steppermotor1Write+0x4fa>
    1010:	89 ad       	ldd	r24, Y+57	; 0x39
    1012:	9a ad       	ldd	r25, Y+58	; 0x3a
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	0c f0       	brlt	.+2      	; 0x101c <steppermotor1Write+0x44a>
    101a:	75 c0       	rjmp	.+234    	; 0x1106 <steppermotor1Write+0x534>
    101c:	89 ad       	ldd	r24, Y+57	; 0x39
    101e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	b1 f1       	breq	.+108    	; 0x1092 <steppermotor1Write+0x4c0>
    1026:	ff c0       	rjmp	.+510    	; 0x1226 <steppermotor1Write+0x654>
    1028:	89 ad       	ldd	r24, Y+57	; 0x39
    102a:	9a ad       	ldd	r25, Y+58	; 0x3a
    102c:	86 30       	cpi	r24, 0x06	; 6
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <steppermotor1Write+0x462>
    1032:	c0 c0       	rjmp	.+384    	; 0x11b4 <steppermotor1Write+0x5e2>
    1034:	89 ad       	ldd	r24, Y+57	; 0x39
    1036:	9a ad       	ldd	r25, Y+58	; 0x3a
    1038:	86 30       	cpi	r24, 0x06	; 6
    103a:	91 05       	cpc	r25, r1
    103c:	0c f4       	brge	.+2      	; 0x1040 <steppermotor1Write+0x46e>
    103e:	9d c0       	rjmp	.+314    	; 0x117a <steppermotor1Write+0x5a8>
    1040:	89 ad       	ldd	r24, Y+57	; 0x39
    1042:	9a ad       	ldd	r25, Y+58	; 0x3a
    1044:	87 30       	cpi	r24, 0x07	; 7
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <steppermotor1Write+0x47a>
    104a:	d1 c0       	rjmp	.+418    	; 0x11ee <steppermotor1Write+0x61c>
    104c:	89 ad       	ldd	r24, Y+57	; 0x39
    104e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	91 05       	cpc	r25, r1
    1054:	09 f0       	breq	.+2      	; 0x1058 <steppermotor1Write+0x486>
    1056:	e7 c0       	rjmp	.+462    	; 0x1226 <steppermotor1Write+0x654>
            {
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
    1058:	a8 e2       	ldi	r26, 0x28	; 40
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e8 e2       	ldi	r30, 0x28	; 40
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 68       	ori	r24, 0x80	; 128
    1064:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1066:	a8 e2       	ldi	r26, 0x28	; 40
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e2       	ldi	r30, 0x28	; 40
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1074:	a8 e2       	ldi	r26, 0x28	; 40
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e2       	ldi	r30, 0x28	; 40
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	87 7f       	andi	r24, 0xF7	; 247
    1080:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1082:	a8 e2       	ldi	r26, 0x28	; 40
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e2       	ldi	r30, 0x28	; 40
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	8c 93       	st	X, r24
    1090:	ca c0       	rjmp	.+404    	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
    1092:	a8 e2       	ldi	r26, 0x28	; 40
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 e2       	ldi	r30, 0x28	; 40
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    10a0:	a8 e2       	ldi	r26, 0x28	; 40
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e2       	ldi	r30, 0x28	; 40
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 62       	ori	r24, 0x20	; 32
    10ac:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    10ae:	a8 e2       	ldi	r26, 0x28	; 40
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e2       	ldi	r30, 0x28	; 40
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	87 7f       	andi	r24, 0xF7	; 247
    10ba:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    10bc:	a8 e2       	ldi	r26, 0x28	; 40
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e2       	ldi	r30, 0x28	; 40
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8d 7f       	andi	r24, 0xFD	; 253
    10c8:	8c 93       	st	X, r24
    10ca:	ad c0       	rjmp	.+346    	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 2 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    10cc:	a8 e2       	ldi	r26, 0x28	; 40
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e8 e2       	ldi	r30, 0x28	; 40
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 77       	andi	r24, 0x7F	; 127
    10d8:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    10da:	a8 e2       	ldi	r26, 0x28	; 40
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e2       	ldi	r30, 0x28	; 40
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    10e8:	a8 e2       	ldi	r26, 0x28	; 40
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e2       	ldi	r30, 0x28	; 40
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    10f6:	a8 e2       	ldi	r26, 0x28	; 40
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e2       	ldi	r30, 0x28	; 40
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8d 7f       	andi	r24, 0xFD	; 253
    1102:	8c 93       	st	X, r24
    1104:	90 c0       	rjmp	.+288    	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1106:	a8 e2       	ldi	r26, 0x28	; 40
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e8 e2       	ldi	r30, 0x28	; 40
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 77       	andi	r24, 0x7F	; 127
    1112:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    1114:	a8 e2       	ldi	r26, 0x28	; 40
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e8 e2       	ldi	r30, 0x28	; 40
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    1122:	a8 e2       	ldi	r26, 0x28	; 40
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e8 e2       	ldi	r30, 0x28	; 40
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	88 60       	ori	r24, 0x08	; 8
    112e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1130:	a8 e2       	ldi	r26, 0x28	; 40
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e2       	ldi	r30, 0x28	; 40
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8d 7f       	andi	r24, 0xFD	; 253
    113c:	8c 93       	st	X, r24
    113e:	73 c0       	rjmp	.+230    	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1140:	a8 e2       	ldi	r26, 0x28	; 40
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e8 e2       	ldi	r30, 0x28	; 40
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8f 77       	andi	r24, 0x7F	; 127
    114c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    114e:	a8 e2       	ldi	r26, 0x28	; 40
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e2       	ldi	r30, 0x28	; 40
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8f 7d       	andi	r24, 0xDF	; 223
    115a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    115c:	a8 e2       	ldi	r26, 0x28	; 40
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e2       	ldi	r30, 0x28	; 40
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    116a:	a8 e2       	ldi	r26, 0x28	; 40
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e2       	ldi	r30, 0x28	; 40
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8d 7f       	andi	r24, 0xFD	; 253
    1176:	8c 93       	st	X, r24
    1178:	56 c0       	rjmp	.+172    	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    117a:	a8 e2       	ldi	r26, 0x28	; 40
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e8 e2       	ldi	r30, 0x28	; 40
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 77       	andi	r24, 0x7F	; 127
    1186:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1188:	a8 e2       	ldi	r26, 0x28	; 40
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e2       	ldi	r30, 0x28	; 40
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8f 7d       	andi	r24, 0xDF	; 223
    1194:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    1196:	a8 e2       	ldi	r26, 0x28	; 40
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e8 e2       	ldi	r30, 0x28	; 40
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    11a4:	a8 e2       	ldi	r26, 0x28	; 40
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e8 e2       	ldi	r30, 0x28	; 40
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	8c 93       	st	X, r24
    11b2:	39 c0       	rjmp	.+114    	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    11b4:	a8 e2       	ldi	r26, 0x28	; 40
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e8 e2       	ldi	r30, 0x28	; 40
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 77       	andi	r24, 0x7F	; 127
    11c0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    11c2:	a8 e2       	ldi	r26, 0x28	; 40
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e2       	ldi	r30, 0x28	; 40
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    11d0:	a8 e2       	ldi	r26, 0x28	; 40
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e2       	ldi	r30, 0x28	; 40
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    11de:	a8 e2       	ldi	r26, 0x28	; 40
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e8 e2       	ldi	r30, 0x28	; 40
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	8c 93       	st	X, r24
    11ec:	1c c0       	rjmp	.+56     	; 0x1226 <steppermotor1Write+0x654>
                break;
            case 7 :
                PORTStepper1 |= (1 << PStepper1_1);
    11ee:	a8 e2       	ldi	r26, 0x28	; 40
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e2       	ldi	r30, 0x28	; 40
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    11fc:	a8 e2       	ldi	r26, 0x28	; 40
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e8 e2       	ldi	r30, 0x28	; 40
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8f 7d       	andi	r24, 0xDF	; 223
    1208:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    120a:	a8 e2       	ldi	r26, 0x28	; 40
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e2       	ldi	r30, 0x28	; 40
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	87 7f       	andi	r24, 0xF7	; 247
    1216:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    1218:	a8 e2       	ldi	r26, 0x28	; 40
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e2       	ldi	r30, 0x28	; 40
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	82 60       	ori	r24, 0x02	; 2
    1224:	8c 93       	st	X, r24
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	aa e7       	ldi	r26, 0x7A	; 122
    122c:	b4 e4       	ldi	r27, 0x44	; 68
    122e:	8d 8b       	std	Y+21, r24	; 0x15
    1230:	9e 8b       	std	Y+22, r25	; 0x16
    1232:	af 8b       	std	Y+23, r26	; 0x17
    1234:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1236:	6d 89       	ldd	r22, Y+21	; 0x15
    1238:	7e 89       	ldd	r23, Y+22	; 0x16
    123a:	8f 89       	ldd	r24, Y+23	; 0x17
    123c:	98 8d       	ldd	r25, Y+24	; 0x18
    123e:	2b ea       	ldi	r18, 0xAB	; 171
    1240:	3a ea       	ldi	r19, 0xAA	; 170
    1242:	4a ea       	ldi	r20, 0xAA	; 170
    1244:	50 e4       	ldi	r21, 0x40	; 64
    1246:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	89 8b       	std	Y+17, r24	; 0x11
    1250:	9a 8b       	std	Y+18, r25	; 0x12
    1252:	ab 8b       	std	Y+19, r26	; 0x13
    1254:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1256:	69 89       	ldd	r22, Y+17	; 0x11
    1258:	7a 89       	ldd	r23, Y+18	; 0x12
    125a:	8b 89       	ldd	r24, Y+19	; 0x13
    125c:	9c 89       	ldd	r25, Y+20	; 0x14
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e8       	ldi	r20, 0x80	; 128
    1264:	5f e3       	ldi	r21, 0x3F	; 63
    1266:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    126a:	88 23       	and	r24, r24
    126c:	1c f4       	brge	.+6      	; 0x1274 <steppermotor1Write+0x6a2>
		__ticks = 1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	88 8b       	std	Y+16, r24	; 0x10
    1272:	91 c0       	rjmp	.+290    	; 0x1396 <steppermotor1Write+0x7c4>
	else if (__tmp > 255)
    1274:	69 89       	ldd	r22, Y+17	; 0x11
    1276:	7a 89       	ldd	r23, Y+18	; 0x12
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	53 e4       	ldi	r21, 0x43	; 67
    1284:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    1288:	18 16       	cp	r1, r24
    128a:	0c f0       	brlt	.+2      	; 0x128e <steppermotor1Write+0x6bc>
    128c:	7b c0       	rjmp	.+246    	; 0x1384 <steppermotor1Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    128e:	6d 89       	ldd	r22, Y+21	; 0x15
    1290:	7e 89       	ldd	r23, Y+22	; 0x16
    1292:	8f 89       	ldd	r24, Y+23	; 0x17
    1294:	98 8d       	ldd	r25, Y+24	; 0x18
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a e7       	ldi	r20, 0x7A	; 122
    129c:	54 e4       	ldi	r21, 0x44	; 68
    129e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8c 87       	std	Y+12, r24	; 0x0c
    12a8:	9d 87       	std	Y+13, r25	; 0x0d
    12aa:	ae 87       	std	Y+14, r26	; 0x0e
    12ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    12b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    12b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a e7       	ldi	r20, 0x7A	; 122
    12bc:	55 e4       	ldi	r21, 0x45	; 69
    12be:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	88 87       	std	Y+8, r24	; 0x08
    12c8:	99 87       	std	Y+9, r25	; 0x09
    12ca:	aa 87       	std	Y+10, r26	; 0x0a
    12cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12ce:	68 85       	ldd	r22, Y+8	; 0x08
    12d0:	79 85       	ldd	r23, Y+9	; 0x09
    12d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <steppermotor1Write+0x71e>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9f 83       	std	Y+7, r25	; 0x07
    12ec:	8e 83       	std	Y+6, r24	; 0x06
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <steppermotor1Write+0x79c>
	else if (__tmp > 65535)
    12f0:	68 85       	ldd	r22, Y+8	; 0x08
    12f2:	79 85       	ldd	r23, Y+9	; 0x09
    12f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <steppermotor1Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6c 85       	ldd	r22, Y+12	; 0x0c
    130a:	7d 85       	ldd	r23, Y+13	; 0x0d
    130c:	8e 85       	ldd	r24, Y+14	; 0x0e
    130e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9f 83       	std	Y+7, r25	; 0x07
    132e:	8e 83       	std	Y+6, r24	; 0x06
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <steppermotor1Write+0x77e>
    1332:	80 e9       	ldi	r24, 0x90	; 144
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	9d 83       	std	Y+5, r25	; 0x05
    1338:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <steppermotor1Write+0x76c>
    1342:	9d 83       	std	Y+5, r25	; 0x05
    1344:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9f 83       	std	Y+7, r25	; 0x07
    134e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8e 81       	ldd	r24, Y+6	; 0x06
    1352:	9f 81       	ldd	r25, Y+7	; 0x07
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <steppermotor1Write+0x760>
    1358:	24 c0       	rjmp	.+72     	; 0x13a2 <steppermotor1Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	68 85       	ldd	r22, Y+8	; 0x08
    135c:	79 85       	ldd	r23, Y+9	; 0x09
    135e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1360:	9b 85       	ldd	r25, Y+11	; 0x0b
    1362:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9f 83       	std	Y+7, r25	; 0x07
    136c:	8e 83       	std	Y+6, r24	; 0x06
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	9b 83       	std	Y+3, r25	; 0x03
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <steppermotor1Write+0x7a8>
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <steppermotor1Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1384:	69 89       	ldd	r22, Y+17	; 0x11
    1386:	7a 89       	ldd	r23, Y+18	; 0x12
    1388:	8b 89       	ldd	r24, Y+19	; 0x13
    138a:	9c 89       	ldd	r25, Y+20	; 0x14
    138c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	88 8b       	std	Y+16, r24	; 0x10
    1396:	88 89       	ldd	r24, Y+16	; 0x10
    1398:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	8a 95       	dec	r24
    139e:	f1 f7       	brne	.-4      	; 0x139c <steppermotor1Write+0x7ca>
    13a0:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    13a2:	89 a9       	ldd	r24, Y+49	; 0x31
    13a4:	9a a9       	ldd	r25, Y+50	; 0x32
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9a ab       	std	Y+50, r25	; 0x32
    13aa:	89 ab       	std	Y+49, r24	; 0x31
    13ac:	89 a9       	ldd	r24, Y+49	; 0x31
    13ae:	9a a9       	ldd	r25, Y+50	; 0x32
    13b0:	18 16       	cp	r1, r24
    13b2:	19 06       	cpc	r1, r25
    13b4:	0c f4       	brge	.+2      	; 0x13b8 <steppermotor1Write+0x7e6>
    13b6:	17 ce       	rjmp	.-978    	; 0xfe6 <steppermotor1Write+0x414>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    13b8:	1e aa       	std	Y+54, r1	; 0x36
    13ba:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    13bc:	8d a9       	ldd	r24, Y+53	; 0x35
    13be:	9e a9       	ldd	r25, Y+54	; 0x36
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <steppermotor1Write+0x7f6>
    13c6:	0a ce       	rjmp	.-1004   	; 0xfdc <steppermotor1Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    13c8:	ea 96       	adiw	r28, 0x3a	; 58
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <steppermotor2Write>:

void steppermotor2Write(int a)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	ea 97       	sbiw	r28, 0x3a	; 58
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	9e ab       	std	Y+54, r25	; 0x36
    13f0:	8d ab       	std	Y+53, r24	; 0x35
    13f2:	f1 c1       	rjmp	.+994    	; 0x17d6 <steppermotor2Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c ab       	std	Y+52, r25	; 0x34
    13fa:	8b ab       	std	Y+51, r24	; 0x33
    13fc:	e4 c1       	rjmp	.+968    	; 0x17c6 <steppermotor2Write+0x3ec>
        {
            switch (i)
    13fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1400:	9c a9       	ldd	r25, Y+52	; 0x34
    1402:	98 af       	std	Y+56, r25	; 0x38
    1404:	8f ab       	std	Y+55, r24	; 0x37
    1406:	8f a9       	ldd	r24, Y+55	; 0x37
    1408:	98 ad       	ldd	r25, Y+56	; 0x38
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	91 05       	cpc	r25, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <steppermotor2Write+0x38>
    1410:	87 c0       	rjmp	.+270    	; 0x1520 <steppermotor2Write+0x146>
    1412:	8f a9       	ldd	r24, Y+55	; 0x37
    1414:	98 ad       	ldd	r25, Y+56	; 0x38
    1416:	85 30       	cpi	r24, 0x05	; 5
    1418:	91 05       	cpc	r25, r1
    141a:	94 f4       	brge	.+36     	; 0x1440 <steppermotor2Write+0x66>
    141c:	8f a9       	ldd	r24, Y+55	; 0x37
    141e:	98 ad       	ldd	r25, Y+56	; 0x38
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	91 05       	cpc	r25, r1
    1424:	09 f4       	brne	.+2      	; 0x1428 <steppermotor2Write+0x4e>
    1426:	42 c0       	rjmp	.+132    	; 0x14ac <steppermotor2Write+0xd2>
    1428:	8f a9       	ldd	r24, Y+55	; 0x37
    142a:	98 ad       	ldd	r25, Y+56	; 0x38
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	0c f0       	brlt	.+2      	; 0x1434 <steppermotor2Write+0x5a>
    1432:	59 c0       	rjmp	.+178    	; 0x14e6 <steppermotor2Write+0x10c>
    1434:	8f a9       	ldd	r24, Y+55	; 0x37
    1436:	98 ad       	ldd	r25, Y+56	; 0x38
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	d1 f0       	breq	.+52     	; 0x1472 <steppermotor2Write+0x98>
    143e:	00 c1       	rjmp	.+512    	; 0x1640 <steppermotor2Write+0x266>
    1440:	8f a9       	ldd	r24, Y+55	; 0x37
    1442:	98 ad       	ldd	r25, Y+56	; 0x38
    1444:	86 30       	cpi	r24, 0x06	; 6
    1446:	91 05       	cpc	r25, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <steppermotor2Write+0x72>
    144a:	a4 c0       	rjmp	.+328    	; 0x1594 <steppermotor2Write+0x1ba>
    144c:	8f a9       	ldd	r24, Y+55	; 0x37
    144e:	98 ad       	ldd	r25, Y+56	; 0x38
    1450:	86 30       	cpi	r24, 0x06	; 6
    1452:	91 05       	cpc	r25, r1
    1454:	0c f4       	brge	.+2      	; 0x1458 <steppermotor2Write+0x7e>
    1456:	81 c0       	rjmp	.+258    	; 0x155a <steppermotor2Write+0x180>
    1458:	8f a9       	ldd	r24, Y+55	; 0x37
    145a:	98 ad       	ldd	r25, Y+56	; 0x38
    145c:	87 30       	cpi	r24, 0x07	; 7
    145e:	91 05       	cpc	r25, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <steppermotor2Write+0x8a>
    1462:	b5 c0       	rjmp	.+362    	; 0x15ce <steppermotor2Write+0x1f4>
    1464:	8f a9       	ldd	r24, Y+55	; 0x37
    1466:	98 ad       	ldd	r25, Y+56	; 0x38
    1468:	88 30       	cpi	r24, 0x08	; 8
    146a:	91 05       	cpc	r25, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <steppermotor2Write+0x96>
    146e:	cc c0       	rjmp	.+408    	; 0x1608 <steppermotor2Write+0x22e>
    1470:	e7 c0       	rjmp	.+462    	; 0x1640 <steppermotor2Write+0x266>
            {
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    1472:	a8 e2       	ldi	r26, 0x28	; 40
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e8 e2       	ldi	r30, 0x28	; 40
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 64       	ori	r24, 0x40	; 64
    147e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1480:	a8 e2       	ldi	r26, 0x28	; 40
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e2       	ldi	r30, 0x28	; 40
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8f 7e       	andi	r24, 0xEF	; 239
    148c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    148e:	a8 e2       	ldi	r26, 0x28	; 40
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e2       	ldi	r30, 0x28	; 40
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8b 7f       	andi	r24, 0xFB	; 251
    149a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    149c:	a8 e2       	ldi	r26, 0x28	; 40
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e8 e2       	ldi	r30, 0x28	; 40
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
    14aa:	ca c0       	rjmp	.+404    	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 2 :
                PORTStepper2 |= (1 << PStepper2_1);
    14ac:	a8 e2       	ldi	r26, 0x28	; 40
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e8 e2       	ldi	r30, 0x28	; 40
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14ba:	a8 e2       	ldi	r26, 0x28	; 40
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e8 e2       	ldi	r30, 0x28	; 40
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 61       	ori	r24, 0x10	; 16
    14c6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    14c8:	a8 e2       	ldi	r26, 0x28	; 40
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e2       	ldi	r30, 0x28	; 40
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14d6:	a8 e2       	ldi	r26, 0x28	; 40
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e2       	ldi	r30, 0x28	; 40
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8e 7f       	andi	r24, 0xFE	; 254
    14e2:	8c 93       	st	X, r24
    14e4:	ad c0       	rjmp	.+346    	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    14e6:	a8 e2       	ldi	r26, 0x28	; 40
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e8 e2       	ldi	r30, 0x28	; 40
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7b       	andi	r24, 0xBF	; 191
    14f2:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14f4:	a8 e2       	ldi	r26, 0x28	; 40
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e2       	ldi	r30, 0x28	; 40
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 61       	ori	r24, 0x10	; 16
    1500:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1502:	a8 e2       	ldi	r26, 0x28	; 40
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e8 e2       	ldi	r30, 0x28	; 40
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1510:	a8 e2       	ldi	r26, 0x28	; 40
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e8 e2       	ldi	r30, 0x28	; 40
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8e 7f       	andi	r24, 0xFE	; 254
    151c:	8c 93       	st	X, r24
    151e:	90 c0       	rjmp	.+288    	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1520:	a8 e2       	ldi	r26, 0x28	; 40
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e8 e2       	ldi	r30, 0x28	; 40
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 7b       	andi	r24, 0xBF	; 191
    152c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    152e:	a8 e2       	ldi	r26, 0x28	; 40
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e8 e2       	ldi	r30, 0x28	; 40
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 61       	ori	r24, 0x10	; 16
    153a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    153c:	a8 e2       	ldi	r26, 0x28	; 40
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e8 e2       	ldi	r30, 0x28	; 40
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	84 60       	ori	r24, 0x04	; 4
    1548:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    154a:	a8 e2       	ldi	r26, 0x28	; 40
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e2       	ldi	r30, 0x28	; 40
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8e 7f       	andi	r24, 0xFE	; 254
    1556:	8c 93       	st	X, r24
    1558:	73 c0       	rjmp	.+230    	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    155a:	a8 e2       	ldi	r26, 0x28	; 40
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e8 e2       	ldi	r30, 0x28	; 40
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 7b       	andi	r24, 0xBF	; 191
    1566:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1568:	a8 e2       	ldi	r26, 0x28	; 40
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e8 e2       	ldi	r30, 0x28	; 40
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 7e       	andi	r24, 0xEF	; 239
    1574:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1576:	a8 e2       	ldi	r26, 0x28	; 40
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e8 e2       	ldi	r30, 0x28	; 40
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	84 60       	ori	r24, 0x04	; 4
    1582:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1584:	a8 e2       	ldi	r26, 0x28	; 40
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e2       	ldi	r30, 0x28	; 40
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8e 7f       	andi	r24, 0xFE	; 254
    1590:	8c 93       	st	X, r24
    1592:	56 c0       	rjmp	.+172    	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1594:	a8 e2       	ldi	r26, 0x28	; 40
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e8 e2       	ldi	r30, 0x28	; 40
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 7b       	andi	r24, 0xBF	; 191
    15a0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15a2:	a8 e2       	ldi	r26, 0x28	; 40
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e8 e2       	ldi	r30, 0x28	; 40
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 7e       	andi	r24, 0xEF	; 239
    15ae:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    15b0:	a8 e2       	ldi	r26, 0x28	; 40
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e2       	ldi	r30, 0x28	; 40
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15be:	a8 e2       	ldi	r26, 0x28	; 40
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e2       	ldi	r30, 0x28	; 40
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	81 60       	ori	r24, 0x01	; 1
    15ca:	8c 93       	st	X, r24
    15cc:	39 c0       	rjmp	.+114    	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 7 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    15ce:	a8 e2       	ldi	r26, 0x28	; 40
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e8 e2       	ldi	r30, 0x28	; 40
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 7b       	andi	r24, 0xBF	; 191
    15da:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15dc:	a8 e2       	ldi	r26, 0x28	; 40
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e8 e2       	ldi	r30, 0x28	; 40
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 7e       	andi	r24, 0xEF	; 239
    15e8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    15ea:	a8 e2       	ldi	r26, 0x28	; 40
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e8 e2       	ldi	r30, 0x28	; 40
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8b 7f       	andi	r24, 0xFB	; 251
    15f6:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15f8:	a8 e2       	ldi	r26, 0x28	; 40
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e2       	ldi	r30, 0x28	; 40
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	8c 93       	st	X, r24
    1606:	1c c0       	rjmp	.+56     	; 0x1640 <steppermotor2Write+0x266>
                break;
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1608:	a8 e2       	ldi	r26, 0x28	; 40
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e8 e2       	ldi	r30, 0x28	; 40
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 64       	ori	r24, 0x40	; 64
    1614:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1616:	a8 e2       	ldi	r26, 0x28	; 40
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e2       	ldi	r30, 0x28	; 40
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7e       	andi	r24, 0xEF	; 239
    1622:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1624:	a8 e2       	ldi	r26, 0x28	; 40
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e2       	ldi	r30, 0x28	; 40
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8b 7f       	andi	r24, 0xFB	; 251
    1630:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1632:	a8 e2       	ldi	r26, 0x28	; 40
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e2       	ldi	r30, 0x28	; 40
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	81 60       	ori	r24, 0x01	; 1
    163e:	8c 93       	st	X, r24
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	aa e7       	ldi	r26, 0x7A	; 122
    1646:	b4 e4       	ldi	r27, 0x44	; 68
    1648:	8d a7       	std	Y+45, r24	; 0x2d
    164a:	9e a7       	std	Y+46, r25	; 0x2e
    164c:	af a7       	std	Y+47, r26	; 0x2f
    164e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1650:	6d a5       	ldd	r22, Y+45	; 0x2d
    1652:	7e a5       	ldd	r23, Y+46	; 0x2e
    1654:	8f a5       	ldd	r24, Y+47	; 0x2f
    1656:	98 a9       	ldd	r25, Y+48	; 0x30
    1658:	2b ea       	ldi	r18, 0xAB	; 171
    165a:	3a ea       	ldi	r19, 0xAA	; 170
    165c:	4a ea       	ldi	r20, 0xAA	; 170
    165e:	50 e4       	ldi	r21, 0x40	; 64
    1660:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	89 a7       	std	Y+41, r24	; 0x29
    166a:	9a a7       	std	Y+42, r25	; 0x2a
    166c:	ab a7       	std	Y+43, r26	; 0x2b
    166e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1670:	69 a5       	ldd	r22, Y+41	; 0x29
    1672:	7a a5       	ldd	r23, Y+42	; 0x2a
    1674:	8b a5       	ldd	r24, Y+43	; 0x2b
    1676:	9c a5       	ldd	r25, Y+44	; 0x2c
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	1c f4       	brge	.+6      	; 0x168e <steppermotor2Write+0x2b4>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	88 a7       	std	Y+40, r24	; 0x28
    168c:	91 c0       	rjmp	.+290    	; 0x17b0 <steppermotor2Write+0x3d6>
	else if (__tmp > 255)
    168e:	69 a5       	ldd	r22, Y+41	; 0x29
    1690:	7a a5       	ldd	r23, Y+42	; 0x2a
    1692:	8b a5       	ldd	r24, Y+43	; 0x2b
    1694:	9c a5       	ldd	r25, Y+44	; 0x2c
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	53 e4       	ldi	r21, 0x43	; 67
    169e:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <steppermotor2Write+0x2ce>
    16a6:	7b c0       	rjmp	.+246    	; 0x179e <steppermotor2Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    16a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    16aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    16ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ae:	98 a9       	ldd	r25, Y+48	; 0x30
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a e7       	ldi	r20, 0x7A	; 122
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8c a3       	std	Y+36, r24	; 0x24
    16c2:	9d a3       	std	Y+37, r25	; 0x25
    16c4:	ae a3       	std	Y+38, r26	; 0x26
    16c6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c8:	6c a1       	ldd	r22, Y+36	; 0x24
    16ca:	7d a1       	ldd	r23, Y+37	; 0x25
    16cc:	8e a1       	ldd	r24, Y+38	; 0x26
    16ce:	9f a1       	ldd	r25, Y+39	; 0x27
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4a e7       	ldi	r20, 0x7A	; 122
    16d6:	55 e4       	ldi	r21, 0x45	; 69
    16d8:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	88 a3       	std	Y+32, r24	; 0x20
    16e2:	99 a3       	std	Y+33, r25	; 0x21
    16e4:	aa a3       	std	Y+34, r26	; 0x22
    16e6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    16e8:	68 a1       	ldd	r22, Y+32	; 0x20
    16ea:	79 a1       	ldd	r23, Y+33	; 0x21
    16ec:	8a a1       	ldd	r24, Y+34	; 0x22
    16ee:	9b a1       	ldd	r25, Y+35	; 0x23
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	2c f4       	brge	.+10     	; 0x170a <steppermotor2Write+0x330>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9f 8f       	std	Y+31, r25	; 0x1f
    1706:	8e 8f       	std	Y+30, r24	; 0x1e
    1708:	3f c0       	rjmp	.+126    	; 0x1788 <steppermotor2Write+0x3ae>
	else if (__tmp > 65535)
    170a:	68 a1       	ldd	r22, Y+32	; 0x20
    170c:	79 a1       	ldd	r23, Y+33	; 0x21
    170e:	8a a1       	ldd	r24, Y+34	; 0x22
    1710:	9b a1       	ldd	r25, Y+35	; 0x23
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	4c f5       	brge	.+82     	; 0x1774 <steppermotor2Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1722:	6c a1       	ldd	r22, Y+36	; 0x24
    1724:	7d a1       	ldd	r23, Y+37	; 0x25
    1726:	8e a1       	ldd	r24, Y+38	; 0x26
    1728:	9f a1       	ldd	r25, Y+39	; 0x27
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9f 8f       	std	Y+31, r25	; 0x1f
    1748:	8e 8f       	std	Y+30, r24	; 0x1e
    174a:	0f c0       	rjmp	.+30     	; 0x176a <steppermotor2Write+0x390>
    174c:	80 e9       	ldi	r24, 0x90	; 144
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	9d 8f       	std	Y+29, r25	; 0x1d
    1752:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1754:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1756:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <steppermotor2Write+0x37e>
    175c:	9d 8f       	std	Y+29, r25	; 0x1d
    175e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1760:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1762:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	9f 8f       	std	Y+31, r25	; 0x1f
    1768:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    176c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	69 f7       	brne	.-38     	; 0x174c <steppermotor2Write+0x372>
    1772:	24 c0       	rjmp	.+72     	; 0x17bc <steppermotor2Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1774:	68 a1       	ldd	r22, Y+32	; 0x20
    1776:	79 a1       	ldd	r23, Y+33	; 0x21
    1778:	8a a1       	ldd	r24, Y+34	; 0x22
    177a:	9b a1       	ldd	r25, Y+35	; 0x23
    177c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	9f 8f       	std	Y+31, r25	; 0x1f
    1786:	8e 8f       	std	Y+30, r24	; 0x1e
    1788:	8e 8d       	ldd	r24, Y+30	; 0x1e
    178a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    178c:	9b 8f       	std	Y+27, r25	; 0x1b
    178e:	8a 8f       	std	Y+26, r24	; 0x1a
    1790:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1792:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <steppermotor2Write+0x3ba>
    1798:	9b 8f       	std	Y+27, r25	; 0x1b
    179a:	8a 8f       	std	Y+26, r24	; 0x1a
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <steppermotor2Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    179e:	69 a5       	ldd	r22, Y+41	; 0x29
    17a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    17a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17a6:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	88 a7       	std	Y+40, r24	; 0x28
    17b0:	88 a5       	ldd	r24, Y+40	; 0x28
    17b2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17b4:	89 8d       	ldd	r24, Y+25	; 0x19
    17b6:	8a 95       	dec	r24
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <steppermotor2Write+0x3dc>
    17ba:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor2Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    17bc:	8b a9       	ldd	r24, Y+51	; 0x33
    17be:	9c a9       	ldd	r25, Y+52	; 0x34
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	9c ab       	std	Y+52, r25	; 0x34
    17c4:	8b ab       	std	Y+51, r24	; 0x33
    17c6:	8b a9       	ldd	r24, Y+51	; 0x33
    17c8:	9c a9       	ldd	r25, Y+52	; 0x34
    17ca:	88 30       	cpi	r24, 0x08	; 8
    17cc:	91 05       	cpc	r25, r1
    17ce:	0c f4       	brge	.+2      	; 0x17d2 <steppermotor2Write+0x3f8>
    17d0:	16 ce       	rjmp	.-980    	; 0x13fe <steppermotor2Write+0x24>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    17d2:	1e aa       	std	Y+54, r1	; 0x36
    17d4:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor2Write(int a)
{
    while(a  == 1)
    17d6:	8d a9       	ldd	r24, Y+53	; 0x35
    17d8:	9e a9       	ldd	r25, Y+54	; 0x36
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <steppermotor2Write+0x408>
    17e0:	09 ce       	rjmp	.-1006   	; 0x13f4 <steppermotor2Write+0x1a>
    17e2:	f0 c1       	rjmp	.+992    	; 0x1bc4 <steppermotor2Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    17e4:	88 e0       	ldi	r24, 0x08	; 8
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9a ab       	std	Y+50, r25	; 0x32
    17ea:	89 ab       	std	Y+49, r24	; 0x31
    17ec:	e3 c1       	rjmp	.+966    	; 0x1bb4 <steppermotor2Write+0x7da>
        {
            switch (i)
    17ee:	89 a9       	ldd	r24, Y+49	; 0x31
    17f0:	9a a9       	ldd	r25, Y+50	; 0x32
    17f2:	9a af       	std	Y+58, r25	; 0x3a
    17f4:	89 af       	std	Y+57, r24	; 0x39
    17f6:	89 ad       	ldd	r24, Y+57	; 0x39
    17f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17fa:	84 30       	cpi	r24, 0x04	; 4
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <steppermotor2Write+0x428>
    1800:	a3 c0       	rjmp	.+326    	; 0x1948 <steppermotor2Write+0x56e>
    1802:	89 ad       	ldd	r24, Y+57	; 0x39
    1804:	9a ad       	ldd	r25, Y+58	; 0x3a
    1806:	85 30       	cpi	r24, 0x05	; 5
    1808:	91 05       	cpc	r25, r1
    180a:	94 f4       	brge	.+36     	; 0x1830 <steppermotor2Write+0x456>
    180c:	89 ad       	ldd	r24, Y+57	; 0x39
    180e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <steppermotor2Write+0x43e>
    1816:	5e c0       	rjmp	.+188    	; 0x18d4 <steppermotor2Write+0x4fa>
    1818:	89 ad       	ldd	r24, Y+57	; 0x39
    181a:	9a ad       	ldd	r25, Y+58	; 0x3a
    181c:	83 30       	cpi	r24, 0x03	; 3
    181e:	91 05       	cpc	r25, r1
    1820:	0c f0       	brlt	.+2      	; 0x1824 <steppermotor2Write+0x44a>
    1822:	75 c0       	rjmp	.+234    	; 0x190e <steppermotor2Write+0x534>
    1824:	89 ad       	ldd	r24, Y+57	; 0x39
    1826:	9a ad       	ldd	r25, Y+58	; 0x3a
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	91 05       	cpc	r25, r1
    182c:	b1 f1       	breq	.+108    	; 0x189a <steppermotor2Write+0x4c0>
    182e:	ff c0       	rjmp	.+510    	; 0x1a2e <steppermotor2Write+0x654>
    1830:	89 ad       	ldd	r24, Y+57	; 0x39
    1832:	9a ad       	ldd	r25, Y+58	; 0x3a
    1834:	86 30       	cpi	r24, 0x06	; 6
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <steppermotor2Write+0x462>
    183a:	c0 c0       	rjmp	.+384    	; 0x19bc <steppermotor2Write+0x5e2>
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1840:	86 30       	cpi	r24, 0x06	; 6
    1842:	91 05       	cpc	r25, r1
    1844:	0c f4       	brge	.+2      	; 0x1848 <steppermotor2Write+0x46e>
    1846:	9d c0       	rjmp	.+314    	; 0x1982 <steppermotor2Write+0x5a8>
    1848:	89 ad       	ldd	r24, Y+57	; 0x39
    184a:	9a ad       	ldd	r25, Y+58	; 0x3a
    184c:	87 30       	cpi	r24, 0x07	; 7
    184e:	91 05       	cpc	r25, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <steppermotor2Write+0x47a>
    1852:	d1 c0       	rjmp	.+418    	; 0x19f6 <steppermotor2Write+0x61c>
    1854:	89 ad       	ldd	r24, Y+57	; 0x39
    1856:	9a ad       	ldd	r25, Y+58	; 0x3a
    1858:	88 30       	cpi	r24, 0x08	; 8
    185a:	91 05       	cpc	r25, r1
    185c:	09 f0       	breq	.+2      	; 0x1860 <steppermotor2Write+0x486>
    185e:	e7 c0       	rjmp	.+462    	; 0x1a2e <steppermotor2Write+0x654>
            {
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1860:	a8 e2       	ldi	r26, 0x28	; 40
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e8 e2       	ldi	r30, 0x28	; 40
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	80 64       	ori	r24, 0x40	; 64
    186c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    186e:	a8 e2       	ldi	r26, 0x28	; 40
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e8 e2       	ldi	r30, 0x28	; 40
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7e       	andi	r24, 0xEF	; 239
    187a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    187c:	a8 e2       	ldi	r26, 0x28	; 40
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e8 e2       	ldi	r30, 0x28	; 40
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8b 7f       	andi	r24, 0xFB	; 251
    1888:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    188a:	a8 e2       	ldi	r26, 0x28	; 40
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e2       	ldi	r30, 0x28	; 40
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8e 7f       	andi	r24, 0xFE	; 254
    1896:	8c 93       	st	X, r24
    1898:	ca c0       	rjmp	.+404    	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    189a:	a8 e2       	ldi	r26, 0x28	; 40
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e2       	ldi	r30, 0x28	; 40
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 64       	ori	r24, 0x40	; 64
    18a6:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    18a8:	a8 e2       	ldi	r26, 0x28	; 40
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e8 e2       	ldi	r30, 0x28	; 40
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 61       	ori	r24, 0x10	; 16
    18b4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    18b6:	a8 e2       	ldi	r26, 0x28	; 40
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e8 e2       	ldi	r30, 0x28	; 40
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8b 7f       	andi	r24, 0xFB	; 251
    18c2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    18c4:	a8 e2       	ldi	r26, 0x28	; 40
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e8 e2       	ldi	r30, 0x28	; 40
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8e 7f       	andi	r24, 0xFE	; 254
    18d0:	8c 93       	st	X, r24
    18d2:	ad c0       	rjmp	.+346    	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 2 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    18d4:	a8 e2       	ldi	r26, 0x28	; 40
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e8 e2       	ldi	r30, 0x28	; 40
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8f 7b       	andi	r24, 0xBF	; 191
    18e0:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    18e2:	a8 e2       	ldi	r26, 0x28	; 40
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e2       	ldi	r30, 0x28	; 40
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    18f0:	a8 e2       	ldi	r26, 0x28	; 40
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e8 e2       	ldi	r30, 0x28	; 40
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8b 7f       	andi	r24, 0xFB	; 251
    18fc:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    18fe:	a8 e2       	ldi	r26, 0x28	; 40
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e8 e2       	ldi	r30, 0x28	; 40
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8e 7f       	andi	r24, 0xFE	; 254
    190a:	8c 93       	st	X, r24
    190c:	90 c0       	rjmp	.+288    	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    190e:	a8 e2       	ldi	r26, 0x28	; 40
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e8 e2       	ldi	r30, 0x28	; 40
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8f 7b       	andi	r24, 0xBF	; 191
    191a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    191c:	a8 e2       	ldi	r26, 0x28	; 40
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e8 e2       	ldi	r30, 0x28	; 40
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 61       	ori	r24, 0x10	; 16
    1928:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    192a:	a8 e2       	ldi	r26, 0x28	; 40
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e8 e2       	ldi	r30, 0x28	; 40
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	84 60       	ori	r24, 0x04	; 4
    1936:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1938:	a8 e2       	ldi	r26, 0x28	; 40
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e8 e2       	ldi	r30, 0x28	; 40
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8e 7f       	andi	r24, 0xFE	; 254
    1944:	8c 93       	st	X, r24
    1946:	73 c0       	rjmp	.+230    	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1948:	a8 e2       	ldi	r26, 0x28	; 40
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e2       	ldi	r30, 0x28	; 40
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8f 7b       	andi	r24, 0xBF	; 191
    1954:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1956:	a8 e2       	ldi	r26, 0x28	; 40
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e8 e2       	ldi	r30, 0x28	; 40
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8f 7e       	andi	r24, 0xEF	; 239
    1962:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1964:	a8 e2       	ldi	r26, 0x28	; 40
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e8 e2       	ldi	r30, 0x28	; 40
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	84 60       	ori	r24, 0x04	; 4
    1970:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1972:	a8 e2       	ldi	r26, 0x28	; 40
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e8 e2       	ldi	r30, 0x28	; 40
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8e 7f       	andi	r24, 0xFE	; 254
    197e:	8c 93       	st	X, r24
    1980:	56 c0       	rjmp	.+172    	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1982:	a8 e2       	ldi	r26, 0x28	; 40
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e8 e2       	ldi	r30, 0x28	; 40
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7b       	andi	r24, 0xBF	; 191
    198e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1990:	a8 e2       	ldi	r26, 0x28	; 40
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e2       	ldi	r30, 0x28	; 40
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    199e:	a8 e2       	ldi	r26, 0x28	; 40
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e8 e2       	ldi	r30, 0x28	; 40
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	84 60       	ori	r24, 0x04	; 4
    19aa:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    19ac:	a8 e2       	ldi	r26, 0x28	; 40
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e8 e2       	ldi	r30, 0x28	; 40
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	81 60       	ori	r24, 0x01	; 1
    19b8:	8c 93       	st	X, r24
    19ba:	39 c0       	rjmp	.+114    	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    19bc:	a8 e2       	ldi	r26, 0x28	; 40
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e8 e2       	ldi	r30, 0x28	; 40
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 7b       	andi	r24, 0xBF	; 191
    19c8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    19ca:	a8 e2       	ldi	r26, 0x28	; 40
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e8 e2       	ldi	r30, 0x28	; 40
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7e       	andi	r24, 0xEF	; 239
    19d6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    19d8:	a8 e2       	ldi	r26, 0x28	; 40
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e8 e2       	ldi	r30, 0x28	; 40
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 7f       	andi	r24, 0xFB	; 251
    19e4:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    19e6:	a8 e2       	ldi	r26, 0x28	; 40
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e8 e2       	ldi	r30, 0x28	; 40
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	8c 93       	st	X, r24
    19f4:	1c c0       	rjmp	.+56     	; 0x1a2e <steppermotor2Write+0x654>
                break;
            case 7 :
                PORTStepper2 |= (1 << PStepper2_1);
    19f6:	a8 e2       	ldi	r26, 0x28	; 40
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e2       	ldi	r30, 0x28	; 40
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1a04:	a8 e2       	ldi	r26, 0x28	; 40
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e2       	ldi	r30, 0x28	; 40
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 7e       	andi	r24, 0xEF	; 239
    1a10:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1a12:	a8 e2       	ldi	r26, 0x28	; 40
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e2       	ldi	r30, 0x28	; 40
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8b 7f       	andi	r24, 0xFB	; 251
    1a1e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1a20:	a8 e2       	ldi	r26, 0x28	; 40
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e2       	ldi	r30, 0x28	; 40
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	81 60       	ori	r24, 0x01	; 1
    1a2c:	8c 93       	st	X, r24
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	aa e7       	ldi	r26, 0x7A	; 122
    1a34:	b4 e4       	ldi	r27, 0x44	; 68
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
    1a38:	9e 8b       	std	Y+22, r25	; 0x16
    1a3a:	af 8b       	std	Y+23, r26	; 0x17
    1a3c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	2b ea       	ldi	r18, 0xAB	; 171
    1a48:	3a ea       	ldi	r19, 0xAA	; 170
    1a4a:	4a ea       	ldi	r20, 0xAA	; 170
    1a4c:	50 e4       	ldi	r21, 0x40	; 64
    1a4e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	89 8b       	std	Y+17, r24	; 0x11
    1a58:	9a 8b       	std	Y+18, r25	; 0x12
    1a5a:	ab 8b       	std	Y+19, r26	; 0x13
    1a5c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a5e:	69 89       	ldd	r22, Y+17	; 0x11
    1a60:	7a 89       	ldd	r23, Y+18	; 0x12
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	1c f4       	brge	.+6      	; 0x1a7c <steppermotor2Write+0x6a2>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	88 8b       	std	Y+16, r24	; 0x10
    1a7a:	91 c0       	rjmp	.+290    	; 0x1b9e <steppermotor2Write+0x7c4>
	else if (__tmp > 255)
    1a7c:	69 89       	ldd	r22, Y+17	; 0x11
    1a7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	0c f0       	brlt	.+2      	; 0x1a96 <steppermotor2Write+0x6bc>
    1a94:	7b c0       	rjmp	.+246    	; 0x1b8c <steppermotor2Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1a96:	6d 89       	ldd	r22, Y+21	; 0x15
    1a98:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a e7       	ldi	r20, 0x7A	; 122
    1aa4:	54 e4       	ldi	r21, 0x44	; 68
    1aa6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8c 87       	std	Y+12, r24	; 0x0c
    1ab0:	9d 87       	std	Y+13, r25	; 0x0d
    1ab2:	ae 87       	std	Y+14, r26	; 0x0e
    1ab4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ab8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1abc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a e7       	ldi	r20, 0x7A	; 122
    1ac4:	55 e4       	ldi	r21, 0x45	; 69
    1ac6:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	88 87       	std	Y+8, r24	; 0x08
    1ad0:	99 87       	std	Y+9, r25	; 0x09
    1ad2:	aa 87       	std	Y+10, r26	; 0x0a
    1ad4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ad6:	68 85       	ldd	r22, Y+8	; 0x08
    1ad8:	79 85       	ldd	r23, Y+9	; 0x09
    1ada:	8a 85       	ldd	r24, Y+10	; 0x0a
    1adc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <steppermotor2Write+0x71e>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9f 83       	std	Y+7, r25	; 0x07
    1af4:	8e 83       	std	Y+6, r24	; 0x06
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <steppermotor2Write+0x79c>
	else if (__tmp > 65535)
    1af8:	68 85       	ldd	r22, Y+8	; 0x08
    1afa:	79 85       	ldd	r23, Y+9	; 0x09
    1afc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1afe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <steppermotor2Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b12:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9f 83       	std	Y+7, r25	; 0x07
    1b36:	8e 83       	std	Y+6, r24	; 0x06
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <steppermotor2Write+0x77e>
    1b3a:	80 e9       	ldi	r24, 0x90	; 144
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	9d 83       	std	Y+5, r25	; 0x05
    1b40:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <steppermotor2Write+0x76c>
    1b4a:	9d 83       	std	Y+5, r25	; 0x05
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b50:	9f 81       	ldd	r25, Y+7	; 0x07
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9f 83       	std	Y+7, r25	; 0x07
    1b56:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <steppermotor2Write+0x760>
    1b60:	24 c0       	rjmp	.+72     	; 0x1baa <steppermotor2Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	68 85       	ldd	r22, Y+8	; 0x08
    1b64:	79 85       	ldd	r23, Y+9	; 0x09
    1b66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6a:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9f 83       	std	Y+7, r25	; 0x07
    1b74:	8e 83       	std	Y+6, r24	; 0x06
    1b76:	8e 81       	ldd	r24, Y+6	; 0x06
    1b78:	9f 81       	ldd	r25, Y+7	; 0x07
    1b7a:	9b 83       	std	Y+3, r25	; 0x03
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	9b 81       	ldd	r25, Y+3	; 0x03
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <steppermotor2Write+0x7a8>
    1b86:	9b 83       	std	Y+3, r25	; 0x03
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <steppermotor2Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b8c:	69 89       	ldd	r22, Y+17	; 0x11
    1b8e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b90:	8b 89       	ldd	r24, Y+19	; 0x13
    1b92:	9c 89       	ldd	r25, Y+20	; 0x14
    1b94:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	88 8b       	std	Y+16, r24	; 0x10
    1b9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	8a 95       	dec	r24
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <steppermotor2Write+0x7ca>
    1ba8:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1baa:	89 a9       	ldd	r24, Y+49	; 0x31
    1bac:	9a a9       	ldd	r25, Y+50	; 0x32
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9a ab       	std	Y+50, r25	; 0x32
    1bb2:	89 ab       	std	Y+49, r24	; 0x31
    1bb4:	89 a9       	ldd	r24, Y+49	; 0x31
    1bb6:	9a a9       	ldd	r25, Y+50	; 0x32
    1bb8:	18 16       	cp	r1, r24
    1bba:	19 06       	cpc	r1, r25
    1bbc:	0c f4       	brge	.+2      	; 0x1bc0 <steppermotor2Write+0x7e6>
    1bbe:	17 ce       	rjmp	.-978    	; 0x17ee <steppermotor2Write+0x414>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1bc0:	1e aa       	std	Y+54, r1	; 0x36
    1bc2:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    1bc4:	8d a9       	ldd	r24, Y+53	; 0x35
    1bc6:	9e a9       	ldd	r25, Y+54	; 0x36
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <steppermotor2Write+0x7f6>
    1bce:	0a ce       	rjmp	.-1004   	; 0x17e4 <steppermotor2Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    1bd0:	ea 96       	adiw	r28, 0x3a	; 58
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <steppermotor3Write>:

void steppermotor3Write(int a)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	ea 97       	sbiw	r28, 0x3a	; 58
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	9e ab       	std	Y+54, r25	; 0x36
    1bf8:	8d ab       	std	Y+53, r24	; 0x35
    1bfa:	f1 c1       	rjmp	.+994    	; 0x1fde <steppermotor3Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9c ab       	std	Y+52, r25	; 0x34
    1c02:	8b ab       	std	Y+51, r24	; 0x33
    1c04:	e4 c1       	rjmp	.+968    	; 0x1fce <steppermotor3Write+0x3ec>
        {
            switch (i)
    1c06:	8b a9       	ldd	r24, Y+51	; 0x33
    1c08:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0a:	98 af       	std	Y+56, r25	; 0x38
    1c0c:	8f ab       	std	Y+55, r24	; 0x37
    1c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c10:	98 ad       	ldd	r25, Y+56	; 0x38
    1c12:	84 30       	cpi	r24, 0x04	; 4
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <steppermotor3Write+0x38>
    1c18:	87 c0       	rjmp	.+270    	; 0x1d28 <steppermotor3Write+0x146>
    1c1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1e:	85 30       	cpi	r24, 0x05	; 5
    1c20:	91 05       	cpc	r25, r1
    1c22:	94 f4       	brge	.+36     	; 0x1c48 <steppermotor3Write+0x66>
    1c24:	8f a9       	ldd	r24, Y+55	; 0x37
    1c26:	98 ad       	ldd	r25, Y+56	; 0x38
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <steppermotor3Write+0x4e>
    1c2e:	42 c0       	rjmp	.+132    	; 0x1cb4 <steppermotor3Write+0xd2>
    1c30:	8f a9       	ldd	r24, Y+55	; 0x37
    1c32:	98 ad       	ldd	r25, Y+56	; 0x38
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	0c f0       	brlt	.+2      	; 0x1c3c <steppermotor3Write+0x5a>
    1c3a:	59 c0       	rjmp	.+178    	; 0x1cee <steppermotor3Write+0x10c>
    1c3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	91 05       	cpc	r25, r1
    1c44:	d1 f0       	breq	.+52     	; 0x1c7a <steppermotor3Write+0x98>
    1c46:	00 c1       	rjmp	.+512    	; 0x1e48 <steppermotor3Write+0x266>
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	86 30       	cpi	r24, 0x06	; 6
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <steppermotor3Write+0x72>
    1c52:	a4 c0       	rjmp	.+328    	; 0x1d9c <steppermotor3Write+0x1ba>
    1c54:	8f a9       	ldd	r24, Y+55	; 0x37
    1c56:	98 ad       	ldd	r25, Y+56	; 0x38
    1c58:	86 30       	cpi	r24, 0x06	; 6
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	0c f4       	brge	.+2      	; 0x1c60 <steppermotor3Write+0x7e>
    1c5e:	81 c0       	rjmp	.+258    	; 0x1d62 <steppermotor3Write+0x180>
    1c60:	8f a9       	ldd	r24, Y+55	; 0x37
    1c62:	98 ad       	ldd	r25, Y+56	; 0x38
    1c64:	87 30       	cpi	r24, 0x07	; 7
    1c66:	91 05       	cpc	r25, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <steppermotor3Write+0x8a>
    1c6a:	b5 c0       	rjmp	.+362    	; 0x1dd6 <steppermotor3Write+0x1f4>
    1c6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c70:	88 30       	cpi	r24, 0x08	; 8
    1c72:	91 05       	cpc	r25, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <steppermotor3Write+0x96>
    1c76:	cc c0       	rjmp	.+408    	; 0x1e10 <steppermotor3Write+0x22e>
    1c78:	e7 c0       	rjmp	.+462    	; 0x1e48 <steppermotor3Write+0x266>
            {
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c7a:	ab e0       	ldi	r26, 0x0B	; 11
    1c7c:	b1 e0       	ldi	r27, 0x01	; 1
    1c7e:	eb e0       	ldi	r30, 0x0B	; 11
    1c80:	f1 e0       	ldi	r31, 0x01	; 1
    1c82:	80 81       	ld	r24, Z
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1c88:	ab e0       	ldi	r26, 0x0B	; 11
    1c8a:	b1 e0       	ldi	r27, 0x01	; 1
    1c8c:	eb e0       	ldi	r30, 0x0B	; 11
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7d       	andi	r24, 0xDF	; 223
    1c94:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1c96:	ab e0       	ldi	r26, 0x0B	; 11
    1c98:	b1 e0       	ldi	r27, 0x01	; 1
    1c9a:	eb e0       	ldi	r30, 0x0B	; 11
    1c9c:	f1 e0       	ldi	r31, 0x01	; 1
    1c9e:	80 81       	ld	r24, Z
    1ca0:	87 7f       	andi	r24, 0xF7	; 247
    1ca2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1ca4:	ab e0       	ldi	r26, 0x0B	; 11
    1ca6:	b1 e0       	ldi	r27, 0x01	; 1
    1ca8:	eb e0       	ldi	r30, 0x0B	; 11
    1caa:	f1 e0       	ldi	r31, 0x01	; 1
    1cac:	80 81       	ld	r24, Z
    1cae:	8d 7f       	andi	r24, 0xFD	; 253
    1cb0:	8c 93       	st	X, r24
    1cb2:	ca c0       	rjmp	.+404    	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 2 :
                PORTStepper3 |= (1 << PStepper3_1);
    1cb4:	ab e0       	ldi	r26, 0x0B	; 11
    1cb6:	b1 e0       	ldi	r27, 0x01	; 1
    1cb8:	eb e0       	ldi	r30, 0x0B	; 11
    1cba:	f1 e0       	ldi	r31, 0x01	; 1
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 68       	ori	r24, 0x80	; 128
    1cc0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1cc2:	ab e0       	ldi	r26, 0x0B	; 11
    1cc4:	b1 e0       	ldi	r27, 0x01	; 1
    1cc6:	eb e0       	ldi	r30, 0x0B	; 11
    1cc8:	f1 e0       	ldi	r31, 0x01	; 1
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 62       	ori	r24, 0x20	; 32
    1cce:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1cd0:	ab e0       	ldi	r26, 0x0B	; 11
    1cd2:	b1 e0       	ldi	r27, 0x01	; 1
    1cd4:	eb e0       	ldi	r30, 0x0B	; 11
    1cd6:	f1 e0       	ldi	r31, 0x01	; 1
    1cd8:	80 81       	ld	r24, Z
    1cda:	87 7f       	andi	r24, 0xF7	; 247
    1cdc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cde:	ab e0       	ldi	r26, 0x0B	; 11
    1ce0:	b1 e0       	ldi	r27, 0x01	; 1
    1ce2:	eb e0       	ldi	r30, 0x0B	; 11
    1ce4:	f1 e0       	ldi	r31, 0x01	; 1
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8d 7f       	andi	r24, 0xFD	; 253
    1cea:	8c 93       	st	X, r24
    1cec:	ad c0       	rjmp	.+346    	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1cee:	ab e0       	ldi	r26, 0x0B	; 11
    1cf0:	b1 e0       	ldi	r27, 0x01	; 1
    1cf2:	eb e0       	ldi	r30, 0x0B	; 11
    1cf4:	f1 e0       	ldi	r31, 0x01	; 1
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8f 77       	andi	r24, 0x7F	; 127
    1cfa:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1cfc:	ab e0       	ldi	r26, 0x0B	; 11
    1cfe:	b1 e0       	ldi	r27, 0x01	; 1
    1d00:	eb e0       	ldi	r30, 0x0B	; 11
    1d02:	f1 e0       	ldi	r31, 0x01	; 1
    1d04:	80 81       	ld	r24, Z
    1d06:	80 62       	ori	r24, 0x20	; 32
    1d08:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1d0a:	ab e0       	ldi	r26, 0x0B	; 11
    1d0c:	b1 e0       	ldi	r27, 0x01	; 1
    1d0e:	eb e0       	ldi	r30, 0x0B	; 11
    1d10:	f1 e0       	ldi	r31, 0x01	; 1
    1d12:	80 81       	ld	r24, Z
    1d14:	87 7f       	andi	r24, 0xF7	; 247
    1d16:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d18:	ab e0       	ldi	r26, 0x0B	; 11
    1d1a:	b1 e0       	ldi	r27, 0x01	; 1
    1d1c:	eb e0       	ldi	r30, 0x0B	; 11
    1d1e:	f1 e0       	ldi	r31, 0x01	; 1
    1d20:	80 81       	ld	r24, Z
    1d22:	8d 7f       	andi	r24, 0xFD	; 253
    1d24:	8c 93       	st	X, r24
    1d26:	90 c0       	rjmp	.+288    	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d28:	ab e0       	ldi	r26, 0x0B	; 11
    1d2a:	b1 e0       	ldi	r27, 0x01	; 1
    1d2c:	eb e0       	ldi	r30, 0x0B	; 11
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 77       	andi	r24, 0x7F	; 127
    1d34:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1d36:	ab e0       	ldi	r26, 0x0B	; 11
    1d38:	b1 e0       	ldi	r27, 0x01	; 1
    1d3a:	eb e0       	ldi	r30, 0x0B	; 11
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 62       	ori	r24, 0x20	; 32
    1d42:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d44:	ab e0       	ldi	r26, 0x0B	; 11
    1d46:	b1 e0       	ldi	r27, 0x01	; 1
    1d48:	eb e0       	ldi	r30, 0x0B	; 11
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 60       	ori	r24, 0x08	; 8
    1d50:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d52:	ab e0       	ldi	r26, 0x0B	; 11
    1d54:	b1 e0       	ldi	r27, 0x01	; 1
    1d56:	eb e0       	ldi	r30, 0x0B	; 11
    1d58:	f1 e0       	ldi	r31, 0x01	; 1
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8d 7f       	andi	r24, 0xFD	; 253
    1d5e:	8c 93       	st	X, r24
    1d60:	73 c0       	rjmp	.+230    	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d62:	ab e0       	ldi	r26, 0x0B	; 11
    1d64:	b1 e0       	ldi	r27, 0x01	; 1
    1d66:	eb e0       	ldi	r30, 0x0B	; 11
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8f 77       	andi	r24, 0x7F	; 127
    1d6e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d70:	ab e0       	ldi	r26, 0x0B	; 11
    1d72:	b1 e0       	ldi	r27, 0x01	; 1
    1d74:	eb e0       	ldi	r30, 0x0B	; 11
    1d76:	f1 e0       	ldi	r31, 0x01	; 1
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 7d       	andi	r24, 0xDF	; 223
    1d7c:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d7e:	ab e0       	ldi	r26, 0x0B	; 11
    1d80:	b1 e0       	ldi	r27, 0x01	; 1
    1d82:	eb e0       	ldi	r30, 0x0B	; 11
    1d84:	f1 e0       	ldi	r31, 0x01	; 1
    1d86:	80 81       	ld	r24, Z
    1d88:	88 60       	ori	r24, 0x08	; 8
    1d8a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d8c:	ab e0       	ldi	r26, 0x0B	; 11
    1d8e:	b1 e0       	ldi	r27, 0x01	; 1
    1d90:	eb e0       	ldi	r30, 0x0B	; 11
    1d92:	f1 e0       	ldi	r31, 0x01	; 1
    1d94:	80 81       	ld	r24, Z
    1d96:	8d 7f       	andi	r24, 0xFD	; 253
    1d98:	8c 93       	st	X, r24
    1d9a:	56 c0       	rjmp	.+172    	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d9c:	ab e0       	ldi	r26, 0x0B	; 11
    1d9e:	b1 e0       	ldi	r27, 0x01	; 1
    1da0:	eb e0       	ldi	r30, 0x0B	; 11
    1da2:	f1 e0       	ldi	r31, 0x01	; 1
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 77       	andi	r24, 0x7F	; 127
    1da8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1daa:	ab e0       	ldi	r26, 0x0B	; 11
    1dac:	b1 e0       	ldi	r27, 0x01	; 1
    1dae:	eb e0       	ldi	r30, 0x0B	; 11
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 7d       	andi	r24, 0xDF	; 223
    1db6:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1db8:	ab e0       	ldi	r26, 0x0B	; 11
    1dba:	b1 e0       	ldi	r27, 0x01	; 1
    1dbc:	eb e0       	ldi	r30, 0x0B	; 11
    1dbe:	f1 e0       	ldi	r31, 0x01	; 1
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 60       	ori	r24, 0x08	; 8
    1dc4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1dc6:	ab e0       	ldi	r26, 0x0B	; 11
    1dc8:	b1 e0       	ldi	r27, 0x01	; 1
    1dca:	eb e0       	ldi	r30, 0x0B	; 11
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	80 81       	ld	r24, Z
    1dd0:	82 60       	ori	r24, 0x02	; 2
    1dd2:	8c 93       	st	X, r24
    1dd4:	39 c0       	rjmp	.+114    	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 7 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1dd6:	ab e0       	ldi	r26, 0x0B	; 11
    1dd8:	b1 e0       	ldi	r27, 0x01	; 1
    1dda:	eb e0       	ldi	r30, 0x0B	; 11
    1ddc:	f1 e0       	ldi	r31, 0x01	; 1
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1de4:	ab e0       	ldi	r26, 0x0B	; 11
    1de6:	b1 e0       	ldi	r27, 0x01	; 1
    1de8:	eb e0       	ldi	r30, 0x0B	; 11
    1dea:	f1 e0       	ldi	r31, 0x01	; 1
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 7d       	andi	r24, 0xDF	; 223
    1df0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1df2:	ab e0       	ldi	r26, 0x0B	; 11
    1df4:	b1 e0       	ldi	r27, 0x01	; 1
    1df6:	eb e0       	ldi	r30, 0x0B	; 11
    1df8:	f1 e0       	ldi	r31, 0x01	; 1
    1dfa:	80 81       	ld	r24, Z
    1dfc:	87 7f       	andi	r24, 0xF7	; 247
    1dfe:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1e00:	ab e0       	ldi	r26, 0x0B	; 11
    1e02:	b1 e0       	ldi	r27, 0x01	; 1
    1e04:	eb e0       	ldi	r30, 0x0B	; 11
    1e06:	f1 e0       	ldi	r31, 0x01	; 1
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	8c 93       	st	X, r24
    1e0e:	1c c0       	rjmp	.+56     	; 0x1e48 <steppermotor3Write+0x266>
                break;
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    1e10:	ab e0       	ldi	r26, 0x0B	; 11
    1e12:	b1 e0       	ldi	r27, 0x01	; 1
    1e14:	eb e0       	ldi	r30, 0x0B	; 11
    1e16:	f1 e0       	ldi	r31, 0x01	; 1
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 68       	ori	r24, 0x80	; 128
    1e1c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1e1e:	ab e0       	ldi	r26, 0x0B	; 11
    1e20:	b1 e0       	ldi	r27, 0x01	; 1
    1e22:	eb e0       	ldi	r30, 0x0B	; 11
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	80 81       	ld	r24, Z
    1e28:	8f 7d       	andi	r24, 0xDF	; 223
    1e2a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1e2c:	ab e0       	ldi	r26, 0x0B	; 11
    1e2e:	b1 e0       	ldi	r27, 0x01	; 1
    1e30:	eb e0       	ldi	r30, 0x0B	; 11
    1e32:	f1 e0       	ldi	r31, 0x01	; 1
    1e34:	80 81       	ld	r24, Z
    1e36:	87 7f       	andi	r24, 0xF7	; 247
    1e38:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1e3a:	ab e0       	ldi	r26, 0x0B	; 11
    1e3c:	b1 e0       	ldi	r27, 0x01	; 1
    1e3e:	eb e0       	ldi	r30, 0x0B	; 11
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	80 81       	ld	r24, Z
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8c 93       	st	X, r24
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	aa e7       	ldi	r26, 0x7A	; 122
    1e4e:	b4 e4       	ldi	r27, 0x44	; 68
    1e50:	8d a7       	std	Y+45, r24	; 0x2d
    1e52:	9e a7       	std	Y+46, r25	; 0x2e
    1e54:	af a7       	std	Y+47, r26	; 0x2f
    1e56:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e58:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e5a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e60:	2b ea       	ldi	r18, 0xAB	; 171
    1e62:	3a ea       	ldi	r19, 0xAA	; 170
    1e64:	4a ea       	ldi	r20, 0xAA	; 170
    1e66:	50 e4       	ldi	r21, 0x40	; 64
    1e68:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	89 a7       	std	Y+41, r24	; 0x29
    1e72:	9a a7       	std	Y+42, r25	; 0x2a
    1e74:	ab a7       	std	Y+43, r26	; 0x2b
    1e76:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e78:	69 a5       	ldd	r22, Y+41	; 0x29
    1e7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	1c f4       	brge	.+6      	; 0x1e96 <steppermotor3Write+0x2b4>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	88 a7       	std	Y+40, r24	; 0x28
    1e94:	91 c0       	rjmp	.+290    	; 0x1fb8 <steppermotor3Write+0x3d6>
	else if (__tmp > 255)
    1e96:	69 a5       	ldd	r22, Y+41	; 0x29
    1e98:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	53 e4       	ldi	r21, 0x43	; 67
    1ea6:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	0c f0       	brlt	.+2      	; 0x1eb0 <steppermotor3Write+0x2ce>
    1eae:	7b c0       	rjmp	.+246    	; 0x1fa6 <steppermotor3Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1eb0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eb2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a e7       	ldi	r20, 0x7A	; 122
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8c a3       	std	Y+36, r24	; 0x24
    1eca:	9d a3       	std	Y+37, r25	; 0x25
    1ecc:	ae a3       	std	Y+38, r26	; 0x26
    1ece:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	6c a1       	ldd	r22, Y+36	; 0x24
    1ed2:	7d a1       	ldd	r23, Y+37	; 0x25
    1ed4:	8e a1       	ldd	r24, Y+38	; 0x26
    1ed6:	9f a1       	ldd	r25, Y+39	; 0x27
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a e7       	ldi	r20, 0x7A	; 122
    1ede:	55 e4       	ldi	r21, 0x45	; 69
    1ee0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	88 a3       	std	Y+32, r24	; 0x20
    1eea:	99 a3       	std	Y+33, r25	; 0x21
    1eec:	aa a3       	std	Y+34, r26	; 0x22
    1eee:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ef0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ef2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ef4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <steppermotor3Write+0x330>
		__ticks = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f10:	3f c0       	rjmp	.+126    	; 0x1f90 <steppermotor3Write+0x3ae>
	else if (__tmp > 65535)
    1f12:	68 a1       	ldd	r22, Y+32	; 0x20
    1f14:	79 a1       	ldd	r23, Y+33	; 0x21
    1f16:	8a a1       	ldd	r24, Y+34	; 0x22
    1f18:	9b a1       	ldd	r25, Y+35	; 0x23
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	4c f5       	brge	.+82     	; 0x1f7c <steppermotor3Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f2c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f2e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f30:	9f a1       	ldd	r25, Y+39	; 0x27
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f50:	8e 8f       	std	Y+30, r24	; 0x1e
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <steppermotor3Write+0x390>
    1f54:	80 e9       	ldi	r24, 0x90	; 144
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	9d 8f       	std	Y+29, r25	; 0x1d
    1f5a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <steppermotor3Write+0x37e>
    1f64:	9d 8f       	std	Y+29, r25	; 0x1d
    1f66:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f70:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	69 f7       	brne	.-38     	; 0x1f54 <steppermotor3Write+0x372>
    1f7a:	24 c0       	rjmp	.+72     	; 0x1fc4 <steppermotor3Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f7e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f80:	8a a1       	ldd	r24, Y+34	; 0x22
    1f82:	9b a1       	ldd	r25, Y+35	; 0x23
    1f84:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f94:	9b 8f       	std	Y+27, r25	; 0x1b
    1f96:	8a 8f       	std	Y+26, r24	; 0x1a
    1f98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <steppermotor3Write+0x3ba>
    1fa0:	9b 8f       	std	Y+27, r25	; 0x1b
    1fa2:	8a 8f       	std	Y+26, r24	; 0x1a
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <steppermotor3Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fa6:	69 a5       	ldd	r22, Y+41	; 0x29
    1fa8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fae:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	88 a7       	std	Y+40, r24	; 0x28
    1fb8:	88 a5       	ldd	r24, Y+40	; 0x28
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fbc:	89 8d       	ldd	r24, Y+25	; 0x19
    1fbe:	8a 95       	dec	r24
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <steppermotor3Write+0x3dc>
    1fc2:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor3Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1fc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	9c ab       	std	Y+52, r25	; 0x34
    1fcc:	8b ab       	std	Y+51, r24	; 0x33
    1fce:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd2:	88 30       	cpi	r24, 0x08	; 8
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	0c f4       	brge	.+2      	; 0x1fda <steppermotor3Write+0x3f8>
    1fd8:	16 ce       	rjmp	.-980    	; 0x1c06 <steppermotor3Write+0x24>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1fda:	1e aa       	std	Y+54, r1	; 0x36
    1fdc:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor3Write(int a)
{
    while(a  == 1)
    1fde:	8d a9       	ldd	r24, Y+53	; 0x35
    1fe0:	9e a9       	ldd	r25, Y+54	; 0x36
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <steppermotor3Write+0x408>
    1fe8:	09 ce       	rjmp	.-1006   	; 0x1bfc <steppermotor3Write+0x1a>
    1fea:	f0 c1       	rjmp	.+992    	; 0x23cc <__stack+0x1cd>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1fec:	88 e0       	ldi	r24, 0x08	; 8
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9a ab       	std	Y+50, r25	; 0x32
    1ff2:	89 ab       	std	Y+49, r24	; 0x31
    1ff4:	e3 c1       	rjmp	.+966    	; 0x23bc <__stack+0x1bd>
        {
            switch (i)
    1ff6:	89 a9       	ldd	r24, Y+49	; 0x31
    1ff8:	9a a9       	ldd	r25, Y+50	; 0x32
    1ffa:	9a af       	std	Y+58, r25	; 0x3a
    1ffc:	89 af       	std	Y+57, r24	; 0x39
    1ffe:	89 ad       	ldd	r24, Y+57	; 0x39
    2000:	9a ad       	ldd	r25, Y+58	; 0x3a
    2002:	84 30       	cpi	r24, 0x04	; 4
    2004:	91 05       	cpc	r25, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <steppermotor3Write+0x428>
    2008:	a3 c0       	rjmp	.+326    	; 0x2150 <steppermotor3Write+0x56e>
    200a:	89 ad       	ldd	r24, Y+57	; 0x39
    200c:	9a ad       	ldd	r25, Y+58	; 0x3a
    200e:	85 30       	cpi	r24, 0x05	; 5
    2010:	91 05       	cpc	r25, r1
    2012:	94 f4       	brge	.+36     	; 0x2038 <steppermotor3Write+0x456>
    2014:	89 ad       	ldd	r24, Y+57	; 0x39
    2016:	9a ad       	ldd	r25, Y+58	; 0x3a
    2018:	82 30       	cpi	r24, 0x02	; 2
    201a:	91 05       	cpc	r25, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <steppermotor3Write+0x43e>
    201e:	5e c0       	rjmp	.+188    	; 0x20dc <steppermotor3Write+0x4fa>
    2020:	89 ad       	ldd	r24, Y+57	; 0x39
    2022:	9a ad       	ldd	r25, Y+58	; 0x3a
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	91 05       	cpc	r25, r1
    2028:	0c f0       	brlt	.+2      	; 0x202c <steppermotor3Write+0x44a>
    202a:	75 c0       	rjmp	.+234    	; 0x2116 <steppermotor3Write+0x534>
    202c:	89 ad       	ldd	r24, Y+57	; 0x39
    202e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	91 05       	cpc	r25, r1
    2034:	b1 f1       	breq	.+108    	; 0x20a2 <steppermotor3Write+0x4c0>
    2036:	ff c0       	rjmp	.+510    	; 0x2236 <__stack+0x37>
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	9a ad       	ldd	r25, Y+58	; 0x3a
    203c:	86 30       	cpi	r24, 0x06	; 6
    203e:	91 05       	cpc	r25, r1
    2040:	09 f4       	brne	.+2      	; 0x2044 <steppermotor3Write+0x462>
    2042:	c0 c0       	rjmp	.+384    	; 0x21c4 <steppermotor3Write+0x5e2>
    2044:	89 ad       	ldd	r24, Y+57	; 0x39
    2046:	9a ad       	ldd	r25, Y+58	; 0x3a
    2048:	86 30       	cpi	r24, 0x06	; 6
    204a:	91 05       	cpc	r25, r1
    204c:	0c f4       	brge	.+2      	; 0x2050 <steppermotor3Write+0x46e>
    204e:	9d c0       	rjmp	.+314    	; 0x218a <steppermotor3Write+0x5a8>
    2050:	89 ad       	ldd	r24, Y+57	; 0x39
    2052:	9a ad       	ldd	r25, Y+58	; 0x3a
    2054:	87 30       	cpi	r24, 0x07	; 7
    2056:	91 05       	cpc	r25, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <steppermotor3Write+0x47a>
    205a:	d1 c0       	rjmp	.+418    	; 0x21fe <steppermotor3Write+0x61c>
    205c:	89 ad       	ldd	r24, Y+57	; 0x39
    205e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	91 05       	cpc	r25, r1
    2064:	09 f0       	breq	.+2      	; 0x2068 <steppermotor3Write+0x486>
    2066:	e7 c0       	rjmp	.+462    	; 0x2236 <__stack+0x37>
            {
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    2068:	ab e0       	ldi	r26, 0x0B	; 11
    206a:	b1 e0       	ldi	r27, 0x01	; 1
    206c:	eb e0       	ldi	r30, 0x0B	; 11
    206e:	f1 e0       	ldi	r31, 0x01	; 1
    2070:	80 81       	ld	r24, Z
    2072:	80 68       	ori	r24, 0x80	; 128
    2074:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2076:	ab e0       	ldi	r26, 0x0B	; 11
    2078:	b1 e0       	ldi	r27, 0x01	; 1
    207a:	eb e0       	ldi	r30, 0x0B	; 11
    207c:	f1 e0       	ldi	r31, 0x01	; 1
    207e:	80 81       	ld	r24, Z
    2080:	8f 7d       	andi	r24, 0xDF	; 223
    2082:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2084:	ab e0       	ldi	r26, 0x0B	; 11
    2086:	b1 e0       	ldi	r27, 0x01	; 1
    2088:	eb e0       	ldi	r30, 0x0B	; 11
    208a:	f1 e0       	ldi	r31, 0x01	; 1
    208c:	80 81       	ld	r24, Z
    208e:	87 7f       	andi	r24, 0xF7	; 247
    2090:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2092:	ab e0       	ldi	r26, 0x0B	; 11
    2094:	b1 e0       	ldi	r27, 0x01	; 1
    2096:	eb e0       	ldi	r30, 0x0B	; 11
    2098:	f1 e0       	ldi	r31, 0x01	; 1
    209a:	80 81       	ld	r24, Z
    209c:	8d 7f       	andi	r24, 0xFD	; 253
    209e:	8c 93       	st	X, r24
    20a0:	ca c0       	rjmp	.+404    	; 0x2236 <__stack+0x37>
                break;
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    20a2:	ab e0       	ldi	r26, 0x0B	; 11
    20a4:	b1 e0       	ldi	r27, 0x01	; 1
    20a6:	eb e0       	ldi	r30, 0x0B	; 11
    20a8:	f1 e0       	ldi	r31, 0x01	; 1
    20aa:	80 81       	ld	r24, Z
    20ac:	80 68       	ori	r24, 0x80	; 128
    20ae:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    20b0:	ab e0       	ldi	r26, 0x0B	; 11
    20b2:	b1 e0       	ldi	r27, 0x01	; 1
    20b4:	eb e0       	ldi	r30, 0x0B	; 11
    20b6:	f1 e0       	ldi	r31, 0x01	; 1
    20b8:	80 81       	ld	r24, Z
    20ba:	80 62       	ori	r24, 0x20	; 32
    20bc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    20be:	ab e0       	ldi	r26, 0x0B	; 11
    20c0:	b1 e0       	ldi	r27, 0x01	; 1
    20c2:	eb e0       	ldi	r30, 0x0B	; 11
    20c4:	f1 e0       	ldi	r31, 0x01	; 1
    20c6:	80 81       	ld	r24, Z
    20c8:	87 7f       	andi	r24, 0xF7	; 247
    20ca:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    20cc:	ab e0       	ldi	r26, 0x0B	; 11
    20ce:	b1 e0       	ldi	r27, 0x01	; 1
    20d0:	eb e0       	ldi	r30, 0x0B	; 11
    20d2:	f1 e0       	ldi	r31, 0x01	; 1
    20d4:	80 81       	ld	r24, Z
    20d6:	8d 7f       	andi	r24, 0xFD	; 253
    20d8:	8c 93       	st	X, r24
    20da:	ad c0       	rjmp	.+346    	; 0x2236 <__stack+0x37>
                break;
            case 2 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    20dc:	ab e0       	ldi	r26, 0x0B	; 11
    20de:	b1 e0       	ldi	r27, 0x01	; 1
    20e0:	eb e0       	ldi	r30, 0x0B	; 11
    20e2:	f1 e0       	ldi	r31, 0x01	; 1
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 77       	andi	r24, 0x7F	; 127
    20e8:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    20ea:	ab e0       	ldi	r26, 0x0B	; 11
    20ec:	b1 e0       	ldi	r27, 0x01	; 1
    20ee:	eb e0       	ldi	r30, 0x0B	; 11
    20f0:	f1 e0       	ldi	r31, 0x01	; 1
    20f2:	80 81       	ld	r24, Z
    20f4:	80 62       	ori	r24, 0x20	; 32
    20f6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    20f8:	ab e0       	ldi	r26, 0x0B	; 11
    20fa:	b1 e0       	ldi	r27, 0x01	; 1
    20fc:	eb e0       	ldi	r30, 0x0B	; 11
    20fe:	f1 e0       	ldi	r31, 0x01	; 1
    2100:	80 81       	ld	r24, Z
    2102:	87 7f       	andi	r24, 0xF7	; 247
    2104:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2106:	ab e0       	ldi	r26, 0x0B	; 11
    2108:	b1 e0       	ldi	r27, 0x01	; 1
    210a:	eb e0       	ldi	r30, 0x0B	; 11
    210c:	f1 e0       	ldi	r31, 0x01	; 1
    210e:	80 81       	ld	r24, Z
    2110:	8d 7f       	andi	r24, 0xFD	; 253
    2112:	8c 93       	st	X, r24
    2114:	90 c0       	rjmp	.+288    	; 0x2236 <__stack+0x37>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2116:	ab e0       	ldi	r26, 0x0B	; 11
    2118:	b1 e0       	ldi	r27, 0x01	; 1
    211a:	eb e0       	ldi	r30, 0x0B	; 11
    211c:	f1 e0       	ldi	r31, 0x01	; 1
    211e:	80 81       	ld	r24, Z
    2120:	8f 77       	andi	r24, 0x7F	; 127
    2122:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    2124:	ab e0       	ldi	r26, 0x0B	; 11
    2126:	b1 e0       	ldi	r27, 0x01	; 1
    2128:	eb e0       	ldi	r30, 0x0B	; 11
    212a:	f1 e0       	ldi	r31, 0x01	; 1
    212c:	80 81       	ld	r24, Z
    212e:	80 62       	ori	r24, 0x20	; 32
    2130:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    2132:	ab e0       	ldi	r26, 0x0B	; 11
    2134:	b1 e0       	ldi	r27, 0x01	; 1
    2136:	eb e0       	ldi	r30, 0x0B	; 11
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	80 81       	ld	r24, Z
    213c:	88 60       	ori	r24, 0x08	; 8
    213e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2140:	ab e0       	ldi	r26, 0x0B	; 11
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	eb e0       	ldi	r30, 0x0B	; 11
    2146:	f1 e0       	ldi	r31, 0x01	; 1
    2148:	80 81       	ld	r24, Z
    214a:	8d 7f       	andi	r24, 0xFD	; 253
    214c:	8c 93       	st	X, r24
    214e:	73 c0       	rjmp	.+230    	; 0x2236 <__stack+0x37>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2150:	ab e0       	ldi	r26, 0x0B	; 11
    2152:	b1 e0       	ldi	r27, 0x01	; 1
    2154:	eb e0       	ldi	r30, 0x0B	; 11
    2156:	f1 e0       	ldi	r31, 0x01	; 1
    2158:	80 81       	ld	r24, Z
    215a:	8f 77       	andi	r24, 0x7F	; 127
    215c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    215e:	ab e0       	ldi	r26, 0x0B	; 11
    2160:	b1 e0       	ldi	r27, 0x01	; 1
    2162:	eb e0       	ldi	r30, 0x0B	; 11
    2164:	f1 e0       	ldi	r31, 0x01	; 1
    2166:	80 81       	ld	r24, Z
    2168:	8f 7d       	andi	r24, 0xDF	; 223
    216a:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    216c:	ab e0       	ldi	r26, 0x0B	; 11
    216e:	b1 e0       	ldi	r27, 0x01	; 1
    2170:	eb e0       	ldi	r30, 0x0B	; 11
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	80 81       	ld	r24, Z
    2176:	88 60       	ori	r24, 0x08	; 8
    2178:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    217a:	ab e0       	ldi	r26, 0x0B	; 11
    217c:	b1 e0       	ldi	r27, 0x01	; 1
    217e:	eb e0       	ldi	r30, 0x0B	; 11
    2180:	f1 e0       	ldi	r31, 0x01	; 1
    2182:	80 81       	ld	r24, Z
    2184:	8d 7f       	andi	r24, 0xFD	; 253
    2186:	8c 93       	st	X, r24
    2188:	56 c0       	rjmp	.+172    	; 0x2236 <__stack+0x37>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    218a:	ab e0       	ldi	r26, 0x0B	; 11
    218c:	b1 e0       	ldi	r27, 0x01	; 1
    218e:	eb e0       	ldi	r30, 0x0B	; 11
    2190:	f1 e0       	ldi	r31, 0x01	; 1
    2192:	80 81       	ld	r24, Z
    2194:	8f 77       	andi	r24, 0x7F	; 127
    2196:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2198:	ab e0       	ldi	r26, 0x0B	; 11
    219a:	b1 e0       	ldi	r27, 0x01	; 1
    219c:	eb e0       	ldi	r30, 0x0B	; 11
    219e:	f1 e0       	ldi	r31, 0x01	; 1
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 7d       	andi	r24, 0xDF	; 223
    21a4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    21a6:	ab e0       	ldi	r26, 0x0B	; 11
    21a8:	b1 e0       	ldi	r27, 0x01	; 1
    21aa:	eb e0       	ldi	r30, 0x0B	; 11
    21ac:	f1 e0       	ldi	r31, 0x01	; 1
    21ae:	80 81       	ld	r24, Z
    21b0:	88 60       	ori	r24, 0x08	; 8
    21b2:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    21b4:	ab e0       	ldi	r26, 0x0B	; 11
    21b6:	b1 e0       	ldi	r27, 0x01	; 1
    21b8:	eb e0       	ldi	r30, 0x0B	; 11
    21ba:	f1 e0       	ldi	r31, 0x01	; 1
    21bc:	80 81       	ld	r24, Z
    21be:	82 60       	ori	r24, 0x02	; 2
    21c0:	8c 93       	st	X, r24
    21c2:	39 c0       	rjmp	.+114    	; 0x2236 <__stack+0x37>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    21c4:	ab e0       	ldi	r26, 0x0B	; 11
    21c6:	b1 e0       	ldi	r27, 0x01	; 1
    21c8:	eb e0       	ldi	r30, 0x0B	; 11
    21ca:	f1 e0       	ldi	r31, 0x01	; 1
    21cc:	80 81       	ld	r24, Z
    21ce:	8f 77       	andi	r24, 0x7F	; 127
    21d0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    21d2:	ab e0       	ldi	r26, 0x0B	; 11
    21d4:	b1 e0       	ldi	r27, 0x01	; 1
    21d6:	eb e0       	ldi	r30, 0x0B	; 11
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	80 81       	ld	r24, Z
    21dc:	8f 7d       	andi	r24, 0xDF	; 223
    21de:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    21e0:	ab e0       	ldi	r26, 0x0B	; 11
    21e2:	b1 e0       	ldi	r27, 0x01	; 1
    21e4:	eb e0       	ldi	r30, 0x0B	; 11
    21e6:	f1 e0       	ldi	r31, 0x01	; 1
    21e8:	80 81       	ld	r24, Z
    21ea:	87 7f       	andi	r24, 0xF7	; 247
    21ec:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    21ee:	ab e0       	ldi	r26, 0x0B	; 11
    21f0:	b1 e0       	ldi	r27, 0x01	; 1
    21f2:	eb e0       	ldi	r30, 0x0B	; 11
    21f4:	f1 e0       	ldi	r31, 0x01	; 1
    21f6:	80 81       	ld	r24, Z
    21f8:	82 60       	ori	r24, 0x02	; 2
    21fa:	8c 93       	st	X, r24
    21fc:	1c c0       	rjmp	.+56     	; 0x2236 <__stack+0x37>
                break;
            case 7 :
                PORTStepper3 |= (1 << PStepper3_1);
    21fe:	ab e0       	ldi	r26, 0x0B	; 11
    2200:	b1 e0       	ldi	r27, 0x01	; 1
    2202:	eb e0       	ldi	r30, 0x0B	; 11
    2204:	f1 e0       	ldi	r31, 0x01	; 1
    2206:	80 81       	ld	r24, Z
    2208:	80 68       	ori	r24, 0x80	; 128
    220a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    220c:	ab e0       	ldi	r26, 0x0B	; 11
    220e:	b1 e0       	ldi	r27, 0x01	; 1
    2210:	eb e0       	ldi	r30, 0x0B	; 11
    2212:	f1 e0       	ldi	r31, 0x01	; 1
    2214:	80 81       	ld	r24, Z
    2216:	8f 7d       	andi	r24, 0xDF	; 223
    2218:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    221a:	ab e0       	ldi	r26, 0x0B	; 11
    221c:	b1 e0       	ldi	r27, 0x01	; 1
    221e:	eb e0       	ldi	r30, 0x0B	; 11
    2220:	f1 e0       	ldi	r31, 0x01	; 1
    2222:	80 81       	ld	r24, Z
    2224:	87 7f       	andi	r24, 0xF7	; 247
    2226:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    2228:	ab e0       	ldi	r26, 0x0B	; 11
    222a:	b1 e0       	ldi	r27, 0x01	; 1
    222c:	eb e0       	ldi	r30, 0x0B	; 11
    222e:	f1 e0       	ldi	r31, 0x01	; 1
    2230:	80 81       	ld	r24, Z
    2232:	82 60       	ori	r24, 0x02	; 2
    2234:	8c 93       	st	X, r24
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	aa e7       	ldi	r26, 0x7A	; 122
    223c:	b4 e4       	ldi	r27, 0x44	; 68
    223e:	8d 8b       	std	Y+21, r24	; 0x15
    2240:	9e 8b       	std	Y+22, r25	; 0x16
    2242:	af 8b       	std	Y+23, r26	; 0x17
    2244:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2246:	6d 89       	ldd	r22, Y+21	; 0x15
    2248:	7e 89       	ldd	r23, Y+22	; 0x16
    224a:	8f 89       	ldd	r24, Y+23	; 0x17
    224c:	98 8d       	ldd	r25, Y+24	; 0x18
    224e:	2b ea       	ldi	r18, 0xAB	; 171
    2250:	3a ea       	ldi	r19, 0xAA	; 170
    2252:	4a ea       	ldi	r20, 0xAA	; 170
    2254:	50 e4       	ldi	r21, 0x40	; 64
    2256:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	89 8b       	std	Y+17, r24	; 0x11
    2260:	9a 8b       	std	Y+18, r25	; 0x12
    2262:	ab 8b       	std	Y+19, r26	; 0x13
    2264:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2266:	69 89       	ldd	r22, Y+17	; 0x11
    2268:	7a 89       	ldd	r23, Y+18	; 0x12
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	1c f4       	brge	.+6      	; 0x2284 <__stack+0x85>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	88 8b       	std	Y+16, r24	; 0x10
    2282:	91 c0       	rjmp	.+290    	; 0x23a6 <__stack+0x1a7>
	else if (__tmp > 255)
    2284:	69 89       	ldd	r22, Y+17	; 0x11
    2286:	7a 89       	ldd	r23, Y+18	; 0x12
    2288:	8b 89       	ldd	r24, Y+19	; 0x13
    228a:	9c 89       	ldd	r25, Y+20	; 0x14
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2298:	18 16       	cp	r1, r24
    229a:	0c f0       	brlt	.+2      	; 0x229e <__stack+0x9f>
    229c:	7b c0       	rjmp	.+246    	; 0x2394 <__stack+0x195>
	{
		_delay_ms(__us / 1000.0);
    229e:	6d 89       	ldd	r22, Y+21	; 0x15
    22a0:	7e 89       	ldd	r23, Y+22	; 0x16
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a e7       	ldi	r20, 0x7A	; 122
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8c 87       	std	Y+12, r24	; 0x0c
    22b8:	9d 87       	std	Y+13, r25	; 0x0d
    22ba:	ae 87       	std	Y+14, r26	; 0x0e
    22bc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6c 85       	ldd	r22, Y+12	; 0x0c
    22c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    22c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	55 e4       	ldi	r21, 0x45	; 69
    22ce:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	88 87       	std	Y+8, r24	; 0x08
    22d8:	99 87       	std	Y+9, r25	; 0x09
    22da:	aa 87       	std	Y+10, r26	; 0x0a
    22dc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <__stack+0x101>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9f 83       	std	Y+7, r25	; 0x07
    22fc:	8e 83       	std	Y+6, r24	; 0x06
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <__stack+0x17f>
	else if (__tmp > 65535)
    2300:	68 85       	ldd	r22, Y+8	; 0x08
    2302:	79 85       	ldd	r23, Y+9	; 0x09
    2304:	8a 85       	ldd	r24, Y+10	; 0x0a
    2306:	9b 85       	ldd	r25, Y+11	; 0x0b
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <__stack+0x16b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6c 85       	ldd	r22, Y+12	; 0x0c
    231a:	7d 85       	ldd	r23, Y+13	; 0x0d
    231c:	8e 85       	ldd	r24, Y+14	; 0x0e
    231e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9f 83       	std	Y+7, r25	; 0x07
    233e:	8e 83       	std	Y+6, r24	; 0x06
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <__stack+0x161>
    2342:	80 e9       	ldi	r24, 0x90	; 144
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	9d 83       	std	Y+5, r25	; 0x05
    2348:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234a:	8c 81       	ldd	r24, Y+4	; 0x04
    234c:	9d 81       	ldd	r25, Y+5	; 0x05
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <__stack+0x14f>
    2352:	9d 83       	std	Y+5, r25	; 0x05
    2354:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8e 81       	ldd	r24, Y+6	; 0x06
    2358:	9f 81       	ldd	r25, Y+7	; 0x07
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9f 83       	std	Y+7, r25	; 0x07
    235e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <__stack+0x143>
    2368:	24 c0       	rjmp	.+72     	; 0x23b2 <__stack+0x1b3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	68 85       	ldd	r22, Y+8	; 0x08
    236c:	79 85       	ldd	r23, Y+9	; 0x09
    236e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2370:	9b 85       	ldd	r25, Y+11	; 0x0b
    2372:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9f 83       	std	Y+7, r25	; 0x07
    237c:	8e 83       	std	Y+6, r24	; 0x06
    237e:	8e 81       	ldd	r24, Y+6	; 0x06
    2380:	9f 81       	ldd	r25, Y+7	; 0x07
    2382:	9b 83       	std	Y+3, r25	; 0x03
    2384:	8a 83       	std	Y+2, r24	; 0x02
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <__stack+0x18b>
    238e:	9b 83       	std	Y+3, r25	; 0x03
    2390:	8a 83       	std	Y+2, r24	; 0x02
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <__stack+0x1b3>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2394:	69 89       	ldd	r22, Y+17	; 0x11
    2396:	7a 89       	ldd	r23, Y+18	; 0x12
    2398:	8b 89       	ldd	r24, Y+19	; 0x13
    239a:	9c 89       	ldd	r25, Y+20	; 0x14
    239c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	88 8b       	std	Y+16, r24	; 0x10
    23a6:	88 89       	ldd	r24, Y+16	; 0x10
    23a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	8a 95       	dec	r24
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <__stack+0x1ad>
    23b0:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    23b2:	89 a9       	ldd	r24, Y+49	; 0x31
    23b4:	9a a9       	ldd	r25, Y+50	; 0x32
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9a ab       	std	Y+50, r25	; 0x32
    23ba:	89 ab       	std	Y+49, r24	; 0x31
    23bc:	89 a9       	ldd	r24, Y+49	; 0x31
    23be:	9a a9       	ldd	r25, Y+50	; 0x32
    23c0:	18 16       	cp	r1, r24
    23c2:	19 06       	cpc	r1, r25
    23c4:	0c f4       	brge	.+2      	; 0x23c8 <__stack+0x1c9>
    23c6:	17 ce       	rjmp	.-978    	; 0x1ff6 <steppermotor3Write+0x414>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    23c8:	1e aa       	std	Y+54, r1	; 0x36
    23ca:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    23cc:	8d a9       	ldd	r24, Y+53	; 0x35
    23ce:	9e a9       	ldd	r25, Y+54	; 0x36
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	91 05       	cpc	r25, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <__stack+0x1d9>
    23d6:	0a ce       	rjmp	.-1004   	; 0x1fec <steppermotor3Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    23d8:	ea 96       	adiw	r28, 0x3a	; 58
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <steppermotor4Write>:

void steppermotor4Write(int a)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	ea 97       	sbiw	r28, 0x3a	; 58
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	9e ab       	std	Y+54, r25	; 0x36
    2400:	8d ab       	std	Y+53, r24	; 0x35
    2402:	f1 c1       	rjmp	.+994    	; 0x27e6 <steppermotor4Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c ab       	std	Y+52, r25	; 0x34
    240a:	8b ab       	std	Y+51, r24	; 0x33
    240c:	e4 c1       	rjmp	.+968    	; 0x27d6 <steppermotor4Write+0x3ec>
        {
            switch (i)
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	98 af       	std	Y+56, r25	; 0x38
    2414:	8f ab       	std	Y+55, r24	; 0x37
    2416:	8f a9       	ldd	r24, Y+55	; 0x37
    2418:	98 ad       	ldd	r25, Y+56	; 0x38
    241a:	84 30       	cpi	r24, 0x04	; 4
    241c:	91 05       	cpc	r25, r1
    241e:	09 f4       	brne	.+2      	; 0x2422 <steppermotor4Write+0x38>
    2420:	87 c0       	rjmp	.+270    	; 0x2530 <steppermotor4Write+0x146>
    2422:	8f a9       	ldd	r24, Y+55	; 0x37
    2424:	98 ad       	ldd	r25, Y+56	; 0x38
    2426:	85 30       	cpi	r24, 0x05	; 5
    2428:	91 05       	cpc	r25, r1
    242a:	94 f4       	brge	.+36     	; 0x2450 <steppermotor4Write+0x66>
    242c:	8f a9       	ldd	r24, Y+55	; 0x37
    242e:	98 ad       	ldd	r25, Y+56	; 0x38
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	91 05       	cpc	r25, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <steppermotor4Write+0x4e>
    2436:	42 c0       	rjmp	.+132    	; 0x24bc <steppermotor4Write+0xd2>
    2438:	8f a9       	ldd	r24, Y+55	; 0x37
    243a:	98 ad       	ldd	r25, Y+56	; 0x38
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	91 05       	cpc	r25, r1
    2440:	0c f0       	brlt	.+2      	; 0x2444 <steppermotor4Write+0x5a>
    2442:	59 c0       	rjmp	.+178    	; 0x24f6 <steppermotor4Write+0x10c>
    2444:	8f a9       	ldd	r24, Y+55	; 0x37
    2446:	98 ad       	ldd	r25, Y+56	; 0x38
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	91 05       	cpc	r25, r1
    244c:	d1 f0       	breq	.+52     	; 0x2482 <steppermotor4Write+0x98>
    244e:	00 c1       	rjmp	.+512    	; 0x2650 <steppermotor4Write+0x266>
    2450:	8f a9       	ldd	r24, Y+55	; 0x37
    2452:	98 ad       	ldd	r25, Y+56	; 0x38
    2454:	86 30       	cpi	r24, 0x06	; 6
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <steppermotor4Write+0x72>
    245a:	a4 c0       	rjmp	.+328    	; 0x25a4 <steppermotor4Write+0x1ba>
    245c:	8f a9       	ldd	r24, Y+55	; 0x37
    245e:	98 ad       	ldd	r25, Y+56	; 0x38
    2460:	86 30       	cpi	r24, 0x06	; 6
    2462:	91 05       	cpc	r25, r1
    2464:	0c f4       	brge	.+2      	; 0x2468 <steppermotor4Write+0x7e>
    2466:	81 c0       	rjmp	.+258    	; 0x256a <steppermotor4Write+0x180>
    2468:	8f a9       	ldd	r24, Y+55	; 0x37
    246a:	98 ad       	ldd	r25, Y+56	; 0x38
    246c:	87 30       	cpi	r24, 0x07	; 7
    246e:	91 05       	cpc	r25, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <steppermotor4Write+0x8a>
    2472:	b5 c0       	rjmp	.+362    	; 0x25de <steppermotor4Write+0x1f4>
    2474:	8f a9       	ldd	r24, Y+55	; 0x37
    2476:	98 ad       	ldd	r25, Y+56	; 0x38
    2478:	88 30       	cpi	r24, 0x08	; 8
    247a:	91 05       	cpc	r25, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <steppermotor4Write+0x96>
    247e:	cc c0       	rjmp	.+408    	; 0x2618 <steppermotor4Write+0x22e>
    2480:	e7 c0       	rjmp	.+462    	; 0x2650 <steppermotor4Write+0x266>
            {
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    2482:	ab e0       	ldi	r26, 0x0B	; 11
    2484:	b1 e0       	ldi	r27, 0x01	; 1
    2486:	eb e0       	ldi	r30, 0x0B	; 11
    2488:	f1 e0       	ldi	r31, 0x01	; 1
    248a:	80 81       	ld	r24, Z
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2490:	ab e0       	ldi	r26, 0x0B	; 11
    2492:	b1 e0       	ldi	r27, 0x01	; 1
    2494:	eb e0       	ldi	r30, 0x0B	; 11
    2496:	f1 e0       	ldi	r31, 0x01	; 1
    2498:	80 81       	ld	r24, Z
    249a:	8f 7e       	andi	r24, 0xEF	; 239
    249c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    249e:	ab e0       	ldi	r26, 0x0B	; 11
    24a0:	b1 e0       	ldi	r27, 0x01	; 1
    24a2:	eb e0       	ldi	r30, 0x0B	; 11
    24a4:	f1 e0       	ldi	r31, 0x01	; 1
    24a6:	80 81       	ld	r24, Z
    24a8:	8b 7f       	andi	r24, 0xFB	; 251
    24aa:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24ac:	ab e0       	ldi	r26, 0x0B	; 11
    24ae:	b1 e0       	ldi	r27, 0x01	; 1
    24b0:	eb e0       	ldi	r30, 0x0B	; 11
    24b2:	f1 e0       	ldi	r31, 0x01	; 1
    24b4:	80 81       	ld	r24, Z
    24b6:	8e 7f       	andi	r24, 0xFE	; 254
    24b8:	8c 93       	st	X, r24
    24ba:	ca c0       	rjmp	.+404    	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 2 :
                PORTStepper4 |= (1 << PStepper4_1);
    24bc:	ab e0       	ldi	r26, 0x0B	; 11
    24be:	b1 e0       	ldi	r27, 0x01	; 1
    24c0:	eb e0       	ldi	r30, 0x0B	; 11
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	80 81       	ld	r24, Z
    24c6:	80 64       	ori	r24, 0x40	; 64
    24c8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24ca:	ab e0       	ldi	r26, 0x0B	; 11
    24cc:	b1 e0       	ldi	r27, 0x01	; 1
    24ce:	eb e0       	ldi	r30, 0x0B	; 11
    24d0:	f1 e0       	ldi	r31, 0x01	; 1
    24d2:	80 81       	ld	r24, Z
    24d4:	80 61       	ori	r24, 0x10	; 16
    24d6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24d8:	ab e0       	ldi	r26, 0x0B	; 11
    24da:	b1 e0       	ldi	r27, 0x01	; 1
    24dc:	eb e0       	ldi	r30, 0x0B	; 11
    24de:	f1 e0       	ldi	r31, 0x01	; 1
    24e0:	80 81       	ld	r24, Z
    24e2:	8b 7f       	andi	r24, 0xFB	; 251
    24e4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24e6:	ab e0       	ldi	r26, 0x0B	; 11
    24e8:	b1 e0       	ldi	r27, 0x01	; 1
    24ea:	eb e0       	ldi	r30, 0x0B	; 11
    24ec:	f1 e0       	ldi	r31, 0x01	; 1
    24ee:	80 81       	ld	r24, Z
    24f0:	8e 7f       	andi	r24, 0xFE	; 254
    24f2:	8c 93       	st	X, r24
    24f4:	ad c0       	rjmp	.+346    	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    24f6:	ab e0       	ldi	r26, 0x0B	; 11
    24f8:	b1 e0       	ldi	r27, 0x01	; 1
    24fa:	eb e0       	ldi	r30, 0x0B	; 11
    24fc:	f1 e0       	ldi	r31, 0x01	; 1
    24fe:	80 81       	ld	r24, Z
    2500:	8f 7b       	andi	r24, 0xBF	; 191
    2502:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2504:	ab e0       	ldi	r26, 0x0B	; 11
    2506:	b1 e0       	ldi	r27, 0x01	; 1
    2508:	eb e0       	ldi	r30, 0x0B	; 11
    250a:	f1 e0       	ldi	r31, 0x01	; 1
    250c:	80 81       	ld	r24, Z
    250e:	80 61       	ori	r24, 0x10	; 16
    2510:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2512:	ab e0       	ldi	r26, 0x0B	; 11
    2514:	b1 e0       	ldi	r27, 0x01	; 1
    2516:	eb e0       	ldi	r30, 0x0B	; 11
    2518:	f1 e0       	ldi	r31, 0x01	; 1
    251a:	80 81       	ld	r24, Z
    251c:	8b 7f       	andi	r24, 0xFB	; 251
    251e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2520:	ab e0       	ldi	r26, 0x0B	; 11
    2522:	b1 e0       	ldi	r27, 0x01	; 1
    2524:	eb e0       	ldi	r30, 0x0B	; 11
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	80 81       	ld	r24, Z
    252a:	8e 7f       	andi	r24, 0xFE	; 254
    252c:	8c 93       	st	X, r24
    252e:	90 c0       	rjmp	.+288    	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2530:	ab e0       	ldi	r26, 0x0B	; 11
    2532:	b1 e0       	ldi	r27, 0x01	; 1
    2534:	eb e0       	ldi	r30, 0x0B	; 11
    2536:	f1 e0       	ldi	r31, 0x01	; 1
    2538:	80 81       	ld	r24, Z
    253a:	8f 7b       	andi	r24, 0xBF	; 191
    253c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    253e:	ab e0       	ldi	r26, 0x0B	; 11
    2540:	b1 e0       	ldi	r27, 0x01	; 1
    2542:	eb e0       	ldi	r30, 0x0B	; 11
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	80 81       	ld	r24, Z
    2548:	80 61       	ori	r24, 0x10	; 16
    254a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    254c:	ab e0       	ldi	r26, 0x0B	; 11
    254e:	b1 e0       	ldi	r27, 0x01	; 1
    2550:	eb e0       	ldi	r30, 0x0B	; 11
    2552:	f1 e0       	ldi	r31, 0x01	; 1
    2554:	80 81       	ld	r24, Z
    2556:	84 60       	ori	r24, 0x04	; 4
    2558:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    255a:	ab e0       	ldi	r26, 0x0B	; 11
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	eb e0       	ldi	r30, 0x0B	; 11
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	80 81       	ld	r24, Z
    2564:	8e 7f       	andi	r24, 0xFE	; 254
    2566:	8c 93       	st	X, r24
    2568:	73 c0       	rjmp	.+230    	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    256a:	ab e0       	ldi	r26, 0x0B	; 11
    256c:	b1 e0       	ldi	r27, 0x01	; 1
    256e:	eb e0       	ldi	r30, 0x0B	; 11
    2570:	f1 e0       	ldi	r31, 0x01	; 1
    2572:	80 81       	ld	r24, Z
    2574:	8f 7b       	andi	r24, 0xBF	; 191
    2576:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2578:	ab e0       	ldi	r26, 0x0B	; 11
    257a:	b1 e0       	ldi	r27, 0x01	; 1
    257c:	eb e0       	ldi	r30, 0x0B	; 11
    257e:	f1 e0       	ldi	r31, 0x01	; 1
    2580:	80 81       	ld	r24, Z
    2582:	8f 7e       	andi	r24, 0xEF	; 239
    2584:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2586:	ab e0       	ldi	r26, 0x0B	; 11
    2588:	b1 e0       	ldi	r27, 0x01	; 1
    258a:	eb e0       	ldi	r30, 0x0B	; 11
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	80 81       	ld	r24, Z
    2590:	84 60       	ori	r24, 0x04	; 4
    2592:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2594:	ab e0       	ldi	r26, 0x0B	; 11
    2596:	b1 e0       	ldi	r27, 0x01	; 1
    2598:	eb e0       	ldi	r30, 0x0B	; 11
    259a:	f1 e0       	ldi	r31, 0x01	; 1
    259c:	80 81       	ld	r24, Z
    259e:	8e 7f       	andi	r24, 0xFE	; 254
    25a0:	8c 93       	st	X, r24
    25a2:	56 c0       	rjmp	.+172    	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    25a4:	ab e0       	ldi	r26, 0x0B	; 11
    25a6:	b1 e0       	ldi	r27, 0x01	; 1
    25a8:	eb e0       	ldi	r30, 0x0B	; 11
    25aa:	f1 e0       	ldi	r31, 0x01	; 1
    25ac:	80 81       	ld	r24, Z
    25ae:	8f 7b       	andi	r24, 0xBF	; 191
    25b0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25b2:	ab e0       	ldi	r26, 0x0B	; 11
    25b4:	b1 e0       	ldi	r27, 0x01	; 1
    25b6:	eb e0       	ldi	r30, 0x0B	; 11
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7e       	andi	r24, 0xEF	; 239
    25be:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    25c0:	ab e0       	ldi	r26, 0x0B	; 11
    25c2:	b1 e0       	ldi	r27, 0x01	; 1
    25c4:	eb e0       	ldi	r30, 0x0B	; 11
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	80 81       	ld	r24, Z
    25ca:	84 60       	ori	r24, 0x04	; 4
    25cc:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25ce:	ab e0       	ldi	r26, 0x0B	; 11
    25d0:	b1 e0       	ldi	r27, 0x01	; 1
    25d2:	eb e0       	ldi	r30, 0x0B	; 11
    25d4:	f1 e0       	ldi	r31, 0x01	; 1
    25d6:	80 81       	ld	r24, Z
    25d8:	81 60       	ori	r24, 0x01	; 1
    25da:	8c 93       	st	X, r24
    25dc:	39 c0       	rjmp	.+114    	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 7 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    25de:	ab e0       	ldi	r26, 0x0B	; 11
    25e0:	b1 e0       	ldi	r27, 0x01	; 1
    25e2:	eb e0       	ldi	r30, 0x0B	; 11
    25e4:	f1 e0       	ldi	r31, 0x01	; 1
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 7b       	andi	r24, 0xBF	; 191
    25ea:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25ec:	ab e0       	ldi	r26, 0x0B	; 11
    25ee:	b1 e0       	ldi	r27, 0x01	; 1
    25f0:	eb e0       	ldi	r30, 0x0B	; 11
    25f2:	f1 e0       	ldi	r31, 0x01	; 1
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 7e       	andi	r24, 0xEF	; 239
    25f8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    25fa:	ab e0       	ldi	r26, 0x0B	; 11
    25fc:	b1 e0       	ldi	r27, 0x01	; 1
    25fe:	eb e0       	ldi	r30, 0x0B	; 11
    2600:	f1 e0       	ldi	r31, 0x01	; 1
    2602:	80 81       	ld	r24, Z
    2604:	8b 7f       	andi	r24, 0xFB	; 251
    2606:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2608:	ab e0       	ldi	r26, 0x0B	; 11
    260a:	b1 e0       	ldi	r27, 0x01	; 1
    260c:	eb e0       	ldi	r30, 0x0B	; 11
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	80 81       	ld	r24, Z
    2612:	81 60       	ori	r24, 0x01	; 1
    2614:	8c 93       	st	X, r24
    2616:	1c c0       	rjmp	.+56     	; 0x2650 <steppermotor4Write+0x266>
                break;
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2618:	ab e0       	ldi	r26, 0x0B	; 11
    261a:	b1 e0       	ldi	r27, 0x01	; 1
    261c:	eb e0       	ldi	r30, 0x0B	; 11
    261e:	f1 e0       	ldi	r31, 0x01	; 1
    2620:	80 81       	ld	r24, Z
    2622:	80 64       	ori	r24, 0x40	; 64
    2624:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2626:	ab e0       	ldi	r26, 0x0B	; 11
    2628:	b1 e0       	ldi	r27, 0x01	; 1
    262a:	eb e0       	ldi	r30, 0x0B	; 11
    262c:	f1 e0       	ldi	r31, 0x01	; 1
    262e:	80 81       	ld	r24, Z
    2630:	8f 7e       	andi	r24, 0xEF	; 239
    2632:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2634:	ab e0       	ldi	r26, 0x0B	; 11
    2636:	b1 e0       	ldi	r27, 0x01	; 1
    2638:	eb e0       	ldi	r30, 0x0B	; 11
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	80 81       	ld	r24, Z
    263e:	8b 7f       	andi	r24, 0xFB	; 251
    2640:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2642:	ab e0       	ldi	r26, 0x0B	; 11
    2644:	b1 e0       	ldi	r27, 0x01	; 1
    2646:	eb e0       	ldi	r30, 0x0B	; 11
    2648:	f1 e0       	ldi	r31, 0x01	; 1
    264a:	80 81       	ld	r24, Z
    264c:	81 60       	ori	r24, 0x01	; 1
    264e:	8c 93       	st	X, r24
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	aa e7       	ldi	r26, 0x7A	; 122
    2656:	b4 e4       	ldi	r27, 0x44	; 68
    2658:	8d a7       	std	Y+45, r24	; 0x2d
    265a:	9e a7       	std	Y+46, r25	; 0x2e
    265c:	af a7       	std	Y+47, r26	; 0x2f
    265e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2660:	6d a5       	ldd	r22, Y+45	; 0x2d
    2662:	7e a5       	ldd	r23, Y+46	; 0x2e
    2664:	8f a5       	ldd	r24, Y+47	; 0x2f
    2666:	98 a9       	ldd	r25, Y+48	; 0x30
    2668:	2b ea       	ldi	r18, 0xAB	; 171
    266a:	3a ea       	ldi	r19, 0xAA	; 170
    266c:	4a ea       	ldi	r20, 0xAA	; 170
    266e:	50 e4       	ldi	r21, 0x40	; 64
    2670:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	89 a7       	std	Y+41, r24	; 0x29
    267a:	9a a7       	std	Y+42, r25	; 0x2a
    267c:	ab a7       	std	Y+43, r26	; 0x2b
    267e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2680:	69 a5       	ldd	r22, Y+41	; 0x29
    2682:	7a a5       	ldd	r23, Y+42	; 0x2a
    2684:	8b a5       	ldd	r24, Y+43	; 0x2b
    2686:	9c a5       	ldd	r25, Y+44	; 0x2c
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	1c f4       	brge	.+6      	; 0x269e <steppermotor4Write+0x2b4>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	88 a7       	std	Y+40, r24	; 0x28
    269c:	91 c0       	rjmp	.+290    	; 0x27c0 <steppermotor4Write+0x3d6>
	else if (__tmp > 255)
    269e:	69 a5       	ldd	r22, Y+41	; 0x29
    26a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    26a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	53 e4       	ldi	r21, 0x43	; 67
    26ae:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	0c f0       	brlt	.+2      	; 0x26b8 <steppermotor4Write+0x2ce>
    26b6:	7b c0       	rjmp	.+246    	; 0x27ae <steppermotor4Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    26b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    26ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    26bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26be:	98 a9       	ldd	r25, Y+48	; 0x30
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a e7       	ldi	r20, 0x7A	; 122
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8c a3       	std	Y+36, r24	; 0x24
    26d2:	9d a3       	std	Y+37, r25	; 0x25
    26d4:	ae a3       	std	Y+38, r26	; 0x26
    26d6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	6c a1       	ldd	r22, Y+36	; 0x24
    26da:	7d a1       	ldd	r23, Y+37	; 0x25
    26dc:	8e a1       	ldd	r24, Y+38	; 0x26
    26de:	9f a1       	ldd	r25, Y+39	; 0x27
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4a e7       	ldi	r20, 0x7A	; 122
    26e6:	55 e4       	ldi	r21, 0x45	; 69
    26e8:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	88 a3       	std	Y+32, r24	; 0x20
    26f2:	99 a3       	std	Y+33, r25	; 0x21
    26f4:	aa a3       	std	Y+34, r26	; 0x22
    26f6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    26f8:	68 a1       	ldd	r22, Y+32	; 0x20
    26fa:	79 a1       	ldd	r23, Y+33	; 0x21
    26fc:	8a a1       	ldd	r24, Y+34	; 0x22
    26fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e8       	ldi	r20, 0x80	; 128
    2706:	5f e3       	ldi	r21, 0x3F	; 63
    2708:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    270c:	88 23       	and	r24, r24
    270e:	2c f4       	brge	.+10     	; 0x271a <steppermotor4Write+0x330>
		__ticks = 1;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9f 8f       	std	Y+31, r25	; 0x1f
    2716:	8e 8f       	std	Y+30, r24	; 0x1e
    2718:	3f c0       	rjmp	.+126    	; 0x2798 <steppermotor4Write+0x3ae>
	else if (__tmp > 65535)
    271a:	68 a1       	ldd	r22, Y+32	; 0x20
    271c:	79 a1       	ldd	r23, Y+33	; 0x21
    271e:	8a a1       	ldd	r24, Y+34	; 0x22
    2720:	9b a1       	ldd	r25, Y+35	; 0x23
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    272e:	18 16       	cp	r1, r24
    2730:	4c f5       	brge	.+82     	; 0x2784 <steppermotor4Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	6c a1       	ldd	r22, Y+36	; 0x24
    2734:	7d a1       	ldd	r23, Y+37	; 0x25
    2736:	8e a1       	ldd	r24, Y+38	; 0x26
    2738:	9f a1       	ldd	r25, Y+39	; 0x27
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e2       	ldi	r20, 0x20	; 32
    2740:	51 e4       	ldi	r21, 0x41	; 65
    2742:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9f 8f       	std	Y+31, r25	; 0x1f
    2758:	8e 8f       	std	Y+30, r24	; 0x1e
    275a:	0f c0       	rjmp	.+30     	; 0x277a <steppermotor4Write+0x390>
    275c:	80 e9       	ldi	r24, 0x90	; 144
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	9d 8f       	std	Y+29, r25	; 0x1d
    2762:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2764:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2766:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <steppermotor4Write+0x37e>
    276c:	9d 8f       	std	Y+29, r25	; 0x1d
    276e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2772:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	9f 8f       	std	Y+31, r25	; 0x1f
    2778:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    277c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	69 f7       	brne	.-38     	; 0x275c <steppermotor4Write+0x372>
    2782:	24 c0       	rjmp	.+72     	; 0x27cc <steppermotor4Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2784:	68 a1       	ldd	r22, Y+32	; 0x20
    2786:	79 a1       	ldd	r23, Y+33	; 0x21
    2788:	8a a1       	ldd	r24, Y+34	; 0x22
    278a:	9b a1       	ldd	r25, Y+35	; 0x23
    278c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9f 8f       	std	Y+31, r25	; 0x1f
    2796:	8e 8f       	std	Y+30, r24	; 0x1e
    2798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    279a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    279c:	9b 8f       	std	Y+27, r25	; 0x1b
    279e:	8a 8f       	std	Y+26, r24	; 0x1a
    27a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <steppermotor4Write+0x3ba>
    27a8:	9b 8f       	std	Y+27, r25	; 0x1b
    27aa:	8a 8f       	std	Y+26, r24	; 0x1a
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <steppermotor4Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27ae:	69 a5       	ldd	r22, Y+41	; 0x29
    27b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    27b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27b6:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	88 a7       	std	Y+40, r24	; 0x28
    27c0:	88 a5       	ldd	r24, Y+40	; 0x28
    27c2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27c4:	89 8d       	ldd	r24, Y+25	; 0x19
    27c6:	8a 95       	dec	r24
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <steppermotor4Write+0x3dc>
    27ca:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor4Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    27cc:	8b a9       	ldd	r24, Y+51	; 0x33
    27ce:	9c a9       	ldd	r25, Y+52	; 0x34
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	9c ab       	std	Y+52, r25	; 0x34
    27d4:	8b ab       	std	Y+51, r24	; 0x33
    27d6:	8b a9       	ldd	r24, Y+51	; 0x33
    27d8:	9c a9       	ldd	r25, Y+52	; 0x34
    27da:	88 30       	cpi	r24, 0x08	; 8
    27dc:	91 05       	cpc	r25, r1
    27de:	0c f4       	brge	.+2      	; 0x27e2 <steppermotor4Write+0x3f8>
    27e0:	16 ce       	rjmp	.-980    	; 0x240e <steppermotor4Write+0x24>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    27e2:	1e aa       	std	Y+54, r1	; 0x36
    27e4:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor4Write(int a)
{
    while(a  == 1)
    27e6:	8d a9       	ldd	r24, Y+53	; 0x35
    27e8:	9e a9       	ldd	r25, Y+54	; 0x36
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	91 05       	cpc	r25, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <steppermotor4Write+0x408>
    27f0:	09 ce       	rjmp	.-1006   	; 0x2404 <steppermotor4Write+0x1a>
    27f2:	f0 c1       	rjmp	.+992    	; 0x2bd4 <steppermotor4Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    27f4:	88 e0       	ldi	r24, 0x08	; 8
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9a ab       	std	Y+50, r25	; 0x32
    27fa:	89 ab       	std	Y+49, r24	; 0x31
    27fc:	e3 c1       	rjmp	.+966    	; 0x2bc4 <steppermotor4Write+0x7da>
        {
            switch (i)
    27fe:	89 a9       	ldd	r24, Y+49	; 0x31
    2800:	9a a9       	ldd	r25, Y+50	; 0x32
    2802:	9a af       	std	Y+58, r25	; 0x3a
    2804:	89 af       	std	Y+57, r24	; 0x39
    2806:	89 ad       	ldd	r24, Y+57	; 0x39
    2808:	9a ad       	ldd	r25, Y+58	; 0x3a
    280a:	84 30       	cpi	r24, 0x04	; 4
    280c:	91 05       	cpc	r25, r1
    280e:	09 f4       	brne	.+2      	; 0x2812 <steppermotor4Write+0x428>
    2810:	a3 c0       	rjmp	.+326    	; 0x2958 <steppermotor4Write+0x56e>
    2812:	89 ad       	ldd	r24, Y+57	; 0x39
    2814:	9a ad       	ldd	r25, Y+58	; 0x3a
    2816:	85 30       	cpi	r24, 0x05	; 5
    2818:	91 05       	cpc	r25, r1
    281a:	94 f4       	brge	.+36     	; 0x2840 <steppermotor4Write+0x456>
    281c:	89 ad       	ldd	r24, Y+57	; 0x39
    281e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	91 05       	cpc	r25, r1
    2824:	09 f4       	brne	.+2      	; 0x2828 <steppermotor4Write+0x43e>
    2826:	5e c0       	rjmp	.+188    	; 0x28e4 <steppermotor4Write+0x4fa>
    2828:	89 ad       	ldd	r24, Y+57	; 0x39
    282a:	9a ad       	ldd	r25, Y+58	; 0x3a
    282c:	83 30       	cpi	r24, 0x03	; 3
    282e:	91 05       	cpc	r25, r1
    2830:	0c f0       	brlt	.+2      	; 0x2834 <steppermotor4Write+0x44a>
    2832:	75 c0       	rjmp	.+234    	; 0x291e <steppermotor4Write+0x534>
    2834:	89 ad       	ldd	r24, Y+57	; 0x39
    2836:	9a ad       	ldd	r25, Y+58	; 0x3a
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	91 05       	cpc	r25, r1
    283c:	b1 f1       	breq	.+108    	; 0x28aa <steppermotor4Write+0x4c0>
    283e:	ff c0       	rjmp	.+510    	; 0x2a3e <steppermotor4Write+0x654>
    2840:	89 ad       	ldd	r24, Y+57	; 0x39
    2842:	9a ad       	ldd	r25, Y+58	; 0x3a
    2844:	86 30       	cpi	r24, 0x06	; 6
    2846:	91 05       	cpc	r25, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <steppermotor4Write+0x462>
    284a:	c0 c0       	rjmp	.+384    	; 0x29cc <steppermotor4Write+0x5e2>
    284c:	89 ad       	ldd	r24, Y+57	; 0x39
    284e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2850:	86 30       	cpi	r24, 0x06	; 6
    2852:	91 05       	cpc	r25, r1
    2854:	0c f4       	brge	.+2      	; 0x2858 <steppermotor4Write+0x46e>
    2856:	9d c0       	rjmp	.+314    	; 0x2992 <steppermotor4Write+0x5a8>
    2858:	89 ad       	ldd	r24, Y+57	; 0x39
    285a:	9a ad       	ldd	r25, Y+58	; 0x3a
    285c:	87 30       	cpi	r24, 0x07	; 7
    285e:	91 05       	cpc	r25, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <steppermotor4Write+0x47a>
    2862:	d1 c0       	rjmp	.+418    	; 0x2a06 <steppermotor4Write+0x61c>
    2864:	89 ad       	ldd	r24, Y+57	; 0x39
    2866:	9a ad       	ldd	r25, Y+58	; 0x3a
    2868:	88 30       	cpi	r24, 0x08	; 8
    286a:	91 05       	cpc	r25, r1
    286c:	09 f0       	breq	.+2      	; 0x2870 <steppermotor4Write+0x486>
    286e:	e7 c0       	rjmp	.+462    	; 0x2a3e <steppermotor4Write+0x654>
            {
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2870:	ab e0       	ldi	r26, 0x0B	; 11
    2872:	b1 e0       	ldi	r27, 0x01	; 1
    2874:	eb e0       	ldi	r30, 0x0B	; 11
    2876:	f1 e0       	ldi	r31, 0x01	; 1
    2878:	80 81       	ld	r24, Z
    287a:	80 64       	ori	r24, 0x40	; 64
    287c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    287e:	ab e0       	ldi	r26, 0x0B	; 11
    2880:	b1 e0       	ldi	r27, 0x01	; 1
    2882:	eb e0       	ldi	r30, 0x0B	; 11
    2884:	f1 e0       	ldi	r31, 0x01	; 1
    2886:	80 81       	ld	r24, Z
    2888:	8f 7e       	andi	r24, 0xEF	; 239
    288a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    288c:	ab e0       	ldi	r26, 0x0B	; 11
    288e:	b1 e0       	ldi	r27, 0x01	; 1
    2890:	eb e0       	ldi	r30, 0x0B	; 11
    2892:	f1 e0       	ldi	r31, 0x01	; 1
    2894:	80 81       	ld	r24, Z
    2896:	8b 7f       	andi	r24, 0xFB	; 251
    2898:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    289a:	ab e0       	ldi	r26, 0x0B	; 11
    289c:	b1 e0       	ldi	r27, 0x01	; 1
    289e:	eb e0       	ldi	r30, 0x0B	; 11
    28a0:	f1 e0       	ldi	r31, 0x01	; 1
    28a2:	80 81       	ld	r24, Z
    28a4:	8e 7f       	andi	r24, 0xFE	; 254
    28a6:	8c 93       	st	X, r24
    28a8:	ca c0       	rjmp	.+404    	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    28aa:	ab e0       	ldi	r26, 0x0B	; 11
    28ac:	b1 e0       	ldi	r27, 0x01	; 1
    28ae:	eb e0       	ldi	r30, 0x0B	; 11
    28b0:	f1 e0       	ldi	r31, 0x01	; 1
    28b2:	80 81       	ld	r24, Z
    28b4:	80 64       	ori	r24, 0x40	; 64
    28b6:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    28b8:	ab e0       	ldi	r26, 0x0B	; 11
    28ba:	b1 e0       	ldi	r27, 0x01	; 1
    28bc:	eb e0       	ldi	r30, 0x0B	; 11
    28be:	f1 e0       	ldi	r31, 0x01	; 1
    28c0:	80 81       	ld	r24, Z
    28c2:	80 61       	ori	r24, 0x10	; 16
    28c4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    28c6:	ab e0       	ldi	r26, 0x0B	; 11
    28c8:	b1 e0       	ldi	r27, 0x01	; 1
    28ca:	eb e0       	ldi	r30, 0x0B	; 11
    28cc:	f1 e0       	ldi	r31, 0x01	; 1
    28ce:	80 81       	ld	r24, Z
    28d0:	8b 7f       	andi	r24, 0xFB	; 251
    28d2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    28d4:	ab e0       	ldi	r26, 0x0B	; 11
    28d6:	b1 e0       	ldi	r27, 0x01	; 1
    28d8:	eb e0       	ldi	r30, 0x0B	; 11
    28da:	f1 e0       	ldi	r31, 0x01	; 1
    28dc:	80 81       	ld	r24, Z
    28de:	8e 7f       	andi	r24, 0xFE	; 254
    28e0:	8c 93       	st	X, r24
    28e2:	ad c0       	rjmp	.+346    	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 2 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    28e4:	ab e0       	ldi	r26, 0x0B	; 11
    28e6:	b1 e0       	ldi	r27, 0x01	; 1
    28e8:	eb e0       	ldi	r30, 0x0B	; 11
    28ea:	f1 e0       	ldi	r31, 0x01	; 1
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 7b       	andi	r24, 0xBF	; 191
    28f0:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    28f2:	ab e0       	ldi	r26, 0x0B	; 11
    28f4:	b1 e0       	ldi	r27, 0x01	; 1
    28f6:	eb e0       	ldi	r30, 0x0B	; 11
    28f8:	f1 e0       	ldi	r31, 0x01	; 1
    28fa:	80 81       	ld	r24, Z
    28fc:	80 61       	ori	r24, 0x10	; 16
    28fe:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2900:	ab e0       	ldi	r26, 0x0B	; 11
    2902:	b1 e0       	ldi	r27, 0x01	; 1
    2904:	eb e0       	ldi	r30, 0x0B	; 11
    2906:	f1 e0       	ldi	r31, 0x01	; 1
    2908:	80 81       	ld	r24, Z
    290a:	8b 7f       	andi	r24, 0xFB	; 251
    290c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    290e:	ab e0       	ldi	r26, 0x0B	; 11
    2910:	b1 e0       	ldi	r27, 0x01	; 1
    2912:	eb e0       	ldi	r30, 0x0B	; 11
    2914:	f1 e0       	ldi	r31, 0x01	; 1
    2916:	80 81       	ld	r24, Z
    2918:	8e 7f       	andi	r24, 0xFE	; 254
    291a:	8c 93       	st	X, r24
    291c:	90 c0       	rjmp	.+288    	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    291e:	ab e0       	ldi	r26, 0x0B	; 11
    2920:	b1 e0       	ldi	r27, 0x01	; 1
    2922:	eb e0       	ldi	r30, 0x0B	; 11
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	80 81       	ld	r24, Z
    2928:	8f 7b       	andi	r24, 0xBF	; 191
    292a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    292c:	ab e0       	ldi	r26, 0x0B	; 11
    292e:	b1 e0       	ldi	r27, 0x01	; 1
    2930:	eb e0       	ldi	r30, 0x0B	; 11
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	80 81       	ld	r24, Z
    2936:	80 61       	ori	r24, 0x10	; 16
    2938:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    293a:	ab e0       	ldi	r26, 0x0B	; 11
    293c:	b1 e0       	ldi	r27, 0x01	; 1
    293e:	eb e0       	ldi	r30, 0x0B	; 11
    2940:	f1 e0       	ldi	r31, 0x01	; 1
    2942:	80 81       	ld	r24, Z
    2944:	84 60       	ori	r24, 0x04	; 4
    2946:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2948:	ab e0       	ldi	r26, 0x0B	; 11
    294a:	b1 e0       	ldi	r27, 0x01	; 1
    294c:	eb e0       	ldi	r30, 0x0B	; 11
    294e:	f1 e0       	ldi	r31, 0x01	; 1
    2950:	80 81       	ld	r24, Z
    2952:	8e 7f       	andi	r24, 0xFE	; 254
    2954:	8c 93       	st	X, r24
    2956:	73 c0       	rjmp	.+230    	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2958:	ab e0       	ldi	r26, 0x0B	; 11
    295a:	b1 e0       	ldi	r27, 0x01	; 1
    295c:	eb e0       	ldi	r30, 0x0B	; 11
    295e:	f1 e0       	ldi	r31, 0x01	; 1
    2960:	80 81       	ld	r24, Z
    2962:	8f 7b       	andi	r24, 0xBF	; 191
    2964:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2966:	ab e0       	ldi	r26, 0x0B	; 11
    2968:	b1 e0       	ldi	r27, 0x01	; 1
    296a:	eb e0       	ldi	r30, 0x0B	; 11
    296c:	f1 e0       	ldi	r31, 0x01	; 1
    296e:	80 81       	ld	r24, Z
    2970:	8f 7e       	andi	r24, 0xEF	; 239
    2972:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2974:	ab e0       	ldi	r26, 0x0B	; 11
    2976:	b1 e0       	ldi	r27, 0x01	; 1
    2978:	eb e0       	ldi	r30, 0x0B	; 11
    297a:	f1 e0       	ldi	r31, 0x01	; 1
    297c:	80 81       	ld	r24, Z
    297e:	84 60       	ori	r24, 0x04	; 4
    2980:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2982:	ab e0       	ldi	r26, 0x0B	; 11
    2984:	b1 e0       	ldi	r27, 0x01	; 1
    2986:	eb e0       	ldi	r30, 0x0B	; 11
    2988:	f1 e0       	ldi	r31, 0x01	; 1
    298a:	80 81       	ld	r24, Z
    298c:	8e 7f       	andi	r24, 0xFE	; 254
    298e:	8c 93       	st	X, r24
    2990:	56 c0       	rjmp	.+172    	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2992:	ab e0       	ldi	r26, 0x0B	; 11
    2994:	b1 e0       	ldi	r27, 0x01	; 1
    2996:	eb e0       	ldi	r30, 0x0B	; 11
    2998:	f1 e0       	ldi	r31, 0x01	; 1
    299a:	80 81       	ld	r24, Z
    299c:	8f 7b       	andi	r24, 0xBF	; 191
    299e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    29a0:	ab e0       	ldi	r26, 0x0B	; 11
    29a2:	b1 e0       	ldi	r27, 0x01	; 1
    29a4:	eb e0       	ldi	r30, 0x0B	; 11
    29a6:	f1 e0       	ldi	r31, 0x01	; 1
    29a8:	80 81       	ld	r24, Z
    29aa:	8f 7e       	andi	r24, 0xEF	; 239
    29ac:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    29ae:	ab e0       	ldi	r26, 0x0B	; 11
    29b0:	b1 e0       	ldi	r27, 0x01	; 1
    29b2:	eb e0       	ldi	r30, 0x0B	; 11
    29b4:	f1 e0       	ldi	r31, 0x01	; 1
    29b6:	80 81       	ld	r24, Z
    29b8:	84 60       	ori	r24, 0x04	; 4
    29ba:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    29bc:	ab e0       	ldi	r26, 0x0B	; 11
    29be:	b1 e0       	ldi	r27, 0x01	; 1
    29c0:	eb e0       	ldi	r30, 0x0B	; 11
    29c2:	f1 e0       	ldi	r31, 0x01	; 1
    29c4:	80 81       	ld	r24, Z
    29c6:	81 60       	ori	r24, 0x01	; 1
    29c8:	8c 93       	st	X, r24
    29ca:	39 c0       	rjmp	.+114    	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    29cc:	ab e0       	ldi	r26, 0x0B	; 11
    29ce:	b1 e0       	ldi	r27, 0x01	; 1
    29d0:	eb e0       	ldi	r30, 0x0B	; 11
    29d2:	f1 e0       	ldi	r31, 0x01	; 1
    29d4:	80 81       	ld	r24, Z
    29d6:	8f 7b       	andi	r24, 0xBF	; 191
    29d8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    29da:	ab e0       	ldi	r26, 0x0B	; 11
    29dc:	b1 e0       	ldi	r27, 0x01	; 1
    29de:	eb e0       	ldi	r30, 0x0B	; 11
    29e0:	f1 e0       	ldi	r31, 0x01	; 1
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 7e       	andi	r24, 0xEF	; 239
    29e6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    29e8:	ab e0       	ldi	r26, 0x0B	; 11
    29ea:	b1 e0       	ldi	r27, 0x01	; 1
    29ec:	eb e0       	ldi	r30, 0x0B	; 11
    29ee:	f1 e0       	ldi	r31, 0x01	; 1
    29f0:	80 81       	ld	r24, Z
    29f2:	8b 7f       	andi	r24, 0xFB	; 251
    29f4:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    29f6:	ab e0       	ldi	r26, 0x0B	; 11
    29f8:	b1 e0       	ldi	r27, 0x01	; 1
    29fa:	eb e0       	ldi	r30, 0x0B	; 11
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	80 81       	ld	r24, Z
    2a00:	81 60       	ori	r24, 0x01	; 1
    2a02:	8c 93       	st	X, r24
    2a04:	1c c0       	rjmp	.+56     	; 0x2a3e <steppermotor4Write+0x654>
                break;
            case 7 :
                PORTStepper4 |= (1 << PStepper4_1);
    2a06:	ab e0       	ldi	r26, 0x0B	; 11
    2a08:	b1 e0       	ldi	r27, 0x01	; 1
    2a0a:	eb e0       	ldi	r30, 0x0B	; 11
    2a0c:	f1 e0       	ldi	r31, 0x01	; 1
    2a0e:	80 81       	ld	r24, Z
    2a10:	80 64       	ori	r24, 0x40	; 64
    2a12:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2a14:	ab e0       	ldi	r26, 0x0B	; 11
    2a16:	b1 e0       	ldi	r27, 0x01	; 1
    2a18:	eb e0       	ldi	r30, 0x0B	; 11
    2a1a:	f1 e0       	ldi	r31, 0x01	; 1
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8f 7e       	andi	r24, 0xEF	; 239
    2a20:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2a22:	ab e0       	ldi	r26, 0x0B	; 11
    2a24:	b1 e0       	ldi	r27, 0x01	; 1
    2a26:	eb e0       	ldi	r30, 0x0B	; 11
    2a28:	f1 e0       	ldi	r31, 0x01	; 1
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8b 7f       	andi	r24, 0xFB	; 251
    2a2e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2a30:	ab e0       	ldi	r26, 0x0B	; 11
    2a32:	b1 e0       	ldi	r27, 0x01	; 1
    2a34:	eb e0       	ldi	r30, 0x0B	; 11
    2a36:	f1 e0       	ldi	r31, 0x01	; 1
    2a38:	80 81       	ld	r24, Z
    2a3a:	81 60       	ori	r24, 0x01	; 1
    2a3c:	8c 93       	st	X, r24
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	aa e7       	ldi	r26, 0x7A	; 122
    2a44:	b4 e4       	ldi	r27, 0x44	; 68
    2a46:	8d 8b       	std	Y+21, r24	; 0x15
    2a48:	9e 8b       	std	Y+22, r25	; 0x16
    2a4a:	af 8b       	std	Y+23, r26	; 0x17
    2a4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a50:	7e 89       	ldd	r23, Y+22	; 0x16
    2a52:	8f 89       	ldd	r24, Y+23	; 0x17
    2a54:	98 8d       	ldd	r25, Y+24	; 0x18
    2a56:	2b ea       	ldi	r18, 0xAB	; 171
    2a58:	3a ea       	ldi	r19, 0xAA	; 170
    2a5a:	4a ea       	ldi	r20, 0xAA	; 170
    2a5c:	50 e4       	ldi	r21, 0x40	; 64
    2a5e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	89 8b       	std	Y+17, r24	; 0x11
    2a68:	9a 8b       	std	Y+18, r25	; 0x12
    2a6a:	ab 8b       	std	Y+19, r26	; 0x13
    2a6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a6e:	69 89       	ldd	r22, Y+17	; 0x11
    2a70:	7a 89       	ldd	r23, Y+18	; 0x12
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	1c f4       	brge	.+6      	; 0x2a8c <steppermotor4Write+0x6a2>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	88 8b       	std	Y+16, r24	; 0x10
    2a8a:	91 c0       	rjmp	.+290    	; 0x2bae <steppermotor4Write+0x7c4>
	else if (__tmp > 255)
    2a8c:	69 89       	ldd	r22, Y+17	; 0x11
    2a8e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	53 e4       	ldi	r21, 0x43	; 67
    2a9c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	0c f0       	brlt	.+2      	; 0x2aa6 <steppermotor4Write+0x6bc>
    2aa4:	7b c0       	rjmp	.+246    	; 0x2b9c <steppermotor4Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    2aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2aac:	98 8d       	ldd	r25, Y+24	; 0x18
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e7       	ldi	r20, 0x7A	; 122
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8c 87       	std	Y+12, r24	; 0x0c
    2ac0:	9d 87       	std	Y+13, r25	; 0x0d
    2ac2:	ae 87       	std	Y+14, r26	; 0x0e
    2ac4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ac8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2aca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2acc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a e7       	ldi	r20, 0x7A	; 122
    2ad4:	55 e4       	ldi	r21, 0x45	; 69
    2ad6:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	88 87       	std	Y+8, r24	; 0x08
    2ae0:	99 87       	std	Y+9, r25	; 0x09
    2ae2:	aa 87       	std	Y+10, r26	; 0x0a
    2ae4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ae6:	68 85       	ldd	r22, Y+8	; 0x08
    2ae8:	79 85       	ldd	r23, Y+9	; 0x09
    2aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e8       	ldi	r20, 0x80	; 128
    2af4:	5f e3       	ldi	r21, 0x3F	; 63
    2af6:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    2afa:	88 23       	and	r24, r24
    2afc:	2c f4       	brge	.+10     	; 0x2b08 <steppermotor4Write+0x71e>
		__ticks = 1;
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	9f 83       	std	Y+7, r25	; 0x07
    2b04:	8e 83       	std	Y+6, r24	; 0x06
    2b06:	3f c0       	rjmp	.+126    	; 0x2b86 <steppermotor4Write+0x79c>
	else if (__tmp > 65535)
    2b08:	68 85       	ldd	r22, Y+8	; 0x08
    2b0a:	79 85       	ldd	r23, Y+9	; 0x09
    2b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	3f ef       	ldi	r19, 0xFF	; 255
    2b14:	4f e7       	ldi	r20, 0x7F	; 127
    2b16:	57 e4       	ldi	r21, 0x47	; 71
    2b18:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2b1c:	18 16       	cp	r1, r24
    2b1e:	4c f5       	brge	.+82     	; 0x2b72 <steppermotor4Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e2       	ldi	r20, 0x20	; 32
    2b2e:	51 e4       	ldi	r21, 0x41	; 65
    2b30:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9f 83       	std	Y+7, r25	; 0x07
    2b46:	8e 83       	std	Y+6, r24	; 0x06
    2b48:	0f c0       	rjmp	.+30     	; 0x2b68 <steppermotor4Write+0x77e>
    2b4a:	80 e9       	ldi	r24, 0x90	; 144
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	9d 83       	std	Y+5, r25	; 0x05
    2b50:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	9d 81       	ldd	r25, Y+5	; 0x05
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <steppermotor4Write+0x76c>
    2b5a:	9d 83       	std	Y+5, r25	; 0x05
    2b5c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b60:	9f 81       	ldd	r25, Y+7	; 0x07
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	9f 83       	std	Y+7, r25	; 0x07
    2b66:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b68:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	69 f7       	brne	.-38     	; 0x2b4a <steppermotor4Write+0x760>
    2b70:	24 c0       	rjmp	.+72     	; 0x2bba <steppermotor4Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b72:	68 85       	ldd	r22, Y+8	; 0x08
    2b74:	79 85       	ldd	r23, Y+9	; 0x09
    2b76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b7a:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	9f 83       	std	Y+7, r25	; 0x07
    2b84:	8e 83       	std	Y+6, r24	; 0x06
    2b86:	8e 81       	ldd	r24, Y+6	; 0x06
    2b88:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8a:	9b 83       	std	Y+3, r25	; 0x03
    2b8c:	8a 83       	std	Y+2, r24	; 0x02
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <steppermotor4Write+0x7a8>
    2b96:	9b 83       	std	Y+3, r25	; 0x03
    2b98:	8a 83       	std	Y+2, r24	; 0x02
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <steppermotor4Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b9c:	69 89       	ldd	r22, Y+17	; 0x11
    2b9e:	7a 89       	ldd	r23, Y+18	; 0x12
    2ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba4:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	88 8b       	std	Y+16, r24	; 0x10
    2bae:	88 89       	ldd	r24, Y+16	; 0x10
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8a 95       	dec	r24
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <steppermotor4Write+0x7ca>
    2bb8:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    2bba:	89 a9       	ldd	r24, Y+49	; 0x31
    2bbc:	9a a9       	ldd	r25, Y+50	; 0x32
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9a ab       	std	Y+50, r25	; 0x32
    2bc2:	89 ab       	std	Y+49, r24	; 0x31
    2bc4:	89 a9       	ldd	r24, Y+49	; 0x31
    2bc6:	9a a9       	ldd	r25, Y+50	; 0x32
    2bc8:	18 16       	cp	r1, r24
    2bca:	19 06       	cpc	r1, r25
    2bcc:	0c f4       	brge	.+2      	; 0x2bd0 <steppermotor4Write+0x7e6>
    2bce:	17 ce       	rjmp	.-978    	; 0x27fe <steppermotor4Write+0x414>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    2bd0:	1e aa       	std	Y+54, r1	; 0x36
    2bd2:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    2bd4:	8d a9       	ldd	r24, Y+53	; 0x35
    2bd6:	9e a9       	ldd	r25, Y+54	; 0x36
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	91 05       	cpc	r25, r1
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <steppermotor4Write+0x7f6>
    2bde:	0a ce       	rjmp	.-1004   	; 0x27f4 <steppermotor4Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    2be0:	ea 96       	adiw	r28, 0x3a	; 58
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <Vooruit>:

void Vooruit(int Steppermotortijd)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <Vooruit+0x6>
    2bf8:	0f 92       	push	r0
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9c 83       	std	Y+4, r25	; 0x04
    2c00:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2c02:	1a 82       	std	Y+2, r1	; 0x02
    2c04:	19 82       	std	Y+1, r1	; 0x01
    2c06:	15 c0       	rjmp	.+42     	; 0x2c32 <Vooruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <steppermotor1Write>
        steppermotor2Write(1);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 ed 09 	call	0x13da	; 0x13da <steppermotor2Write>
        steppermotor3Write(1);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <steppermotor3Write>
        steppermotor4Write(1);
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 f5 11 	call	0x23ea	; 0x23ea <steppermotor4Write>
        j++;
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2c:	01 96       	adiw	r24, 0x01	; 1
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
}

void Vooruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2c32:	29 81       	ldd	r18, Y+1	; 0x01
    2c34:	3a 81       	ldd	r19, Y+2	; 0x02
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	28 17       	cp	r18, r24
    2c3c:	39 07       	cpc	r19, r25
    2c3e:	24 f3       	brlt	.-56     	; 0x2c08 <Vooruit+0x16>
        steppermotor2Write(1);
        steppermotor3Write(1);
        steppermotor4Write(1);
        j++;
    }
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <Achteruit>:

void Achteruit(int Steppermotortijd)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <Achteruit+0x6>
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2c5e:	1a 82       	std	Y+2, r1	; 0x02
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	15 c0       	rjmp	.+42     	; 0x2c8e <Achteruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <steppermotor1Write>
        steppermotor2Write(2);
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 ed 09 	call	0x13da	; 0x13da <steppermotor2Write>
        steppermotor3Write(2);
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <steppermotor3Write>
        steppermotor4Write(2);
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 f5 11 	call	0x23ea	; 0x23ea <steppermotor4Write>
        j++;
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 96       	adiw	r24, 0x01	; 1
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
}

void Achteruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2c8e:	29 81       	ldd	r18, Y+1	; 0x01
    2c90:	3a 81       	ldd	r19, Y+2	; 0x02
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	28 17       	cp	r18, r24
    2c98:	39 07       	cpc	r19, r25
    2c9a:	24 f3       	brlt	.-56     	; 0x2c64 <Achteruit+0x16>
        steppermotor2Write(2);
        steppermotor3Write(2);
        steppermotor4Write(2);
        j++;
    }
}
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <Rechtsaf>:

void Rechtsaf(int Steppermotortijd)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <Rechtsaf+0x6>
    2cb0:	0f 92       	push	r0
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	9c 83       	std	Y+4, r25	; 0x04
    2cb8:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2cba:	1a 82       	std	Y+2, r1	; 0x02
    2cbc:	19 82       	std	Y+1, r1	; 0x01
    2cbe:	15 c0       	rjmp	.+42     	; 0x2cea <Rechtsaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <steppermotor1Write>
        steppermotor2Write(2);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 ed 09 	call	0x13da	; 0x13da <steppermotor2Write>
        steppermotor3Write(1);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <steppermotor3Write>
        steppermotor4Write(2);
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <steppermotor4Write>
        j++;
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
}

void Rechtsaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2cea:	29 81       	ldd	r18, Y+1	; 0x01
    2cec:	3a 81       	ldd	r19, Y+2	; 0x02
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	28 17       	cp	r18, r24
    2cf4:	39 07       	cpc	r19, r25
    2cf6:	24 f3       	brlt	.-56     	; 0x2cc0 <Rechtsaf+0x16>
        steppermotor2Write(2);
        steppermotor3Write(1);
        steppermotor4Write(2);
        j++;
    }
}
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <Linksaf>:

void Linksaf(int Steppermotortijd)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <Linksaf+0x6>
    2d0c:	0f 92       	push	r0
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2d16:	1a 82       	std	Y+2, r1	; 0x02
    2d18:	19 82       	std	Y+1, r1	; 0x01
    2d1a:	15 c0       	rjmp	.+42     	; 0x2d46 <Linksaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <steppermotor1Write>
        steppermotor2Write(1);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 ed 09 	call	0x13da	; 0x13da <steppermotor2Write>
        steppermotor3Write(2);
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <steppermotor3Write>
        steppermotor4Write(1);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 f5 11 	call	0x23ea	; 0x23ea <steppermotor4Write>
        j++;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
}

void Linksaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2d46:	29 81       	ldd	r18, Y+1	; 0x01
    2d48:	3a 81       	ldd	r19, Y+2	; 0x02
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	28 17       	cp	r18, r24
    2d50:	39 07       	cpc	r19, r25
    2d52:	24 f3       	brlt	.-56     	; 0x2d1c <Linksaf+0x16>
        steppermotor2Write(1);
        steppermotor3Write(2);
        steppermotor4Write(1);
        j++;
    }
}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <distance>:
static volatile unsigned long pulse = 0; //the variable for the pulse
static volatile int echo_pin = 0; //logic for the ultrasoon
volatile int isTriggerd = 0;    // used in the while loop
volatile int overflows = 0;

int distance(int triggerpin) {
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	ea 97       	sbiw	r28, 0x3a	; 58
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	9e ab       	std	Y+54, r25	; 0x36
    2d78:	8d ab       	std	Y+53, r24	; 0x35

    switch(triggerpin)
    2d7a:	8d a9       	ldd	r24, Y+53	; 0x35
    2d7c:	9e a9       	ldd	r25, Y+54	; 0x36
    2d7e:	9a af       	std	Y+58, r25	; 0x3a
    2d80:	89 af       	std	Y+57, r24	; 0x39
    2d82:	89 ad       	ldd	r24, Y+57	; 0x39
    2d84:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	31 f0       	breq	.+12     	; 0x2d96 <distance+0x34>
    2d8a:	89 ad       	ldd	r24, Y+57	; 0x39
    2d8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	91 05       	cpc	r25, r1
    2d92:	49 f0       	breq	.+18     	; 0x2da6 <distance+0x44>
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <distance+0x52>
    {
        case ultra_1_trigger:
            PCMASK = 0;
    2d96:	eb e6       	ldi	r30, 0x6B	; 107
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	10 82       	st	Z, r1
            PCMASK = ultra_1_pin;
    2d9c:	eb e6       	ldi	r30, 0x6B	; 107
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	80 83       	st	Z, r24
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <distance+0x52>
        break;

        case ultra_2_trigger:
            PCMASK = 0;
    2da6:	eb e6       	ldi	r30, 0x6B	; 107
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	10 82       	st	Z, r1
            PCMASK = ultra_2_pin;
    2dac:	eb e6       	ldi	r30, 0x6B	; 107
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	80 83       	st	Z, r24
        break;
    }

    TRIGGERPORT |= (1 << triggerpin);
    2db4:	ab e2       	ldi	r26, 0x2B	; 43
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	eb e2       	ldi	r30, 0x2B	; 43
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0d a8       	ldd	r0, Y+53	; 0x35
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <distance+0x6a>
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	0a 94       	dec	r0
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <distance+0x66>
    2dd0:	82 2b       	or	r24, r18
    2dd2:	8c 93       	st	X, r24
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a0 e7       	ldi	r26, 0x70	; 112
    2dda:	b1 e4       	ldi	r27, 0x41	; 65
    2ddc:	8d a7       	std	Y+45, r24	; 0x2d
    2dde:	9e a7       	std	Y+46, r25	; 0x2e
    2de0:	af a7       	std	Y+47, r26	; 0x2f
    2de2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2de4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2de6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2de8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dea:	98 a9       	ldd	r25, Y+48	; 0x30
    2dec:	2b ea       	ldi	r18, 0xAB	; 171
    2dee:	3a ea       	ldi	r19, 0xAA	; 170
    2df0:	4a ea       	ldi	r20, 0xAA	; 170
    2df2:	50 e4       	ldi	r21, 0x40	; 64
    2df4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	89 a7       	std	Y+41, r24	; 0x29
    2dfe:	9a a7       	std	Y+42, r25	; 0x2a
    2e00:	ab a7       	std	Y+43, r26	; 0x2b
    2e02:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e04:	69 a5       	ldd	r22, Y+41	; 0x29
    2e06:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e08:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    2e18:	88 23       	and	r24, r24
    2e1a:	1c f4       	brge	.+6      	; 0x2e22 <distance+0xc0>
		__ticks = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	88 a7       	std	Y+40, r24	; 0x28
    2e20:	91 c0       	rjmp	.+290    	; 0x2f44 <distance+0x1e2>
	else if (__tmp > 255)
    2e22:	69 a5       	ldd	r22, Y+41	; 0x29
    2e24:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e28:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	53 e4       	ldi	r21, 0x43	; 67
    2e32:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	0c f0       	brlt	.+2      	; 0x2e3c <distance+0xda>
    2e3a:	7b c0       	rjmp	.+246    	; 0x2f32 <distance+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    2e3c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e3e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e42:	98 a9       	ldd	r25, Y+48	; 0x30
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8c a3       	std	Y+36, r24	; 0x24
    2e56:	9d a3       	std	Y+37, r25	; 0x25
    2e58:	ae a3       	std	Y+38, r26	; 0x26
    2e5a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6c a1       	ldd	r22, Y+36	; 0x24
    2e5e:	7d a1       	ldd	r23, Y+37	; 0x25
    2e60:	8e a1       	ldd	r24, Y+38	; 0x26
    2e62:	9f a1       	ldd	r25, Y+39	; 0x27
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	55 e4       	ldi	r21, 0x45	; 69
    2e6c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	88 a3       	std	Y+32, r24	; 0x20
    2e76:	99 a3       	std	Y+33, r25	; 0x21
    2e78:	aa a3       	std	Y+34, r26	; 0x22
    2e7a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2e7c:	68 a1       	ldd	r22, Y+32	; 0x20
    2e7e:	79 a1       	ldd	r23, Y+33	; 0x21
    2e80:	8a a1       	ldd	r24, Y+34	; 0x22
    2e82:	9b a1       	ldd	r25, Y+35	; 0x23
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <distance+0x13c>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9f 8f       	std	Y+31, r25	; 0x1f
    2e9a:	8e 8f       	std	Y+30, r24	; 0x1e
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <distance+0x1ba>
	else if (__tmp > 65535)
    2e9e:	68 a1       	ldd	r22, Y+32	; 0x20
    2ea0:	79 a1       	ldd	r23, Y+33	; 0x21
    2ea2:	8a a1       	ldd	r24, Y+34	; 0x22
    2ea4:	9b a1       	ldd	r25, Y+35	; 0x23
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <distance+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6c a1       	ldd	r22, Y+36	; 0x24
    2eb8:	7d a1       	ldd	r23, Y+37	; 0x25
    2eba:	8e a1       	ldd	r24, Y+38	; 0x26
    2ebc:	9f a1       	ldd	r25, Y+39	; 0x27
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9f 8f       	std	Y+31, r25	; 0x1f
    2edc:	8e 8f       	std	Y+30, r24	; 0x1e
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <distance+0x19c>
    2ee0:	80 e9       	ldi	r24, 0x90	; 144
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	9d 8f       	std	Y+29, r25	; 0x1d
    2ee6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <distance+0x18a>
    2ef0:	9d 8f       	std	Y+29, r25	; 0x1d
    2ef2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9f 8f       	std	Y+31, r25	; 0x1f
    2efc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <distance+0x17e>
    2f06:	24 c0       	rjmp	.+72     	; 0x2f50 <distance+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	68 a1       	ldd	r22, Y+32	; 0x20
    2f0a:	79 a1       	ldd	r23, Y+33	; 0x21
    2f0c:	8a a1       	ldd	r24, Y+34	; 0x22
    2f0e:	9b a1       	ldd	r25, Y+35	; 0x23
    2f10:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9f 8f       	std	Y+31, r25	; 0x1f
    2f1a:	8e 8f       	std	Y+30, r24	; 0x1e
    2f1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f20:	9b 8f       	std	Y+27, r25	; 0x1b
    2f22:	8a 8f       	std	Y+26, r24	; 0x1a
    2f24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <distance+0x1c6>
    2f2c:	9b 8f       	std	Y+27, r25	; 0x1b
    2f2e:	8a 8f       	std	Y+26, r24	; 0x1a
    2f30:	0f c0       	rjmp	.+30     	; 0x2f50 <distance+0x1ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f32:	69 a5       	ldd	r22, Y+41	; 0x29
    2f34:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f3a:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	88 a7       	std	Y+40, r24	; 0x28
    2f44:	88 a5       	ldd	r24, Y+40	; 0x28
    2f46:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f48:	89 8d       	ldd	r24, Y+25	; 0x19
    2f4a:	8a 95       	dec	r24
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <distance+0x1e8>
    2f4e:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(15);
    TRIGGERPORT &= ~( 1 << triggerpin);
    2f50:	ab e2       	ldi	r26, 0x2B	; 43
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	eb e2       	ldi	r30, 0x2B	; 43
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0d a8       	ldd	r0, Y+53	; 0x35
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <distance+0x206>
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	0a 94       	dec	r0
    2f6a:	e2 f7       	brpl	.-8      	; 0x2f64 <distance+0x202>
    2f6c:	80 95       	com	r24
    2f6e:	82 23       	and	r24, r18
    2f70:	8c 93       	st	X, r24
    isTriggerd = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	90 93 09 03 	sts	0x0309, r25
    2f7a:	80 93 08 03 	sts	0x0308, r24
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a0 e7       	ldi	r26, 0x70	; 112
    2f84:	b1 e4       	ldi	r27, 0x41	; 65
    2f86:	8d 8b       	std	Y+21, r24	; 0x15
    2f88:	9e 8b       	std	Y+22, r25	; 0x16
    2f8a:	af 8b       	std	Y+23, r26	; 0x17
    2f8c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f90:	7e 89       	ldd	r23, Y+22	; 0x16
    2f92:	8f 89       	ldd	r24, Y+23	; 0x17
    2f94:	98 8d       	ldd	r25, Y+24	; 0x18
    2f96:	2b ea       	ldi	r18, 0xAB	; 171
    2f98:	3a ea       	ldi	r19, 0xAA	; 170
    2f9a:	4a ea       	ldi	r20, 0xAA	; 170
    2f9c:	50 e4       	ldi	r21, 0x40	; 64
    2f9e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	89 8b       	std	Y+17, r24	; 0x11
    2fa8:	9a 8b       	std	Y+18, r25	; 0x12
    2faa:	ab 8b       	std	Y+19, r26	; 0x13
    2fac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2fae:	69 89       	ldd	r22, Y+17	; 0x11
    2fb0:	7a 89       	ldd	r23, Y+18	; 0x12
    2fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	1c f4       	brge	.+6      	; 0x2fcc <distance+0x26a>
		__ticks = 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	88 8b       	std	Y+16, r24	; 0x10
    2fca:	91 c0       	rjmp	.+290    	; 0x30ee <distance+0x38c>
	else if (__tmp > 255)
    2fcc:	69 89       	ldd	r22, Y+17	; 0x11
    2fce:	7a 89       	ldd	r23, Y+18	; 0x12
    2fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4f e7       	ldi	r20, 0x7F	; 127
    2fda:	53 e4       	ldi	r21, 0x43	; 67
    2fdc:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	0c f0       	brlt	.+2      	; 0x2fe6 <distance+0x284>
    2fe4:	7b c0       	rjmp	.+246    	; 0x30dc <distance+0x37a>
	{
		_delay_ms(__us / 1000.0);
    2fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fea:	8f 89       	ldd	r24, Y+23	; 0x17
    2fec:	98 8d       	ldd	r25, Y+24	; 0x18
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	4a e7       	ldi	r20, 0x7A	; 122
    2ff4:	54 e4       	ldi	r21, 0x44	; 68
    2ff6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	8c 87       	std	Y+12, r24	; 0x0c
    3000:	9d 87       	std	Y+13, r25	; 0x0d
    3002:	ae 87       	std	Y+14, r26	; 0x0e
    3004:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	6c 85       	ldd	r22, Y+12	; 0x0c
    3008:	7d 85       	ldd	r23, Y+13	; 0x0d
    300a:	8e 85       	ldd	r24, Y+14	; 0x0e
    300c:	9f 85       	ldd	r25, Y+15	; 0x0f
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a e7       	ldi	r20, 0x7A	; 122
    3014:	55 e4       	ldi	r21, 0x45	; 69
    3016:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	88 87       	std	Y+8, r24	; 0x08
    3020:	99 87       	std	Y+9, r25	; 0x09
    3022:	aa 87       	std	Y+10, r26	; 0x0a
    3024:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3026:	68 85       	ldd	r22, Y+8	; 0x08
    3028:	79 85       	ldd	r23, Y+9	; 0x09
    302a:	8a 85       	ldd	r24, Y+10	; 0x0a
    302c:	9b 85       	ldd	r25, Y+11	; 0x0b
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <distance+0x2e6>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9f 83       	std	Y+7, r25	; 0x07
    3044:	8e 83       	std	Y+6, r24	; 0x06
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <distance+0x364>
	else if (__tmp > 65535)
    3048:	68 85       	ldd	r22, Y+8	; 0x08
    304a:	79 85       	ldd	r23, Y+9	; 0x09
    304c:	8a 85       	ldd	r24, Y+10	; 0x0a
    304e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <distance+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	6c 85       	ldd	r22, Y+12	; 0x0c
    3062:	7d 85       	ldd	r23, Y+13	; 0x0d
    3064:	8e 85       	ldd	r24, Y+14	; 0x0e
    3066:	9f 85       	ldd	r25, Y+15	; 0x0f
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9f 83       	std	Y+7, r25	; 0x07
    3086:	8e 83       	std	Y+6, r24	; 0x06
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <distance+0x346>
    308a:	80 e9       	ldi	r24, 0x90	; 144
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	9d 83       	std	Y+5, r25	; 0x05
    3090:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3092:	8c 81       	ldd	r24, Y+4	; 0x04
    3094:	9d 81       	ldd	r25, Y+5	; 0x05
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <distance+0x334>
    309a:	9d 83       	std	Y+5, r25	; 0x05
    309c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	8e 81       	ldd	r24, Y+6	; 0x06
    30a0:	9f 81       	ldd	r25, Y+7	; 0x07
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9f 83       	std	Y+7, r25	; 0x07
    30a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	8e 81       	ldd	r24, Y+6	; 0x06
    30aa:	9f 81       	ldd	r25, Y+7	; 0x07
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <distance+0x328>
    30b0:	24 c0       	rjmp	.+72     	; 0x30fa <distance+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	68 85       	ldd	r22, Y+8	; 0x08
    30b4:	79 85       	ldd	r23, Y+9	; 0x09
    30b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ba:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9f 83       	std	Y+7, r25	; 0x07
    30c4:	8e 83       	std	Y+6, r24	; 0x06
    30c6:	8e 81       	ldd	r24, Y+6	; 0x06
    30c8:	9f 81       	ldd	r25, Y+7	; 0x07
    30ca:	9b 83       	std	Y+3, r25	; 0x03
    30cc:	8a 83       	std	Y+2, r24	; 0x02
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <distance+0x370>
    30d6:	9b 83       	std	Y+3, r25	; 0x03
    30d8:	8a 83       	std	Y+2, r24	; 0x02
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <distance+0x398>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30dc:	69 89       	ldd	r22, Y+17	; 0x11
    30de:	7a 89       	ldd	r23, Y+18	; 0x12
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	0e 94 9c 19 	call	0x3338	; 0x3338 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	88 8b       	std	Y+16, r24	; 0x10
    30ee:	88 89       	ldd	r24, Y+16	; 0x10
    30f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	8a 95       	dec	r24
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <distance+0x392>
    30f8:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);

    unsigned long i = 0;
    30fa:	19 aa       	std	Y+49, r1	; 0x31
    30fc:	1a aa       	std	Y+50, r1	; 0x32
    30fe:	1b aa       	std	Y+51, r1	; 0x33
    3100:	1c aa       	std	Y+52, r1	; 0x34
    3102:	1f c0       	rjmp	.+62     	; 0x3142 <distance+0x3e0>
    while(isTriggerd){
       if(i > ((RETURNVALUE+10)*16))
    3104:	89 a9       	ldd	r24, Y+49	; 0x31
    3106:	9a a9       	ldd	r25, Y+50	; 0x32
    3108:	ab a9       	ldd	r26, Y+51	; 0x33
    310a:	bc a9       	ldd	r27, Y+52	; 0x34
    310c:	81 3e       	cpi	r24, 0xE1	; 225
    310e:	26 e0       	ldi	r18, 0x06	; 6
    3110:	92 07       	cpc	r25, r18
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	a2 07       	cpc	r26, r18
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	b2 07       	cpc	r27, r18
    311a:	40 f0       	brcs	.+16     	; 0x312c <distance+0x3ca>
       {
           PCMASK = 0;
    311c:	eb e6       	ldi	r30, 0x6B	; 107
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	10 82       	st	Z, r1
           return RETURNVALUE;
    3122:	84 e6       	ldi	r24, 0x64	; 100
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	98 af       	std	Y+56, r25	; 0x38
    3128:	8f ab       	std	Y+55, r24	; 0x37
    312a:	31 c0       	rjmp	.+98     	; 0x318e <distance+0x42c>
       }
       i++;
    312c:	89 a9       	ldd	r24, Y+49	; 0x31
    312e:	9a a9       	ldd	r25, Y+50	; 0x32
    3130:	ab a9       	ldd	r26, Y+51	; 0x33
    3132:	bc a9       	ldd	r27, Y+52	; 0x34
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	a1 1d       	adc	r26, r1
    3138:	b1 1d       	adc	r27, r1
    313a:	89 ab       	std	Y+49, r24	; 0x31
    313c:	9a ab       	std	Y+50, r25	; 0x32
    313e:	ab ab       	std	Y+51, r26	; 0x33
    3140:	bc ab       	std	Y+52, r27	; 0x34
    TRIGGERPORT &= ~( 1 << triggerpin);
    isTriggerd = 1;
    _delay_us(15);

    unsigned long i = 0;
    while(isTriggerd){
    3142:	80 91 08 03 	lds	r24, 0x0308
    3146:	90 91 09 03 	lds	r25, 0x0309
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	d9 f6       	brne	.-74     	; 0x3104 <distance+0x3a2>
       }
       i++;

    }

    return pulse/928.0;
    314e:	80 91 0c 03 	lds	r24, 0x030C
    3152:	90 91 0d 03 	lds	r25, 0x030D
    3156:	a0 91 0e 03 	lds	r26, 0x030E
    315a:	b0 91 0f 03 	lds	r27, 0x030F
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__floatunsisf>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	48 e6       	ldi	r20, 0x68	; 104
    3174:	54 e4       	ldi	r21, 0x44	; 68
    3176:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__fixsfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	98 af       	std	Y+56, r25	; 0x38
    318c:	8f ab       	std	Y+55, r24	; 0x37
    318e:	8f a9       	ldd	r24, Y+55	; 0x37
    3190:	98 ad       	ldd	r25, Y+56	; 0x38
}
    3192:	ea 96       	adiw	r28, 0x3a	; 58
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <init_ultrasoon>:
void init_ultrasoon(){
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    TRIGGERDDR |= (1 << ultra_1_trigger) | (1 << ultra_2_trigger);
    31ac:	aa e2       	ldi	r26, 0x2A	; 42
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	ea e2       	ldi	r30, 0x2A	; 42
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	83 60       	ori	r24, 0x03	; 3
    31b8:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_1_trigger);
    31ba:	ab e2       	ldi	r26, 0x2B	; 43
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	eb e2       	ldi	r30, 0x2B	; 43
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	8e 7f       	andi	r24, 0xFE	; 254
    31c6:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_2_trigger);
    31c8:	ab e2       	ldi	r26, 0x2B	; 43
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	eb e2       	ldi	r30, 0x2B	; 43
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	8d 7f       	andi	r24, 0xFD	; 253
    31d4:	8c 93       	st	X, r24
    PCICR |= (1 << PCREG);
    31d6:	a8 e6       	ldi	r26, 0x68	; 104
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e8 e6       	ldi	r30, 0x68	; 104
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	81 60       	ori	r24, 0x01	; 1
    31e2:	8c 93       	st	X, r24
    PCMASK = 0;
    31e4:	eb e6       	ldi	r30, 0x6B	; 107
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	10 82       	st	Z, r1
}
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <__vector_9>:

ISR(PCISR)   // Interrupt service routine.
{
    31f0:	1f 92       	push	r1
    31f2:	0f 92       	push	r0
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	0f 92       	push	r0
    31f8:	00 90 5b 00 	lds	r0, 0x005B
    31fc:	0f 92       	push	r0
    31fe:	11 24       	eor	r1, r1
    3200:	ef 92       	push	r14
    3202:	ff 92       	push	r15
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	2f 93       	push	r18
    320a:	3f 93       	push	r19
    320c:	4f 93       	push	r20
    320e:	5f 93       	push	r21
    3210:	6f 93       	push	r22
    3212:	7f 93       	push	r23
    3214:	8f 93       	push	r24
    3216:	9f 93       	push	r25
    3218:	af 93       	push	r26
    321a:	bf 93       	push	r27
    321c:	ef 93       	push	r30
    321e:	ff 93       	push	r31
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    if (echo_pin==1)
    3228:	80 91 10 03 	lds	r24, 0x0310
    322c:	90 91 11 03 	lds	r25, 0x0311
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	91 05       	cpc	r25, r1
    3234:	c9 f5       	brne	.+114    	; 0x32a8 <__vector_9+0xb8>
	{
		TIMER_B = 0;    //TIMER COUNTER CONTROL REGITER (Stop the counter)
    3236:	e1 e2       	ldi	r30, 0x21	; 33
    3238:	f1 e0       	ldi	r31, 0x01	; 1
    323a:	10 82       	st	Z, r1
		pulse=TNCT_timer+(overflows*OVERFLOW);  // store the value of counter
    323c:	e4 e2       	ldi	r30, 0x24	; 36
    323e:	f1 e0       	ldi	r31, 0x01	; 1
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	7c 01       	movw	r14, r24
    3246:	00 e0       	ldi	r16, 0x00	; 0
    3248:	10 e0       	ldi	r17, 0x00	; 0
    324a:	80 91 0a 03 	lds	r24, 0x030A
    324e:	90 91 0b 03 	lds	r25, 0x030B
    3252:	aa 27       	eor	r26, r26
    3254:	97 fd       	sbrc	r25, 7
    3256:	a0 95       	com	r26
    3258:	ba 2f       	mov	r27, r26
    325a:	2f ef       	ldi	r18, 0xFF	; 255
    325c:	3f ef       	ldi	r19, 0xFF	; 255
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 c8 20 	call	0x4190	; 0x4190 <__mulsi3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	8e 0d       	add	r24, r14
    3270:	9f 1d       	adc	r25, r15
    3272:	a0 1f       	adc	r26, r16
    3274:	b1 1f       	adc	r27, r17
    3276:	80 93 0c 03 	sts	0x030C, r24
    327a:	90 93 0d 03 	sts	0x030D, r25
    327e:	a0 93 0e 03 	sts	0x030E, r26
    3282:	b0 93 0f 03 	sts	0x030F, r27
		TNCT_timer=0;     // reset the counter
    3286:	e4 e2       	ldi	r30, 0x24	; 36
    3288:	f1 e0       	ldi	r31, 0x01	; 1
    328a:	11 82       	std	Z+1, r1	; 0x01
    328c:	10 82       	st	Z, r1
		echo_pin=0;
    328e:	10 92 11 03 	sts	0x0311, r1
    3292:	10 92 10 03 	sts	0x0310, r1
		isTriggerd = 0;
    3296:	10 92 09 03 	sts	0x0309, r1
    329a:	10 92 08 03 	sts	0x0308, r1
		overflows = 0;
    329e:	10 92 0b 03 	sts	0x030B, r1
    32a2:	10 92 0a 03 	sts	0x030A, r1
    32a6:	11 c0       	rjmp	.+34     	; 0x32ca <__vector_9+0xda>
	}
	else
	{
		TIMER_B |=(1<<CS10);  // used to start the internal counter of microcontroller
    32a8:	a1 e2       	ldi	r26, 0x21	; 33
    32aa:	b1 e0       	ldi	r27, 0x01	; 1
    32ac:	e1 e2       	ldi	r30, 0x21	; 33
    32ae:	f1 e0       	ldi	r31, 0x01	; 1
    32b0:	80 81       	ld	r24, Z
    32b2:	81 60       	ori	r24, 0x01	; 1
    32b4:	8c 93       	st	X, r24
		TIMSK_timer = (1 <<TIMSK_bit);
    32b6:	e3 e7       	ldi	r30, 0x73	; 115
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 83       	st	Z, r24
		echo_pin=1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	90 93 11 03 	sts	0x0311, r25
    32c6:	80 93 10 03 	sts	0x0310, r24
	}
}
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	ff 91       	pop	r31
    32d0:	ef 91       	pop	r30
    32d2:	bf 91       	pop	r27
    32d4:	af 91       	pop	r26
    32d6:	9f 91       	pop	r25
    32d8:	8f 91       	pop	r24
    32da:	7f 91       	pop	r23
    32dc:	6f 91       	pop	r22
    32de:	5f 91       	pop	r21
    32e0:	4f 91       	pop	r20
    32e2:	3f 91       	pop	r19
    32e4:	2f 91       	pop	r18
    32e6:	1f 91       	pop	r17
    32e8:	0f 91       	pop	r16
    32ea:	ff 90       	pop	r15
    32ec:	ef 90       	pop	r14
    32ee:	0f 90       	pop	r0
    32f0:	00 92 5b 00 	sts	0x005B, r0
    32f4:	0f 90       	pop	r0
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	0f 90       	pop	r0
    32fa:	1f 90       	pop	r1
    32fc:	18 95       	reti

000032fe <__vector_50>:

ISR(ISR_TIMER_OVF){
    32fe:	1f 92       	push	r1
    3300:	0f 92       	push	r0
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	0f 92       	push	r0
    3306:	11 24       	eor	r1, r1
    3308:	8f 93       	push	r24
    330a:	9f 93       	push	r25
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    overflows++;
    3314:	80 91 0a 03 	lds	r24, 0x030A
    3318:	90 91 0b 03 	lds	r25, 0x030B
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	90 93 0b 03 	sts	0x030B, r25
    3322:	80 93 0a 03 	sts	0x030A, r24
}
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	9f 91       	pop	r25
    332c:	8f 91       	pop	r24
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <__fixunssfsi>:
    3338:	ef 92       	push	r14
    333a:	ff 92       	push	r15
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	7b 01       	movw	r14, r22
    3342:	8c 01       	movw	r16, r24
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	5f e4       	ldi	r21, 0x4F	; 79
    334c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__gesf2>
    3350:	88 23       	and	r24, r24
    3352:	8c f0       	brlt	.+34     	; 0x3376 <__fixunssfsi+0x3e>
    3354:	c8 01       	movw	r24, r16
    3356:	b7 01       	movw	r22, r14
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	5f e4       	ldi	r21, 0x4F	; 79
    3360:	0e 94 14 1b 	call	0x3628	; 0x3628 <__subsf3>
    3364:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__fixsfsi>
    3368:	9b 01       	movw	r18, r22
    336a:	ac 01       	movw	r20, r24
    336c:	20 50       	subi	r18, 0x00	; 0
    336e:	30 40       	sbci	r19, 0x00	; 0
    3370:	40 40       	sbci	r20, 0x00	; 0
    3372:	50 48       	sbci	r21, 0x80	; 128
    3374:	06 c0       	rjmp	.+12     	; 0x3382 <__fixunssfsi+0x4a>
    3376:	c8 01       	movw	r24, r16
    3378:	b7 01       	movw	r22, r14
    337a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__fixsfsi>
    337e:	9b 01       	movw	r18, r22
    3380:	ac 01       	movw	r20, r24
    3382:	b9 01       	movw	r22, r18
    3384:	ca 01       	movw	r24, r20
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	08 95       	ret

00003390 <_fpadd_parts>:
    3390:	a0 e0       	ldi	r26, 0x00	; 0
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	ee ec       	ldi	r30, 0xCE	; 206
    3396:	f9 e1       	ldi	r31, 0x19	; 25
    3398:	0c 94 e7 20 	jmp	0x41ce	; 0x41ce <__prologue_saves__>
    339c:	dc 01       	movw	r26, r24
    339e:	2b 01       	movw	r4, r22
    33a0:	fa 01       	movw	r30, r20
    33a2:	9c 91       	ld	r25, X
    33a4:	92 30       	cpi	r25, 0x02	; 2
    33a6:	08 f4       	brcc	.+2      	; 0x33aa <_fpadd_parts+0x1a>
    33a8:	39 c1       	rjmp	.+626    	; 0x361c <_fpadd_parts+0x28c>
    33aa:	eb 01       	movw	r28, r22
    33ac:	88 81       	ld	r24, Y
    33ae:	82 30       	cpi	r24, 0x02	; 2
    33b0:	08 f4       	brcc	.+2      	; 0x33b4 <_fpadd_parts+0x24>
    33b2:	33 c1       	rjmp	.+614    	; 0x361a <_fpadd_parts+0x28a>
    33b4:	94 30       	cpi	r25, 0x04	; 4
    33b6:	69 f4       	brne	.+26     	; 0x33d2 <_fpadd_parts+0x42>
    33b8:	84 30       	cpi	r24, 0x04	; 4
    33ba:	09 f0       	breq	.+2      	; 0x33be <_fpadd_parts+0x2e>
    33bc:	2f c1       	rjmp	.+606    	; 0x361c <_fpadd_parts+0x28c>
    33be:	11 96       	adiw	r26, 0x01	; 1
    33c0:	9c 91       	ld	r25, X
    33c2:	11 97       	sbiw	r26, 0x01	; 1
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	98 17       	cp	r25, r24
    33c8:	09 f4       	brne	.+2      	; 0x33cc <_fpadd_parts+0x3c>
    33ca:	28 c1       	rjmp	.+592    	; 0x361c <_fpadd_parts+0x28c>
    33cc:	a0 e0       	ldi	r26, 0x00	; 0
    33ce:	b2 e0       	ldi	r27, 0x02	; 2
    33d0:	25 c1       	rjmp	.+586    	; 0x361c <_fpadd_parts+0x28c>
    33d2:	84 30       	cpi	r24, 0x04	; 4
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <_fpadd_parts+0x48>
    33d6:	21 c1       	rjmp	.+578    	; 0x361a <_fpadd_parts+0x28a>
    33d8:	82 30       	cpi	r24, 0x02	; 2
    33da:	a9 f4       	brne	.+42     	; 0x3406 <_fpadd_parts+0x76>
    33dc:	92 30       	cpi	r25, 0x02	; 2
    33de:	09 f0       	breq	.+2      	; 0x33e2 <_fpadd_parts+0x52>
    33e0:	1d c1       	rjmp	.+570    	; 0x361c <_fpadd_parts+0x28c>
    33e2:	9a 01       	movw	r18, r20
    33e4:	ad 01       	movw	r20, r26
    33e6:	88 e0       	ldi	r24, 0x08	; 8
    33e8:	ea 01       	movw	r28, r20
    33ea:	09 90       	ld	r0, Y+
    33ec:	ae 01       	movw	r20, r28
    33ee:	e9 01       	movw	r28, r18
    33f0:	09 92       	st	Y+, r0
    33f2:	9e 01       	movw	r18, r28
    33f4:	81 50       	subi	r24, 0x01	; 1
    33f6:	c1 f7       	brne	.-16     	; 0x33e8 <_fpadd_parts+0x58>
    33f8:	e2 01       	movw	r28, r4
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	11 96       	adiw	r26, 0x01	; 1
    33fe:	9c 91       	ld	r25, X
    3400:	89 23       	and	r24, r25
    3402:	81 83       	std	Z+1, r24	; 0x01
    3404:	08 c1       	rjmp	.+528    	; 0x3616 <_fpadd_parts+0x286>
    3406:	92 30       	cpi	r25, 0x02	; 2
    3408:	09 f4       	brne	.+2      	; 0x340c <_fpadd_parts+0x7c>
    340a:	07 c1       	rjmp	.+526    	; 0x361a <_fpadd_parts+0x28a>
    340c:	12 96       	adiw	r26, 0x02	; 2
    340e:	2d 90       	ld	r2, X+
    3410:	3c 90       	ld	r3, X
    3412:	13 97       	sbiw	r26, 0x03	; 3
    3414:	eb 01       	movw	r28, r22
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	9b 81       	ldd	r25, Y+3	; 0x03
    341a:	14 96       	adiw	r26, 0x04	; 4
    341c:	ad 90       	ld	r10, X+
    341e:	bd 90       	ld	r11, X+
    3420:	cd 90       	ld	r12, X+
    3422:	dc 90       	ld	r13, X
    3424:	17 97       	sbiw	r26, 0x07	; 7
    3426:	ec 80       	ldd	r14, Y+4	; 0x04
    3428:	fd 80       	ldd	r15, Y+5	; 0x05
    342a:	0e 81       	ldd	r16, Y+6	; 0x06
    342c:	1f 81       	ldd	r17, Y+7	; 0x07
    342e:	91 01       	movw	r18, r2
    3430:	28 1b       	sub	r18, r24
    3432:	39 0b       	sbc	r19, r25
    3434:	b9 01       	movw	r22, r18
    3436:	37 ff       	sbrs	r19, 7
    3438:	04 c0       	rjmp	.+8      	; 0x3442 <_fpadd_parts+0xb2>
    343a:	66 27       	eor	r22, r22
    343c:	77 27       	eor	r23, r23
    343e:	62 1b       	sub	r22, r18
    3440:	73 0b       	sbc	r23, r19
    3442:	60 32       	cpi	r22, 0x20	; 32
    3444:	71 05       	cpc	r23, r1
    3446:	0c f0       	brlt	.+2      	; 0x344a <_fpadd_parts+0xba>
    3448:	61 c0       	rjmp	.+194    	; 0x350c <_fpadd_parts+0x17c>
    344a:	12 16       	cp	r1, r18
    344c:	13 06       	cpc	r1, r19
    344e:	6c f5       	brge	.+90     	; 0x34aa <_fpadd_parts+0x11a>
    3450:	37 01       	movw	r6, r14
    3452:	48 01       	movw	r8, r16
    3454:	06 2e       	mov	r0, r22
    3456:	04 c0       	rjmp	.+8      	; 0x3460 <_fpadd_parts+0xd0>
    3458:	96 94       	lsr	r9
    345a:	87 94       	ror	r8
    345c:	77 94       	ror	r7
    345e:	67 94       	ror	r6
    3460:	0a 94       	dec	r0
    3462:	d2 f7       	brpl	.-12     	; 0x3458 <_fpadd_parts+0xc8>
    3464:	21 e0       	ldi	r18, 0x01	; 1
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <_fpadd_parts+0xe6>
    346e:	22 0f       	add	r18, r18
    3470:	33 1f       	adc	r19, r19
    3472:	44 1f       	adc	r20, r20
    3474:	55 1f       	adc	r21, r21
    3476:	6a 95       	dec	r22
    3478:	d2 f7       	brpl	.-12     	; 0x346e <_fpadd_parts+0xde>
    347a:	21 50       	subi	r18, 0x01	; 1
    347c:	30 40       	sbci	r19, 0x00	; 0
    347e:	40 40       	sbci	r20, 0x00	; 0
    3480:	50 40       	sbci	r21, 0x00	; 0
    3482:	2e 21       	and	r18, r14
    3484:	3f 21       	and	r19, r15
    3486:	40 23       	and	r20, r16
    3488:	51 23       	and	r21, r17
    348a:	21 15       	cp	r18, r1
    348c:	31 05       	cpc	r19, r1
    348e:	41 05       	cpc	r20, r1
    3490:	51 05       	cpc	r21, r1
    3492:	21 f0       	breq	.+8      	; 0x349c <_fpadd_parts+0x10c>
    3494:	21 e0       	ldi	r18, 0x01	; 1
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	79 01       	movw	r14, r18
    349e:	8a 01       	movw	r16, r20
    34a0:	e6 28       	or	r14, r6
    34a2:	f7 28       	or	r15, r7
    34a4:	08 29       	or	r16, r8
    34a6:	19 29       	or	r17, r9
    34a8:	3c c0       	rjmp	.+120    	; 0x3522 <_fpadd_parts+0x192>
    34aa:	23 2b       	or	r18, r19
    34ac:	d1 f1       	breq	.+116    	; 0x3522 <_fpadd_parts+0x192>
    34ae:	26 0e       	add	r2, r22
    34b0:	37 1e       	adc	r3, r23
    34b2:	35 01       	movw	r6, r10
    34b4:	46 01       	movw	r8, r12
    34b6:	06 2e       	mov	r0, r22
    34b8:	04 c0       	rjmp	.+8      	; 0x34c2 <_fpadd_parts+0x132>
    34ba:	96 94       	lsr	r9
    34bc:	87 94       	ror	r8
    34be:	77 94       	ror	r7
    34c0:	67 94       	ror	r6
    34c2:	0a 94       	dec	r0
    34c4:	d2 f7       	brpl	.-12     	; 0x34ba <_fpadd_parts+0x12a>
    34c6:	21 e0       	ldi	r18, 0x01	; 1
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	04 c0       	rjmp	.+8      	; 0x34d8 <_fpadd_parts+0x148>
    34d0:	22 0f       	add	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	44 1f       	adc	r20, r20
    34d6:	55 1f       	adc	r21, r21
    34d8:	6a 95       	dec	r22
    34da:	d2 f7       	brpl	.-12     	; 0x34d0 <_fpadd_parts+0x140>
    34dc:	21 50       	subi	r18, 0x01	; 1
    34de:	30 40       	sbci	r19, 0x00	; 0
    34e0:	40 40       	sbci	r20, 0x00	; 0
    34e2:	50 40       	sbci	r21, 0x00	; 0
    34e4:	2a 21       	and	r18, r10
    34e6:	3b 21       	and	r19, r11
    34e8:	4c 21       	and	r20, r12
    34ea:	5d 21       	and	r21, r13
    34ec:	21 15       	cp	r18, r1
    34ee:	31 05       	cpc	r19, r1
    34f0:	41 05       	cpc	r20, r1
    34f2:	51 05       	cpc	r21, r1
    34f4:	21 f0       	breq	.+8      	; 0x34fe <_fpadd_parts+0x16e>
    34f6:	21 e0       	ldi	r18, 0x01	; 1
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	59 01       	movw	r10, r18
    3500:	6a 01       	movw	r12, r20
    3502:	a6 28       	or	r10, r6
    3504:	b7 28       	or	r11, r7
    3506:	c8 28       	or	r12, r8
    3508:	d9 28       	or	r13, r9
    350a:	0b c0       	rjmp	.+22     	; 0x3522 <_fpadd_parts+0x192>
    350c:	82 15       	cp	r24, r2
    350e:	93 05       	cpc	r25, r3
    3510:	2c f0       	brlt	.+10     	; 0x351c <_fpadd_parts+0x18c>
    3512:	1c 01       	movw	r2, r24
    3514:	aa 24       	eor	r10, r10
    3516:	bb 24       	eor	r11, r11
    3518:	65 01       	movw	r12, r10
    351a:	03 c0       	rjmp	.+6      	; 0x3522 <_fpadd_parts+0x192>
    351c:	ee 24       	eor	r14, r14
    351e:	ff 24       	eor	r15, r15
    3520:	87 01       	movw	r16, r14
    3522:	11 96       	adiw	r26, 0x01	; 1
    3524:	9c 91       	ld	r25, X
    3526:	d2 01       	movw	r26, r4
    3528:	11 96       	adiw	r26, 0x01	; 1
    352a:	8c 91       	ld	r24, X
    352c:	98 17       	cp	r25, r24
    352e:	09 f4       	brne	.+2      	; 0x3532 <_fpadd_parts+0x1a2>
    3530:	45 c0       	rjmp	.+138    	; 0x35bc <_fpadd_parts+0x22c>
    3532:	99 23       	and	r25, r25
    3534:	39 f0       	breq	.+14     	; 0x3544 <_fpadd_parts+0x1b4>
    3536:	a8 01       	movw	r20, r16
    3538:	97 01       	movw	r18, r14
    353a:	2a 19       	sub	r18, r10
    353c:	3b 09       	sbc	r19, r11
    353e:	4c 09       	sbc	r20, r12
    3540:	5d 09       	sbc	r21, r13
    3542:	06 c0       	rjmp	.+12     	; 0x3550 <_fpadd_parts+0x1c0>
    3544:	a6 01       	movw	r20, r12
    3546:	95 01       	movw	r18, r10
    3548:	2e 19       	sub	r18, r14
    354a:	3f 09       	sbc	r19, r15
    354c:	40 0b       	sbc	r20, r16
    354e:	51 0b       	sbc	r21, r17
    3550:	57 fd       	sbrc	r21, 7
    3552:	08 c0       	rjmp	.+16     	; 0x3564 <_fpadd_parts+0x1d4>
    3554:	11 82       	std	Z+1, r1	; 0x01
    3556:	33 82       	std	Z+3, r3	; 0x03
    3558:	22 82       	std	Z+2, r2	; 0x02
    355a:	24 83       	std	Z+4, r18	; 0x04
    355c:	35 83       	std	Z+5, r19	; 0x05
    355e:	46 83       	std	Z+6, r20	; 0x06
    3560:	57 83       	std	Z+7, r21	; 0x07
    3562:	1d c0       	rjmp	.+58     	; 0x359e <_fpadd_parts+0x20e>
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	81 83       	std	Z+1, r24	; 0x01
    3568:	33 82       	std	Z+3, r3	; 0x03
    356a:	22 82       	std	Z+2, r2	; 0x02
    356c:	88 27       	eor	r24, r24
    356e:	99 27       	eor	r25, r25
    3570:	dc 01       	movw	r26, r24
    3572:	82 1b       	sub	r24, r18
    3574:	93 0b       	sbc	r25, r19
    3576:	a4 0b       	sbc	r26, r20
    3578:	b5 0b       	sbc	r27, r21
    357a:	84 83       	std	Z+4, r24	; 0x04
    357c:	95 83       	std	Z+5, r25	; 0x05
    357e:	a6 83       	std	Z+6, r26	; 0x06
    3580:	b7 83       	std	Z+7, r27	; 0x07
    3582:	0d c0       	rjmp	.+26     	; 0x359e <_fpadd_parts+0x20e>
    3584:	22 0f       	add	r18, r18
    3586:	33 1f       	adc	r19, r19
    3588:	44 1f       	adc	r20, r20
    358a:	55 1f       	adc	r21, r21
    358c:	24 83       	std	Z+4, r18	; 0x04
    358e:	35 83       	std	Z+5, r19	; 0x05
    3590:	46 83       	std	Z+6, r20	; 0x06
    3592:	57 83       	std	Z+7, r21	; 0x07
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	93 81       	ldd	r25, Z+3	; 0x03
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	93 83       	std	Z+3, r25	; 0x03
    359c:	82 83       	std	Z+2, r24	; 0x02
    359e:	24 81       	ldd	r18, Z+4	; 0x04
    35a0:	35 81       	ldd	r19, Z+5	; 0x05
    35a2:	46 81       	ldd	r20, Z+6	; 0x06
    35a4:	57 81       	ldd	r21, Z+7	; 0x07
    35a6:	da 01       	movw	r26, r20
    35a8:	c9 01       	movw	r24, r18
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	a1 09       	sbc	r26, r1
    35ae:	b1 09       	sbc	r27, r1
    35b0:	8f 5f       	subi	r24, 0xFF	; 255
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	af 4f       	sbci	r26, 0xFF	; 255
    35b6:	bf 43       	sbci	r27, 0x3F	; 63
    35b8:	28 f3       	brcs	.-54     	; 0x3584 <_fpadd_parts+0x1f4>
    35ba:	0b c0       	rjmp	.+22     	; 0x35d2 <_fpadd_parts+0x242>
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	33 82       	std	Z+3, r3	; 0x03
    35c0:	22 82       	std	Z+2, r2	; 0x02
    35c2:	ea 0c       	add	r14, r10
    35c4:	fb 1c       	adc	r15, r11
    35c6:	0c 1d       	adc	r16, r12
    35c8:	1d 1d       	adc	r17, r13
    35ca:	e4 82       	std	Z+4, r14	; 0x04
    35cc:	f5 82       	std	Z+5, r15	; 0x05
    35ce:	06 83       	std	Z+6, r16	; 0x06
    35d0:	17 83       	std	Z+7, r17	; 0x07
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	80 83       	st	Z, r24
    35d6:	24 81       	ldd	r18, Z+4	; 0x04
    35d8:	35 81       	ldd	r19, Z+5	; 0x05
    35da:	46 81       	ldd	r20, Z+6	; 0x06
    35dc:	57 81       	ldd	r21, Z+7	; 0x07
    35de:	57 ff       	sbrs	r21, 7
    35e0:	1a c0       	rjmp	.+52     	; 0x3616 <_fpadd_parts+0x286>
    35e2:	c9 01       	movw	r24, r18
    35e4:	aa 27       	eor	r26, r26
    35e6:	97 fd       	sbrc	r25, 7
    35e8:	a0 95       	com	r26
    35ea:	ba 2f       	mov	r27, r26
    35ec:	81 70       	andi	r24, 0x01	; 1
    35ee:	90 70       	andi	r25, 0x00	; 0
    35f0:	a0 70       	andi	r26, 0x00	; 0
    35f2:	b0 70       	andi	r27, 0x00	; 0
    35f4:	56 95       	lsr	r21
    35f6:	47 95       	ror	r20
    35f8:	37 95       	ror	r19
    35fa:	27 95       	ror	r18
    35fc:	82 2b       	or	r24, r18
    35fe:	93 2b       	or	r25, r19
    3600:	a4 2b       	or	r26, r20
    3602:	b5 2b       	or	r27, r21
    3604:	84 83       	std	Z+4, r24	; 0x04
    3606:	95 83       	std	Z+5, r25	; 0x05
    3608:	a6 83       	std	Z+6, r26	; 0x06
    360a:	b7 83       	std	Z+7, r27	; 0x07
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	93 83       	std	Z+3, r25	; 0x03
    3614:	82 83       	std	Z+2, r24	; 0x02
    3616:	df 01       	movw	r26, r30
    3618:	01 c0       	rjmp	.+2      	; 0x361c <_fpadd_parts+0x28c>
    361a:	d2 01       	movw	r26, r4
    361c:	cd 01       	movw	r24, r26
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	e2 e1       	ldi	r30, 0x12	; 18
    3624:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__epilogue_restores__>

00003628 <__subsf3>:
    3628:	a0 e2       	ldi	r26, 0x20	; 32
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	ea e1       	ldi	r30, 0x1A	; 26
    362e:	fb e1       	ldi	r31, 0x1B	; 27
    3630:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x18>
    3634:	69 83       	std	Y+1, r22	; 0x01
    3636:	7a 83       	std	Y+2, r23	; 0x02
    3638:	8b 83       	std	Y+3, r24	; 0x03
    363a:	9c 83       	std	Y+4, r25	; 0x04
    363c:	2d 83       	std	Y+5, r18	; 0x05
    363e:	3e 83       	std	Y+6, r19	; 0x06
    3640:	4f 83       	std	Y+7, r20	; 0x07
    3642:	58 87       	std	Y+8, r21	; 0x08
    3644:	e9 e0       	ldi	r30, 0x09	; 9
    3646:	ee 2e       	mov	r14, r30
    3648:	f1 2c       	mov	r15, r1
    364a:	ec 0e       	add	r14, r28
    364c:	fd 1e       	adc	r15, r29
    364e:	ce 01       	movw	r24, r28
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	b7 01       	movw	r22, r14
    3654:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3658:	8e 01       	movw	r16, r28
    365a:	0f 5e       	subi	r16, 0xEF	; 239
    365c:	1f 4f       	sbci	r17, 0xFF	; 255
    365e:	ce 01       	movw	r24, r28
    3660:	05 96       	adiw	r24, 0x05	; 5
    3662:	b8 01       	movw	r22, r16
    3664:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3668:	8a 89       	ldd	r24, Y+18	; 0x12
    366a:	91 e0       	ldi	r25, 0x01	; 1
    366c:	89 27       	eor	r24, r25
    366e:	8a 8b       	std	Y+18, r24	; 0x12
    3670:	c7 01       	movw	r24, r14
    3672:	b8 01       	movw	r22, r16
    3674:	ae 01       	movw	r20, r28
    3676:	47 5e       	subi	r20, 0xE7	; 231
    3678:	5f 4f       	sbci	r21, 0xFF	; 255
    367a:	0e 94 c8 19 	call	0x3390	; 0x3390 <_fpadd_parts>
    367e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__pack_f>
    3682:	a0 96       	adiw	r28, 0x20	; 32
    3684:	e6 e0       	ldi	r30, 0x06	; 6
    3686:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x18>

0000368a <__addsf3>:
    368a:	a0 e2       	ldi	r26, 0x20	; 32
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	eb e4       	ldi	r30, 0x4B	; 75
    3690:	fb e1       	ldi	r31, 0x1B	; 27
    3692:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x18>
    3696:	69 83       	std	Y+1, r22	; 0x01
    3698:	7a 83       	std	Y+2, r23	; 0x02
    369a:	8b 83       	std	Y+3, r24	; 0x03
    369c:	9c 83       	std	Y+4, r25	; 0x04
    369e:	2d 83       	std	Y+5, r18	; 0x05
    36a0:	3e 83       	std	Y+6, r19	; 0x06
    36a2:	4f 83       	std	Y+7, r20	; 0x07
    36a4:	58 87       	std	Y+8, r21	; 0x08
    36a6:	f9 e0       	ldi	r31, 0x09	; 9
    36a8:	ef 2e       	mov	r14, r31
    36aa:	f1 2c       	mov	r15, r1
    36ac:	ec 0e       	add	r14, r28
    36ae:	fd 1e       	adc	r15, r29
    36b0:	ce 01       	movw	r24, r28
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	b7 01       	movw	r22, r14
    36b6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    36ba:	8e 01       	movw	r16, r28
    36bc:	0f 5e       	subi	r16, 0xEF	; 239
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	ce 01       	movw	r24, r28
    36c2:	05 96       	adiw	r24, 0x05	; 5
    36c4:	b8 01       	movw	r22, r16
    36c6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    36ca:	c7 01       	movw	r24, r14
    36cc:	b8 01       	movw	r22, r16
    36ce:	ae 01       	movw	r20, r28
    36d0:	47 5e       	subi	r20, 0xE7	; 231
    36d2:	5f 4f       	sbci	r21, 0xFF	; 255
    36d4:	0e 94 c8 19 	call	0x3390	; 0x3390 <_fpadd_parts>
    36d8:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__pack_f>
    36dc:	a0 96       	adiw	r28, 0x20	; 32
    36de:	e6 e0       	ldi	r30, 0x06	; 6
    36e0:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x18>

000036e4 <__mulsf3>:
    36e4:	a0 e2       	ldi	r26, 0x20	; 32
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	e8 e7       	ldi	r30, 0x78	; 120
    36ea:	fb e1       	ldi	r31, 0x1B	; 27
    36ec:	0c 94 e7 20 	jmp	0x41ce	; 0x41ce <__prologue_saves__>
    36f0:	69 83       	std	Y+1, r22	; 0x01
    36f2:	7a 83       	std	Y+2, r23	; 0x02
    36f4:	8b 83       	std	Y+3, r24	; 0x03
    36f6:	9c 83       	std	Y+4, r25	; 0x04
    36f8:	2d 83       	std	Y+5, r18	; 0x05
    36fa:	3e 83       	std	Y+6, r19	; 0x06
    36fc:	4f 83       	std	Y+7, r20	; 0x07
    36fe:	58 87       	std	Y+8, r21	; 0x08
    3700:	ce 01       	movw	r24, r28
    3702:	01 96       	adiw	r24, 0x01	; 1
    3704:	be 01       	movw	r22, r28
    3706:	67 5f       	subi	r22, 0xF7	; 247
    3708:	7f 4f       	sbci	r23, 0xFF	; 255
    370a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    370e:	ce 01       	movw	r24, r28
    3710:	05 96       	adiw	r24, 0x05	; 5
    3712:	be 01       	movw	r22, r28
    3714:	6f 5e       	subi	r22, 0xEF	; 239
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    371c:	99 85       	ldd	r25, Y+9	; 0x09
    371e:	92 30       	cpi	r25, 0x02	; 2
    3720:	88 f0       	brcs	.+34     	; 0x3744 <__mulsf3+0x60>
    3722:	89 89       	ldd	r24, Y+17	; 0x11
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	c8 f0       	brcs	.+50     	; 0x375a <__mulsf3+0x76>
    3728:	94 30       	cpi	r25, 0x04	; 4
    372a:	19 f4       	brne	.+6      	; 0x3732 <__mulsf3+0x4e>
    372c:	82 30       	cpi	r24, 0x02	; 2
    372e:	51 f4       	brne	.+20     	; 0x3744 <__mulsf3+0x60>
    3730:	04 c0       	rjmp	.+8      	; 0x373a <__mulsf3+0x56>
    3732:	84 30       	cpi	r24, 0x04	; 4
    3734:	29 f4       	brne	.+10     	; 0x3740 <__mulsf3+0x5c>
    3736:	92 30       	cpi	r25, 0x02	; 2
    3738:	81 f4       	brne	.+32     	; 0x375a <__mulsf3+0x76>
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	92 e0       	ldi	r25, 0x02	; 2
    373e:	c6 c0       	rjmp	.+396    	; 0x38cc <__mulsf3+0x1e8>
    3740:	92 30       	cpi	r25, 0x02	; 2
    3742:	49 f4       	brne	.+18     	; 0x3756 <__mulsf3+0x72>
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	9a 85       	ldd	r25, Y+10	; 0x0a
    3748:	8a 89       	ldd	r24, Y+18	; 0x12
    374a:	98 13       	cpse	r25, r24
    374c:	21 e0       	ldi	r18, 0x01	; 1
    374e:	2a 87       	std	Y+10, r18	; 0x0a
    3750:	ce 01       	movw	r24, r28
    3752:	09 96       	adiw	r24, 0x09	; 9
    3754:	bb c0       	rjmp	.+374    	; 0x38cc <__mulsf3+0x1e8>
    3756:	82 30       	cpi	r24, 0x02	; 2
    3758:	49 f4       	brne	.+18     	; 0x376c <__mulsf3+0x88>
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	9a 85       	ldd	r25, Y+10	; 0x0a
    375e:	8a 89       	ldd	r24, Y+18	; 0x12
    3760:	98 13       	cpse	r25, r24
    3762:	21 e0       	ldi	r18, 0x01	; 1
    3764:	2a 8b       	std	Y+18, r18	; 0x12
    3766:	ce 01       	movw	r24, r28
    3768:	41 96       	adiw	r24, 0x11	; 17
    376a:	b0 c0       	rjmp	.+352    	; 0x38cc <__mulsf3+0x1e8>
    376c:	2d 84       	ldd	r2, Y+13	; 0x0d
    376e:	3e 84       	ldd	r3, Y+14	; 0x0e
    3770:	4f 84       	ldd	r4, Y+15	; 0x0f
    3772:	58 88       	ldd	r5, Y+16	; 0x10
    3774:	6d 88       	ldd	r6, Y+21	; 0x15
    3776:	7e 88       	ldd	r7, Y+22	; 0x16
    3778:	8f 88       	ldd	r8, Y+23	; 0x17
    377a:	98 8c       	ldd	r9, Y+24	; 0x18
    377c:	ee 24       	eor	r14, r14
    377e:	ff 24       	eor	r15, r15
    3780:	87 01       	movw	r16, r14
    3782:	aa 24       	eor	r10, r10
    3784:	bb 24       	eor	r11, r11
    3786:	65 01       	movw	r12, r10
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	e0 e0       	ldi	r30, 0x00	; 0
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	c1 01       	movw	r24, r2
    3796:	81 70       	andi	r24, 0x01	; 1
    3798:	90 70       	andi	r25, 0x00	; 0
    379a:	89 2b       	or	r24, r25
    379c:	e9 f0       	breq	.+58     	; 0x37d8 <__mulsf3+0xf4>
    379e:	e6 0c       	add	r14, r6
    37a0:	f7 1c       	adc	r15, r7
    37a2:	08 1d       	adc	r16, r8
    37a4:	19 1d       	adc	r17, r9
    37a6:	9a 01       	movw	r18, r20
    37a8:	ab 01       	movw	r20, r22
    37aa:	2a 0d       	add	r18, r10
    37ac:	3b 1d       	adc	r19, r11
    37ae:	4c 1d       	adc	r20, r12
    37b0:	5d 1d       	adc	r21, r13
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 e0       	ldi	r26, 0x00	; 0
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	e6 14       	cp	r14, r6
    37bc:	f7 04       	cpc	r15, r7
    37be:	08 05       	cpc	r16, r8
    37c0:	19 05       	cpc	r17, r9
    37c2:	20 f4       	brcc	.+8      	; 0x37cc <__mulsf3+0xe8>
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	a0 e0       	ldi	r26, 0x00	; 0
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	ba 01       	movw	r22, r20
    37ce:	a9 01       	movw	r20, r18
    37d0:	48 0f       	add	r20, r24
    37d2:	59 1f       	adc	r21, r25
    37d4:	6a 1f       	adc	r22, r26
    37d6:	7b 1f       	adc	r23, r27
    37d8:	aa 0c       	add	r10, r10
    37da:	bb 1c       	adc	r11, r11
    37dc:	cc 1c       	adc	r12, r12
    37de:	dd 1c       	adc	r13, r13
    37e0:	97 fe       	sbrs	r9, 7
    37e2:	08 c0       	rjmp	.+16     	; 0x37f4 <__mulsf3+0x110>
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a0 e0       	ldi	r26, 0x00	; 0
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	a8 2a       	or	r10, r24
    37ee:	b9 2a       	or	r11, r25
    37f0:	ca 2a       	or	r12, r26
    37f2:	db 2a       	or	r13, r27
    37f4:	31 96       	adiw	r30, 0x01	; 1
    37f6:	e0 32       	cpi	r30, 0x20	; 32
    37f8:	f1 05       	cpc	r31, r1
    37fa:	49 f0       	breq	.+18     	; 0x380e <__mulsf3+0x12a>
    37fc:	66 0c       	add	r6, r6
    37fe:	77 1c       	adc	r7, r7
    3800:	88 1c       	adc	r8, r8
    3802:	99 1c       	adc	r9, r9
    3804:	56 94       	lsr	r5
    3806:	47 94       	ror	r4
    3808:	37 94       	ror	r3
    380a:	27 94       	ror	r2
    380c:	c3 cf       	rjmp	.-122    	; 0x3794 <__mulsf3+0xb0>
    380e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3810:	ea 89       	ldd	r30, Y+18	; 0x12
    3812:	2b 89       	ldd	r18, Y+19	; 0x13
    3814:	3c 89       	ldd	r19, Y+20	; 0x14
    3816:	8b 85       	ldd	r24, Y+11	; 0x0b
    3818:	9c 85       	ldd	r25, Y+12	; 0x0c
    381a:	28 0f       	add	r18, r24
    381c:	39 1f       	adc	r19, r25
    381e:	2e 5f       	subi	r18, 0xFE	; 254
    3820:	3f 4f       	sbci	r19, 0xFF	; 255
    3822:	17 c0       	rjmp	.+46     	; 0x3852 <__mulsf3+0x16e>
    3824:	ca 01       	movw	r24, r20
    3826:	81 70       	andi	r24, 0x01	; 1
    3828:	90 70       	andi	r25, 0x00	; 0
    382a:	89 2b       	or	r24, r25
    382c:	61 f0       	breq	.+24     	; 0x3846 <__mulsf3+0x162>
    382e:	16 95       	lsr	r17
    3830:	07 95       	ror	r16
    3832:	f7 94       	ror	r15
    3834:	e7 94       	ror	r14
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	a0 e0       	ldi	r26, 0x00	; 0
    383c:	b0 e8       	ldi	r27, 0x80	; 128
    383e:	e8 2a       	or	r14, r24
    3840:	f9 2a       	or	r15, r25
    3842:	0a 2b       	or	r16, r26
    3844:	1b 2b       	or	r17, r27
    3846:	76 95       	lsr	r23
    3848:	67 95       	ror	r22
    384a:	57 95       	ror	r21
    384c:	47 95       	ror	r20
    384e:	2f 5f       	subi	r18, 0xFF	; 255
    3850:	3f 4f       	sbci	r19, 0xFF	; 255
    3852:	77 fd       	sbrc	r23, 7
    3854:	e7 cf       	rjmp	.-50     	; 0x3824 <__mulsf3+0x140>
    3856:	0c c0       	rjmp	.+24     	; 0x3870 <__mulsf3+0x18c>
    3858:	44 0f       	add	r20, r20
    385a:	55 1f       	adc	r21, r21
    385c:	66 1f       	adc	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	17 fd       	sbrc	r17, 7
    3862:	41 60       	ori	r20, 0x01	; 1
    3864:	ee 0c       	add	r14, r14
    3866:	ff 1c       	adc	r15, r15
    3868:	00 1f       	adc	r16, r16
    386a:	11 1f       	adc	r17, r17
    386c:	21 50       	subi	r18, 0x01	; 1
    386e:	30 40       	sbci	r19, 0x00	; 0
    3870:	40 30       	cpi	r20, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	59 07       	cpc	r21, r25
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	69 07       	cpc	r22, r25
    387a:	90 e4       	ldi	r25, 0x40	; 64
    387c:	79 07       	cpc	r23, r25
    387e:	60 f3       	brcs	.-40     	; 0x3858 <__mulsf3+0x174>
    3880:	2b 8f       	std	Y+27, r18	; 0x1b
    3882:	3c 8f       	std	Y+28, r19	; 0x1c
    3884:	db 01       	movw	r26, r22
    3886:	ca 01       	movw	r24, r20
    3888:	8f 77       	andi	r24, 0x7F	; 127
    388a:	90 70       	andi	r25, 0x00	; 0
    388c:	a0 70       	andi	r26, 0x00	; 0
    388e:	b0 70       	andi	r27, 0x00	; 0
    3890:	80 34       	cpi	r24, 0x40	; 64
    3892:	91 05       	cpc	r25, r1
    3894:	a1 05       	cpc	r26, r1
    3896:	b1 05       	cpc	r27, r1
    3898:	61 f4       	brne	.+24     	; 0x38b2 <__mulsf3+0x1ce>
    389a:	47 fd       	sbrc	r20, 7
    389c:	0a c0       	rjmp	.+20     	; 0x38b2 <__mulsf3+0x1ce>
    389e:	e1 14       	cp	r14, r1
    38a0:	f1 04       	cpc	r15, r1
    38a2:	01 05       	cpc	r16, r1
    38a4:	11 05       	cpc	r17, r1
    38a6:	29 f0       	breq	.+10     	; 0x38b2 <__mulsf3+0x1ce>
    38a8:	40 5c       	subi	r20, 0xC0	; 192
    38aa:	5f 4f       	sbci	r21, 0xFF	; 255
    38ac:	6f 4f       	sbci	r22, 0xFF	; 255
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	40 78       	andi	r20, 0x80	; 128
    38b2:	1a 8e       	std	Y+26, r1	; 0x1a
    38b4:	fe 17       	cp	r31, r30
    38b6:	11 f0       	breq	.+4      	; 0x38bc <__mulsf3+0x1d8>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	8a 8f       	std	Y+26, r24	; 0x1a
    38bc:	4d 8f       	std	Y+29, r20	; 0x1d
    38be:	5e 8f       	std	Y+30, r21	; 0x1e
    38c0:	6f 8f       	std	Y+31, r22	; 0x1f
    38c2:	78 a3       	std	Y+32, r23	; 0x20
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	89 8f       	std	Y+25, r24	; 0x19
    38c8:	ce 01       	movw	r24, r28
    38ca:	49 96       	adiw	r24, 0x19	; 25
    38cc:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__pack_f>
    38d0:	a0 96       	adiw	r28, 0x20	; 32
    38d2:	e2 e1       	ldi	r30, 0x12	; 18
    38d4:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__epilogue_restores__>

000038d8 <__divsf3>:
    38d8:	a8 e1       	ldi	r26, 0x18	; 24
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e2 e7       	ldi	r30, 0x72	; 114
    38de:	fc e1       	ldi	r31, 0x1C	; 28
    38e0:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x10>
    38e4:	69 83       	std	Y+1, r22	; 0x01
    38e6:	7a 83       	std	Y+2, r23	; 0x02
    38e8:	8b 83       	std	Y+3, r24	; 0x03
    38ea:	9c 83       	std	Y+4, r25	; 0x04
    38ec:	2d 83       	std	Y+5, r18	; 0x05
    38ee:	3e 83       	std	Y+6, r19	; 0x06
    38f0:	4f 83       	std	Y+7, r20	; 0x07
    38f2:	58 87       	std	Y+8, r21	; 0x08
    38f4:	b9 e0       	ldi	r27, 0x09	; 9
    38f6:	eb 2e       	mov	r14, r27
    38f8:	f1 2c       	mov	r15, r1
    38fa:	ec 0e       	add	r14, r28
    38fc:	fd 1e       	adc	r15, r29
    38fe:	ce 01       	movw	r24, r28
    3900:	01 96       	adiw	r24, 0x01	; 1
    3902:	b7 01       	movw	r22, r14
    3904:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3908:	8e 01       	movw	r16, r28
    390a:	0f 5e       	subi	r16, 0xEF	; 239
    390c:	1f 4f       	sbci	r17, 0xFF	; 255
    390e:	ce 01       	movw	r24, r28
    3910:	05 96       	adiw	r24, 0x05	; 5
    3912:	b8 01       	movw	r22, r16
    3914:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3918:	29 85       	ldd	r18, Y+9	; 0x09
    391a:	22 30       	cpi	r18, 0x02	; 2
    391c:	08 f4       	brcc	.+2      	; 0x3920 <__divsf3+0x48>
    391e:	7e c0       	rjmp	.+252    	; 0x3a1c <__divsf3+0x144>
    3920:	39 89       	ldd	r19, Y+17	; 0x11
    3922:	32 30       	cpi	r19, 0x02	; 2
    3924:	10 f4       	brcc	.+4      	; 0x392a <__divsf3+0x52>
    3926:	b8 01       	movw	r22, r16
    3928:	7c c0       	rjmp	.+248    	; 0x3a22 <__divsf3+0x14a>
    392a:	8a 85       	ldd	r24, Y+10	; 0x0a
    392c:	9a 89       	ldd	r25, Y+18	; 0x12
    392e:	89 27       	eor	r24, r25
    3930:	8a 87       	std	Y+10, r24	; 0x0a
    3932:	24 30       	cpi	r18, 0x04	; 4
    3934:	11 f0       	breq	.+4      	; 0x393a <__divsf3+0x62>
    3936:	22 30       	cpi	r18, 0x02	; 2
    3938:	31 f4       	brne	.+12     	; 0x3946 <__divsf3+0x6e>
    393a:	23 17       	cp	r18, r19
    393c:	09 f0       	breq	.+2      	; 0x3940 <__divsf3+0x68>
    393e:	6e c0       	rjmp	.+220    	; 0x3a1c <__divsf3+0x144>
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	72 e0       	ldi	r23, 0x02	; 2
    3944:	6e c0       	rjmp	.+220    	; 0x3a22 <__divsf3+0x14a>
    3946:	34 30       	cpi	r19, 0x04	; 4
    3948:	39 f4       	brne	.+14     	; 0x3958 <__divsf3+0x80>
    394a:	1d 86       	std	Y+13, r1	; 0x0d
    394c:	1e 86       	std	Y+14, r1	; 0x0e
    394e:	1f 86       	std	Y+15, r1	; 0x0f
    3950:	18 8a       	std	Y+16, r1	; 0x10
    3952:	1c 86       	std	Y+12, r1	; 0x0c
    3954:	1b 86       	std	Y+11, r1	; 0x0b
    3956:	04 c0       	rjmp	.+8      	; 0x3960 <__divsf3+0x88>
    3958:	32 30       	cpi	r19, 0x02	; 2
    395a:	21 f4       	brne	.+8      	; 0x3964 <__divsf3+0x8c>
    395c:	84 e0       	ldi	r24, 0x04	; 4
    395e:	89 87       	std	Y+9, r24	; 0x09
    3960:	b7 01       	movw	r22, r14
    3962:	5f c0       	rjmp	.+190    	; 0x3a22 <__divsf3+0x14a>
    3964:	2b 85       	ldd	r18, Y+11	; 0x0b
    3966:	3c 85       	ldd	r19, Y+12	; 0x0c
    3968:	8b 89       	ldd	r24, Y+19	; 0x13
    396a:	9c 89       	ldd	r25, Y+20	; 0x14
    396c:	28 1b       	sub	r18, r24
    396e:	39 0b       	sbc	r19, r25
    3970:	3c 87       	std	Y+12, r19	; 0x0c
    3972:	2b 87       	std	Y+11, r18	; 0x0b
    3974:	ed 84       	ldd	r14, Y+13	; 0x0d
    3976:	fe 84       	ldd	r15, Y+14	; 0x0e
    3978:	0f 85       	ldd	r16, Y+15	; 0x0f
    397a:	18 89       	ldd	r17, Y+16	; 0x10
    397c:	ad 88       	ldd	r10, Y+21	; 0x15
    397e:	be 88       	ldd	r11, Y+22	; 0x16
    3980:	cf 88       	ldd	r12, Y+23	; 0x17
    3982:	d8 8c       	ldd	r13, Y+24	; 0x18
    3984:	ea 14       	cp	r14, r10
    3986:	fb 04       	cpc	r15, r11
    3988:	0c 05       	cpc	r16, r12
    398a:	1d 05       	cpc	r17, r13
    398c:	40 f4       	brcc	.+16     	; 0x399e <__divsf3+0xc6>
    398e:	ee 0c       	add	r14, r14
    3990:	ff 1c       	adc	r15, r15
    3992:	00 1f       	adc	r16, r16
    3994:	11 1f       	adc	r17, r17
    3996:	21 50       	subi	r18, 0x01	; 1
    3998:	30 40       	sbci	r19, 0x00	; 0
    399a:	3c 87       	std	Y+12, r19	; 0x0c
    399c:	2b 87       	std	Y+11, r18	; 0x0b
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	a0 e0       	ldi	r26, 0x00	; 0
    39ac:	b0 e4       	ldi	r27, 0x40	; 64
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	ea 14       	cp	r14, r10
    39b4:	fb 04       	cpc	r15, r11
    39b6:	0c 05       	cpc	r16, r12
    39b8:	1d 05       	cpc	r17, r13
    39ba:	40 f0       	brcs	.+16     	; 0x39cc <__divsf3+0xf4>
    39bc:	28 2b       	or	r18, r24
    39be:	39 2b       	or	r19, r25
    39c0:	4a 2b       	or	r20, r26
    39c2:	5b 2b       	or	r21, r27
    39c4:	ea 18       	sub	r14, r10
    39c6:	fb 08       	sbc	r15, r11
    39c8:	0c 09       	sbc	r16, r12
    39ca:	1d 09       	sbc	r17, r13
    39cc:	b6 95       	lsr	r27
    39ce:	a7 95       	ror	r26
    39d0:	97 95       	ror	r25
    39d2:	87 95       	ror	r24
    39d4:	ee 0c       	add	r14, r14
    39d6:	ff 1c       	adc	r15, r15
    39d8:	00 1f       	adc	r16, r16
    39da:	11 1f       	adc	r17, r17
    39dc:	6f 5f       	subi	r22, 0xFF	; 255
    39de:	7f 4f       	sbci	r23, 0xFF	; 255
    39e0:	6f 31       	cpi	r22, 0x1F	; 31
    39e2:	71 05       	cpc	r23, r1
    39e4:	31 f7       	brne	.-52     	; 0x39b2 <__divsf3+0xda>
    39e6:	da 01       	movw	r26, r20
    39e8:	c9 01       	movw	r24, r18
    39ea:	8f 77       	andi	r24, 0x7F	; 127
    39ec:	90 70       	andi	r25, 0x00	; 0
    39ee:	a0 70       	andi	r26, 0x00	; 0
    39f0:	b0 70       	andi	r27, 0x00	; 0
    39f2:	80 34       	cpi	r24, 0x40	; 64
    39f4:	91 05       	cpc	r25, r1
    39f6:	a1 05       	cpc	r26, r1
    39f8:	b1 05       	cpc	r27, r1
    39fa:	61 f4       	brne	.+24     	; 0x3a14 <__divsf3+0x13c>
    39fc:	27 fd       	sbrc	r18, 7
    39fe:	0a c0       	rjmp	.+20     	; 0x3a14 <__divsf3+0x13c>
    3a00:	e1 14       	cp	r14, r1
    3a02:	f1 04       	cpc	r15, r1
    3a04:	01 05       	cpc	r16, r1
    3a06:	11 05       	cpc	r17, r1
    3a08:	29 f0       	breq	.+10     	; 0x3a14 <__divsf3+0x13c>
    3a0a:	20 5c       	subi	r18, 0xC0	; 192
    3a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0e:	4f 4f       	sbci	r20, 0xFF	; 255
    3a10:	5f 4f       	sbci	r21, 0xFF	; 255
    3a12:	20 78       	andi	r18, 0x80	; 128
    3a14:	2d 87       	std	Y+13, r18	; 0x0d
    3a16:	3e 87       	std	Y+14, r19	; 0x0e
    3a18:	4f 87       	std	Y+15, r20	; 0x0f
    3a1a:	58 8b       	std	Y+16, r21	; 0x10
    3a1c:	be 01       	movw	r22, r28
    3a1e:	67 5f       	subi	r22, 0xF7	; 247
    3a20:	7f 4f       	sbci	r23, 0xFF	; 255
    3a22:	cb 01       	movw	r24, r22
    3a24:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__pack_f>
    3a28:	68 96       	adiw	r28, 0x18	; 24
    3a2a:	ea e0       	ldi	r30, 0x0A	; 10
    3a2c:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x10>

00003a30 <__gtsf2>:
    3a30:	a8 e1       	ldi	r26, 0x18	; 24
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	ee e1       	ldi	r30, 0x1E	; 30
    3a36:	fd e1       	ldi	r31, 0x1D	; 29
    3a38:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x18>
    3a3c:	69 83       	std	Y+1, r22	; 0x01
    3a3e:	7a 83       	std	Y+2, r23	; 0x02
    3a40:	8b 83       	std	Y+3, r24	; 0x03
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	2d 83       	std	Y+5, r18	; 0x05
    3a46:	3e 83       	std	Y+6, r19	; 0x06
    3a48:	4f 83       	std	Y+7, r20	; 0x07
    3a4a:	58 87       	std	Y+8, r21	; 0x08
    3a4c:	89 e0       	ldi	r24, 0x09	; 9
    3a4e:	e8 2e       	mov	r14, r24
    3a50:	f1 2c       	mov	r15, r1
    3a52:	ec 0e       	add	r14, r28
    3a54:	fd 1e       	adc	r15, r29
    3a56:	ce 01       	movw	r24, r28
    3a58:	01 96       	adiw	r24, 0x01	; 1
    3a5a:	b7 01       	movw	r22, r14
    3a5c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3a60:	8e 01       	movw	r16, r28
    3a62:	0f 5e       	subi	r16, 0xEF	; 239
    3a64:	1f 4f       	sbci	r17, 0xFF	; 255
    3a66:	ce 01       	movw	r24, r28
    3a68:	05 96       	adiw	r24, 0x05	; 5
    3a6a:	b8 01       	movw	r22, r16
    3a6c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	82 30       	cpi	r24, 0x02	; 2
    3a74:	40 f0       	brcs	.+16     	; 0x3a86 <__gtsf2+0x56>
    3a76:	89 89       	ldd	r24, Y+17	; 0x11
    3a78:	82 30       	cpi	r24, 0x02	; 2
    3a7a:	28 f0       	brcs	.+10     	; 0x3a86 <__gtsf2+0x56>
    3a7c:	c7 01       	movw	r24, r14
    3a7e:	b8 01       	movw	r22, r16
    3a80:	0e 94 6f 20 	call	0x40de	; 0x40de <__fpcmp_parts_f>
    3a84:	01 c0       	rjmp	.+2      	; 0x3a88 <__gtsf2+0x58>
    3a86:	8f ef       	ldi	r24, 0xFF	; 255
    3a88:	68 96       	adiw	r28, 0x18	; 24
    3a8a:	e6 e0       	ldi	r30, 0x06	; 6
    3a8c:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x18>

00003a90 <__gesf2>:
    3a90:	a8 e1       	ldi	r26, 0x18	; 24
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	ee e4       	ldi	r30, 0x4E	; 78
    3a96:	fd e1       	ldi	r31, 0x1D	; 29
    3a98:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x18>
    3a9c:	69 83       	std	Y+1, r22	; 0x01
    3a9e:	7a 83       	std	Y+2, r23	; 0x02
    3aa0:	8b 83       	std	Y+3, r24	; 0x03
    3aa2:	9c 83       	std	Y+4, r25	; 0x04
    3aa4:	2d 83       	std	Y+5, r18	; 0x05
    3aa6:	3e 83       	std	Y+6, r19	; 0x06
    3aa8:	4f 83       	std	Y+7, r20	; 0x07
    3aaa:	58 87       	std	Y+8, r21	; 0x08
    3aac:	89 e0       	ldi	r24, 0x09	; 9
    3aae:	e8 2e       	mov	r14, r24
    3ab0:	f1 2c       	mov	r15, r1
    3ab2:	ec 0e       	add	r14, r28
    3ab4:	fd 1e       	adc	r15, r29
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	01 96       	adiw	r24, 0x01	; 1
    3aba:	b7 01       	movw	r22, r14
    3abc:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3ac0:	8e 01       	movw	r16, r28
    3ac2:	0f 5e       	subi	r16, 0xEF	; 239
    3ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	05 96       	adiw	r24, 0x05	; 5
    3aca:	b8 01       	movw	r22, r16
    3acc:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3ad0:	89 85       	ldd	r24, Y+9	; 0x09
    3ad2:	82 30       	cpi	r24, 0x02	; 2
    3ad4:	40 f0       	brcs	.+16     	; 0x3ae6 <__gesf2+0x56>
    3ad6:	89 89       	ldd	r24, Y+17	; 0x11
    3ad8:	82 30       	cpi	r24, 0x02	; 2
    3ada:	28 f0       	brcs	.+10     	; 0x3ae6 <__gesf2+0x56>
    3adc:	c7 01       	movw	r24, r14
    3ade:	b8 01       	movw	r22, r16
    3ae0:	0e 94 6f 20 	call	0x40de	; 0x40de <__fpcmp_parts_f>
    3ae4:	01 c0       	rjmp	.+2      	; 0x3ae8 <__gesf2+0x58>
    3ae6:	8f ef       	ldi	r24, 0xFF	; 255
    3ae8:	68 96       	adiw	r28, 0x18	; 24
    3aea:	e6 e0       	ldi	r30, 0x06	; 6
    3aec:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x18>

00003af0 <__ltsf2>:
    3af0:	a8 e1       	ldi	r26, 0x18	; 24
    3af2:	b0 e0       	ldi	r27, 0x00	; 0
    3af4:	ee e7       	ldi	r30, 0x7E	; 126
    3af6:	fd e1       	ldi	r31, 0x1D	; 29
    3af8:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x18>
    3afc:	69 83       	std	Y+1, r22	; 0x01
    3afe:	7a 83       	std	Y+2, r23	; 0x02
    3b00:	8b 83       	std	Y+3, r24	; 0x03
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	2d 83       	std	Y+5, r18	; 0x05
    3b06:	3e 83       	std	Y+6, r19	; 0x06
    3b08:	4f 83       	std	Y+7, r20	; 0x07
    3b0a:	58 87       	std	Y+8, r21	; 0x08
    3b0c:	89 e0       	ldi	r24, 0x09	; 9
    3b0e:	e8 2e       	mov	r14, r24
    3b10:	f1 2c       	mov	r15, r1
    3b12:	ec 0e       	add	r14, r28
    3b14:	fd 1e       	adc	r15, r29
    3b16:	ce 01       	movw	r24, r28
    3b18:	01 96       	adiw	r24, 0x01	; 1
    3b1a:	b7 01       	movw	r22, r14
    3b1c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3b20:	8e 01       	movw	r16, r28
    3b22:	0f 5e       	subi	r16, 0xEF	; 239
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	ce 01       	movw	r24, r28
    3b28:	05 96       	adiw	r24, 0x05	; 5
    3b2a:	b8 01       	movw	r22, r16
    3b2c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	82 30       	cpi	r24, 0x02	; 2
    3b34:	40 f0       	brcs	.+16     	; 0x3b46 <__ltsf2+0x56>
    3b36:	89 89       	ldd	r24, Y+17	; 0x11
    3b38:	82 30       	cpi	r24, 0x02	; 2
    3b3a:	28 f0       	brcs	.+10     	; 0x3b46 <__ltsf2+0x56>
    3b3c:	c7 01       	movw	r24, r14
    3b3e:	b8 01       	movw	r22, r16
    3b40:	0e 94 6f 20 	call	0x40de	; 0x40de <__fpcmp_parts_f>
    3b44:	01 c0       	rjmp	.+2      	; 0x3b48 <__ltsf2+0x58>
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	68 96       	adiw	r28, 0x18	; 24
    3b4a:	e6 e0       	ldi	r30, 0x06	; 6
    3b4c:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x18>

00003b50 <__floatsisf>:
    3b50:	a8 e0       	ldi	r26, 0x08	; 8
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	ee ea       	ldi	r30, 0xAE	; 174
    3b56:	fd e1       	ldi	r31, 0x1D	; 29
    3b58:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <__prologue_saves__+0x12>
    3b5c:	9b 01       	movw	r18, r22
    3b5e:	ac 01       	movw	r20, r24
    3b60:	83 e0       	ldi	r24, 0x03	; 3
    3b62:	89 83       	std	Y+1, r24	; 0x01
    3b64:	da 01       	movw	r26, r20
    3b66:	c9 01       	movw	r24, r18
    3b68:	88 27       	eor	r24, r24
    3b6a:	b7 fd       	sbrc	r27, 7
    3b6c:	83 95       	inc	r24
    3b6e:	99 27       	eor	r25, r25
    3b70:	aa 27       	eor	r26, r26
    3b72:	bb 27       	eor	r27, r27
    3b74:	b8 2e       	mov	r11, r24
    3b76:	21 15       	cp	r18, r1
    3b78:	31 05       	cpc	r19, r1
    3b7a:	41 05       	cpc	r20, r1
    3b7c:	51 05       	cpc	r21, r1
    3b7e:	19 f4       	brne	.+6      	; 0x3b86 <__floatsisf+0x36>
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	3a c0       	rjmp	.+116    	; 0x3bfa <__floatsisf+0xaa>
    3b86:	88 23       	and	r24, r24
    3b88:	a9 f0       	breq	.+42     	; 0x3bb4 <__floatsisf+0x64>
    3b8a:	20 30       	cpi	r18, 0x00	; 0
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	38 07       	cpc	r19, r24
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	48 07       	cpc	r20, r24
    3b94:	80 e8       	ldi	r24, 0x80	; 128
    3b96:	58 07       	cpc	r21, r24
    3b98:	29 f4       	brne	.+10     	; 0x3ba4 <__floatsisf+0x54>
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	70 e0       	ldi	r23, 0x00	; 0
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	9f ec       	ldi	r25, 0xCF	; 207
    3ba2:	30 c0       	rjmp	.+96     	; 0x3c04 <__floatsisf+0xb4>
    3ba4:	ee 24       	eor	r14, r14
    3ba6:	ff 24       	eor	r15, r15
    3ba8:	87 01       	movw	r16, r14
    3baa:	e2 1a       	sub	r14, r18
    3bac:	f3 0a       	sbc	r15, r19
    3bae:	04 0b       	sbc	r16, r20
    3bb0:	15 0b       	sbc	r17, r21
    3bb2:	02 c0       	rjmp	.+4      	; 0x3bb8 <__floatsisf+0x68>
    3bb4:	79 01       	movw	r14, r18
    3bb6:	8a 01       	movw	r16, r20
    3bb8:	8e e1       	ldi	r24, 0x1E	; 30
    3bba:	c8 2e       	mov	r12, r24
    3bbc:	d1 2c       	mov	r13, r1
    3bbe:	dc 82       	std	Y+4, r13	; 0x04
    3bc0:	cb 82       	std	Y+3, r12	; 0x03
    3bc2:	ed 82       	std	Y+5, r14	; 0x05
    3bc4:	fe 82       	std	Y+6, r15	; 0x06
    3bc6:	0f 83       	std	Y+7, r16	; 0x07
    3bc8:	18 87       	std	Y+8, r17	; 0x08
    3bca:	c8 01       	movw	r24, r16
    3bcc:	b7 01       	movw	r22, r14
    3bce:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__clzsi2>
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	18 16       	cp	r1, r24
    3bd6:	19 06       	cpc	r1, r25
    3bd8:	84 f4       	brge	.+32     	; 0x3bfa <__floatsisf+0xaa>
    3bda:	08 2e       	mov	r0, r24
    3bdc:	04 c0       	rjmp	.+8      	; 0x3be6 <__floatsisf+0x96>
    3bde:	ee 0c       	add	r14, r14
    3be0:	ff 1c       	adc	r15, r15
    3be2:	00 1f       	adc	r16, r16
    3be4:	11 1f       	adc	r17, r17
    3be6:	0a 94       	dec	r0
    3be8:	d2 f7       	brpl	.-12     	; 0x3bde <__floatsisf+0x8e>
    3bea:	ed 82       	std	Y+5, r14	; 0x05
    3bec:	fe 82       	std	Y+6, r15	; 0x06
    3bee:	0f 83       	std	Y+7, r16	; 0x07
    3bf0:	18 87       	std	Y+8, r17	; 0x08
    3bf2:	c8 1a       	sub	r12, r24
    3bf4:	d9 0a       	sbc	r13, r25
    3bf6:	dc 82       	std	Y+4, r13	; 0x04
    3bf8:	cb 82       	std	Y+3, r12	; 0x03
    3bfa:	ba 82       	std	Y+2, r11	; 0x02
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	01 96       	adiw	r24, 0x01	; 1
    3c00:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__pack_f>
    3c04:	28 96       	adiw	r28, 0x08	; 8
    3c06:	e9 e0       	ldi	r30, 0x09	; 9
    3c08:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__epilogue_restores__+0x12>

00003c0c <__fixsfsi>:
    3c0c:	ac e0       	ldi	r26, 0x0C	; 12
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	ec e0       	ldi	r30, 0x0C	; 12
    3c12:	fe e1       	ldi	r31, 0x1E	; 30
    3c14:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__prologue_saves__+0x20>
    3c18:	69 83       	std	Y+1, r22	; 0x01
    3c1a:	7a 83       	std	Y+2, r23	; 0x02
    3c1c:	8b 83       	std	Y+3, r24	; 0x03
    3c1e:	9c 83       	std	Y+4, r25	; 0x04
    3c20:	ce 01       	movw	r24, r28
    3c22:	01 96       	adiw	r24, 0x01	; 1
    3c24:	be 01       	movw	r22, r28
    3c26:	6b 5f       	subi	r22, 0xFB	; 251
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__unpack_f>
    3c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c30:	82 30       	cpi	r24, 0x02	; 2
    3c32:	61 f1       	breq	.+88     	; 0x3c8c <__fixsfsi+0x80>
    3c34:	82 30       	cpi	r24, 0x02	; 2
    3c36:	50 f1       	brcs	.+84     	; 0x3c8c <__fixsfsi+0x80>
    3c38:	84 30       	cpi	r24, 0x04	; 4
    3c3a:	21 f4       	brne	.+8      	; 0x3c44 <__fixsfsi+0x38>
    3c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c3e:	88 23       	and	r24, r24
    3c40:	51 f1       	breq	.+84     	; 0x3c96 <__fixsfsi+0x8a>
    3c42:	2e c0       	rjmp	.+92     	; 0x3ca0 <__fixsfsi+0x94>
    3c44:	2f 81       	ldd	r18, Y+7	; 0x07
    3c46:	38 85       	ldd	r19, Y+8	; 0x08
    3c48:	37 fd       	sbrc	r19, 7
    3c4a:	20 c0       	rjmp	.+64     	; 0x3c8c <__fixsfsi+0x80>
    3c4c:	6e 81       	ldd	r22, Y+6	; 0x06
    3c4e:	2f 31       	cpi	r18, 0x1F	; 31
    3c50:	31 05       	cpc	r19, r1
    3c52:	1c f0       	brlt	.+6      	; 0x3c5a <__fixsfsi+0x4e>
    3c54:	66 23       	and	r22, r22
    3c56:	f9 f0       	breq	.+62     	; 0x3c96 <__fixsfsi+0x8a>
    3c58:	23 c0       	rjmp	.+70     	; 0x3ca0 <__fixsfsi+0x94>
    3c5a:	8e e1       	ldi	r24, 0x1E	; 30
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	82 1b       	sub	r24, r18
    3c60:	93 0b       	sbc	r25, r19
    3c62:	29 85       	ldd	r18, Y+9	; 0x09
    3c64:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c66:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c68:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c6a:	04 c0       	rjmp	.+8      	; 0x3c74 <__fixsfsi+0x68>
    3c6c:	56 95       	lsr	r21
    3c6e:	47 95       	ror	r20
    3c70:	37 95       	ror	r19
    3c72:	27 95       	ror	r18
    3c74:	8a 95       	dec	r24
    3c76:	d2 f7       	brpl	.-12     	; 0x3c6c <__fixsfsi+0x60>
    3c78:	66 23       	and	r22, r22
    3c7a:	b1 f0       	breq	.+44     	; 0x3ca8 <__fixsfsi+0x9c>
    3c7c:	50 95       	com	r21
    3c7e:	40 95       	com	r20
    3c80:	30 95       	com	r19
    3c82:	21 95       	neg	r18
    3c84:	3f 4f       	sbci	r19, 0xFF	; 255
    3c86:	4f 4f       	sbci	r20, 0xFF	; 255
    3c88:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8a:	0e c0       	rjmp	.+28     	; 0x3ca8 <__fixsfsi+0x9c>
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	09 c0       	rjmp	.+18     	; 0x3ca8 <__fixsfsi+0x9c>
    3c96:	2f ef       	ldi	r18, 0xFF	; 255
    3c98:	3f ef       	ldi	r19, 0xFF	; 255
    3c9a:	4f ef       	ldi	r20, 0xFF	; 255
    3c9c:	5f e7       	ldi	r21, 0x7F	; 127
    3c9e:	04 c0       	rjmp	.+8      	; 0x3ca8 <__fixsfsi+0x9c>
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e0       	ldi	r20, 0x00	; 0
    3ca6:	50 e8       	ldi	r21, 0x80	; 128
    3ca8:	b9 01       	movw	r22, r18
    3caa:	ca 01       	movw	r24, r20
    3cac:	2c 96       	adiw	r28, 0x0c	; 12
    3cae:	e2 e0       	ldi	r30, 0x02	; 2
    3cb0:	0c 94 13 21 	jmp	0x4226	; 0x4226 <__epilogue_restores__+0x20>

00003cb4 <__floatunsisf>:
    3cb4:	a8 e0       	ldi	r26, 0x08	; 8
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	e0 e6       	ldi	r30, 0x60	; 96
    3cba:	fe e1       	ldi	r31, 0x1E	; 30
    3cbc:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x10>
    3cc0:	7b 01       	movw	r14, r22
    3cc2:	8c 01       	movw	r16, r24
    3cc4:	61 15       	cp	r22, r1
    3cc6:	71 05       	cpc	r23, r1
    3cc8:	81 05       	cpc	r24, r1
    3cca:	91 05       	cpc	r25, r1
    3ccc:	19 f4       	brne	.+6      	; 0x3cd4 <__floatunsisf+0x20>
    3cce:	82 e0       	ldi	r24, 0x02	; 2
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	60 c0       	rjmp	.+192    	; 0x3d94 <__floatunsisf+0xe0>
    3cd4:	83 e0       	ldi	r24, 0x03	; 3
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	8e e1       	ldi	r24, 0x1E	; 30
    3cda:	c8 2e       	mov	r12, r24
    3cdc:	d1 2c       	mov	r13, r1
    3cde:	dc 82       	std	Y+4, r13	; 0x04
    3ce0:	cb 82       	std	Y+3, r12	; 0x03
    3ce2:	ed 82       	std	Y+5, r14	; 0x05
    3ce4:	fe 82       	std	Y+6, r15	; 0x06
    3ce6:	0f 83       	std	Y+7, r16	; 0x07
    3ce8:	18 87       	std	Y+8, r17	; 0x08
    3cea:	c8 01       	movw	r24, r16
    3cec:	b7 01       	movw	r22, r14
    3cee:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__clzsi2>
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	31 97       	sbiw	r30, 0x01	; 1
    3cf6:	f7 ff       	sbrs	r31, 7
    3cf8:	3b c0       	rjmp	.+118    	; 0x3d70 <__floatunsisf+0xbc>
    3cfa:	22 27       	eor	r18, r18
    3cfc:	33 27       	eor	r19, r19
    3cfe:	2e 1b       	sub	r18, r30
    3d00:	3f 0b       	sbc	r19, r31
    3d02:	57 01       	movw	r10, r14
    3d04:	68 01       	movw	r12, r16
    3d06:	02 2e       	mov	r0, r18
    3d08:	04 c0       	rjmp	.+8      	; 0x3d12 <__floatunsisf+0x5e>
    3d0a:	d6 94       	lsr	r13
    3d0c:	c7 94       	ror	r12
    3d0e:	b7 94       	ror	r11
    3d10:	a7 94       	ror	r10
    3d12:	0a 94       	dec	r0
    3d14:	d2 f7       	brpl	.-12     	; 0x3d0a <__floatunsisf+0x56>
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	60 e0       	ldi	r22, 0x00	; 0
    3d1c:	70 e0       	ldi	r23, 0x00	; 0
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	a0 e0       	ldi	r26, 0x00	; 0
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	04 c0       	rjmp	.+8      	; 0x3d30 <__floatunsisf+0x7c>
    3d28:	88 0f       	add	r24, r24
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	aa 1f       	adc	r26, r26
    3d2e:	bb 1f       	adc	r27, r27
    3d30:	2a 95       	dec	r18
    3d32:	d2 f7       	brpl	.-12     	; 0x3d28 <__floatunsisf+0x74>
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	a1 09       	sbc	r26, r1
    3d38:	b1 09       	sbc	r27, r1
    3d3a:	8e 21       	and	r24, r14
    3d3c:	9f 21       	and	r25, r15
    3d3e:	a0 23       	and	r26, r16
    3d40:	b1 23       	and	r27, r17
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	a1 05       	cpc	r26, r1
    3d46:	b1 05       	cpc	r27, r1
    3d48:	21 f0       	breq	.+8      	; 0x3d52 <__floatunsisf+0x9e>
    3d4a:	41 e0       	ldi	r20, 0x01	; 1
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	4a 29       	or	r20, r10
    3d54:	5b 29       	or	r21, r11
    3d56:	6c 29       	or	r22, r12
    3d58:	7d 29       	or	r23, r13
    3d5a:	4d 83       	std	Y+5, r20	; 0x05
    3d5c:	5e 83       	std	Y+6, r21	; 0x06
    3d5e:	6f 83       	std	Y+7, r22	; 0x07
    3d60:	78 87       	std	Y+8, r23	; 0x08
    3d62:	8e e1       	ldi	r24, 0x1E	; 30
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	8e 1b       	sub	r24, r30
    3d68:	9f 0b       	sbc	r25, r31
    3d6a:	9c 83       	std	Y+4, r25	; 0x04
    3d6c:	8b 83       	std	Y+3, r24	; 0x03
    3d6e:	12 c0       	rjmp	.+36     	; 0x3d94 <__floatunsisf+0xe0>
    3d70:	30 97       	sbiw	r30, 0x00	; 0
    3d72:	81 f0       	breq	.+32     	; 0x3d94 <__floatunsisf+0xe0>
    3d74:	0e 2e       	mov	r0, r30
    3d76:	04 c0       	rjmp	.+8      	; 0x3d80 <__floatunsisf+0xcc>
    3d78:	ee 0c       	add	r14, r14
    3d7a:	ff 1c       	adc	r15, r15
    3d7c:	00 1f       	adc	r16, r16
    3d7e:	11 1f       	adc	r17, r17
    3d80:	0a 94       	dec	r0
    3d82:	d2 f7       	brpl	.-12     	; 0x3d78 <__floatunsisf+0xc4>
    3d84:	ed 82       	std	Y+5, r14	; 0x05
    3d86:	fe 82       	std	Y+6, r15	; 0x06
    3d88:	0f 83       	std	Y+7, r16	; 0x07
    3d8a:	18 87       	std	Y+8, r17	; 0x08
    3d8c:	ce 1a       	sub	r12, r30
    3d8e:	df 0a       	sbc	r13, r31
    3d90:	dc 82       	std	Y+4, r13	; 0x04
    3d92:	cb 82       	std	Y+3, r12	; 0x03
    3d94:	1a 82       	std	Y+2, r1	; 0x02
    3d96:	ce 01       	movw	r24, r28
    3d98:	01 96       	adiw	r24, 0x01	; 1
    3d9a:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__pack_f>
    3d9e:	28 96       	adiw	r28, 0x08	; 8
    3da0:	ea e0       	ldi	r30, 0x0A	; 10
    3da2:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x10>

00003da6 <__clzsi2>:
    3da6:	ef 92       	push	r14
    3da8:	ff 92       	push	r15
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	7b 01       	movw	r14, r22
    3db0:	8c 01       	movw	r16, r24
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	e8 16       	cp	r14, r24
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	f8 06       	cpc	r15, r24
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	08 07       	cpc	r16, r24
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	18 07       	cpc	r17, r24
    3dc2:	88 f4       	brcc	.+34     	; 0x3de6 <__clzsi2+0x40>
    3dc4:	8f ef       	ldi	r24, 0xFF	; 255
    3dc6:	e8 16       	cp	r14, r24
    3dc8:	f1 04       	cpc	r15, r1
    3dca:	01 05       	cpc	r16, r1
    3dcc:	11 05       	cpc	r17, r1
    3dce:	31 f0       	breq	.+12     	; 0x3ddc <__clzsi2+0x36>
    3dd0:	28 f0       	brcs	.+10     	; 0x3ddc <__clzsi2+0x36>
    3dd2:	88 e0       	ldi	r24, 0x08	; 8
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	a0 e0       	ldi	r26, 0x00	; 0
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	17 c0       	rjmp	.+46     	; 0x3e0a <__clzsi2+0x64>
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	a0 e0       	ldi	r26, 0x00	; 0
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	12 c0       	rjmp	.+36     	; 0x3e0a <__clzsi2+0x64>
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	e8 16       	cp	r14, r24
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	f8 06       	cpc	r15, r24
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	08 07       	cpc	r16, r24
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	18 07       	cpc	r17, r24
    3df6:	28 f0       	brcs	.+10     	; 0x3e02 <__clzsi2+0x5c>
    3df8:	88 e1       	ldi	r24, 0x18	; 24
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	a0 e0       	ldi	r26, 0x00	; 0
    3dfe:	b0 e0       	ldi	r27, 0x00	; 0
    3e00:	04 c0       	rjmp	.+8      	; 0x3e0a <__clzsi2+0x64>
    3e02:	80 e1       	ldi	r24, 0x10	; 16
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	a0 e0       	ldi	r26, 0x00	; 0
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	20 e2       	ldi	r18, 0x20	; 32
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	28 1b       	sub	r18, r24
    3e14:	39 0b       	sbc	r19, r25
    3e16:	4a 0b       	sbc	r20, r26
    3e18:	5b 0b       	sbc	r21, r27
    3e1a:	04 c0       	rjmp	.+8      	; 0x3e24 <__clzsi2+0x7e>
    3e1c:	16 95       	lsr	r17
    3e1e:	07 95       	ror	r16
    3e20:	f7 94       	ror	r15
    3e22:	e7 94       	ror	r14
    3e24:	8a 95       	dec	r24
    3e26:	d2 f7       	brpl	.-12     	; 0x3e1c <__clzsi2+0x76>
    3e28:	f7 01       	movw	r30, r14
    3e2a:	e8 5f       	subi	r30, 0xF8	; 248
    3e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    3e2e:	80 81       	ld	r24, Z
    3e30:	28 1b       	sub	r18, r24
    3e32:	31 09       	sbc	r19, r1
    3e34:	41 09       	sbc	r20, r1
    3e36:	51 09       	sbc	r21, r1
    3e38:	c9 01       	movw	r24, r18
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	ff 90       	pop	r15
    3e40:	ef 90       	pop	r14
    3e42:	08 95       	ret

00003e44 <__pack_f>:
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e4 80       	ldd	r14, Z+4	; 0x04
    3e52:	f5 80       	ldd	r15, Z+5	; 0x05
    3e54:	06 81       	ldd	r16, Z+6	; 0x06
    3e56:	17 81       	ldd	r17, Z+7	; 0x07
    3e58:	d1 80       	ldd	r13, Z+1	; 0x01
    3e5a:	80 81       	ld	r24, Z
    3e5c:	82 30       	cpi	r24, 0x02	; 2
    3e5e:	48 f4       	brcc	.+18     	; 0x3e72 <__pack_f+0x2e>
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	a0 e1       	ldi	r26, 0x10	; 16
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	e8 2a       	or	r14, r24
    3e6a:	f9 2a       	or	r15, r25
    3e6c:	0a 2b       	or	r16, r26
    3e6e:	1b 2b       	or	r17, r27
    3e70:	a5 c0       	rjmp	.+330    	; 0x3fbc <__pack_f+0x178>
    3e72:	84 30       	cpi	r24, 0x04	; 4
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <__pack_f+0x34>
    3e76:	9f c0       	rjmp	.+318    	; 0x3fb6 <__pack_f+0x172>
    3e78:	82 30       	cpi	r24, 0x02	; 2
    3e7a:	21 f4       	brne	.+8      	; 0x3e84 <__pack_f+0x40>
    3e7c:	ee 24       	eor	r14, r14
    3e7e:	ff 24       	eor	r15, r15
    3e80:	87 01       	movw	r16, r14
    3e82:	05 c0       	rjmp	.+10     	; 0x3e8e <__pack_f+0x4a>
    3e84:	e1 14       	cp	r14, r1
    3e86:	f1 04       	cpc	r15, r1
    3e88:	01 05       	cpc	r16, r1
    3e8a:	11 05       	cpc	r17, r1
    3e8c:	19 f4       	brne	.+6      	; 0x3e94 <__pack_f+0x50>
    3e8e:	e0 e0       	ldi	r30, 0x00	; 0
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	96 c0       	rjmp	.+300    	; 0x3fc0 <__pack_f+0x17c>
    3e94:	62 81       	ldd	r22, Z+2	; 0x02
    3e96:	73 81       	ldd	r23, Z+3	; 0x03
    3e98:	9f ef       	ldi	r25, 0xFF	; 255
    3e9a:	62 38       	cpi	r22, 0x82	; 130
    3e9c:	79 07       	cpc	r23, r25
    3e9e:	0c f0       	brlt	.+2      	; 0x3ea2 <__pack_f+0x5e>
    3ea0:	5b c0       	rjmp	.+182    	; 0x3f58 <__pack_f+0x114>
    3ea2:	22 e8       	ldi	r18, 0x82	; 130
    3ea4:	3f ef       	ldi	r19, 0xFF	; 255
    3ea6:	26 1b       	sub	r18, r22
    3ea8:	37 0b       	sbc	r19, r23
    3eaa:	2a 31       	cpi	r18, 0x1A	; 26
    3eac:	31 05       	cpc	r19, r1
    3eae:	2c f0       	brlt	.+10     	; 0x3eba <__pack_f+0x76>
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	40 e0       	ldi	r20, 0x00	; 0
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	2a c0       	rjmp	.+84     	; 0x3f0e <__pack_f+0xca>
    3eba:	b8 01       	movw	r22, r16
    3ebc:	a7 01       	movw	r20, r14
    3ebe:	02 2e       	mov	r0, r18
    3ec0:	04 c0       	rjmp	.+8      	; 0x3eca <__pack_f+0x86>
    3ec2:	76 95       	lsr	r23
    3ec4:	67 95       	ror	r22
    3ec6:	57 95       	ror	r21
    3ec8:	47 95       	ror	r20
    3eca:	0a 94       	dec	r0
    3ecc:	d2 f7       	brpl	.-12     	; 0x3ec2 <__pack_f+0x7e>
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	a0 e0       	ldi	r26, 0x00	; 0
    3ed4:	b0 e0       	ldi	r27, 0x00	; 0
    3ed6:	04 c0       	rjmp	.+8      	; 0x3ee0 <__pack_f+0x9c>
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	aa 1f       	adc	r26, r26
    3ede:	bb 1f       	adc	r27, r27
    3ee0:	2a 95       	dec	r18
    3ee2:	d2 f7       	brpl	.-12     	; 0x3ed8 <__pack_f+0x94>
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	a1 09       	sbc	r26, r1
    3ee8:	b1 09       	sbc	r27, r1
    3eea:	8e 21       	and	r24, r14
    3eec:	9f 21       	and	r25, r15
    3eee:	a0 23       	and	r26, r16
    3ef0:	b1 23       	and	r27, r17
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	a1 05       	cpc	r26, r1
    3ef6:	b1 05       	cpc	r27, r1
    3ef8:	21 f0       	breq	.+8      	; 0x3f02 <__pack_f+0xbe>
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	a0 e0       	ldi	r26, 0x00	; 0
    3f00:	b0 e0       	ldi	r27, 0x00	; 0
    3f02:	9a 01       	movw	r18, r20
    3f04:	ab 01       	movw	r20, r22
    3f06:	28 2b       	or	r18, r24
    3f08:	39 2b       	or	r19, r25
    3f0a:	4a 2b       	or	r20, r26
    3f0c:	5b 2b       	or	r21, r27
    3f0e:	da 01       	movw	r26, r20
    3f10:	c9 01       	movw	r24, r18
    3f12:	8f 77       	andi	r24, 0x7F	; 127
    3f14:	90 70       	andi	r25, 0x00	; 0
    3f16:	a0 70       	andi	r26, 0x00	; 0
    3f18:	b0 70       	andi	r27, 0x00	; 0
    3f1a:	80 34       	cpi	r24, 0x40	; 64
    3f1c:	91 05       	cpc	r25, r1
    3f1e:	a1 05       	cpc	r26, r1
    3f20:	b1 05       	cpc	r27, r1
    3f22:	39 f4       	brne	.+14     	; 0x3f32 <__pack_f+0xee>
    3f24:	27 ff       	sbrs	r18, 7
    3f26:	09 c0       	rjmp	.+18     	; 0x3f3a <__pack_f+0xf6>
    3f28:	20 5c       	subi	r18, 0xC0	; 192
    3f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f30:	04 c0       	rjmp	.+8      	; 0x3f3a <__pack_f+0xf6>
    3f32:	21 5c       	subi	r18, 0xC1	; 193
    3f34:	3f 4f       	sbci	r19, 0xFF	; 255
    3f36:	4f 4f       	sbci	r20, 0xFF	; 255
    3f38:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3a:	e0 e0       	ldi	r30, 0x00	; 0
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	20 30       	cpi	r18, 0x00	; 0
    3f40:	a0 e0       	ldi	r26, 0x00	; 0
    3f42:	3a 07       	cpc	r19, r26
    3f44:	a0 e0       	ldi	r26, 0x00	; 0
    3f46:	4a 07       	cpc	r20, r26
    3f48:	a0 e4       	ldi	r26, 0x40	; 64
    3f4a:	5a 07       	cpc	r21, r26
    3f4c:	10 f0       	brcs	.+4      	; 0x3f52 <__pack_f+0x10e>
    3f4e:	e1 e0       	ldi	r30, 0x01	; 1
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	79 01       	movw	r14, r18
    3f54:	8a 01       	movw	r16, r20
    3f56:	27 c0       	rjmp	.+78     	; 0x3fa6 <__pack_f+0x162>
    3f58:	60 38       	cpi	r22, 0x80	; 128
    3f5a:	71 05       	cpc	r23, r1
    3f5c:	64 f5       	brge	.+88     	; 0x3fb6 <__pack_f+0x172>
    3f5e:	fb 01       	movw	r30, r22
    3f60:	e1 58       	subi	r30, 0x81	; 129
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	d8 01       	movw	r26, r16
    3f66:	c7 01       	movw	r24, r14
    3f68:	8f 77       	andi	r24, 0x7F	; 127
    3f6a:	90 70       	andi	r25, 0x00	; 0
    3f6c:	a0 70       	andi	r26, 0x00	; 0
    3f6e:	b0 70       	andi	r27, 0x00	; 0
    3f70:	80 34       	cpi	r24, 0x40	; 64
    3f72:	91 05       	cpc	r25, r1
    3f74:	a1 05       	cpc	r26, r1
    3f76:	b1 05       	cpc	r27, r1
    3f78:	39 f4       	brne	.+14     	; 0x3f88 <__pack_f+0x144>
    3f7a:	e7 fe       	sbrs	r14, 7
    3f7c:	0d c0       	rjmp	.+26     	; 0x3f98 <__pack_f+0x154>
    3f7e:	80 e4       	ldi	r24, 0x40	; 64
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	a0 e0       	ldi	r26, 0x00	; 0
    3f84:	b0 e0       	ldi	r27, 0x00	; 0
    3f86:	04 c0       	rjmp	.+8      	; 0x3f90 <__pack_f+0x14c>
    3f88:	8f e3       	ldi	r24, 0x3F	; 63
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	a0 e0       	ldi	r26, 0x00	; 0
    3f8e:	b0 e0       	ldi	r27, 0x00	; 0
    3f90:	e8 0e       	add	r14, r24
    3f92:	f9 1e       	adc	r15, r25
    3f94:	0a 1f       	adc	r16, r26
    3f96:	1b 1f       	adc	r17, r27
    3f98:	17 ff       	sbrs	r17, 7
    3f9a:	05 c0       	rjmp	.+10     	; 0x3fa6 <__pack_f+0x162>
    3f9c:	16 95       	lsr	r17
    3f9e:	07 95       	ror	r16
    3fa0:	f7 94       	ror	r15
    3fa2:	e7 94       	ror	r14
    3fa4:	31 96       	adiw	r30, 0x01	; 1
    3fa6:	87 e0       	ldi	r24, 0x07	; 7
    3fa8:	16 95       	lsr	r17
    3faa:	07 95       	ror	r16
    3fac:	f7 94       	ror	r15
    3fae:	e7 94       	ror	r14
    3fb0:	8a 95       	dec	r24
    3fb2:	d1 f7       	brne	.-12     	; 0x3fa8 <__pack_f+0x164>
    3fb4:	05 c0       	rjmp	.+10     	; 0x3fc0 <__pack_f+0x17c>
    3fb6:	ee 24       	eor	r14, r14
    3fb8:	ff 24       	eor	r15, r15
    3fba:	87 01       	movw	r16, r14
    3fbc:	ef ef       	ldi	r30, 0xFF	; 255
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	6e 2f       	mov	r22, r30
    3fc2:	67 95       	ror	r22
    3fc4:	66 27       	eor	r22, r22
    3fc6:	67 95       	ror	r22
    3fc8:	90 2f       	mov	r25, r16
    3fca:	9f 77       	andi	r25, 0x7F	; 127
    3fcc:	d7 94       	ror	r13
    3fce:	dd 24       	eor	r13, r13
    3fd0:	d7 94       	ror	r13
    3fd2:	8e 2f       	mov	r24, r30
    3fd4:	86 95       	lsr	r24
    3fd6:	49 2f       	mov	r20, r25
    3fd8:	46 2b       	or	r20, r22
    3fda:	58 2f       	mov	r21, r24
    3fdc:	5d 29       	or	r21, r13
    3fde:	b7 01       	movw	r22, r14
    3fe0:	ca 01       	movw	r24, r20
    3fe2:	1f 91       	pop	r17
    3fe4:	0f 91       	pop	r16
    3fe6:	ff 90       	pop	r15
    3fe8:	ef 90       	pop	r14
    3fea:	df 90       	pop	r13
    3fec:	08 95       	ret

00003fee <__unpack_f>:
    3fee:	fc 01       	movw	r30, r24
    3ff0:	db 01       	movw	r26, r22
    3ff2:	40 81       	ld	r20, Z
    3ff4:	51 81       	ldd	r21, Z+1	; 0x01
    3ff6:	22 81       	ldd	r18, Z+2	; 0x02
    3ff8:	62 2f       	mov	r22, r18
    3ffa:	6f 77       	andi	r22, 0x7F	; 127
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	22 1f       	adc	r18, r18
    4000:	22 27       	eor	r18, r18
    4002:	22 1f       	adc	r18, r18
    4004:	93 81       	ldd	r25, Z+3	; 0x03
    4006:	89 2f       	mov	r24, r25
    4008:	88 0f       	add	r24, r24
    400a:	82 2b       	or	r24, r18
    400c:	28 2f       	mov	r18, r24
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	99 1f       	adc	r25, r25
    4012:	99 27       	eor	r25, r25
    4014:	99 1f       	adc	r25, r25
    4016:	11 96       	adiw	r26, 0x01	; 1
    4018:	9c 93       	st	X, r25
    401a:	11 97       	sbiw	r26, 0x01	; 1
    401c:	21 15       	cp	r18, r1
    401e:	31 05       	cpc	r19, r1
    4020:	a9 f5       	brne	.+106    	; 0x408c <__unpack_f+0x9e>
    4022:	41 15       	cp	r20, r1
    4024:	51 05       	cpc	r21, r1
    4026:	61 05       	cpc	r22, r1
    4028:	71 05       	cpc	r23, r1
    402a:	11 f4       	brne	.+4      	; 0x4030 <__unpack_f+0x42>
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	37 c0       	rjmp	.+110    	; 0x409e <__unpack_f+0xb0>
    4030:	82 e8       	ldi	r24, 0x82	; 130
    4032:	9f ef       	ldi	r25, 0xFF	; 255
    4034:	13 96       	adiw	r26, 0x03	; 3
    4036:	9c 93       	st	X, r25
    4038:	8e 93       	st	-X, r24
    403a:	12 97       	sbiw	r26, 0x02	; 2
    403c:	9a 01       	movw	r18, r20
    403e:	ab 01       	movw	r20, r22
    4040:	67 e0       	ldi	r22, 0x07	; 7
    4042:	22 0f       	add	r18, r18
    4044:	33 1f       	adc	r19, r19
    4046:	44 1f       	adc	r20, r20
    4048:	55 1f       	adc	r21, r21
    404a:	6a 95       	dec	r22
    404c:	d1 f7       	brne	.-12     	; 0x4042 <__unpack_f+0x54>
    404e:	83 e0       	ldi	r24, 0x03	; 3
    4050:	8c 93       	st	X, r24
    4052:	0d c0       	rjmp	.+26     	; 0x406e <__unpack_f+0x80>
    4054:	22 0f       	add	r18, r18
    4056:	33 1f       	adc	r19, r19
    4058:	44 1f       	adc	r20, r20
    405a:	55 1f       	adc	r21, r21
    405c:	12 96       	adiw	r26, 0x02	; 2
    405e:	8d 91       	ld	r24, X+
    4060:	9c 91       	ld	r25, X
    4062:	13 97       	sbiw	r26, 0x03	; 3
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	13 96       	adiw	r26, 0x03	; 3
    4068:	9c 93       	st	X, r25
    406a:	8e 93       	st	-X, r24
    406c:	12 97       	sbiw	r26, 0x02	; 2
    406e:	20 30       	cpi	r18, 0x00	; 0
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	38 07       	cpc	r19, r24
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	48 07       	cpc	r20, r24
    4078:	80 e4       	ldi	r24, 0x40	; 64
    407a:	58 07       	cpc	r21, r24
    407c:	58 f3       	brcs	.-42     	; 0x4054 <__unpack_f+0x66>
    407e:	14 96       	adiw	r26, 0x04	; 4
    4080:	2d 93       	st	X+, r18
    4082:	3d 93       	st	X+, r19
    4084:	4d 93       	st	X+, r20
    4086:	5c 93       	st	X, r21
    4088:	17 97       	sbiw	r26, 0x07	; 7
    408a:	08 95       	ret
    408c:	2f 3f       	cpi	r18, 0xFF	; 255
    408e:	31 05       	cpc	r19, r1
    4090:	79 f4       	brne	.+30     	; 0x40b0 <__unpack_f+0xc2>
    4092:	41 15       	cp	r20, r1
    4094:	51 05       	cpc	r21, r1
    4096:	61 05       	cpc	r22, r1
    4098:	71 05       	cpc	r23, r1
    409a:	19 f4       	brne	.+6      	; 0x40a2 <__unpack_f+0xb4>
    409c:	84 e0       	ldi	r24, 0x04	; 4
    409e:	8c 93       	st	X, r24
    40a0:	08 95       	ret
    40a2:	64 ff       	sbrs	r22, 4
    40a4:	03 c0       	rjmp	.+6      	; 0x40ac <__unpack_f+0xbe>
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	8c 93       	st	X, r24
    40aa:	12 c0       	rjmp	.+36     	; 0x40d0 <__unpack_f+0xe2>
    40ac:	1c 92       	st	X, r1
    40ae:	10 c0       	rjmp	.+32     	; 0x40d0 <__unpack_f+0xe2>
    40b0:	2f 57       	subi	r18, 0x7F	; 127
    40b2:	30 40       	sbci	r19, 0x00	; 0
    40b4:	13 96       	adiw	r26, 0x03	; 3
    40b6:	3c 93       	st	X, r19
    40b8:	2e 93       	st	-X, r18
    40ba:	12 97       	sbiw	r26, 0x02	; 2
    40bc:	83 e0       	ldi	r24, 0x03	; 3
    40be:	8c 93       	st	X, r24
    40c0:	87 e0       	ldi	r24, 0x07	; 7
    40c2:	44 0f       	add	r20, r20
    40c4:	55 1f       	adc	r21, r21
    40c6:	66 1f       	adc	r22, r22
    40c8:	77 1f       	adc	r23, r23
    40ca:	8a 95       	dec	r24
    40cc:	d1 f7       	brne	.-12     	; 0x40c2 <__unpack_f+0xd4>
    40ce:	70 64       	ori	r23, 0x40	; 64
    40d0:	14 96       	adiw	r26, 0x04	; 4
    40d2:	4d 93       	st	X+, r20
    40d4:	5d 93       	st	X+, r21
    40d6:	6d 93       	st	X+, r22
    40d8:	7c 93       	st	X, r23
    40da:	17 97       	sbiw	r26, 0x07	; 7
    40dc:	08 95       	ret

000040de <__fpcmp_parts_f>:
    40de:	1f 93       	push	r17
    40e0:	dc 01       	movw	r26, r24
    40e2:	fb 01       	movw	r30, r22
    40e4:	9c 91       	ld	r25, X
    40e6:	92 30       	cpi	r25, 0x02	; 2
    40e8:	08 f4       	brcc	.+2      	; 0x40ec <__fpcmp_parts_f+0xe>
    40ea:	47 c0       	rjmp	.+142    	; 0x417a <__fpcmp_parts_f+0x9c>
    40ec:	80 81       	ld	r24, Z
    40ee:	82 30       	cpi	r24, 0x02	; 2
    40f0:	08 f4       	brcc	.+2      	; 0x40f4 <__fpcmp_parts_f+0x16>
    40f2:	43 c0       	rjmp	.+134    	; 0x417a <__fpcmp_parts_f+0x9c>
    40f4:	94 30       	cpi	r25, 0x04	; 4
    40f6:	51 f4       	brne	.+20     	; 0x410c <__fpcmp_parts_f+0x2e>
    40f8:	11 96       	adiw	r26, 0x01	; 1
    40fa:	1c 91       	ld	r17, X
    40fc:	84 30       	cpi	r24, 0x04	; 4
    40fe:	99 f5       	brne	.+102    	; 0x4166 <__fpcmp_parts_f+0x88>
    4100:	81 81       	ldd	r24, Z+1	; 0x01
    4102:	68 2f       	mov	r22, r24
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	61 1b       	sub	r22, r17
    4108:	71 09       	sbc	r23, r1
    410a:	3f c0       	rjmp	.+126    	; 0x418a <__fpcmp_parts_f+0xac>
    410c:	84 30       	cpi	r24, 0x04	; 4
    410e:	21 f0       	breq	.+8      	; 0x4118 <__fpcmp_parts_f+0x3a>
    4110:	92 30       	cpi	r25, 0x02	; 2
    4112:	31 f4       	brne	.+12     	; 0x4120 <__fpcmp_parts_f+0x42>
    4114:	82 30       	cpi	r24, 0x02	; 2
    4116:	b9 f1       	breq	.+110    	; 0x4186 <__fpcmp_parts_f+0xa8>
    4118:	81 81       	ldd	r24, Z+1	; 0x01
    411a:	88 23       	and	r24, r24
    411c:	89 f1       	breq	.+98     	; 0x4180 <__fpcmp_parts_f+0xa2>
    411e:	2d c0       	rjmp	.+90     	; 0x417a <__fpcmp_parts_f+0x9c>
    4120:	11 96       	adiw	r26, 0x01	; 1
    4122:	1c 91       	ld	r17, X
    4124:	11 97       	sbiw	r26, 0x01	; 1
    4126:	82 30       	cpi	r24, 0x02	; 2
    4128:	f1 f0       	breq	.+60     	; 0x4166 <__fpcmp_parts_f+0x88>
    412a:	81 81       	ldd	r24, Z+1	; 0x01
    412c:	18 17       	cp	r17, r24
    412e:	d9 f4       	brne	.+54     	; 0x4166 <__fpcmp_parts_f+0x88>
    4130:	12 96       	adiw	r26, 0x02	; 2
    4132:	2d 91       	ld	r18, X+
    4134:	3c 91       	ld	r19, X
    4136:	13 97       	sbiw	r26, 0x03	; 3
    4138:	82 81       	ldd	r24, Z+2	; 0x02
    413a:	93 81       	ldd	r25, Z+3	; 0x03
    413c:	82 17       	cp	r24, r18
    413e:	93 07       	cpc	r25, r19
    4140:	94 f0       	brlt	.+36     	; 0x4166 <__fpcmp_parts_f+0x88>
    4142:	28 17       	cp	r18, r24
    4144:	39 07       	cpc	r19, r25
    4146:	bc f0       	brlt	.+46     	; 0x4176 <__fpcmp_parts_f+0x98>
    4148:	14 96       	adiw	r26, 0x04	; 4
    414a:	8d 91       	ld	r24, X+
    414c:	9d 91       	ld	r25, X+
    414e:	0d 90       	ld	r0, X+
    4150:	bc 91       	ld	r27, X
    4152:	a0 2d       	mov	r26, r0
    4154:	24 81       	ldd	r18, Z+4	; 0x04
    4156:	35 81       	ldd	r19, Z+5	; 0x05
    4158:	46 81       	ldd	r20, Z+6	; 0x06
    415a:	57 81       	ldd	r21, Z+7	; 0x07
    415c:	28 17       	cp	r18, r24
    415e:	39 07       	cpc	r19, r25
    4160:	4a 07       	cpc	r20, r26
    4162:	5b 07       	cpc	r21, r27
    4164:	18 f4       	brcc	.+6      	; 0x416c <__fpcmp_parts_f+0x8e>
    4166:	11 23       	and	r17, r17
    4168:	41 f0       	breq	.+16     	; 0x417a <__fpcmp_parts_f+0x9c>
    416a:	0a c0       	rjmp	.+20     	; 0x4180 <__fpcmp_parts_f+0xa2>
    416c:	82 17       	cp	r24, r18
    416e:	93 07       	cpc	r25, r19
    4170:	a4 07       	cpc	r26, r20
    4172:	b5 07       	cpc	r27, r21
    4174:	40 f4       	brcc	.+16     	; 0x4186 <__fpcmp_parts_f+0xa8>
    4176:	11 23       	and	r17, r17
    4178:	19 f0       	breq	.+6      	; 0x4180 <__fpcmp_parts_f+0xa2>
    417a:	61 e0       	ldi	r22, 0x01	; 1
    417c:	70 e0       	ldi	r23, 0x00	; 0
    417e:	05 c0       	rjmp	.+10     	; 0x418a <__fpcmp_parts_f+0xac>
    4180:	6f ef       	ldi	r22, 0xFF	; 255
    4182:	7f ef       	ldi	r23, 0xFF	; 255
    4184:	02 c0       	rjmp	.+4      	; 0x418a <__fpcmp_parts_f+0xac>
    4186:	60 e0       	ldi	r22, 0x00	; 0
    4188:	70 e0       	ldi	r23, 0x00	; 0
    418a:	cb 01       	movw	r24, r22
    418c:	1f 91       	pop	r17
    418e:	08 95       	ret

00004190 <__mulsi3>:
    4190:	62 9f       	mul	r22, r18
    4192:	d0 01       	movw	r26, r0
    4194:	73 9f       	mul	r23, r19
    4196:	f0 01       	movw	r30, r0
    4198:	82 9f       	mul	r24, r18
    419a:	e0 0d       	add	r30, r0
    419c:	f1 1d       	adc	r31, r1
    419e:	64 9f       	mul	r22, r20
    41a0:	e0 0d       	add	r30, r0
    41a2:	f1 1d       	adc	r31, r1
    41a4:	92 9f       	mul	r25, r18
    41a6:	f0 0d       	add	r31, r0
    41a8:	83 9f       	mul	r24, r19
    41aa:	f0 0d       	add	r31, r0
    41ac:	74 9f       	mul	r23, r20
    41ae:	f0 0d       	add	r31, r0
    41b0:	65 9f       	mul	r22, r21
    41b2:	f0 0d       	add	r31, r0
    41b4:	99 27       	eor	r25, r25
    41b6:	72 9f       	mul	r23, r18
    41b8:	b0 0d       	add	r27, r0
    41ba:	e1 1d       	adc	r30, r1
    41bc:	f9 1f       	adc	r31, r25
    41be:	63 9f       	mul	r22, r19
    41c0:	b0 0d       	add	r27, r0
    41c2:	e1 1d       	adc	r30, r1
    41c4:	f9 1f       	adc	r31, r25
    41c6:	bd 01       	movw	r22, r26
    41c8:	cf 01       	movw	r24, r30
    41ca:	11 24       	eor	r1, r1
    41cc:	08 95       	ret

000041ce <__prologue_saves__>:
    41ce:	2f 92       	push	r2
    41d0:	3f 92       	push	r3
    41d2:	4f 92       	push	r4
    41d4:	5f 92       	push	r5
    41d6:	6f 92       	push	r6
    41d8:	7f 92       	push	r7
    41da:	8f 92       	push	r8
    41dc:	9f 92       	push	r9
    41de:	af 92       	push	r10
    41e0:	bf 92       	push	r11
    41e2:	cf 92       	push	r12
    41e4:	df 92       	push	r13
    41e6:	ef 92       	push	r14
    41e8:	ff 92       	push	r15
    41ea:	0f 93       	push	r16
    41ec:	1f 93       	push	r17
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
    41f6:	ca 1b       	sub	r28, r26
    41f8:	db 0b       	sbc	r29, r27
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	19 94       	eijmp

00004206 <__epilogue_restores__>:
    4206:	2a 88       	ldd	r2, Y+18	; 0x12
    4208:	39 88       	ldd	r3, Y+17	; 0x11
    420a:	48 88       	ldd	r4, Y+16	; 0x10
    420c:	5f 84       	ldd	r5, Y+15	; 0x0f
    420e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4210:	7d 84       	ldd	r7, Y+13	; 0x0d
    4212:	8c 84       	ldd	r8, Y+12	; 0x0c
    4214:	9b 84       	ldd	r9, Y+11	; 0x0b
    4216:	aa 84       	ldd	r10, Y+10	; 0x0a
    4218:	b9 84       	ldd	r11, Y+9	; 0x09
    421a:	c8 84       	ldd	r12, Y+8	; 0x08
    421c:	df 80       	ldd	r13, Y+7	; 0x07
    421e:	ee 80       	ldd	r14, Y+6	; 0x06
    4220:	fd 80       	ldd	r15, Y+5	; 0x05
    4222:	0c 81       	ldd	r16, Y+4	; 0x04
    4224:	1b 81       	ldd	r17, Y+3	; 0x03
    4226:	aa 81       	ldd	r26, Y+2	; 0x02
    4228:	b9 81       	ldd	r27, Y+1	; 0x01
    422a:	ce 0f       	add	r28, r30
    422c:	d1 1d       	adc	r29, r1
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	cd bf       	out	0x3d, r28	; 61
    4238:	ed 01       	movw	r28, r26
    423a:	08 95       	ret

0000423c <_exit>:
    423c:	f8 94       	cli

0000423e <__stop_program>:
    423e:	ff cf       	rjmp	.-2      	; 0x423e <__stop_program>
