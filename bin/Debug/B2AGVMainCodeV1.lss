
bin\Debug\B2AGVMainCodeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00003e6e  00003f22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e6e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800308  00800308  0000402a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000402a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  0000402d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000382  00000000  00000000  0000424d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003292  00000000  00000000  000045cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018aa  00000000  00000000  00007861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b92  00000000  00000000  0000910b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000bca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  0000bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__vector_50>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e6       	ldi	r30, 0x6E	; 110
      fc:	fe e3       	ldi	r31, 0x3E	; 62
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 31       	cpi	r26, 0x12	; 18
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 af 02 	call	0x55e	; 0x55e <main>
     122:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED>:

#define PINIRsensor1 PINJ
#define PINIRsensor2 PINJ

void LED(int Richting)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <LED+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
    switch (Richting)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	9c 83       	std	Y+4, r25	; 0x04
     140:	8b 83       	std	Y+3, r24	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	83 30       	cpi	r24, 0x03	; 3
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <LED+0x24>
     14c:	96 c0       	rjmp	.+300    	; 0x27a <LED+0x150>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	91 05       	cpc	r25, r1
     156:	64 f4       	brge	.+24     	; 0x170 <LED+0x46>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	d1 f0       	breq	.+52     	; 0x196 <LED+0x6c>
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	91 05       	cpc	r25, r1
     16a:	09 f4       	brne	.+2      	; 0x16e <LED+0x44>
     16c:	4d c0       	rjmp	.+154    	; 0x208 <LED+0xde>
     16e:	69 c1       	rjmp	.+722    	; 0x442 <LED+0x318>
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	85 30       	cpi	r24, 0x05	; 5
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <LED+0x52>
     17a:	f1 c0       	rjmp	.+482    	; 0x35e <LED+0x234>
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	85 30       	cpi	r24, 0x05	; 5
     182:	91 05       	cpc	r25, r1
     184:	0c f4       	brge	.+2      	; 0x188 <LED+0x5e>
     186:	b2 c0       	rjmp	.+356    	; 0x2ec <LED+0x1c2>
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	9c 81       	ldd	r25, Y+4	; 0x04
     18c:	86 30       	cpi	r24, 0x06	; 6
     18e:	91 05       	cpc	r25, r1
     190:	09 f4       	brne	.+2      	; 0x194 <LED+0x6a>
     192:	1e c1       	rjmp	.+572    	; 0x3d0 <LED+0x2a6>
     194:	56 c1       	rjmp	.+684    	; 0x442 <LED+0x318>
    {
    case 1 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     196:	a2 e2       	ldi	r26, 0x22	; 34
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e2 e2       	ldi	r30, 0x22	; 34
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     1a4:	a2 e2       	ldi	r26, 0x22	; 34
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e2 e2       	ldi	r30, 0x22	; 34
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     1b2:	a2 e2       	ldi	r26, 0x22	; 34
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e2 e2       	ldi	r30, 0x22	; 34
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8b 7f       	andi	r24, 0xFB	; 251
     1be:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     1c0:	a2 e2       	ldi	r26, 0x22	; 34
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e2 e2       	ldi	r30, 0x22	; 34
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     1ce:	a2 e2       	ldi	r26, 0x22	; 34
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e2 e2       	ldi	r30, 0x22	; 34
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     1dc:	a2 e2       	ldi	r26, 0x22	; 34
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e2 e2       	ldi	r30, 0x22	; 34
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7d       	andi	r24, 0xDF	; 223
     1e8:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     1ea:	a2 e2       	ldi	r26, 0x22	; 34
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e2 e2       	ldi	r30, 0x22	; 34
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 7b       	andi	r24, 0xBF	; 191
     1f6:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     1f8:	a2 e2       	ldi	r26, 0x22	; 34
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e2 e2       	ldi	r30, 0x22	; 34
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	8c 93       	st	X, r24
     206:	55 c1       	rjmp	.+682    	; 0x4b2 <LED+0x388>
        break;
    case 2 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     208:	a2 e2       	ldi	r26, 0x22	; 34
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e2 e2       	ldi	r30, 0x22	; 34
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     216:	a2 e2       	ldi	r26, 0x22	; 34
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e2 e2       	ldi	r30, 0x22	; 34
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8d 7f       	andi	r24, 0xFD	; 253
     222:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     224:	a2 e2       	ldi	r26, 0x22	; 34
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e2 e2       	ldi	r30, 0x22	; 34
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     240:	a2 e2       	ldi	r26, 0x22	; 34
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7e       	andi	r24, 0xEF	; 239
     24c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     24e:	a2 e2       	ldi	r26, 0x22	; 34
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e2 e2       	ldi	r30, 0x22	; 34
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 62       	ori	r24, 0x20	; 32
     25a:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     25c:	a2 e2       	ldi	r26, 0x22	; 34
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e2 e2       	ldi	r30, 0x22	; 34
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 7b       	andi	r24, 0xBF	; 191
     268:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     26a:	a2 e2       	ldi	r26, 0x22	; 34
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e2       	ldi	r30, 0x22	; 34
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	8c 93       	st	X, r24
     278:	1c c1       	rjmp	.+568    	; 0x4b2 <LED+0x388>
        break;
    case 3 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     27a:	a2 e2       	ldi	r26, 0x22	; 34
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e2 e2       	ldi	r30, 0x22	; 34
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8e 7f       	andi	r24, 0xFE	; 254
     286:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     288:	a2 e2       	ldi	r26, 0x22	; 34
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e2 e2       	ldi	r30, 0x22	; 34
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	8d 7f       	andi	r24, 0xFD	; 253
     294:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     296:	a2 e2       	ldi	r26, 0x22	; 34
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 e2       	ldi	r30, 0x22	; 34
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8b 7f       	andi	r24, 0xFB	; 251
     2a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     2a4:	a2 e2       	ldi	r26, 0x22	; 34
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e2 e2       	ldi	r30, 0x22	; 34
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     2b2:	a2 e2       	ldi	r26, 0x22	; 34
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e2 e2       	ldi	r30, 0x22	; 34
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     2c0:	a2 e2       	ldi	r26, 0x22	; 34
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e2 e2       	ldi	r30, 0x22	; 34
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e2       	ldi	r30, 0x22	; 34
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     2dc:	a2 e2       	ldi	r26, 0x22	; 34
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 77       	andi	r24, 0x7F	; 127
     2e8:	8c 93       	st	X, r24
     2ea:	e3 c0       	rjmp	.+454    	; 0x4b2 <LED+0x388>
        break;
    case 4 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     2ec:	a2 e2       	ldi	r26, 0x22	; 34
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e2 e2       	ldi	r30, 0x22	; 34
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     2fa:	a2 e2       	ldi	r26, 0x22	; 34
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e2 e2       	ldi	r30, 0x22	; 34
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     308:	a2 e2       	ldi	r26, 0x22	; 34
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	e2 e2       	ldi	r30, 0x22	; 34
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	84 60       	ori	r24, 0x04	; 4
     314:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e2 e2       	ldi	r30, 0x22	; 34
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     324:	a2 e2       	ldi	r26, 0x22	; 34
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e2 e2       	ldi	r30, 0x22	; 34
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7e       	andi	r24, 0xEF	; 239
     330:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     332:	a2 e2       	ldi	r26, 0x22	; 34
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e2 e2       	ldi	r30, 0x22	; 34
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7d       	andi	r24, 0xDF	; 223
     33e:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     340:	a2 e2       	ldi	r26, 0x22	; 34
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e2 e2       	ldi	r30, 0x22	; 34
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     34e:	a2 e2       	ldi	r26, 0x22	; 34
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e2 e2       	ldi	r30, 0x22	; 34
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	8c 93       	st	X, r24
     35c:	aa c0       	rjmp	.+340    	; 0x4b2 <LED+0x388>
        break;
    case 5 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     35e:	a2 e2       	ldi	r26, 0x22	; 34
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	e2 e2       	ldi	r30, 0x22	; 34
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     36c:	a2 e2       	ldi	r26, 0x22	; 34
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e2 e2       	ldi	r30, 0x22	; 34
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	82 60       	ori	r24, 0x02	; 2
     378:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     37a:	a2 e2       	ldi	r26, 0x22	; 34
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e2 e2       	ldi	r30, 0x22	; 34
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     388:	a2 e2       	ldi	r26, 0x22	; 34
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e2 e2       	ldi	r30, 0x22	; 34
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     396:	a2 e2       	ldi	r26, 0x22	; 34
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e2 e2       	ldi	r30, 0x22	; 34
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     3a4:	a2 e2       	ldi	r26, 0x22	; 34
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e2 e2       	ldi	r30, 0x22	; 34
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 7d       	andi	r24, 0xDF	; 223
     3b0:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     3b2:	a2 e2       	ldi	r26, 0x22	; 34
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7b       	andi	r24, 0xBF	; 191
     3be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     3c0:	a2 e2       	ldi	r26, 0x22	; 34
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e2 e2       	ldi	r30, 0x22	; 34
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	8c 93       	st	X, r24
     3ce:	71 c0       	rjmp	.+226    	; 0x4b2 <LED+0x388>
        break;
    case 6 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     3d0:	a2 e2       	ldi	r26, 0x22	; 34
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e2       	ldi	r30, 0x22	; 34
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     3de:	a2 e2       	ldi	r26, 0x22	; 34
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e2 e2       	ldi	r30, 0x22	; 34
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     3ec:	a2 e2       	ldi	r26, 0x22	; 34
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	e2 e2       	ldi	r30, 0x22	; 34
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	84 60       	ori	r24, 0x04	; 4
     3f8:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     3fa:	a2 e2       	ldi	r26, 0x22	; 34
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e2 e2       	ldi	r30, 0x22	; 34
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 60       	ori	r24, 0x08	; 8
     406:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     408:	a2 e2       	ldi	r26, 0x22	; 34
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e2 e2       	ldi	r30, 0x22	; 34
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     416:	a2 e2       	ldi	r26, 0x22	; 34
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e2 e2       	ldi	r30, 0x22	; 34
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     424:	a2 e2       	ldi	r26, 0x22	; 34
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e2 e2       	ldi	r30, 0x22	; 34
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     432:	a2 e2       	ldi	r26, 0x22	; 34
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e2 e2       	ldi	r30, 0x22	; 34
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8c 93       	st	X, r24
     440:	38 c0       	rjmp	.+112    	; 0x4b2 <LED+0x388>
        break;
    default :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     442:	a2 e2       	ldi	r26, 0x22	; 34
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e2 e2       	ldi	r30, 0x22	; 34
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     450:	a2 e2       	ldi	r26, 0x22	; 34
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e2 e2       	ldi	r30, 0x22	; 34
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     45e:	a2 e2       	ldi	r26, 0x22	; 34
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e2 e2       	ldi	r30, 0x22	; 34
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8b 7f       	andi	r24, 0xFB	; 251
     46a:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     46c:	a2 e2       	ldi	r26, 0x22	; 34
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e2 e2       	ldi	r30, 0x22	; 34
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     47a:	a2 e2       	ldi	r26, 0x22	; 34
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e2 e2       	ldi	r30, 0x22	; 34
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 7e       	andi	r24, 0xEF	; 239
     486:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     488:	a2 e2       	ldi	r26, 0x22	; 34
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e2 e2       	ldi	r30, 0x22	; 34
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     496:	a2 e2       	ldi	r26, 0x22	; 34
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e2 e2       	ldi	r30, 0x22	; 34
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     4a4:	a2 e2       	ldi	r26, 0x22	; 34
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e2 e2       	ldi	r30, 0x22	; 34
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	8c 93       	st	X, r24
    }
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <init>:


void init(void)
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
    LED(5);
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    DDRLEDRood |= (1 << PLEDRoodVoor);
     4d0:	a1 e2       	ldi	r26, 0x21	; 33
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	e1 e2       	ldi	r30, 0x21	; 33
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodAchter);
     4de:	a1 e2       	ldi	r26, 0x21	; 33
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e1 e2       	ldi	r30, 0x21	; 33
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodRechts);
     4ec:	a1 e2       	ldi	r26, 0x21	; 33
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	e1 e2       	ldi	r30, 0x21	; 33
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	84 60       	ori	r24, 0x04	; 4
     4f8:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodLinks);
     4fa:	a1 e2       	ldi	r26, 0x21	; 33
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	e1 e2       	ldi	r30, 0x21	; 33
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 60       	ori	r24, 0x08	; 8
     506:	8c 93       	st	X, r24

    DDRLEDGeel |= (1 << PLEDGeelVoor);
     508:	a1 e2       	ldi	r26, 0x21	; 33
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e1 e2       	ldi	r30, 0x21	; 33
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	80 61       	ori	r24, 0x10	; 16
     514:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelAchter);
     516:	a1 e2       	ldi	r26, 0x21	; 33
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e1 e2       	ldi	r30, 0x21	; 33
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	80 62       	ori	r24, 0x20	; 32
     522:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelRechts);
     524:	a1 e2       	ldi	r26, 0x21	; 33
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e1 e2       	ldi	r30, 0x21	; 33
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	80 64       	ori	r24, 0x40	; 64
     530:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelLinks);
     532:	a1 e2       	ldi	r26, 0x21	; 33
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	e1 e2       	ldi	r30, 0x21	; 33
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	8c 93       	st	X, r24

    DDRLEDRood |= (1 << PLEDNoodstop);
     540:	a1 e2       	ldi	r26, 0x21	; 33
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e1 e2       	ldi	r30, 0x21	; 33
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	80 61       	ori	r24, 0x10	; 16
     54c:	8c 93       	st	X, r24

    init_steppermotor();
     54e:	0e 94 89 03 	call	0x712	; 0x712 <init_steppermotor>
    init_ultrasoon();
     552:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <init_ultrasoon>
    sei();
     556:	78 94       	sei
}
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <main>:

int main(void)
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	67 97       	sbiw	r28, 0x17	; 23
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
    //int Steps = 512;//512 is een rondje.
    init();
     572:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>

    while(1)
    {
        double distanceUS1;
        double distanceUS2;
        distanceUS1 = distance(ultra_1_trigger);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 c8 14 	call	0x2990	; 0x2990 <distance>
     57e:	aa 27       	eor	r26, r26
     580:	97 fd       	sbrc	r25, 7
     582:	a0 95       	com	r26
     584:	ba 2f       	mov	r27, r26
     586:	bc 01       	movw	r22, r24
     588:	cd 01       	movw	r24, r26
     58a:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	8b 8b       	std	Y+19, r24	; 0x13
     594:	9c 8b       	std	Y+20, r25	; 0x14
     596:	ad 8b       	std	Y+21, r26	; 0x15
     598:	be 8b       	std	Y+22, r27	; 0x16
        distanceUS2 = distance(ultra_2_trigger);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 c8 14 	call	0x2990	; 0x2990 <distance>
     5a2:	aa 27       	eor	r26, r26
     5a4:	97 fd       	sbrc	r25, 7
     5a6:	a0 95       	com	r26
     5a8:	ba 2f       	mov	r27, r26
     5aa:	bc 01       	movw	r22, r24
     5ac:	cd 01       	movw	r24, r26
     5ae:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
     5b2:	dc 01       	movw	r26, r24
     5b4:	cb 01       	movw	r24, r22
     5b6:	8f 87       	std	Y+15, r24	; 0x0f
     5b8:	98 8b       	std	Y+16, r25	; 0x10
     5ba:	a9 8b       	std	Y+17, r26	; 0x11
     5bc:	ba 8b       	std	Y+18, r27	; 0x12
        LED(5);
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     5c6:	1a c0       	rjmp	.+52     	; 0x5fc <main+0x9e>
        while((distanceUS1 < distanceToTree)==0)
        {
            Vooruit(100);
     5c8:	84 e6       	ldi	r24, 0x64	; 100
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 10 14 	call	0x2820	; 0x2820 <Vooruit>
            LED(1);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
            distanceUS1 = distance(ultra_1_trigger);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 c8 14 	call	0x2990	; 0x2990 <distance>
     5e0:	aa 27       	eor	r26, r26
     5e2:	97 fd       	sbrc	r25, 7
     5e4:	a0 95       	com	r26
     5e6:	ba 2f       	mov	r27, r26
     5e8:	bc 01       	movw	r22, r24
     5ea:	cd 01       	movw	r24, r26
     5ec:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	8b 8b       	std	Y+19, r24	; 0x13
     5f6:	9c 8b       	std	Y+20, r25	; 0x14
     5f8:	ad 8b       	std	Y+21, r26	; 0x15
     5fa:	be 8b       	std	Y+22, r27	; 0x16
        double distanceUS1;
        double distanceUS2;
        distanceUS1 = distance(ultra_1_trigger);
        distanceUS2 = distance(ultra_2_trigger);
        LED(5);
        while((distanceUS1 < distanceToTree)==0)
     5fc:	1f 8a       	std	Y+23, r1	; 0x17
     5fe:	6b 89       	ldd	r22, Y+19	; 0x13
     600:	7c 89       	ldd	r23, Y+20	; 0x14
     602:	8d 89       	ldd	r24, Y+21	; 0x15
     604:	9e 89       	ldd	r25, Y+22	; 0x16
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 ea       	ldi	r20, 0xA0	; 160
     60c:	51 e4       	ldi	r21, 0x41	; 65
     60e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
     612:	88 23       	and	r24, r24
     614:	14 f4       	brge	.+4      	; 0x61a <main+0xbc>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8f 8b       	std	Y+23, r24	; 0x17
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	9f 89       	ldd	r25, Y+23	; 0x17
     61e:	89 27       	eor	r24, r25
     620:	88 23       	and	r24, r24
     622:	91 f6       	brne	.-92     	; 0x5c8 <main+0x6a>
            Vooruit(100);
            LED(1);
            distanceUS1 = distance(ultra_1_trigger);
            //  distanceUS2 = distance(ultra_2_trigger);
        }
        LED(6);
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	aa e7       	ldi	r26, 0x7A	; 122
     632:	b4 e4       	ldi	r27, 0x44	; 68
     634:	8b 87       	std	Y+11, r24	; 0x0b
     636:	9c 87       	std	Y+12, r25	; 0x0c
     638:	ad 87       	std	Y+13, r26	; 0x0d
     63a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     63c:	6b 85       	ldd	r22, Y+11	; 0x0b
     63e:	7c 85       	ldd	r23, Y+12	; 0x0c
     640:	8d 85       	ldd	r24, Y+13	; 0x0d
     642:	9e 85       	ldd	r25, Y+14	; 0x0e
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	4a e7       	ldi	r20, 0x7A	; 122
     64a:	55 e4       	ldi	r21, 0x45	; 69
     64c:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	8f 83       	std	Y+7, r24	; 0x07
     656:	98 87       	std	Y+8, r25	; 0x08
     658:	a9 87       	std	Y+9, r26	; 0x09
     65a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     65c:	6f 81       	ldd	r22, Y+7	; 0x07
     65e:	78 85       	ldd	r23, Y+8	; 0x08
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	9a 85       	ldd	r25, Y+10	; 0x0a
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e8       	ldi	r20, 0x80	; 128
     66a:	5f e3       	ldi	r21, 0x3F	; 63
     66c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
     670:	88 23       	and	r24, r24
     672:	2c f4       	brge	.+10     	; 0x67e <main+0x120>
		__ticks = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	9e 83       	std	Y+6, r25	; 0x06
     67a:	8d 83       	std	Y+5, r24	; 0x05
     67c:	3f c0       	rjmp	.+126    	; 0x6fc <main+0x19e>
	else if (__tmp > 65535)
     67e:	6f 81       	ldd	r22, Y+7	; 0x07
     680:	78 85       	ldd	r23, Y+8	; 0x08
     682:	89 85       	ldd	r24, Y+9	; 0x09
     684:	9a 85       	ldd	r25, Y+10	; 0x0a
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	3f ef       	ldi	r19, 0xFF	; 255
     68a:	4f e7       	ldi	r20, 0x7F	; 127
     68c:	57 e4       	ldi	r21, 0x47	; 71
     68e:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
     692:	18 16       	cp	r1, r24
     694:	4c f5       	brge	.+82     	; 0x6e8 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     696:	6b 85       	ldd	r22, Y+11	; 0x0b
     698:	7c 85       	ldd	r23, Y+12	; 0x0c
     69a:	8d 85       	ldd	r24, Y+13	; 0x0d
     69c:	9e 85       	ldd	r25, Y+14	; 0x0e
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e2       	ldi	r20, 0x20	; 32
     6a4:	51 e4       	ldi	r21, 0x41	; 65
     6a6:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9e 83       	std	Y+6, r25	; 0x06
     6bc:	8d 83       	std	Y+5, r24	; 0x05
     6be:	0f c0       	rjmp	.+30     	; 0x6de <main+0x180>
     6c0:	80 e9       	ldi	r24, 0x90	; 144
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9c 83       	std	Y+4, r25	; 0x04
     6c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <main+0x16e>
     6d0:	9c 83       	std	Y+4, r25	; 0x04
     6d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	9e 81       	ldd	r25, Y+6	; 0x06
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	9e 83       	std	Y+6, r25	; 0x06
     6dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	9e 81       	ldd	r25, Y+6	; 0x06
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	69 f7       	brne	.-38     	; 0x6c0 <main+0x162>
     6e6:	47 cf       	rjmp	.-370    	; 0x576 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e8:	6f 81       	ldd	r22, Y+7	; 0x07
     6ea:	78 85       	ldd	r23, Y+8	; 0x08
     6ec:	89 85       	ldd	r24, Y+9	; 0x09
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	9e 83       	std	Y+6, r25	; 0x06
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <main+0x1aa>
     70c:	9a 83       	std	Y+2, r25	; 0x02
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	32 cf       	rjmp	.-412    	; 0x576 <main+0x18>

00000712 <init_steppermotor>:
#include <util/delay.h>
#include "steppermotor.h"


void init_steppermotor(void)
{
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
    DDRStepper1 |= (1 << PStepper1_1); // PIN 30
     71a:	a7 e2       	ldi	r26, 0x27	; 39
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	e7 e2       	ldi	r30, 0x27	; 39
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	80 68       	ori	r24, 0x80	; 128
     726:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_2); // PIN 32
     728:	a7 e2       	ldi	r26, 0x27	; 39
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	e7 e2       	ldi	r30, 0x27	; 39
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	80 62       	ori	r24, 0x20	; 32
     734:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_3); // PIN 34
     736:	a7 e2       	ldi	r26, 0x27	; 39
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e7 e2       	ldi	r30, 0x27	; 39
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	88 60       	ori	r24, 0x08	; 8
     742:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_4); // PIN 36
     744:	a7 e2       	ldi	r26, 0x27	; 39
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	e7 e2       	ldi	r30, 0x27	; 39
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	82 60       	ori	r24, 0x02	; 2
     750:	8c 93       	st	X, r24

    DDRStepper2 |= (1 << PStepper2_1); // PIN 31
     752:	a7 e2       	ldi	r26, 0x27	; 39
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e7 e2       	ldi	r30, 0x27	; 39
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	80 64       	ori	r24, 0x40	; 64
     75e:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_2); // PIN 33
     760:	a7 e2       	ldi	r26, 0x27	; 39
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	e7 e2       	ldi	r30, 0x27	; 39
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	80 61       	ori	r24, 0x10	; 16
     76c:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_3); // PIN 35
     76e:	a7 e2       	ldi	r26, 0x27	; 39
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e7 e2       	ldi	r30, 0x27	; 39
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	84 60       	ori	r24, 0x04	; 4
     77a:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_4); // PIN 37
     77c:	a7 e2       	ldi	r26, 0x27	; 39
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e7 e2       	ldi	r30, 0x27	; 39
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	81 60       	ori	r24, 0x01	; 1
     788:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 42
     78a:	aa e0       	ldi	r26, 0x0A	; 10
     78c:	b1 e0       	ldi	r27, 0x01	; 1
     78e:	ea e0       	ldi	r30, 0x0A	; 10
     790:	f1 e0       	ldi	r31, 0x01	; 1
     792:	80 81       	ld	r24, Z
     794:	80 68       	ori	r24, 0x80	; 128
     796:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 44
     798:	aa e0       	ldi	r26, 0x0A	; 10
     79a:	b1 e0       	ldi	r27, 0x01	; 1
     79c:	ea e0       	ldi	r30, 0x0A	; 10
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	80 81       	ld	r24, Z
     7a2:	80 62       	ori	r24, 0x20	; 32
     7a4:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 46
     7a6:	aa e0       	ldi	r26, 0x0A	; 10
     7a8:	b1 e0       	ldi	r27, 0x01	; 1
     7aa:	ea e0       	ldi	r30, 0x0A	; 10
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	80 81       	ld	r24, Z
     7b0:	88 60       	ori	r24, 0x08	; 8
     7b2:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 48
     7b4:	aa e0       	ldi	r26, 0x0A	; 10
     7b6:	b1 e0       	ldi	r27, 0x01	; 1
     7b8:	ea e0       	ldi	r30, 0x0A	; 10
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	80 81       	ld	r24, Z
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 43
     7c2:	aa e0       	ldi	r26, 0x0A	; 10
     7c4:	b1 e0       	ldi	r27, 0x01	; 1
     7c6:	ea e0       	ldi	r30, 0x0A	; 10
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	80 81       	ld	r24, Z
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 45
     7d0:	aa e0       	ldi	r26, 0x0A	; 10
     7d2:	b1 e0       	ldi	r27, 0x01	; 1
     7d4:	ea e0       	ldi	r30, 0x0A	; 10
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	80 81       	ld	r24, Z
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 47
     7de:	aa e0       	ldi	r26, 0x0A	; 10
     7e0:	b1 e0       	ldi	r27, 0x01	; 1
     7e2:	ea e0       	ldi	r30, 0x0A	; 10
     7e4:	f1 e0       	ldi	r31, 0x01	; 1
     7e6:	80 81       	ld	r24, Z
     7e8:	88 60       	ori	r24, 0x08	; 8
     7ea:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
     7ec:	aa e0       	ldi	r26, 0x0A	; 10
     7ee:	b1 e0       	ldi	r27, 0x01	; 1
     7f0:	ea e0       	ldi	r30, 0x0A	; 10
     7f2:	f1 e0       	ldi	r31, 0x01	; 1
     7f4:	80 81       	ld	r24, Z
     7f6:	82 60       	ori	r24, 0x02	; 2
     7f8:	8c 93       	st	X, r24
}
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	08 95       	ret

00000800 <steppermotor1Write>:

void steppermotor1Write(int a)
{
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	ea 97       	sbiw	r28, 0x3a	; 58
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	9e ab       	std	Y+54, r25	; 0x36
     816:	8d ab       	std	Y+53, r24	; 0x35
     818:	f1 c1       	rjmp	.+994    	; 0xbfc <steppermotor1Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9c ab       	std	Y+52, r25	; 0x34
     820:	8b ab       	std	Y+51, r24	; 0x33
     822:	e4 c1       	rjmp	.+968    	; 0xbec <steppermotor1Write+0x3ec>
        {
            switch (i)
     824:	8b a9       	ldd	r24, Y+51	; 0x33
     826:	9c a9       	ldd	r25, Y+52	; 0x34
     828:	98 af       	std	Y+56, r25	; 0x38
     82a:	8f ab       	std	Y+55, r24	; 0x37
     82c:	8f a9       	ldd	r24, Y+55	; 0x37
     82e:	98 ad       	ldd	r25, Y+56	; 0x38
     830:	84 30       	cpi	r24, 0x04	; 4
     832:	91 05       	cpc	r25, r1
     834:	09 f4       	brne	.+2      	; 0x838 <steppermotor1Write+0x38>
     836:	87 c0       	rjmp	.+270    	; 0x946 <steppermotor1Write+0x146>
     838:	8f a9       	ldd	r24, Y+55	; 0x37
     83a:	98 ad       	ldd	r25, Y+56	; 0x38
     83c:	85 30       	cpi	r24, 0x05	; 5
     83e:	91 05       	cpc	r25, r1
     840:	94 f4       	brge	.+36     	; 0x866 <steppermotor1Write+0x66>
     842:	8f a9       	ldd	r24, Y+55	; 0x37
     844:	98 ad       	ldd	r25, Y+56	; 0x38
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	91 05       	cpc	r25, r1
     84a:	09 f4       	brne	.+2      	; 0x84e <steppermotor1Write+0x4e>
     84c:	42 c0       	rjmp	.+132    	; 0x8d2 <steppermotor1Write+0xd2>
     84e:	8f a9       	ldd	r24, Y+55	; 0x37
     850:	98 ad       	ldd	r25, Y+56	; 0x38
     852:	83 30       	cpi	r24, 0x03	; 3
     854:	91 05       	cpc	r25, r1
     856:	0c f0       	brlt	.+2      	; 0x85a <steppermotor1Write+0x5a>
     858:	59 c0       	rjmp	.+178    	; 0x90c <steppermotor1Write+0x10c>
     85a:	8f a9       	ldd	r24, Y+55	; 0x37
     85c:	98 ad       	ldd	r25, Y+56	; 0x38
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	91 05       	cpc	r25, r1
     862:	d1 f0       	breq	.+52     	; 0x898 <steppermotor1Write+0x98>
     864:	00 c1       	rjmp	.+512    	; 0xa66 <steppermotor1Write+0x266>
     866:	8f a9       	ldd	r24, Y+55	; 0x37
     868:	98 ad       	ldd	r25, Y+56	; 0x38
     86a:	86 30       	cpi	r24, 0x06	; 6
     86c:	91 05       	cpc	r25, r1
     86e:	09 f4       	brne	.+2      	; 0x872 <steppermotor1Write+0x72>
     870:	a4 c0       	rjmp	.+328    	; 0x9ba <steppermotor1Write+0x1ba>
     872:	8f a9       	ldd	r24, Y+55	; 0x37
     874:	98 ad       	ldd	r25, Y+56	; 0x38
     876:	86 30       	cpi	r24, 0x06	; 6
     878:	91 05       	cpc	r25, r1
     87a:	0c f4       	brge	.+2      	; 0x87e <steppermotor1Write+0x7e>
     87c:	81 c0       	rjmp	.+258    	; 0x980 <steppermotor1Write+0x180>
     87e:	8f a9       	ldd	r24, Y+55	; 0x37
     880:	98 ad       	ldd	r25, Y+56	; 0x38
     882:	87 30       	cpi	r24, 0x07	; 7
     884:	91 05       	cpc	r25, r1
     886:	09 f4       	brne	.+2      	; 0x88a <steppermotor1Write+0x8a>
     888:	b5 c0       	rjmp	.+362    	; 0x9f4 <steppermotor1Write+0x1f4>
     88a:	8f a9       	ldd	r24, Y+55	; 0x37
     88c:	98 ad       	ldd	r25, Y+56	; 0x38
     88e:	88 30       	cpi	r24, 0x08	; 8
     890:	91 05       	cpc	r25, r1
     892:	09 f4       	brne	.+2      	; 0x896 <steppermotor1Write+0x96>
     894:	cc c0       	rjmp	.+408    	; 0xa2e <steppermotor1Write+0x22e>
     896:	e7 c0       	rjmp	.+462    	; 0xa66 <steppermotor1Write+0x266>
            {
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     898:	a8 e2       	ldi	r26, 0x28	; 40
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	e8 e2       	ldi	r30, 0x28	; 40
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	80 68       	ori	r24, 0x80	; 128
     8a4:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     8a6:	a8 e2       	ldi	r26, 0x28	; 40
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e8 e2       	ldi	r30, 0x28	; 40
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	8f 7d       	andi	r24, 0xDF	; 223
     8b2:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     8b4:	a8 e2       	ldi	r26, 0x28	; 40
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 e2       	ldi	r30, 0x28	; 40
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	87 7f       	andi	r24, 0xF7	; 247
     8c0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     8c2:	a8 e2       	ldi	r26, 0x28	; 40
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	e8 e2       	ldi	r30, 0x28	; 40
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	8d 7f       	andi	r24, 0xFD	; 253
     8ce:	8c 93       	st	X, r24
     8d0:	ca c0       	rjmp	.+404    	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 2 :
                PORTStepper1 |= (1 << PStepper1_1);
     8d2:	a8 e2       	ldi	r26, 0x28	; 40
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e8 e2       	ldi	r30, 0x28	; 40
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	80 68       	ori	r24, 0x80	; 128
     8de:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     8e0:	a8 e2       	ldi	r26, 0x28	; 40
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e8 e2       	ldi	r30, 0x28	; 40
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     8ee:	a8 e2       	ldi	r26, 0x28	; 40
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	e8 e2       	ldi	r30, 0x28	; 40
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	87 7f       	andi	r24, 0xF7	; 247
     8fa:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     8fc:	a8 e2       	ldi	r26, 0x28	; 40
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	e8 e2       	ldi	r30, 0x28	; 40
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	8d 7f       	andi	r24, 0xFD	; 253
     908:	8c 93       	st	X, r24
     90a:	ad c0       	rjmp	.+346    	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     90c:	a8 e2       	ldi	r26, 0x28	; 40
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e8 e2       	ldi	r30, 0x28	; 40
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8f 77       	andi	r24, 0x7F	; 127
     918:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     91a:	a8 e2       	ldi	r26, 0x28	; 40
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	e8 e2       	ldi	r30, 0x28	; 40
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	80 62       	ori	r24, 0x20	; 32
     926:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     928:	a8 e2       	ldi	r26, 0x28	; 40
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	e8 e2       	ldi	r30, 0x28	; 40
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     936:	a8 e2       	ldi	r26, 0x28	; 40
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e8 e2       	ldi	r30, 0x28	; 40
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8d 7f       	andi	r24, 0xFD	; 253
     942:	8c 93       	st	X, r24
     944:	90 c0       	rjmp	.+288    	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     946:	a8 e2       	ldi	r26, 0x28	; 40
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 e2       	ldi	r30, 0x28	; 40
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	8f 77       	andi	r24, 0x7F	; 127
     952:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     954:	a8 e2       	ldi	r26, 0x28	; 40
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	e8 e2       	ldi	r30, 0x28	; 40
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	80 62       	ori	r24, 0x20	; 32
     960:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     962:	a8 e2       	ldi	r26, 0x28	; 40
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 e2       	ldi	r30, 0x28	; 40
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	88 60       	ori	r24, 0x08	; 8
     96e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     970:	a8 e2       	ldi	r26, 0x28	; 40
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	e8 e2       	ldi	r30, 0x28	; 40
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	8d 7f       	andi	r24, 0xFD	; 253
     97c:	8c 93       	st	X, r24
     97e:	73 c0       	rjmp	.+230    	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     980:	a8 e2       	ldi	r26, 0x28	; 40
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	e8 e2       	ldi	r30, 0x28	; 40
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	8f 77       	andi	r24, 0x7F	; 127
     98c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     98e:	a8 e2       	ldi	r26, 0x28	; 40
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	e8 e2       	ldi	r30, 0x28	; 40
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	8f 7d       	andi	r24, 0xDF	; 223
     99a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     99c:	a8 e2       	ldi	r26, 0x28	; 40
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e8 e2       	ldi	r30, 0x28	; 40
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	88 60       	ori	r24, 0x08	; 8
     9a8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     9aa:	a8 e2       	ldi	r26, 0x28	; 40
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 e2       	ldi	r30, 0x28	; 40
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	8c 93       	st	X, r24
     9b8:	56 c0       	rjmp	.+172    	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     9ba:	a8 e2       	ldi	r26, 0x28	; 40
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e8 e2       	ldi	r30, 0x28	; 40
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	8f 77       	andi	r24, 0x7F	; 127
     9c6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     9c8:	a8 e2       	ldi	r26, 0x28	; 40
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	e8 e2       	ldi	r30, 0x28	; 40
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8f 7d       	andi	r24, 0xDF	; 223
     9d4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     9d6:	a8 e2       	ldi	r26, 0x28	; 40
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 e2       	ldi	r30, 0x28	; 40
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	88 60       	ori	r24, 0x08	; 8
     9e2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     9e4:	a8 e2       	ldi	r26, 0x28	; 40
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e8 e2       	ldi	r30, 0x28	; 40
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	8c 93       	st	X, r24
     9f2:	39 c0       	rjmp	.+114    	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 7 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     9f4:	a8 e2       	ldi	r26, 0x28	; 40
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e8 e2       	ldi	r30, 0x28	; 40
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	8f 77       	andi	r24, 0x7F	; 127
     a00:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     a02:	a8 e2       	ldi	r26, 0x28	; 40
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e8 e2       	ldi	r30, 0x28	; 40
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	8f 7d       	andi	r24, 0xDF	; 223
     a0e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	87 7f       	andi	r24, 0xF7	; 247
     a1c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     a1e:	a8 e2       	ldi	r26, 0x28	; 40
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e8 e2       	ldi	r30, 0x28	; 40
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	82 60       	ori	r24, 0x02	; 2
     a2a:	8c 93       	st	X, r24
     a2c:	1c c0       	rjmp	.+56     	; 0xa66 <steppermotor1Write+0x266>
                break;
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     a2e:	a8 e2       	ldi	r26, 0x28	; 40
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	e8 e2       	ldi	r30, 0x28	; 40
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     a3c:	a8 e2       	ldi	r26, 0x28	; 40
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 e2       	ldi	r30, 0x28	; 40
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	8f 7d       	andi	r24, 0xDF	; 223
     a48:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     a4a:	a8 e2       	ldi	r26, 0x28	; 40
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	e8 e2       	ldi	r30, 0x28	; 40
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	87 7f       	andi	r24, 0xF7	; 247
     a56:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     a58:	a8 e2       	ldi	r26, 0x28	; 40
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e8 e2       	ldi	r30, 0x28	; 40
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	82 60       	ori	r24, 0x02	; 2
     a64:	8c 93       	st	X, r24
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	aa e7       	ldi	r26, 0x7A	; 122
     a6c:	b4 e4       	ldi	r27, 0x44	; 68
     a6e:	8d a7       	std	Y+45, r24	; 0x2d
     a70:	9e a7       	std	Y+46, r25	; 0x2e
     a72:	af a7       	std	Y+47, r26	; 0x2f
     a74:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a76:	6d a5       	ldd	r22, Y+45	; 0x2d
     a78:	7e a5       	ldd	r23, Y+46	; 0x2e
     a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     a7c:	98 a9       	ldd	r25, Y+48	; 0x30
     a7e:	2b ea       	ldi	r18, 0xAB	; 171
     a80:	3a ea       	ldi	r19, 0xAA	; 170
     a82:	4a ea       	ldi	r20, 0xAA	; 170
     a84:	50 e4       	ldi	r21, 0x40	; 64
     a86:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	89 a7       	std	Y+41, r24	; 0x29
     a90:	9a a7       	std	Y+42, r25	; 0x2a
     a92:	ab a7       	std	Y+43, r26	; 0x2b
     a94:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     a96:	69 a5       	ldd	r22, Y+41	; 0x29
     a98:	7a a5       	ldd	r23, Y+42	; 0x2a
     a9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     a9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e8       	ldi	r20, 0x80	; 128
     aa4:	5f e3       	ldi	r21, 0x3F	; 63
     aa6:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
     aaa:	88 23       	and	r24, r24
     aac:	1c f4       	brge	.+6      	; 0xab4 <steppermotor1Write+0x2b4>
		__ticks = 1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	88 a7       	std	Y+40, r24	; 0x28
     ab2:	91 c0       	rjmp	.+290    	; 0xbd6 <steppermotor1Write+0x3d6>
	else if (__tmp > 255)
     ab4:	69 a5       	ldd	r22, Y+41	; 0x29
     ab6:	7a a5       	ldd	r23, Y+42	; 0x2a
     ab8:	8b a5       	ldd	r24, Y+43	; 0x2b
     aba:	9c a5       	ldd	r25, Y+44	; 0x2c
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	4f e7       	ldi	r20, 0x7F	; 127
     ac2:	53 e4       	ldi	r21, 0x43	; 67
     ac4:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
     ac8:	18 16       	cp	r1, r24
     aca:	0c f0       	brlt	.+2      	; 0xace <steppermotor1Write+0x2ce>
     acc:	7b c0       	rjmp	.+246    	; 0xbc4 <steppermotor1Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
     ace:	6d a5       	ldd	r22, Y+45	; 0x2d
     ad0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ad2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ad4:	98 a9       	ldd	r25, Y+48	; 0x30
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	4a e7       	ldi	r20, 0x7A	; 122
     adc:	54 e4       	ldi	r21, 0x44	; 68
     ade:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	8c a3       	std	Y+36, r24	; 0x24
     ae8:	9d a3       	std	Y+37, r25	; 0x25
     aea:	ae a3       	std	Y+38, r26	; 0x26
     aec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aee:	6c a1       	ldd	r22, Y+36	; 0x24
     af0:	7d a1       	ldd	r23, Y+37	; 0x25
     af2:	8e a1       	ldd	r24, Y+38	; 0x26
     af4:	9f a1       	ldd	r25, Y+39	; 0x27
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	55 e4       	ldi	r21, 0x45	; 69
     afe:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	88 a3       	std	Y+32, r24	; 0x20
     b08:	99 a3       	std	Y+33, r25	; 0x21
     b0a:	aa a3       	std	Y+34, r26	; 0x22
     b0c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     b0e:	68 a1       	ldd	r22, Y+32	; 0x20
     b10:	79 a1       	ldd	r23, Y+33	; 0x21
     b12:	8a a1       	ldd	r24, Y+34	; 0x22
     b14:	9b a1       	ldd	r25, Y+35	; 0x23
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
     b22:	88 23       	and	r24, r24
     b24:	2c f4       	brge	.+10     	; 0xb30 <steppermotor1Write+0x330>
		__ticks = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9f 8f       	std	Y+31, r25	; 0x1f
     b2c:	8e 8f       	std	Y+30, r24	; 0x1e
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <steppermotor1Write+0x3ae>
	else if (__tmp > 65535)
     b30:	68 a1       	ldd	r22, Y+32	; 0x20
     b32:	79 a1       	ldd	r23, Y+33	; 0x21
     b34:	8a a1       	ldd	r24, Y+34	; 0x22
     b36:	9b a1       	ldd	r25, Y+35	; 0x23
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
     b44:	18 16       	cp	r1, r24
     b46:	4c f5       	brge	.+82     	; 0xb9a <steppermotor1Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b48:	6c a1       	ldd	r22, Y+36	; 0x24
     b4a:	7d a1       	ldd	r23, Y+37	; 0x25
     b4c:	8e a1       	ldd	r24, Y+38	; 0x26
     b4e:	9f a1       	ldd	r25, Y+39	; 0x27
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	bc 01       	movw	r22, r24
     b62:	cd 01       	movw	r24, r26
     b64:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9f 8f       	std	Y+31, r25	; 0x1f
     b6e:	8e 8f       	std	Y+30, r24	; 0x1e
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <steppermotor1Write+0x390>
     b72:	80 e9       	ldi	r24, 0x90	; 144
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9d 8f       	std	Y+29, r25	; 0x1d
     b78:	8c 8f       	std	Y+28, r24	; 0x1c
     b7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b7c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <steppermotor1Write+0x37e>
     b82:	9d 8f       	std	Y+29, r25	; 0x1d
     b84:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b88:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	9f 8f       	std	Y+31, r25	; 0x1f
     b8e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b92:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f7       	brne	.-38     	; 0xb72 <steppermotor1Write+0x372>
     b98:	24 c0       	rjmp	.+72     	; 0xbe2 <steppermotor1Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9a:	68 a1       	ldd	r22, Y+32	; 0x20
     b9c:	79 a1       	ldd	r23, Y+33	; 0x21
     b9e:	8a a1       	ldd	r24, Y+34	; 0x22
     ba0:	9b a1       	ldd	r25, Y+35	; 0x23
     ba2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	9f 8f       	std	Y+31, r25	; 0x1f
     bac:	8e 8f       	std	Y+30, r24	; 0x1e
     bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bb2:	9b 8f       	std	Y+27, r25	; 0x1b
     bb4:	8a 8f       	std	Y+26, r24	; 0x1a
     bb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <steppermotor1Write+0x3ba>
     bbe:	9b 8f       	std	Y+27, r25	; 0x1b
     bc0:	8a 8f       	std	Y+26, r24	; 0x1a
     bc2:	0f c0       	rjmp	.+30     	; 0xbe2 <steppermotor1Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bc4:	69 a5       	ldd	r22, Y+41	; 0x29
     bc6:	7a a5       	ldd	r23, Y+42	; 0x2a
     bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
     bca:	9c a5       	ldd	r25, Y+44	; 0x2c
     bcc:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	88 a7       	std	Y+40, r24	; 0x28
     bd6:	88 a5       	ldd	r24, Y+40	; 0x28
     bd8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bda:	89 8d       	ldd	r24, Y+25	; 0x19
     bdc:	8a 95       	dec	r24
     bde:	f1 f7       	brne	.-4      	; 0xbdc <steppermotor1Write+0x3dc>
     be0:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor1Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     be2:	8b a9       	ldd	r24, Y+51	; 0x33
     be4:	9c a9       	ldd	r25, Y+52	; 0x34
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9c ab       	std	Y+52, r25	; 0x34
     bea:	8b ab       	std	Y+51, r24	; 0x33
     bec:	8b a9       	ldd	r24, Y+51	; 0x33
     bee:	9c a9       	ldd	r25, Y+52	; 0x34
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	91 05       	cpc	r25, r1
     bf4:	0c f4       	brge	.+2      	; 0xbf8 <steppermotor1Write+0x3f8>
     bf6:	16 ce       	rjmp	.-980    	; 0x824 <steppermotor1Write+0x24>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
     bf8:	1e aa       	std	Y+54, r1	; 0x36
     bfa:	1d aa       	std	Y+53, r1	; 0x35
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
}

void steppermotor1Write(int a)
{
    while(a  == 1)
     bfc:	8d a9       	ldd	r24, Y+53	; 0x35
     bfe:	9e a9       	ldd	r25, Y+54	; 0x36
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	91 05       	cpc	r25, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <steppermotor1Write+0x408>
     c06:	09 ce       	rjmp	.-1006   	; 0x81a <steppermotor1Write+0x1a>
     c08:	f0 c1       	rjmp	.+992    	; 0xfea <steppermotor1Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9a ab       	std	Y+50, r25	; 0x32
     c10:	89 ab       	std	Y+49, r24	; 0x31
     c12:	e3 c1       	rjmp	.+966    	; 0xfda <steppermotor1Write+0x7da>
        {
            switch (i)
     c14:	89 a9       	ldd	r24, Y+49	; 0x31
     c16:	9a a9       	ldd	r25, Y+50	; 0x32
     c18:	9a af       	std	Y+58, r25	; 0x3a
     c1a:	89 af       	std	Y+57, r24	; 0x39
     c1c:	89 ad       	ldd	r24, Y+57	; 0x39
     c1e:	9a ad       	ldd	r25, Y+58	; 0x3a
     c20:	84 30       	cpi	r24, 0x04	; 4
     c22:	91 05       	cpc	r25, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <steppermotor1Write+0x428>
     c26:	a3 c0       	rjmp	.+326    	; 0xd6e <steppermotor1Write+0x56e>
     c28:	89 ad       	ldd	r24, Y+57	; 0x39
     c2a:	9a ad       	ldd	r25, Y+58	; 0x3a
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	91 05       	cpc	r25, r1
     c30:	94 f4       	brge	.+36     	; 0xc56 <steppermotor1Write+0x456>
     c32:	89 ad       	ldd	r24, Y+57	; 0x39
     c34:	9a ad       	ldd	r25, Y+58	; 0x3a
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <steppermotor1Write+0x43e>
     c3c:	5e c0       	rjmp	.+188    	; 0xcfa <steppermotor1Write+0x4fa>
     c3e:	89 ad       	ldd	r24, Y+57	; 0x39
     c40:	9a ad       	ldd	r25, Y+58	; 0x3a
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	91 05       	cpc	r25, r1
     c46:	0c f0       	brlt	.+2      	; 0xc4a <steppermotor1Write+0x44a>
     c48:	75 c0       	rjmp	.+234    	; 0xd34 <steppermotor1Write+0x534>
     c4a:	89 ad       	ldd	r24, Y+57	; 0x39
     c4c:	9a ad       	ldd	r25, Y+58	; 0x3a
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	b1 f1       	breq	.+108    	; 0xcc0 <steppermotor1Write+0x4c0>
     c54:	ff c0       	rjmp	.+510    	; 0xe54 <steppermotor1Write+0x654>
     c56:	89 ad       	ldd	r24, Y+57	; 0x39
     c58:	9a ad       	ldd	r25, Y+58	; 0x3a
     c5a:	86 30       	cpi	r24, 0x06	; 6
     c5c:	91 05       	cpc	r25, r1
     c5e:	09 f4       	brne	.+2      	; 0xc62 <steppermotor1Write+0x462>
     c60:	c0 c0       	rjmp	.+384    	; 0xde2 <steppermotor1Write+0x5e2>
     c62:	89 ad       	ldd	r24, Y+57	; 0x39
     c64:	9a ad       	ldd	r25, Y+58	; 0x3a
     c66:	86 30       	cpi	r24, 0x06	; 6
     c68:	91 05       	cpc	r25, r1
     c6a:	0c f4       	brge	.+2      	; 0xc6e <steppermotor1Write+0x46e>
     c6c:	9d c0       	rjmp	.+314    	; 0xda8 <steppermotor1Write+0x5a8>
     c6e:	89 ad       	ldd	r24, Y+57	; 0x39
     c70:	9a ad       	ldd	r25, Y+58	; 0x3a
     c72:	87 30       	cpi	r24, 0x07	; 7
     c74:	91 05       	cpc	r25, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <steppermotor1Write+0x47a>
     c78:	d1 c0       	rjmp	.+418    	; 0xe1c <steppermotor1Write+0x61c>
     c7a:	89 ad       	ldd	r24, Y+57	; 0x39
     c7c:	9a ad       	ldd	r25, Y+58	; 0x3a
     c7e:	88 30       	cpi	r24, 0x08	; 8
     c80:	91 05       	cpc	r25, r1
     c82:	09 f0       	breq	.+2      	; 0xc86 <steppermotor1Write+0x486>
     c84:	e7 c0       	rjmp	.+462    	; 0xe54 <steppermotor1Write+0x654>
            {
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     c86:	a8 e2       	ldi	r26, 0x28	; 40
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 e2       	ldi	r30, 0x28	; 40
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     c94:	a8 e2       	ldi	r26, 0x28	; 40
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e8 e2       	ldi	r30, 0x28	; 40
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 7d       	andi	r24, 0xDF	; 223
     ca0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     ca2:	a8 e2       	ldi	r26, 0x28	; 40
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e8 e2       	ldi	r30, 0x28	; 40
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	87 7f       	andi	r24, 0xF7	; 247
     cae:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     cb0:	a8 e2       	ldi	r26, 0x28	; 40
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e8 e2       	ldi	r30, 0x28	; 40
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	8c 93       	st	X, r24
     cbe:	ca c0       	rjmp	.+404    	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     cc0:	a8 e2       	ldi	r26, 0x28	; 40
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e8 e2       	ldi	r30, 0x28	; 40
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cce:	a8 e2       	ldi	r26, 0x28	; 40
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e8 e2       	ldi	r30, 0x28	; 40
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 62       	ori	r24, 0x20	; 32
     cda:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     cdc:	a8 e2       	ldi	r26, 0x28	; 40
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e8 e2       	ldi	r30, 0x28	; 40
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     cea:	a8 e2       	ldi	r26, 0x28	; 40
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 e2       	ldi	r30, 0x28	; 40
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	8c 93       	st	X, r24
     cf8:	ad c0       	rjmp	.+346    	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 2 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     cfa:	a8 e2       	ldi	r26, 0x28	; 40
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e8 e2       	ldi	r30, 0x28	; 40
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     d08:	a8 e2       	ldi	r26, 0x28	; 40
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e8 e2       	ldi	r30, 0x28	; 40
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     d16:	a8 e2       	ldi	r26, 0x28	; 40
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e8 e2       	ldi	r30, 0x28	; 40
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	87 7f       	andi	r24, 0xF7	; 247
     d22:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d24:	a8 e2       	ldi	r26, 0x28	; 40
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e2       	ldi	r30, 0x28	; 40
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8d 7f       	andi	r24, 0xFD	; 253
     d30:	8c 93       	st	X, r24
     d32:	90 c0       	rjmp	.+288    	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d34:	a8 e2       	ldi	r26, 0x28	; 40
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e8 e2       	ldi	r30, 0x28	; 40
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 77       	andi	r24, 0x7F	; 127
     d40:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     d42:	a8 e2       	ldi	r26, 0x28	; 40
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e8 e2       	ldi	r30, 0x28	; 40
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 62       	ori	r24, 0x20	; 32
     d4e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d50:	a8 e2       	ldi	r26, 0x28	; 40
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e8 e2       	ldi	r30, 0x28	; 40
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	88 60       	ori	r24, 0x08	; 8
     d5c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d5e:	a8 e2       	ldi	r26, 0x28	; 40
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e8 e2       	ldi	r30, 0x28	; 40
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8d 7f       	andi	r24, 0xFD	; 253
     d6a:	8c 93       	st	X, r24
     d6c:	73 c0       	rjmp	.+230    	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d6e:	a8 e2       	ldi	r26, 0x28	; 40
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e8 e2       	ldi	r30, 0x28	; 40
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8f 77       	andi	r24, 0x7F	; 127
     d7a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d7c:	a8 e2       	ldi	r26, 0x28	; 40
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e8 e2       	ldi	r30, 0x28	; 40
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 7d       	andi	r24, 0xDF	; 223
     d88:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d8a:	a8 e2       	ldi	r26, 0x28	; 40
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e8 e2       	ldi	r30, 0x28	; 40
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d98:	a8 e2       	ldi	r26, 0x28	; 40
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e2       	ldi	r30, 0x28	; 40
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8d 7f       	andi	r24, 0xFD	; 253
     da4:	8c 93       	st	X, r24
     da6:	56 c0       	rjmp	.+172    	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     da8:	a8 e2       	ldi	r26, 0x28	; 40
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e8 e2       	ldi	r30, 0x28	; 40
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 77       	andi	r24, 0x7F	; 127
     db4:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     db6:	a8 e2       	ldi	r26, 0x28	; 40
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e8 e2       	ldi	r30, 0x28	; 40
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8f 7d       	andi	r24, 0xDF	; 223
     dc2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     dc4:	a8 e2       	ldi	r26, 0x28	; 40
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e8 e2       	ldi	r30, 0x28	; 40
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	88 60       	ori	r24, 0x08	; 8
     dd0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     dd2:	a8 e2       	ldi	r26, 0x28	; 40
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e2       	ldi	r30, 0x28	; 40
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	8c 93       	st	X, r24
     de0:	39 c0       	rjmp	.+114    	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     de2:	a8 e2       	ldi	r26, 0x28	; 40
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e2       	ldi	r30, 0x28	; 40
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 77       	andi	r24, 0x7F	; 127
     dee:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     df0:	a8 e2       	ldi	r26, 0x28	; 40
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e2       	ldi	r30, 0x28	; 40
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     dfe:	a8 e2       	ldi	r26, 0x28	; 40
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e8 e2       	ldi	r30, 0x28	; 40
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     e0c:	a8 e2       	ldi	r26, 0x28	; 40
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e2       	ldi	r30, 0x28	; 40
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	8c 93       	st	X, r24
     e1a:	1c c0       	rjmp	.+56     	; 0xe54 <steppermotor1Write+0x654>
                break;
            case 7 :
                PORTStepper1 |= (1 << PStepper1_1);
     e1c:	a8 e2       	ldi	r26, 0x28	; 40
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 e2       	ldi	r30, 0x28	; 40
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 68       	ori	r24, 0x80	; 128
     e28:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     e2a:	a8 e2       	ldi	r26, 0x28	; 40
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 e2       	ldi	r30, 0x28	; 40
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7d       	andi	r24, 0xDF	; 223
     e36:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     e38:	a8 e2       	ldi	r26, 0x28	; 40
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 e2       	ldi	r30, 0x28	; 40
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     e46:	a8 e2       	ldi	r26, 0x28	; 40
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e8 e2       	ldi	r30, 0x28	; 40
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	8c 93       	st	X, r24
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	aa e7       	ldi	r26, 0x7A	; 122
     e5a:	b4 e4       	ldi	r27, 0x44	; 68
     e5c:	8d 8b       	std	Y+21, r24	; 0x15
     e5e:	9e 8b       	std	Y+22, r25	; 0x16
     e60:	af 8b       	std	Y+23, r26	; 0x17
     e62:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e64:	6d 89       	ldd	r22, Y+21	; 0x15
     e66:	7e 89       	ldd	r23, Y+22	; 0x16
     e68:	8f 89       	ldd	r24, Y+23	; 0x17
     e6a:	98 8d       	ldd	r25, Y+24	; 0x18
     e6c:	2b ea       	ldi	r18, 0xAB	; 171
     e6e:	3a ea       	ldi	r19, 0xAA	; 170
     e70:	4a ea       	ldi	r20, 0xAA	; 170
     e72:	50 e4       	ldi	r21, 0x40	; 64
     e74:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	89 8b       	std	Y+17, r24	; 0x11
     e7e:	9a 8b       	std	Y+18, r25	; 0x12
     e80:	ab 8b       	std	Y+19, r26	; 0x13
     e82:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e84:	69 89       	ldd	r22, Y+17	; 0x11
     e86:	7a 89       	ldd	r23, Y+18	; 0x12
     e88:	8b 89       	ldd	r24, Y+19	; 0x13
     e8a:	9c 89       	ldd	r25, Y+20	; 0x14
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
     e98:	88 23       	and	r24, r24
     e9a:	1c f4       	brge	.+6      	; 0xea2 <steppermotor1Write+0x6a2>
		__ticks = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	88 8b       	std	Y+16, r24	; 0x10
     ea0:	91 c0       	rjmp	.+290    	; 0xfc4 <steppermotor1Write+0x7c4>
	else if (__tmp > 255)
     ea2:	69 89       	ldd	r22, Y+17	; 0x11
     ea4:	7a 89       	ldd	r23, Y+18	; 0x12
     ea6:	8b 89       	ldd	r24, Y+19	; 0x13
     ea8:	9c 89       	ldd	r25, Y+20	; 0x14
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	53 e4       	ldi	r21, 0x43	; 67
     eb2:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	0c f0       	brlt	.+2      	; 0xebc <steppermotor1Write+0x6bc>
     eba:	7b c0       	rjmp	.+246    	; 0xfb2 <steppermotor1Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
     ebc:	6d 89       	ldd	r22, Y+21	; 0x15
     ebe:	7e 89       	ldd	r23, Y+22	; 0x16
     ec0:	8f 89       	ldd	r24, Y+23	; 0x17
     ec2:	98 8d       	ldd	r25, Y+24	; 0x18
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a e7       	ldi	r20, 0x7A	; 122
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8c 87       	std	Y+12, r24	; 0x0c
     ed6:	9d 87       	std	Y+13, r25	; 0x0d
     ed8:	ae 87       	std	Y+14, r26	; 0x0e
     eda:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     edc:	6c 85       	ldd	r22, Y+12	; 0x0c
     ede:	7d 85       	ldd	r23, Y+13	; 0x0d
     ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a e7       	ldi	r20, 0x7A	; 122
     eea:	55 e4       	ldi	r21, 0x45	; 69
     eec:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	88 87       	std	Y+8, r24	; 0x08
     ef6:	99 87       	std	Y+9, r25	; 0x09
     ef8:	aa 87       	std	Y+10, r26	; 0x0a
     efa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     efc:	68 85       	ldd	r22, Y+8	; 0x08
     efe:	79 85       	ldd	r23, Y+9	; 0x09
     f00:	8a 85       	ldd	r24, Y+10	; 0x0a
     f02:	9b 85       	ldd	r25, Y+11	; 0x0b
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e8       	ldi	r20, 0x80	; 128
     f0a:	5f e3       	ldi	r21, 0x3F	; 63
     f0c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
     f10:	88 23       	and	r24, r24
     f12:	2c f4       	brge	.+10     	; 0xf1e <steppermotor1Write+0x71e>
		__ticks = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	8e 83       	std	Y+6, r24	; 0x06
     f1c:	3f c0       	rjmp	.+126    	; 0xf9c <steppermotor1Write+0x79c>
	else if (__tmp > 65535)
     f1e:	68 85       	ldd	r22, Y+8	; 0x08
     f20:	79 85       	ldd	r23, Y+9	; 0x09
     f22:	8a 85       	ldd	r24, Y+10	; 0x0a
     f24:	9b 85       	ldd	r25, Y+11	; 0x0b
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	3f ef       	ldi	r19, 0xFF	; 255
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	57 e4       	ldi	r21, 0x47	; 71
     f2e:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
     f32:	18 16       	cp	r1, r24
     f34:	4c f5       	brge	.+82     	; 0xf88 <steppermotor1Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	6c 85       	ldd	r22, Y+12	; 0x0c
     f38:	7d 85       	ldd	r23, Y+13	; 0x0d
     f3a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f3c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e2       	ldi	r20, 0x20	; 32
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9f 83       	std	Y+7, r25	; 0x07
     f5c:	8e 83       	std	Y+6, r24	; 0x06
     f5e:	0f c0       	rjmp	.+30     	; 0xf7e <steppermotor1Write+0x77e>
     f60:	80 e9       	ldi	r24, 0x90	; 144
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	9d 83       	std	Y+5, r25	; 0x05
     f66:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <steppermotor1Write+0x76c>
     f70:	9d 83       	std	Y+5, r25	; 0x05
     f72:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	9f 83       	std	Y+7, r25	; 0x07
     f7c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	9f 81       	ldd	r25, Y+7	; 0x07
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	69 f7       	brne	.-38     	; 0xf60 <steppermotor1Write+0x760>
     f86:	24 c0       	rjmp	.+72     	; 0xfd0 <steppermotor1Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f88:	68 85       	ldd	r22, Y+8	; 0x08
     f8a:	79 85       	ldd	r23, Y+9	; 0x09
     f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f90:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9f 83       	std	Y+7, r25	; 0x07
     f9a:	8e 83       	std	Y+6, r24	; 0x06
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	9f 81       	ldd	r25, Y+7	; 0x07
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	9b 81       	ldd	r25, Y+3	; 0x03
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <steppermotor1Write+0x7a8>
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	0f c0       	rjmp	.+30     	; 0xfd0 <steppermotor1Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fb2:	69 89       	ldd	r22, Y+17	; 0x11
     fb4:	7a 89       	ldd	r23, Y+18	; 0x12
     fb6:	8b 89       	ldd	r24, Y+19	; 0x13
     fb8:	9c 89       	ldd	r25, Y+20	; 0x14
     fba:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	88 8b       	std	Y+16, r24	; 0x10
     fc4:	88 89       	ldd	r24, Y+16	; 0x10
     fc6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8a 95       	dec	r24
     fcc:	f1 f7       	brne	.-4      	; 0xfca <steppermotor1Write+0x7ca>
     fce:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
     fd0:	89 a9       	ldd	r24, Y+49	; 0x31
     fd2:	9a a9       	ldd	r25, Y+50	; 0x32
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9a ab       	std	Y+50, r25	; 0x32
     fd8:	89 ab       	std	Y+49, r24	; 0x31
     fda:	89 a9       	ldd	r24, Y+49	; 0x31
     fdc:	9a a9       	ldd	r25, Y+50	; 0x32
     fde:	18 16       	cp	r1, r24
     fe0:	19 06       	cpc	r1, r25
     fe2:	0c f4       	brge	.+2      	; 0xfe6 <steppermotor1Write+0x7e6>
     fe4:	17 ce       	rjmp	.-978    	; 0xc14 <steppermotor1Write+0x414>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
     fe6:	1e aa       	std	Y+54, r1	; 0x36
     fe8:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
     fea:	8d a9       	ldd	r24, Y+53	; 0x35
     fec:	9e a9       	ldd	r25, Y+54	; 0x36
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <steppermotor1Write+0x7f6>
     ff4:	0a ce       	rjmp	.-1004   	; 0xc0a <steppermotor1Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
     ff6:	ea 96       	adiw	r28, 0x3a	; 58
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <steppermotor2Write>:

void steppermotor2Write(int a)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	ea 97       	sbiw	r28, 0x3a	; 58
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	9e ab       	std	Y+54, r25	; 0x36
    101e:	8d ab       	std	Y+53, r24	; 0x35
    1020:	f1 c1       	rjmp	.+994    	; 0x1404 <steppermotor2Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9c ab       	std	Y+52, r25	; 0x34
    1028:	8b ab       	std	Y+51, r24	; 0x33
    102a:	e4 c1       	rjmp	.+968    	; 0x13f4 <steppermotor2Write+0x3ec>
        {
            switch (i)
    102c:	8b a9       	ldd	r24, Y+51	; 0x33
    102e:	9c a9       	ldd	r25, Y+52	; 0x34
    1030:	98 af       	std	Y+56, r25	; 0x38
    1032:	8f ab       	std	Y+55, r24	; 0x37
    1034:	8f a9       	ldd	r24, Y+55	; 0x37
    1036:	98 ad       	ldd	r25, Y+56	; 0x38
    1038:	84 30       	cpi	r24, 0x04	; 4
    103a:	91 05       	cpc	r25, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <steppermotor2Write+0x38>
    103e:	87 c0       	rjmp	.+270    	; 0x114e <steppermotor2Write+0x146>
    1040:	8f a9       	ldd	r24, Y+55	; 0x37
    1042:	98 ad       	ldd	r25, Y+56	; 0x38
    1044:	85 30       	cpi	r24, 0x05	; 5
    1046:	91 05       	cpc	r25, r1
    1048:	94 f4       	brge	.+36     	; 0x106e <steppermotor2Write+0x66>
    104a:	8f a9       	ldd	r24, Y+55	; 0x37
    104c:	98 ad       	ldd	r25, Y+56	; 0x38
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <steppermotor2Write+0x4e>
    1054:	42 c0       	rjmp	.+132    	; 0x10da <steppermotor2Write+0xd2>
    1056:	8f a9       	ldd	r24, Y+55	; 0x37
    1058:	98 ad       	ldd	r25, Y+56	; 0x38
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	0c f0       	brlt	.+2      	; 0x1062 <steppermotor2Write+0x5a>
    1060:	59 c0       	rjmp	.+178    	; 0x1114 <steppermotor2Write+0x10c>
    1062:	8f a9       	ldd	r24, Y+55	; 0x37
    1064:	98 ad       	ldd	r25, Y+56	; 0x38
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	d1 f0       	breq	.+52     	; 0x10a0 <steppermotor2Write+0x98>
    106c:	00 c1       	rjmp	.+512    	; 0x126e <steppermotor2Write+0x266>
    106e:	8f a9       	ldd	r24, Y+55	; 0x37
    1070:	98 ad       	ldd	r25, Y+56	; 0x38
    1072:	86 30       	cpi	r24, 0x06	; 6
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <steppermotor2Write+0x72>
    1078:	a4 c0       	rjmp	.+328    	; 0x11c2 <steppermotor2Write+0x1ba>
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	86 30       	cpi	r24, 0x06	; 6
    1080:	91 05       	cpc	r25, r1
    1082:	0c f4       	brge	.+2      	; 0x1086 <steppermotor2Write+0x7e>
    1084:	81 c0       	rjmp	.+258    	; 0x1188 <steppermotor2Write+0x180>
    1086:	8f a9       	ldd	r24, Y+55	; 0x37
    1088:	98 ad       	ldd	r25, Y+56	; 0x38
    108a:	87 30       	cpi	r24, 0x07	; 7
    108c:	91 05       	cpc	r25, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <steppermotor2Write+0x8a>
    1090:	b5 c0       	rjmp	.+362    	; 0x11fc <steppermotor2Write+0x1f4>
    1092:	8f a9       	ldd	r24, Y+55	; 0x37
    1094:	98 ad       	ldd	r25, Y+56	; 0x38
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <steppermotor2Write+0x96>
    109c:	cc c0       	rjmp	.+408    	; 0x1236 <steppermotor2Write+0x22e>
    109e:	e7 c0       	rjmp	.+462    	; 0x126e <steppermotor2Write+0x266>
            {
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    10a0:	a8 e2       	ldi	r26, 0x28	; 40
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e2       	ldi	r30, 0x28	; 40
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    10ae:	a8 e2       	ldi	r26, 0x28	; 40
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e2       	ldi	r30, 0x28	; 40
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7e       	andi	r24, 0xEF	; 239
    10ba:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    10bc:	a8 e2       	ldi	r26, 0x28	; 40
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e2       	ldi	r30, 0x28	; 40
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8b 7f       	andi	r24, 0xFB	; 251
    10c8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    10ca:	a8 e2       	ldi	r26, 0x28	; 40
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e2       	ldi	r30, 0x28	; 40
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8e 7f       	andi	r24, 0xFE	; 254
    10d6:	8c 93       	st	X, r24
    10d8:	ca c0       	rjmp	.+404    	; 0x126e <steppermotor2Write+0x266>
                break;
            case 2 :
                PORTStepper2 |= (1 << PStepper2_1);
    10da:	a8 e2       	ldi	r26, 0x28	; 40
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e2       	ldi	r30, 0x28	; 40
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    10e8:	a8 e2       	ldi	r26, 0x28	; 40
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e2       	ldi	r30, 0x28	; 40
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 61       	ori	r24, 0x10	; 16
    10f4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    10f6:	a8 e2       	ldi	r26, 0x28	; 40
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e2       	ldi	r30, 0x28	; 40
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8b 7f       	andi	r24, 0xFB	; 251
    1102:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1104:	a8 e2       	ldi	r26, 0x28	; 40
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 e2       	ldi	r30, 0x28	; 40
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8e 7f       	andi	r24, 0xFE	; 254
    1110:	8c 93       	st	X, r24
    1112:	ad c0       	rjmp	.+346    	; 0x126e <steppermotor2Write+0x266>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1114:	a8 e2       	ldi	r26, 0x28	; 40
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e8 e2       	ldi	r30, 0x28	; 40
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7b       	andi	r24, 0xBF	; 191
    1120:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1122:	a8 e2       	ldi	r26, 0x28	; 40
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e8 e2       	ldi	r30, 0x28	; 40
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 61       	ori	r24, 0x10	; 16
    112e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1130:	a8 e2       	ldi	r26, 0x28	; 40
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e2       	ldi	r30, 0x28	; 40
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8b 7f       	andi	r24, 0xFB	; 251
    113c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    113e:	a8 e2       	ldi	r26, 0x28	; 40
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e2       	ldi	r30, 0x28	; 40
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8e 7f       	andi	r24, 0xFE	; 254
    114a:	8c 93       	st	X, r24
    114c:	90 c0       	rjmp	.+288    	; 0x126e <steppermotor2Write+0x266>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    114e:	a8 e2       	ldi	r26, 0x28	; 40
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e2       	ldi	r30, 0x28	; 40
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8f 7b       	andi	r24, 0xBF	; 191
    115a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    115c:	a8 e2       	ldi	r26, 0x28	; 40
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e2       	ldi	r30, 0x28	; 40
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 61       	ori	r24, 0x10	; 16
    1168:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    116a:	a8 e2       	ldi	r26, 0x28	; 40
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e2       	ldi	r30, 0x28	; 40
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1178:	a8 e2       	ldi	r26, 0x28	; 40
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e8 e2       	ldi	r30, 0x28	; 40
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
    1186:	73 c0       	rjmp	.+230    	; 0x126e <steppermotor2Write+0x266>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1188:	a8 e2       	ldi	r26, 0x28	; 40
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e2       	ldi	r30, 0x28	; 40
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8f 7b       	andi	r24, 0xBF	; 191
    1194:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1196:	a8 e2       	ldi	r26, 0x28	; 40
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e8 e2       	ldi	r30, 0x28	; 40
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7e       	andi	r24, 0xEF	; 239
    11a2:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    11a4:	a8 e2       	ldi	r26, 0x28	; 40
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e8 e2       	ldi	r30, 0x28	; 40
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	84 60       	ori	r24, 0x04	; 4
    11b0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    11b2:	a8 e2       	ldi	r26, 0x28	; 40
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e8 e2       	ldi	r30, 0x28	; 40
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8e 7f       	andi	r24, 0xFE	; 254
    11be:	8c 93       	st	X, r24
    11c0:	56 c0       	rjmp	.+172    	; 0x126e <steppermotor2Write+0x266>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    11c2:	a8 e2       	ldi	r26, 0x28	; 40
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e2       	ldi	r30, 0x28	; 40
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    11d0:	a8 e2       	ldi	r26, 0x28	; 40
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e2       	ldi	r30, 0x28	; 40
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	8f 7e       	andi	r24, 0xEF	; 239
    11dc:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    11de:	a8 e2       	ldi	r26, 0x28	; 40
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e8 e2       	ldi	r30, 0x28	; 40
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	84 60       	ori	r24, 0x04	; 4
    11ea:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    11ec:	a8 e2       	ldi	r26, 0x28	; 40
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e8 e2       	ldi	r30, 0x28	; 40
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	8c 93       	st	X, r24
    11fa:	39 c0       	rjmp	.+114    	; 0x126e <steppermotor2Write+0x266>
                break;
            case 7 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    11fc:	a8 e2       	ldi	r26, 0x28	; 40
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e8 e2       	ldi	r30, 0x28	; 40
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8f 7b       	andi	r24, 0xBF	; 191
    1208:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    120a:	a8 e2       	ldi	r26, 0x28	; 40
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e2       	ldi	r30, 0x28	; 40
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8f 7e       	andi	r24, 0xEF	; 239
    1216:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1218:	a8 e2       	ldi	r26, 0x28	; 40
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e2       	ldi	r30, 0x28	; 40
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8b 7f       	andi	r24, 0xFB	; 251
    1224:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1226:	a8 e2       	ldi	r26, 0x28	; 40
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e8 e2       	ldi	r30, 0x28	; 40
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	8c 93       	st	X, r24
    1234:	1c c0       	rjmp	.+56     	; 0x126e <steppermotor2Write+0x266>
                break;
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1236:	a8 e2       	ldi	r26, 0x28	; 40
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e8 e2       	ldi	r30, 0x28	; 40
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1244:	a8 e2       	ldi	r26, 0x28	; 40
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e2       	ldi	r30, 0x28	; 40
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7e       	andi	r24, 0xEF	; 239
    1250:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1252:	a8 e2       	ldi	r26, 0x28	; 40
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e2       	ldi	r30, 0x28	; 40
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8b 7f       	andi	r24, 0xFB	; 251
    125e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1260:	a8 e2       	ldi	r26, 0x28	; 40
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e2       	ldi	r30, 0x28	; 40
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	8c 93       	st	X, r24
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	aa e7       	ldi	r26, 0x7A	; 122
    1274:	b4 e4       	ldi	r27, 0x44	; 68
    1276:	8d a7       	std	Y+45, r24	; 0x2d
    1278:	9e a7       	std	Y+46, r25	; 0x2e
    127a:	af a7       	std	Y+47, r26	; 0x2f
    127c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    127e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1280:	7e a5       	ldd	r23, Y+46	; 0x2e
    1282:	8f a5       	ldd	r24, Y+47	; 0x2f
    1284:	98 a9       	ldd	r25, Y+48	; 0x30
    1286:	2b ea       	ldi	r18, 0xAB	; 171
    1288:	3a ea       	ldi	r19, 0xAA	; 170
    128a:	4a ea       	ldi	r20, 0xAA	; 170
    128c:	50 e4       	ldi	r21, 0x40	; 64
    128e:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	89 a7       	std	Y+41, r24	; 0x29
    1298:	9a a7       	std	Y+42, r25	; 0x2a
    129a:	ab a7       	std	Y+43, r26	; 0x2b
    129c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    129e:	69 a5       	ldd	r22, Y+41	; 0x29
    12a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    12a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    12a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e8       	ldi	r20, 0x80	; 128
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    12b2:	88 23       	and	r24, r24
    12b4:	1c f4       	brge	.+6      	; 0x12bc <steppermotor2Write+0x2b4>
		__ticks = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	88 a7       	std	Y+40, r24	; 0x28
    12ba:	91 c0       	rjmp	.+290    	; 0x13de <steppermotor2Write+0x3d6>
	else if (__tmp > 255)
    12bc:	69 a5       	ldd	r22, Y+41	; 0x29
    12be:	7a a5       	ldd	r23, Y+42	; 0x2a
    12c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	53 e4       	ldi	r21, 0x43	; 67
    12cc:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	0c f0       	brlt	.+2      	; 0x12d6 <steppermotor2Write+0x2ce>
    12d4:	7b c0       	rjmp	.+246    	; 0x13cc <steppermotor2Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    12d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    12d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    12da:	8f a5       	ldd	r24, Y+47	; 0x2f
    12dc:	98 a9       	ldd	r25, Y+48	; 0x30
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a e7       	ldi	r20, 0x7A	; 122
    12e4:	54 e4       	ldi	r21, 0x44	; 68
    12e6:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8c a3       	std	Y+36, r24	; 0x24
    12f0:	9d a3       	std	Y+37, r25	; 0x25
    12f2:	ae a3       	std	Y+38, r26	; 0x26
    12f4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f6:	6c a1       	ldd	r22, Y+36	; 0x24
    12f8:	7d a1       	ldd	r23, Y+37	; 0x25
    12fa:	8e a1       	ldd	r24, Y+38	; 0x26
    12fc:	9f a1       	ldd	r25, Y+39	; 0x27
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a e7       	ldi	r20, 0x7A	; 122
    1304:	55 e4       	ldi	r21, 0x45	; 69
    1306:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	88 a3       	std	Y+32, r24	; 0x20
    1310:	99 a3       	std	Y+33, r25	; 0x21
    1312:	aa a3       	std	Y+34, r26	; 0x22
    1314:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1316:	68 a1       	ldd	r22, Y+32	; 0x20
    1318:	79 a1       	ldd	r23, Y+33	; 0x21
    131a:	8a a1       	ldd	r24, Y+34	; 0x22
    131c:	9b a1       	ldd	r25, Y+35	; 0x23
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    132a:	88 23       	and	r24, r24
    132c:	2c f4       	brge	.+10     	; 0x1338 <steppermotor2Write+0x330>
		__ticks = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9f 8f       	std	Y+31, r25	; 0x1f
    1334:	8e 8f       	std	Y+30, r24	; 0x1e
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <steppermotor2Write+0x3ae>
	else if (__tmp > 65535)
    1338:	68 a1       	ldd	r22, Y+32	; 0x20
    133a:	79 a1       	ldd	r23, Y+33	; 0x21
    133c:	8a a1       	ldd	r24, Y+34	; 0x22
    133e:	9b a1       	ldd	r25, Y+35	; 0x23
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    134c:	18 16       	cp	r1, r24
    134e:	4c f5       	brge	.+82     	; 0x13a2 <steppermotor2Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1350:	6c a1       	ldd	r22, Y+36	; 0x24
    1352:	7d a1       	ldd	r23, Y+37	; 0x25
    1354:	8e a1       	ldd	r24, Y+38	; 0x26
    1356:	9f a1       	ldd	r25, Y+39	; 0x27
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	9f 8f       	std	Y+31, r25	; 0x1f
    1376:	8e 8f       	std	Y+30, r24	; 0x1e
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <steppermotor2Write+0x390>
    137a:	80 e9       	ldi	r24, 0x90	; 144
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	9d 8f       	std	Y+29, r25	; 0x1d
    1380:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1382:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1384:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <steppermotor2Write+0x37e>
    138a:	9d 8f       	std	Y+29, r25	; 0x1d
    138c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1390:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	9f 8f       	std	Y+31, r25	; 0x1f
    1396:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1398:	8e 8d       	ldd	r24, Y+30	; 0x1e
    139a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	69 f7       	brne	.-38     	; 0x137a <steppermotor2Write+0x372>
    13a0:	24 c0       	rjmp	.+72     	; 0x13ea <steppermotor2Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a2:	68 a1       	ldd	r22, Y+32	; 0x20
    13a4:	79 a1       	ldd	r23, Y+33	; 0x21
    13a6:	8a a1       	ldd	r24, Y+34	; 0x22
    13a8:	9b a1       	ldd	r25, Y+35	; 0x23
    13aa:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9f 8f       	std	Y+31, r25	; 0x1f
    13b4:	8e 8f       	std	Y+30, r24	; 0x1e
    13b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13ba:	9b 8f       	std	Y+27, r25	; 0x1b
    13bc:	8a 8f       	std	Y+26, r24	; 0x1a
    13be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <steppermotor2Write+0x3ba>
    13c6:	9b 8f       	std	Y+27, r25	; 0x1b
    13c8:	8a 8f       	std	Y+26, r24	; 0x1a
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <steppermotor2Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13cc:	69 a5       	ldd	r22, Y+41	; 0x29
    13ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    13d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13d4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	88 a7       	std	Y+40, r24	; 0x28
    13de:	88 a5       	ldd	r24, Y+40	; 0x28
    13e0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13e2:	89 8d       	ldd	r24, Y+25	; 0x19
    13e4:	8a 95       	dec	r24
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <steppermotor2Write+0x3dc>
    13e8:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor2Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    13ea:	8b a9       	ldd	r24, Y+51	; 0x33
    13ec:	9c a9       	ldd	r25, Y+52	; 0x34
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	9c ab       	std	Y+52, r25	; 0x34
    13f2:	8b ab       	std	Y+51, r24	; 0x33
    13f4:	8b a9       	ldd	r24, Y+51	; 0x33
    13f6:	9c a9       	ldd	r25, Y+52	; 0x34
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	91 05       	cpc	r25, r1
    13fc:	0c f4       	brge	.+2      	; 0x1400 <steppermotor2Write+0x3f8>
    13fe:	16 ce       	rjmp	.-980    	; 0x102c <steppermotor2Write+0x24>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1400:	1e aa       	std	Y+54, r1	; 0x36
    1402:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor2Write(int a)
{
    while(a  == 1)
    1404:	8d a9       	ldd	r24, Y+53	; 0x35
    1406:	9e a9       	ldd	r25, Y+54	; 0x36
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <steppermotor2Write+0x408>
    140e:	09 ce       	rjmp	.-1006   	; 0x1022 <steppermotor2Write+0x1a>
    1410:	f0 c1       	rjmp	.+992    	; 0x17f2 <steppermotor2Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1412:	88 e0       	ldi	r24, 0x08	; 8
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9a ab       	std	Y+50, r25	; 0x32
    1418:	89 ab       	std	Y+49, r24	; 0x31
    141a:	e3 c1       	rjmp	.+966    	; 0x17e2 <steppermotor2Write+0x7da>
        {
            switch (i)
    141c:	89 a9       	ldd	r24, Y+49	; 0x31
    141e:	9a a9       	ldd	r25, Y+50	; 0x32
    1420:	9a af       	std	Y+58, r25	; 0x3a
    1422:	89 af       	std	Y+57, r24	; 0x39
    1424:	89 ad       	ldd	r24, Y+57	; 0x39
    1426:	9a ad       	ldd	r25, Y+58	; 0x3a
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <steppermotor2Write+0x428>
    142e:	a3 c0       	rjmp	.+326    	; 0x1576 <steppermotor2Write+0x56e>
    1430:	89 ad       	ldd	r24, Y+57	; 0x39
    1432:	9a ad       	ldd	r25, Y+58	; 0x3a
    1434:	85 30       	cpi	r24, 0x05	; 5
    1436:	91 05       	cpc	r25, r1
    1438:	94 f4       	brge	.+36     	; 0x145e <steppermotor2Write+0x456>
    143a:	89 ad       	ldd	r24, Y+57	; 0x39
    143c:	9a ad       	ldd	r25, Y+58	; 0x3a
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <steppermotor2Write+0x43e>
    1444:	5e c0       	rjmp	.+188    	; 0x1502 <steppermotor2Write+0x4fa>
    1446:	89 ad       	ldd	r24, Y+57	; 0x39
    1448:	9a ad       	ldd	r25, Y+58	; 0x3a
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	0c f0       	brlt	.+2      	; 0x1452 <steppermotor2Write+0x44a>
    1450:	75 c0       	rjmp	.+234    	; 0x153c <steppermotor2Write+0x534>
    1452:	89 ad       	ldd	r24, Y+57	; 0x39
    1454:	9a ad       	ldd	r25, Y+58	; 0x3a
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	b1 f1       	breq	.+108    	; 0x14c8 <steppermotor2Write+0x4c0>
    145c:	ff c0       	rjmp	.+510    	; 0x165c <steppermotor2Write+0x654>
    145e:	89 ad       	ldd	r24, Y+57	; 0x39
    1460:	9a ad       	ldd	r25, Y+58	; 0x3a
    1462:	86 30       	cpi	r24, 0x06	; 6
    1464:	91 05       	cpc	r25, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <steppermotor2Write+0x462>
    1468:	c0 c0       	rjmp	.+384    	; 0x15ea <steppermotor2Write+0x5e2>
    146a:	89 ad       	ldd	r24, Y+57	; 0x39
    146c:	9a ad       	ldd	r25, Y+58	; 0x3a
    146e:	86 30       	cpi	r24, 0x06	; 6
    1470:	91 05       	cpc	r25, r1
    1472:	0c f4       	brge	.+2      	; 0x1476 <steppermotor2Write+0x46e>
    1474:	9d c0       	rjmp	.+314    	; 0x15b0 <steppermotor2Write+0x5a8>
    1476:	89 ad       	ldd	r24, Y+57	; 0x39
    1478:	9a ad       	ldd	r25, Y+58	; 0x3a
    147a:	87 30       	cpi	r24, 0x07	; 7
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <steppermotor2Write+0x47a>
    1480:	d1 c0       	rjmp	.+418    	; 0x1624 <steppermotor2Write+0x61c>
    1482:	89 ad       	ldd	r24, Y+57	; 0x39
    1484:	9a ad       	ldd	r25, Y+58	; 0x3a
    1486:	88 30       	cpi	r24, 0x08	; 8
    1488:	91 05       	cpc	r25, r1
    148a:	09 f0       	breq	.+2      	; 0x148e <steppermotor2Write+0x486>
    148c:	e7 c0       	rjmp	.+462    	; 0x165c <steppermotor2Write+0x654>
            {
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    148e:	a8 e2       	ldi	r26, 0x28	; 40
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e2       	ldi	r30, 0x28	; 40
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    149c:	a8 e2       	ldi	r26, 0x28	; 40
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e8 e2       	ldi	r30, 0x28	; 40
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7e       	andi	r24, 0xEF	; 239
    14a8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    14aa:	a8 e2       	ldi	r26, 0x28	; 40
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e8 e2       	ldi	r30, 0x28	; 40
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8b 7f       	andi	r24, 0xFB	; 251
    14b6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14b8:	a8 e2       	ldi	r26, 0x28	; 40
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 e2       	ldi	r30, 0x28	; 40
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8e 7f       	andi	r24, 0xFE	; 254
    14c4:	8c 93       	st	X, r24
    14c6:	ca c0       	rjmp	.+404    	; 0x165c <steppermotor2Write+0x654>
                break;
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    14c8:	a8 e2       	ldi	r26, 0x28	; 40
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e2       	ldi	r30, 0x28	; 40
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 64       	ori	r24, 0x40	; 64
    14d4:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14d6:	a8 e2       	ldi	r26, 0x28	; 40
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e2       	ldi	r30, 0x28	; 40
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 61       	ori	r24, 0x10	; 16
    14e2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    14e4:	a8 e2       	ldi	r26, 0x28	; 40
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e8 e2       	ldi	r30, 0x28	; 40
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8b 7f       	andi	r24, 0xFB	; 251
    14f0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14f2:	a8 e2       	ldi	r26, 0x28	; 40
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e2       	ldi	r30, 0x28	; 40
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8e 7f       	andi	r24, 0xFE	; 254
    14fe:	8c 93       	st	X, r24
    1500:	ad c0       	rjmp	.+346    	; 0x165c <steppermotor2Write+0x654>
                break;
            case 2 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1502:	a8 e2       	ldi	r26, 0x28	; 40
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e8 e2       	ldi	r30, 0x28	; 40
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 7b       	andi	r24, 0xBF	; 191
    150e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1510:	a8 e2       	ldi	r26, 0x28	; 40
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e8 e2       	ldi	r30, 0x28	; 40
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	80 61       	ori	r24, 0x10	; 16
    151c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    151e:	a8 e2       	ldi	r26, 0x28	; 40
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e8 e2       	ldi	r30, 0x28	; 40
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8b 7f       	andi	r24, 0xFB	; 251
    152a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    152c:	a8 e2       	ldi	r26, 0x28	; 40
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e8 e2       	ldi	r30, 0x28	; 40
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	8c 93       	st	X, r24
    153a:	90 c0       	rjmp	.+288    	; 0x165c <steppermotor2Write+0x654>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    153c:	a8 e2       	ldi	r26, 0x28	; 40
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e8 e2       	ldi	r30, 0x28	; 40
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 7b       	andi	r24, 0xBF	; 191
    1548:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    154a:	a8 e2       	ldi	r26, 0x28	; 40
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e2       	ldi	r30, 0x28	; 40
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	80 61       	ori	r24, 0x10	; 16
    1556:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1558:	a8 e2       	ldi	r26, 0x28	; 40
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e2       	ldi	r30, 0x28	; 40
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	84 60       	ori	r24, 0x04	; 4
    1564:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1566:	a8 e2       	ldi	r26, 0x28	; 40
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e2       	ldi	r30, 0x28	; 40
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8c 93       	st	X, r24
    1574:	73 c0       	rjmp	.+230    	; 0x165c <steppermotor2Write+0x654>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1576:	a8 e2       	ldi	r26, 0x28	; 40
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e8 e2       	ldi	r30, 0x28	; 40
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8f 7b       	andi	r24, 0xBF	; 191
    1582:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1584:	a8 e2       	ldi	r26, 0x28	; 40
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e2       	ldi	r30, 0x28	; 40
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8f 7e       	andi	r24, 0xEF	; 239
    1590:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1592:	a8 e2       	ldi	r26, 0x28	; 40
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e8 e2       	ldi	r30, 0x28	; 40
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	84 60       	ori	r24, 0x04	; 4
    159e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    15a0:	a8 e2       	ldi	r26, 0x28	; 40
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e8 e2       	ldi	r30, 0x28	; 40
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	8c 93       	st	X, r24
    15ae:	56 c0       	rjmp	.+172    	; 0x165c <steppermotor2Write+0x654>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    15b0:	a8 e2       	ldi	r26, 0x28	; 40
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e2       	ldi	r30, 0x28	; 40
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 7b       	andi	r24, 0xBF	; 191
    15bc:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15be:	a8 e2       	ldi	r26, 0x28	; 40
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e2       	ldi	r30, 0x28	; 40
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 7e       	andi	r24, 0xEF	; 239
    15ca:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    15cc:	a8 e2       	ldi	r26, 0x28	; 40
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e2       	ldi	r30, 0x28	; 40
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15da:	a8 e2       	ldi	r26, 0x28	; 40
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e2       	ldi	r30, 0x28	; 40
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	8c 93       	st	X, r24
    15e8:	39 c0       	rjmp	.+114    	; 0x165c <steppermotor2Write+0x654>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    15ea:	a8 e2       	ldi	r26, 0x28	; 40
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e8 e2       	ldi	r30, 0x28	; 40
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 7b       	andi	r24, 0xBF	; 191
    15f6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15f8:	a8 e2       	ldi	r26, 0x28	; 40
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e2       	ldi	r30, 0x28	; 40
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 7e       	andi	r24, 0xEF	; 239
    1604:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1606:	a8 e2       	ldi	r26, 0x28	; 40
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e8 e2       	ldi	r30, 0x28	; 40
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8b 7f       	andi	r24, 0xFB	; 251
    1612:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1614:	a8 e2       	ldi	r26, 0x28	; 40
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e2       	ldi	r30, 0x28	; 40
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
    1622:	1c c0       	rjmp	.+56     	; 0x165c <steppermotor2Write+0x654>
                break;
            case 7 :
                PORTStepper2 |= (1 << PStepper2_1);
    1624:	a8 e2       	ldi	r26, 0x28	; 40
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e2       	ldi	r30, 0x28	; 40
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 64       	ori	r24, 0x40	; 64
    1630:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1632:	a8 e2       	ldi	r26, 0x28	; 40
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e2       	ldi	r30, 0x28	; 40
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 7e       	andi	r24, 0xEF	; 239
    163e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1640:	a8 e2       	ldi	r26, 0x28	; 40
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e8 e2       	ldi	r30, 0x28	; 40
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8b 7f       	andi	r24, 0xFB	; 251
    164c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    164e:	a8 e2       	ldi	r26, 0x28	; 40
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e2       	ldi	r30, 0x28	; 40
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	8c 93       	st	X, r24
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	aa e7       	ldi	r26, 0x7A	; 122
    1662:	b4 e4       	ldi	r27, 0x44	; 68
    1664:	8d 8b       	std	Y+21, r24	; 0x15
    1666:	9e 8b       	std	Y+22, r25	; 0x16
    1668:	af 8b       	std	Y+23, r26	; 0x17
    166a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    166c:	6d 89       	ldd	r22, Y+21	; 0x15
    166e:	7e 89       	ldd	r23, Y+22	; 0x16
    1670:	8f 89       	ldd	r24, Y+23	; 0x17
    1672:	98 8d       	ldd	r25, Y+24	; 0x18
    1674:	2b ea       	ldi	r18, 0xAB	; 171
    1676:	3a ea       	ldi	r19, 0xAA	; 170
    1678:	4a ea       	ldi	r20, 0xAA	; 170
    167a:	50 e4       	ldi	r21, 0x40	; 64
    167c:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	89 8b       	std	Y+17, r24	; 0x11
    1686:	9a 8b       	std	Y+18, r25	; 0x12
    1688:	ab 8b       	std	Y+19, r26	; 0x13
    168a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    168c:	69 89       	ldd	r22, Y+17	; 0x11
    168e:	7a 89       	ldd	r23, Y+18	; 0x12
    1690:	8b 89       	ldd	r24, Y+19	; 0x13
    1692:	9c 89       	ldd	r25, Y+20	; 0x14
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	1c f4       	brge	.+6      	; 0x16aa <steppermotor2Write+0x6a2>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	88 8b       	std	Y+16, r24	; 0x10
    16a8:	91 c0       	rjmp	.+290    	; 0x17cc <steppermotor2Write+0x7c4>
	else if (__tmp > 255)
    16aa:	69 89       	ldd	r22, Y+17	; 0x11
    16ac:	7a 89       	ldd	r23, Y+18	; 0x12
    16ae:	8b 89       	ldd	r24, Y+19	; 0x13
    16b0:	9c 89       	ldd	r25, Y+20	; 0x14
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	53 e4       	ldi	r21, 0x43	; 67
    16ba:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	0c f0       	brlt	.+2      	; 0x16c4 <steppermotor2Write+0x6bc>
    16c2:	7b c0       	rjmp	.+246    	; 0x17ba <steppermotor2Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a e7       	ldi	r20, 0x7A	; 122
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8c 87       	std	Y+12, r24	; 0x0c
    16de:	9d 87       	std	Y+13, r25	; 0x0d
    16e0:	ae 87       	std	Y+14, r26	; 0x0e
    16e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    16e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    16e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a e7       	ldi	r20, 0x7A	; 122
    16f2:	55 e4       	ldi	r21, 0x45	; 69
    16f4:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	88 87       	std	Y+8, r24	; 0x08
    16fe:	99 87       	std	Y+9, r25	; 0x09
    1700:	aa 87       	std	Y+10, r26	; 0x0a
    1702:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1704:	68 85       	ldd	r22, Y+8	; 0x08
    1706:	79 85       	ldd	r23, Y+9	; 0x09
    1708:	8a 85       	ldd	r24, Y+10	; 0x0a
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <steppermotor2Write+0x71e>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9f 83       	std	Y+7, r25	; 0x07
    1722:	8e 83       	std	Y+6, r24	; 0x06
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <steppermotor2Write+0x79c>
	else if (__tmp > 65535)
    1726:	68 85       	ldd	r22, Y+8	; 0x08
    1728:	79 85       	ldd	r23, Y+9	; 0x09
    172a:	8a 85       	ldd	r24, Y+10	; 0x0a
    172c:	9b 85       	ldd	r25, Y+11	; 0x0b
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <steppermotor2Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1740:	7d 85       	ldd	r23, Y+13	; 0x0d
    1742:	8e 85       	ldd	r24, Y+14	; 0x0e
    1744:	9f 85       	ldd	r25, Y+15	; 0x0f
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9f 83       	std	Y+7, r25	; 0x07
    1764:	8e 83       	std	Y+6, r24	; 0x06
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <steppermotor2Write+0x77e>
    1768:	80 e9       	ldi	r24, 0x90	; 144
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	9d 83       	std	Y+5, r25	; 0x05
    176e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <steppermotor2Write+0x76c>
    1778:	9d 83       	std	Y+5, r25	; 0x05
    177a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9f 83       	std	Y+7, r25	; 0x07
    1784:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	9f 81       	ldd	r25, Y+7	; 0x07
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <steppermotor2Write+0x760>
    178e:	24 c0       	rjmp	.+72     	; 0x17d8 <steppermotor2Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	68 85       	ldd	r22, Y+8	; 0x08
    1792:	79 85       	ldd	r23, Y+9	; 0x09
    1794:	8a 85       	ldd	r24, Y+10	; 0x0a
    1796:	9b 85       	ldd	r25, Y+11	; 0x0b
    1798:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9f 83       	std	Y+7, r25	; 0x07
    17a2:	8e 83       	std	Y+6, r24	; 0x06
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	9b 83       	std	Y+3, r25	; 0x03
    17aa:	8a 83       	std	Y+2, r24	; 0x02
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <steppermotor2Write+0x7a8>
    17b4:	9b 83       	std	Y+3, r25	; 0x03
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <steppermotor2Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17ba:	69 89       	ldd	r22, Y+17	; 0x11
    17bc:	7a 89       	ldd	r23, Y+18	; 0x12
    17be:	8b 89       	ldd	r24, Y+19	; 0x13
    17c0:	9c 89       	ldd	r25, Y+20	; 0x14
    17c2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	88 8b       	std	Y+16, r24	; 0x10
    17cc:	88 89       	ldd	r24, Y+16	; 0x10
    17ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	8a 95       	dec	r24
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <steppermotor2Write+0x7ca>
    17d6:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    17d8:	89 a9       	ldd	r24, Y+49	; 0x31
    17da:	9a a9       	ldd	r25, Y+50	; 0x32
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	9a ab       	std	Y+50, r25	; 0x32
    17e0:	89 ab       	std	Y+49, r24	; 0x31
    17e2:	89 a9       	ldd	r24, Y+49	; 0x31
    17e4:	9a a9       	ldd	r25, Y+50	; 0x32
    17e6:	18 16       	cp	r1, r24
    17e8:	19 06       	cpc	r1, r25
    17ea:	0c f4       	brge	.+2      	; 0x17ee <steppermotor2Write+0x7e6>
    17ec:	17 ce       	rjmp	.-978    	; 0x141c <steppermotor2Write+0x414>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    17ee:	1e aa       	std	Y+54, r1	; 0x36
    17f0:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    17f2:	8d a9       	ldd	r24, Y+53	; 0x35
    17f4:	9e a9       	ldd	r25, Y+54	; 0x36
    17f6:	82 30       	cpi	r24, 0x02	; 2
    17f8:	91 05       	cpc	r25, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <steppermotor2Write+0x7f6>
    17fc:	0a ce       	rjmp	.-1004   	; 0x1412 <steppermotor2Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    17fe:	ea 96       	adiw	r28, 0x3a	; 58
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <steppermotor3Write>:

void steppermotor3Write(int a)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	ea 97       	sbiw	r28, 0x3a	; 58
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	9e ab       	std	Y+54, r25	; 0x36
    1826:	8d ab       	std	Y+53, r24	; 0x35
    1828:	f1 c1       	rjmp	.+994    	; 0x1c0c <steppermotor3Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9c ab       	std	Y+52, r25	; 0x34
    1830:	8b ab       	std	Y+51, r24	; 0x33
    1832:	e4 c1       	rjmp	.+968    	; 0x1bfc <steppermotor3Write+0x3ec>
        {
            switch (i)
    1834:	8b a9       	ldd	r24, Y+51	; 0x33
    1836:	9c a9       	ldd	r25, Y+52	; 0x34
    1838:	98 af       	std	Y+56, r25	; 0x38
    183a:	8f ab       	std	Y+55, r24	; 0x37
    183c:	8f a9       	ldd	r24, Y+55	; 0x37
    183e:	98 ad       	ldd	r25, Y+56	; 0x38
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	91 05       	cpc	r25, r1
    1844:	09 f4       	brne	.+2      	; 0x1848 <steppermotor3Write+0x38>
    1846:	87 c0       	rjmp	.+270    	; 0x1956 <steppermotor3Write+0x146>
    1848:	8f a9       	ldd	r24, Y+55	; 0x37
    184a:	98 ad       	ldd	r25, Y+56	; 0x38
    184c:	85 30       	cpi	r24, 0x05	; 5
    184e:	91 05       	cpc	r25, r1
    1850:	94 f4       	brge	.+36     	; 0x1876 <steppermotor3Write+0x66>
    1852:	8f a9       	ldd	r24, Y+55	; 0x37
    1854:	98 ad       	ldd	r25, Y+56	; 0x38
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	91 05       	cpc	r25, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <steppermotor3Write+0x4e>
    185c:	42 c0       	rjmp	.+132    	; 0x18e2 <steppermotor3Write+0xd2>
    185e:	8f a9       	ldd	r24, Y+55	; 0x37
    1860:	98 ad       	ldd	r25, Y+56	; 0x38
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	0c f0       	brlt	.+2      	; 0x186a <steppermotor3Write+0x5a>
    1868:	59 c0       	rjmp	.+178    	; 0x191c <steppermotor3Write+0x10c>
    186a:	8f a9       	ldd	r24, Y+55	; 0x37
    186c:	98 ad       	ldd	r25, Y+56	; 0x38
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	d1 f0       	breq	.+52     	; 0x18a8 <steppermotor3Write+0x98>
    1874:	00 c1       	rjmp	.+512    	; 0x1a76 <steppermotor3Write+0x266>
    1876:	8f a9       	ldd	r24, Y+55	; 0x37
    1878:	98 ad       	ldd	r25, Y+56	; 0x38
    187a:	86 30       	cpi	r24, 0x06	; 6
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <steppermotor3Write+0x72>
    1880:	a4 c0       	rjmp	.+328    	; 0x19ca <steppermotor3Write+0x1ba>
    1882:	8f a9       	ldd	r24, Y+55	; 0x37
    1884:	98 ad       	ldd	r25, Y+56	; 0x38
    1886:	86 30       	cpi	r24, 0x06	; 6
    1888:	91 05       	cpc	r25, r1
    188a:	0c f4       	brge	.+2      	; 0x188e <steppermotor3Write+0x7e>
    188c:	81 c0       	rjmp	.+258    	; 0x1990 <steppermotor3Write+0x180>
    188e:	8f a9       	ldd	r24, Y+55	; 0x37
    1890:	98 ad       	ldd	r25, Y+56	; 0x38
    1892:	87 30       	cpi	r24, 0x07	; 7
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <steppermotor3Write+0x8a>
    1898:	b5 c0       	rjmp	.+362    	; 0x1a04 <steppermotor3Write+0x1f4>
    189a:	8f a9       	ldd	r24, Y+55	; 0x37
    189c:	98 ad       	ldd	r25, Y+56	; 0x38
    189e:	88 30       	cpi	r24, 0x08	; 8
    18a0:	91 05       	cpc	r25, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <steppermotor3Write+0x96>
    18a4:	cc c0       	rjmp	.+408    	; 0x1a3e <steppermotor3Write+0x22e>
    18a6:	e7 c0       	rjmp	.+462    	; 0x1a76 <steppermotor3Write+0x266>
            {
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    18a8:	ab e0       	ldi	r26, 0x0B	; 11
    18aa:	b1 e0       	ldi	r27, 0x01	; 1
    18ac:	eb e0       	ldi	r30, 0x0B	; 11
    18ae:	f1 e0       	ldi	r31, 0x01	; 1
    18b0:	80 81       	ld	r24, Z
    18b2:	80 68       	ori	r24, 0x80	; 128
    18b4:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    18b6:	ab e0       	ldi	r26, 0x0B	; 11
    18b8:	b1 e0       	ldi	r27, 0x01	; 1
    18ba:	eb e0       	ldi	r30, 0x0B	; 11
    18bc:	f1 e0       	ldi	r31, 0x01	; 1
    18be:	80 81       	ld	r24, Z
    18c0:	8f 7d       	andi	r24, 0xDF	; 223
    18c2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    18c4:	ab e0       	ldi	r26, 0x0B	; 11
    18c6:	b1 e0       	ldi	r27, 0x01	; 1
    18c8:	eb e0       	ldi	r30, 0x0B	; 11
    18ca:	f1 e0       	ldi	r31, 0x01	; 1
    18cc:	80 81       	ld	r24, Z
    18ce:	87 7f       	andi	r24, 0xF7	; 247
    18d0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    18d2:	ab e0       	ldi	r26, 0x0B	; 11
    18d4:	b1 e0       	ldi	r27, 0x01	; 1
    18d6:	eb e0       	ldi	r30, 0x0B	; 11
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	80 81       	ld	r24, Z
    18dc:	8d 7f       	andi	r24, 0xFD	; 253
    18de:	8c 93       	st	X, r24
    18e0:	ca c0       	rjmp	.+404    	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 2 :
                PORTStepper3 |= (1 << PStepper3_1);
    18e2:	ab e0       	ldi	r26, 0x0B	; 11
    18e4:	b1 e0       	ldi	r27, 0x01	; 1
    18e6:	eb e0       	ldi	r30, 0x0B	; 11
    18e8:	f1 e0       	ldi	r31, 0x01	; 1
    18ea:	80 81       	ld	r24, Z
    18ec:	80 68       	ori	r24, 0x80	; 128
    18ee:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    18f0:	ab e0       	ldi	r26, 0x0B	; 11
    18f2:	b1 e0       	ldi	r27, 0x01	; 1
    18f4:	eb e0       	ldi	r30, 0x0B	; 11
    18f6:	f1 e0       	ldi	r31, 0x01	; 1
    18f8:	80 81       	ld	r24, Z
    18fa:	80 62       	ori	r24, 0x20	; 32
    18fc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    18fe:	ab e0       	ldi	r26, 0x0B	; 11
    1900:	b1 e0       	ldi	r27, 0x01	; 1
    1902:	eb e0       	ldi	r30, 0x0B	; 11
    1904:	f1 e0       	ldi	r31, 0x01	; 1
    1906:	80 81       	ld	r24, Z
    1908:	87 7f       	andi	r24, 0xF7	; 247
    190a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    190c:	ab e0       	ldi	r26, 0x0B	; 11
    190e:	b1 e0       	ldi	r27, 0x01	; 1
    1910:	eb e0       	ldi	r30, 0x0B	; 11
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	80 81       	ld	r24, Z
    1916:	8d 7f       	andi	r24, 0xFD	; 253
    1918:	8c 93       	st	X, r24
    191a:	ad c0       	rjmp	.+346    	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    191c:	ab e0       	ldi	r26, 0x0B	; 11
    191e:	b1 e0       	ldi	r27, 0x01	; 1
    1920:	eb e0       	ldi	r30, 0x0B	; 11
    1922:	f1 e0       	ldi	r31, 0x01	; 1
    1924:	80 81       	ld	r24, Z
    1926:	8f 77       	andi	r24, 0x7F	; 127
    1928:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    192a:	ab e0       	ldi	r26, 0x0B	; 11
    192c:	b1 e0       	ldi	r27, 0x01	; 1
    192e:	eb e0       	ldi	r30, 0x0B	; 11
    1930:	f1 e0       	ldi	r31, 0x01	; 1
    1932:	80 81       	ld	r24, Z
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1938:	ab e0       	ldi	r26, 0x0B	; 11
    193a:	b1 e0       	ldi	r27, 0x01	; 1
    193c:	eb e0       	ldi	r30, 0x0B	; 11
    193e:	f1 e0       	ldi	r31, 0x01	; 1
    1940:	80 81       	ld	r24, Z
    1942:	87 7f       	andi	r24, 0xF7	; 247
    1944:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1946:	ab e0       	ldi	r26, 0x0B	; 11
    1948:	b1 e0       	ldi	r27, 0x01	; 1
    194a:	eb e0       	ldi	r30, 0x0B	; 11
    194c:	f1 e0       	ldi	r31, 0x01	; 1
    194e:	80 81       	ld	r24, Z
    1950:	8d 7f       	andi	r24, 0xFD	; 253
    1952:	8c 93       	st	X, r24
    1954:	90 c0       	rjmp	.+288    	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1956:	ab e0       	ldi	r26, 0x0B	; 11
    1958:	b1 e0       	ldi	r27, 0x01	; 1
    195a:	eb e0       	ldi	r30, 0x0B	; 11
    195c:	f1 e0       	ldi	r31, 0x01	; 1
    195e:	80 81       	ld	r24, Z
    1960:	8f 77       	andi	r24, 0x7F	; 127
    1962:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1964:	ab e0       	ldi	r26, 0x0B	; 11
    1966:	b1 e0       	ldi	r27, 0x01	; 1
    1968:	eb e0       	ldi	r30, 0x0B	; 11
    196a:	f1 e0       	ldi	r31, 0x01	; 1
    196c:	80 81       	ld	r24, Z
    196e:	80 62       	ori	r24, 0x20	; 32
    1970:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1972:	ab e0       	ldi	r26, 0x0B	; 11
    1974:	b1 e0       	ldi	r27, 0x01	; 1
    1976:	eb e0       	ldi	r30, 0x0B	; 11
    1978:	f1 e0       	ldi	r31, 0x01	; 1
    197a:	80 81       	ld	r24, Z
    197c:	88 60       	ori	r24, 0x08	; 8
    197e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1980:	ab e0       	ldi	r26, 0x0B	; 11
    1982:	b1 e0       	ldi	r27, 0x01	; 1
    1984:	eb e0       	ldi	r30, 0x0B	; 11
    1986:	f1 e0       	ldi	r31, 0x01	; 1
    1988:	80 81       	ld	r24, Z
    198a:	8d 7f       	andi	r24, 0xFD	; 253
    198c:	8c 93       	st	X, r24
    198e:	73 c0       	rjmp	.+230    	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1990:	ab e0       	ldi	r26, 0x0B	; 11
    1992:	b1 e0       	ldi	r27, 0x01	; 1
    1994:	eb e0       	ldi	r30, 0x0B	; 11
    1996:	f1 e0       	ldi	r31, 0x01	; 1
    1998:	80 81       	ld	r24, Z
    199a:	8f 77       	andi	r24, 0x7F	; 127
    199c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    199e:	ab e0       	ldi	r26, 0x0B	; 11
    19a0:	b1 e0       	ldi	r27, 0x01	; 1
    19a2:	eb e0       	ldi	r30, 0x0B	; 11
    19a4:	f1 e0       	ldi	r31, 0x01	; 1
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 7d       	andi	r24, 0xDF	; 223
    19aa:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    19ac:	ab e0       	ldi	r26, 0x0B	; 11
    19ae:	b1 e0       	ldi	r27, 0x01	; 1
    19b0:	eb e0       	ldi	r30, 0x0B	; 11
    19b2:	f1 e0       	ldi	r31, 0x01	; 1
    19b4:	80 81       	ld	r24, Z
    19b6:	88 60       	ori	r24, 0x08	; 8
    19b8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    19ba:	ab e0       	ldi	r26, 0x0B	; 11
    19bc:	b1 e0       	ldi	r27, 0x01	; 1
    19be:	eb e0       	ldi	r30, 0x0B	; 11
    19c0:	f1 e0       	ldi	r31, 0x01	; 1
    19c2:	80 81       	ld	r24, Z
    19c4:	8d 7f       	andi	r24, 0xFD	; 253
    19c6:	8c 93       	st	X, r24
    19c8:	56 c0       	rjmp	.+172    	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    19ca:	ab e0       	ldi	r26, 0x0B	; 11
    19cc:	b1 e0       	ldi	r27, 0x01	; 1
    19ce:	eb e0       	ldi	r30, 0x0B	; 11
    19d0:	f1 e0       	ldi	r31, 0x01	; 1
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 77       	andi	r24, 0x7F	; 127
    19d6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    19d8:	ab e0       	ldi	r26, 0x0B	; 11
    19da:	b1 e0       	ldi	r27, 0x01	; 1
    19dc:	eb e0       	ldi	r30, 0x0B	; 11
    19de:	f1 e0       	ldi	r31, 0x01	; 1
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 7d       	andi	r24, 0xDF	; 223
    19e4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    19e6:	ab e0       	ldi	r26, 0x0B	; 11
    19e8:	b1 e0       	ldi	r27, 0x01	; 1
    19ea:	eb e0       	ldi	r30, 0x0B	; 11
    19ec:	f1 e0       	ldi	r31, 0x01	; 1
    19ee:	80 81       	ld	r24, Z
    19f0:	88 60       	ori	r24, 0x08	; 8
    19f2:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    19f4:	ab e0       	ldi	r26, 0x0B	; 11
    19f6:	b1 e0       	ldi	r27, 0x01	; 1
    19f8:	eb e0       	ldi	r30, 0x0B	; 11
    19fa:	f1 e0       	ldi	r31, 0x01	; 1
    19fc:	80 81       	ld	r24, Z
    19fe:	82 60       	ori	r24, 0x02	; 2
    1a00:	8c 93       	st	X, r24
    1a02:	39 c0       	rjmp	.+114    	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 7 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1a04:	ab e0       	ldi	r26, 0x0B	; 11
    1a06:	b1 e0       	ldi	r27, 0x01	; 1
    1a08:	eb e0       	ldi	r30, 0x0B	; 11
    1a0a:	f1 e0       	ldi	r31, 0x01	; 1
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 77       	andi	r24, 0x7F	; 127
    1a10:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1a12:	ab e0       	ldi	r26, 0x0B	; 11
    1a14:	b1 e0       	ldi	r27, 0x01	; 1
    1a16:	eb e0       	ldi	r30, 0x0B	; 11
    1a18:	f1 e0       	ldi	r31, 0x01	; 1
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 7d       	andi	r24, 0xDF	; 223
    1a1e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1a20:	ab e0       	ldi	r26, 0x0B	; 11
    1a22:	b1 e0       	ldi	r27, 0x01	; 1
    1a24:	eb e0       	ldi	r30, 0x0B	; 11
    1a26:	f1 e0       	ldi	r31, 0x01	; 1
    1a28:	80 81       	ld	r24, Z
    1a2a:	87 7f       	andi	r24, 0xF7	; 247
    1a2c:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1a2e:	ab e0       	ldi	r26, 0x0B	; 11
    1a30:	b1 e0       	ldi	r27, 0x01	; 1
    1a32:	eb e0       	ldi	r30, 0x0B	; 11
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	80 81       	ld	r24, Z
    1a38:	82 60       	ori	r24, 0x02	; 2
    1a3a:	8c 93       	st	X, r24
    1a3c:	1c c0       	rjmp	.+56     	; 0x1a76 <steppermotor3Write+0x266>
                break;
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    1a3e:	ab e0       	ldi	r26, 0x0B	; 11
    1a40:	b1 e0       	ldi	r27, 0x01	; 1
    1a42:	eb e0       	ldi	r30, 0x0B	; 11
    1a44:	f1 e0       	ldi	r31, 0x01	; 1
    1a46:	80 81       	ld	r24, Z
    1a48:	80 68       	ori	r24, 0x80	; 128
    1a4a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1a4c:	ab e0       	ldi	r26, 0x0B	; 11
    1a4e:	b1 e0       	ldi	r27, 0x01	; 1
    1a50:	eb e0       	ldi	r30, 0x0B	; 11
    1a52:	f1 e0       	ldi	r31, 0x01	; 1
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 7d       	andi	r24, 0xDF	; 223
    1a58:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1a5a:	ab e0       	ldi	r26, 0x0B	; 11
    1a5c:	b1 e0       	ldi	r27, 0x01	; 1
    1a5e:	eb e0       	ldi	r30, 0x0B	; 11
    1a60:	f1 e0       	ldi	r31, 0x01	; 1
    1a62:	80 81       	ld	r24, Z
    1a64:	87 7f       	andi	r24, 0xF7	; 247
    1a66:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1a68:	ab e0       	ldi	r26, 0x0B	; 11
    1a6a:	b1 e0       	ldi	r27, 0x01	; 1
    1a6c:	eb e0       	ldi	r30, 0x0B	; 11
    1a6e:	f1 e0       	ldi	r31, 0x01	; 1
    1a70:	80 81       	ld	r24, Z
    1a72:	82 60       	ori	r24, 0x02	; 2
    1a74:	8c 93       	st	X, r24
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	aa e7       	ldi	r26, 0x7A	; 122
    1a7c:	b4 e4       	ldi	r27, 0x44	; 68
    1a7e:	8d a7       	std	Y+45, r24	; 0x2d
    1a80:	9e a7       	std	Y+46, r25	; 0x2e
    1a82:	af a7       	std	Y+47, r26	; 0x2f
    1a84:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a86:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a88:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8e:	2b ea       	ldi	r18, 0xAB	; 171
    1a90:	3a ea       	ldi	r19, 0xAA	; 170
    1a92:	4a ea       	ldi	r20, 0xAA	; 170
    1a94:	50 e4       	ldi	r21, 0x40	; 64
    1a96:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	89 a7       	std	Y+41, r24	; 0x29
    1aa0:	9a a7       	std	Y+42, r25	; 0x2a
    1aa2:	ab a7       	std	Y+43, r26	; 0x2b
    1aa4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1aa6:	69 a5       	ldd	r22, Y+41	; 0x29
    1aa8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1aaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	1c f4       	brge	.+6      	; 0x1ac4 <steppermotor3Write+0x2b4>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	88 a7       	std	Y+40, r24	; 0x28
    1ac2:	91 c0       	rjmp	.+290    	; 0x1be6 <steppermotor3Write+0x3d6>
	else if (__tmp > 255)
    1ac4:	69 a5       	ldd	r22, Y+41	; 0x29
    1ac6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ac8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	53 e4       	ldi	r21, 0x43	; 67
    1ad4:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <steppermotor3Write+0x2ce>
    1adc:	7b c0       	rjmp	.+246    	; 0x1bd4 <steppermotor3Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1ade:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ae0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8c a3       	std	Y+36, r24	; 0x24
    1af8:	9d a3       	std	Y+37, r25	; 0x25
    1afa:	ae a3       	std	Y+38, r26	; 0x26
    1afc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6c a1       	ldd	r22, Y+36	; 0x24
    1b00:	7d a1       	ldd	r23, Y+37	; 0x25
    1b02:	8e a1       	ldd	r24, Y+38	; 0x26
    1b04:	9f a1       	ldd	r25, Y+39	; 0x27
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a e7       	ldi	r20, 0x7A	; 122
    1b0c:	55 e4       	ldi	r21, 0x45	; 69
    1b0e:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	88 a3       	std	Y+32, r24	; 0x20
    1b18:	99 a3       	std	Y+33, r25	; 0x21
    1b1a:	aa a3       	std	Y+34, r26	; 0x22
    1b1c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b1e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b20:	79 a1       	ldd	r23, Y+33	; 0x21
    1b22:	8a a1       	ldd	r24, Y+34	; 0x22
    1b24:	9b a1       	ldd	r25, Y+35	; 0x23
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <steppermotor3Write+0x330>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9f 8f       	std	Y+31, r25	; 0x1f
    1b3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <steppermotor3Write+0x3ae>
	else if (__tmp > 65535)
    1b40:	68 a1       	ldd	r22, Y+32	; 0x20
    1b42:	79 a1       	ldd	r23, Y+33	; 0x21
    1b44:	8a a1       	ldd	r24, Y+34	; 0x22
    1b46:	9b a1       	ldd	r25, Y+35	; 0x23
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <steppermotor3Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6c a1       	ldd	r22, Y+36	; 0x24
    1b5a:	7d a1       	ldd	r23, Y+37	; 0x25
    1b5c:	8e a1       	ldd	r24, Y+38	; 0x26
    1b5e:	9f a1       	ldd	r25, Y+39	; 0x27
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1b7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <steppermotor3Write+0x390>
    1b82:	80 e9       	ldi	r24, 0x90	; 144
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	9d 8f       	std	Y+29, r25	; 0x1d
    1b88:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <steppermotor3Write+0x37e>
    1b92:	9d 8f       	std	Y+29, r25	; 0x1d
    1b94:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b98:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9f 8f       	std	Y+31, r25	; 0x1f
    1b9e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <steppermotor3Write+0x372>
    1ba8:	24 c0       	rjmp	.+72     	; 0x1bf2 <steppermotor3Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	68 a1       	ldd	r22, Y+32	; 0x20
    1bac:	79 a1       	ldd	r23, Y+33	; 0x21
    1bae:	8a a1       	ldd	r24, Y+34	; 0x22
    1bb0:	9b a1       	ldd	r25, Y+35	; 0x23
    1bb2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9f 8f       	std	Y+31, r25	; 0x1f
    1bbc:	8e 8f       	std	Y+30, r24	; 0x1e
    1bbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bc0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bc2:	9b 8f       	std	Y+27, r25	; 0x1b
    1bc4:	8a 8f       	std	Y+26, r24	; 0x1a
    1bc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <steppermotor3Write+0x3ba>
    1bce:	9b 8f       	std	Y+27, r25	; 0x1b
    1bd0:	8a 8f       	std	Y+26, r24	; 0x1a
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <steppermotor3Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd4:	69 a5       	ldd	r22, Y+41	; 0x29
    1bd6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bdc:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	88 a7       	std	Y+40, r24	; 0x28
    1be6:	88 a5       	ldd	r24, Y+40	; 0x28
    1be8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bea:	89 8d       	ldd	r24, Y+25	; 0x19
    1bec:	8a 95       	dec	r24
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <steppermotor3Write+0x3dc>
    1bf0:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor3Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	9c ab       	std	Y+52, r25	; 0x34
    1bfa:	8b ab       	std	Y+51, r24	; 0x33
    1bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1c00:	88 30       	cpi	r24, 0x08	; 8
    1c02:	91 05       	cpc	r25, r1
    1c04:	0c f4       	brge	.+2      	; 0x1c08 <steppermotor3Write+0x3f8>
    1c06:	16 ce       	rjmp	.-980    	; 0x1834 <steppermotor3Write+0x24>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1c08:	1e aa       	std	Y+54, r1	; 0x36
    1c0a:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor3Write(int a)
{
    while(a  == 1)
    1c0c:	8d a9       	ldd	r24, Y+53	; 0x35
    1c0e:	9e a9       	ldd	r25, Y+54	; 0x36
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	91 05       	cpc	r25, r1
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <steppermotor3Write+0x408>
    1c16:	09 ce       	rjmp	.-1006   	; 0x182a <steppermotor3Write+0x1a>
    1c18:	f0 c1       	rjmp	.+992    	; 0x1ffa <steppermotor3Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1c1a:	88 e0       	ldi	r24, 0x08	; 8
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9a ab       	std	Y+50, r25	; 0x32
    1c20:	89 ab       	std	Y+49, r24	; 0x31
    1c22:	e3 c1       	rjmp	.+966    	; 0x1fea <steppermotor3Write+0x7da>
        {
            switch (i)
    1c24:	89 a9       	ldd	r24, Y+49	; 0x31
    1c26:	9a a9       	ldd	r25, Y+50	; 0x32
    1c28:	9a af       	std	Y+58, r25	; 0x3a
    1c2a:	89 af       	std	Y+57, r24	; 0x39
    1c2c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <steppermotor3Write+0x428>
    1c36:	a3 c0       	rjmp	.+326    	; 0x1d7e <steppermotor3Write+0x56e>
    1c38:	89 ad       	ldd	r24, Y+57	; 0x39
    1c3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c3c:	85 30       	cpi	r24, 0x05	; 5
    1c3e:	91 05       	cpc	r25, r1
    1c40:	94 f4       	brge	.+36     	; 0x1c66 <steppermotor3Write+0x456>
    1c42:	89 ad       	ldd	r24, Y+57	; 0x39
    1c44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	91 05       	cpc	r25, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <steppermotor3Write+0x43e>
    1c4c:	5e c0       	rjmp	.+188    	; 0x1d0a <steppermotor3Write+0x4fa>
    1c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	91 05       	cpc	r25, r1
    1c56:	0c f0       	brlt	.+2      	; 0x1c5a <steppermotor3Write+0x44a>
    1c58:	75 c0       	rjmp	.+234    	; 0x1d44 <steppermotor3Write+0x534>
    1c5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	b1 f1       	breq	.+108    	; 0x1cd0 <steppermotor3Write+0x4c0>
    1c64:	ff c0       	rjmp	.+510    	; 0x1e64 <steppermotor3Write+0x654>
    1c66:	89 ad       	ldd	r24, Y+57	; 0x39
    1c68:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6a:	86 30       	cpi	r24, 0x06	; 6
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <steppermotor3Write+0x462>
    1c70:	c0 c0       	rjmp	.+384    	; 0x1df2 <steppermotor3Write+0x5e2>
    1c72:	89 ad       	ldd	r24, Y+57	; 0x39
    1c74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c76:	86 30       	cpi	r24, 0x06	; 6
    1c78:	91 05       	cpc	r25, r1
    1c7a:	0c f4       	brge	.+2      	; 0x1c7e <steppermotor3Write+0x46e>
    1c7c:	9d c0       	rjmp	.+314    	; 0x1db8 <steppermotor3Write+0x5a8>
    1c7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c82:	87 30       	cpi	r24, 0x07	; 7
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <steppermotor3Write+0x47a>
    1c88:	d1 c0       	rjmp	.+418    	; 0x1e2c <steppermotor3Write+0x61c>
    1c8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c8e:	88 30       	cpi	r24, 0x08	; 8
    1c90:	91 05       	cpc	r25, r1
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <steppermotor3Write+0x486>
    1c94:	e7 c0       	rjmp	.+462    	; 0x1e64 <steppermotor3Write+0x654>
            {
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c96:	ab e0       	ldi	r26, 0x0B	; 11
    1c98:	b1 e0       	ldi	r27, 0x01	; 1
    1c9a:	eb e0       	ldi	r30, 0x0B	; 11
    1c9c:	f1 e0       	ldi	r31, 0x01	; 1
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 68       	ori	r24, 0x80	; 128
    1ca2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1ca4:	ab e0       	ldi	r26, 0x0B	; 11
    1ca6:	b1 e0       	ldi	r27, 0x01	; 1
    1ca8:	eb e0       	ldi	r30, 0x0B	; 11
    1caa:	f1 e0       	ldi	r31, 0x01	; 1
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 7d       	andi	r24, 0xDF	; 223
    1cb0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1cb2:	ab e0       	ldi	r26, 0x0B	; 11
    1cb4:	b1 e0       	ldi	r27, 0x01	; 1
    1cb6:	eb e0       	ldi	r30, 0x0B	; 11
    1cb8:	f1 e0       	ldi	r31, 0x01	; 1
    1cba:	80 81       	ld	r24, Z
    1cbc:	87 7f       	andi	r24, 0xF7	; 247
    1cbe:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cc0:	ab e0       	ldi	r26, 0x0B	; 11
    1cc2:	b1 e0       	ldi	r27, 0x01	; 1
    1cc4:	eb e0       	ldi	r30, 0x0B	; 11
    1cc6:	f1 e0       	ldi	r31, 0x01	; 1
    1cc8:	80 81       	ld	r24, Z
    1cca:	8d 7f       	andi	r24, 0xFD	; 253
    1ccc:	8c 93       	st	X, r24
    1cce:	ca c0       	rjmp	.+404    	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    1cd0:	ab e0       	ldi	r26, 0x0B	; 11
    1cd2:	b1 e0       	ldi	r27, 0x01	; 1
    1cd4:	eb e0       	ldi	r30, 0x0B	; 11
    1cd6:	f1 e0       	ldi	r31, 0x01	; 1
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 68       	ori	r24, 0x80	; 128
    1cdc:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1cde:	ab e0       	ldi	r26, 0x0B	; 11
    1ce0:	b1 e0       	ldi	r27, 0x01	; 1
    1ce2:	eb e0       	ldi	r30, 0x0B	; 11
    1ce4:	f1 e0       	ldi	r31, 0x01	; 1
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 62       	ori	r24, 0x20	; 32
    1cea:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1cec:	ab e0       	ldi	r26, 0x0B	; 11
    1cee:	b1 e0       	ldi	r27, 0x01	; 1
    1cf0:	eb e0       	ldi	r30, 0x0B	; 11
    1cf2:	f1 e0       	ldi	r31, 0x01	; 1
    1cf4:	80 81       	ld	r24, Z
    1cf6:	87 7f       	andi	r24, 0xF7	; 247
    1cf8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cfa:	ab e0       	ldi	r26, 0x0B	; 11
    1cfc:	b1 e0       	ldi	r27, 0x01	; 1
    1cfe:	eb e0       	ldi	r30, 0x0B	; 11
    1d00:	f1 e0       	ldi	r31, 0x01	; 1
    1d02:	80 81       	ld	r24, Z
    1d04:	8d 7f       	andi	r24, 0xFD	; 253
    1d06:	8c 93       	st	X, r24
    1d08:	ad c0       	rjmp	.+346    	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 2 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d0a:	ab e0       	ldi	r26, 0x0B	; 11
    1d0c:	b1 e0       	ldi	r27, 0x01	; 1
    1d0e:	eb e0       	ldi	r30, 0x0B	; 11
    1d10:	f1 e0       	ldi	r31, 0x01	; 1
    1d12:	80 81       	ld	r24, Z
    1d14:	8f 77       	andi	r24, 0x7F	; 127
    1d16:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1d18:	ab e0       	ldi	r26, 0x0B	; 11
    1d1a:	b1 e0       	ldi	r27, 0x01	; 1
    1d1c:	eb e0       	ldi	r30, 0x0B	; 11
    1d1e:	f1 e0       	ldi	r31, 0x01	; 1
    1d20:	80 81       	ld	r24, Z
    1d22:	80 62       	ori	r24, 0x20	; 32
    1d24:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1d26:	ab e0       	ldi	r26, 0x0B	; 11
    1d28:	b1 e0       	ldi	r27, 0x01	; 1
    1d2a:	eb e0       	ldi	r30, 0x0B	; 11
    1d2c:	f1 e0       	ldi	r31, 0x01	; 1
    1d2e:	80 81       	ld	r24, Z
    1d30:	87 7f       	andi	r24, 0xF7	; 247
    1d32:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d34:	ab e0       	ldi	r26, 0x0B	; 11
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	eb e0       	ldi	r30, 0x0B	; 11
    1d3a:	f1 e0       	ldi	r31, 0x01	; 1
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8d 7f       	andi	r24, 0xFD	; 253
    1d40:	8c 93       	st	X, r24
    1d42:	90 c0       	rjmp	.+288    	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d44:	ab e0       	ldi	r26, 0x0B	; 11
    1d46:	b1 e0       	ldi	r27, 0x01	; 1
    1d48:	eb e0       	ldi	r30, 0x0B	; 11
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8f 77       	andi	r24, 0x7F	; 127
    1d50:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1d52:	ab e0       	ldi	r26, 0x0B	; 11
    1d54:	b1 e0       	ldi	r27, 0x01	; 1
    1d56:	eb e0       	ldi	r30, 0x0B	; 11
    1d58:	f1 e0       	ldi	r31, 0x01	; 1
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 62       	ori	r24, 0x20	; 32
    1d5e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d60:	ab e0       	ldi	r26, 0x0B	; 11
    1d62:	b1 e0       	ldi	r27, 0x01	; 1
    1d64:	eb e0       	ldi	r30, 0x0B	; 11
    1d66:	f1 e0       	ldi	r31, 0x01	; 1
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 60       	ori	r24, 0x08	; 8
    1d6c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d6e:	ab e0       	ldi	r26, 0x0B	; 11
    1d70:	b1 e0       	ldi	r27, 0x01	; 1
    1d72:	eb e0       	ldi	r30, 0x0B	; 11
    1d74:	f1 e0       	ldi	r31, 0x01	; 1
    1d76:	80 81       	ld	r24, Z
    1d78:	8d 7f       	andi	r24, 0xFD	; 253
    1d7a:	8c 93       	st	X, r24
    1d7c:	73 c0       	rjmp	.+230    	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d7e:	ab e0       	ldi	r26, 0x0B	; 11
    1d80:	b1 e0       	ldi	r27, 0x01	; 1
    1d82:	eb e0       	ldi	r30, 0x0B	; 11
    1d84:	f1 e0       	ldi	r31, 0x01	; 1
    1d86:	80 81       	ld	r24, Z
    1d88:	8f 77       	andi	r24, 0x7F	; 127
    1d8a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d8c:	ab e0       	ldi	r26, 0x0B	; 11
    1d8e:	b1 e0       	ldi	r27, 0x01	; 1
    1d90:	eb e0       	ldi	r30, 0x0B	; 11
    1d92:	f1 e0       	ldi	r31, 0x01	; 1
    1d94:	80 81       	ld	r24, Z
    1d96:	8f 7d       	andi	r24, 0xDF	; 223
    1d98:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d9a:	ab e0       	ldi	r26, 0x0B	; 11
    1d9c:	b1 e0       	ldi	r27, 0x01	; 1
    1d9e:	eb e0       	ldi	r30, 0x0B	; 11
    1da0:	f1 e0       	ldi	r31, 0x01	; 1
    1da2:	80 81       	ld	r24, Z
    1da4:	88 60       	ori	r24, 0x08	; 8
    1da6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1da8:	ab e0       	ldi	r26, 0x0B	; 11
    1daa:	b1 e0       	ldi	r27, 0x01	; 1
    1dac:	eb e0       	ldi	r30, 0x0B	; 11
    1dae:	f1 e0       	ldi	r31, 0x01	; 1
    1db0:	80 81       	ld	r24, Z
    1db2:	8d 7f       	andi	r24, 0xFD	; 253
    1db4:	8c 93       	st	X, r24
    1db6:	56 c0       	rjmp	.+172    	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1db8:	ab e0       	ldi	r26, 0x0B	; 11
    1dba:	b1 e0       	ldi	r27, 0x01	; 1
    1dbc:	eb e0       	ldi	r30, 0x0B	; 11
    1dbe:	f1 e0       	ldi	r31, 0x01	; 1
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 77       	andi	r24, 0x7F	; 127
    1dc4:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1dc6:	ab e0       	ldi	r26, 0x0B	; 11
    1dc8:	b1 e0       	ldi	r27, 0x01	; 1
    1dca:	eb e0       	ldi	r30, 0x0B	; 11
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 7d       	andi	r24, 0xDF	; 223
    1dd2:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1dd4:	ab e0       	ldi	r26, 0x0B	; 11
    1dd6:	b1 e0       	ldi	r27, 0x01	; 1
    1dd8:	eb e0       	ldi	r30, 0x0B	; 11
    1dda:	f1 e0       	ldi	r31, 0x01	; 1
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 60       	ori	r24, 0x08	; 8
    1de0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1de2:	ab e0       	ldi	r26, 0x0B	; 11
    1de4:	b1 e0       	ldi	r27, 0x01	; 1
    1de6:	eb e0       	ldi	r30, 0x0B	; 11
    1de8:	f1 e0       	ldi	r31, 0x01	; 1
    1dea:	80 81       	ld	r24, Z
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	8c 93       	st	X, r24
    1df0:	39 c0       	rjmp	.+114    	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1df2:	ab e0       	ldi	r26, 0x0B	; 11
    1df4:	b1 e0       	ldi	r27, 0x01	; 1
    1df6:	eb e0       	ldi	r30, 0x0B	; 11
    1df8:	f1 e0       	ldi	r31, 0x01	; 1
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8f 77       	andi	r24, 0x7F	; 127
    1dfe:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1e00:	ab e0       	ldi	r26, 0x0B	; 11
    1e02:	b1 e0       	ldi	r27, 0x01	; 1
    1e04:	eb e0       	ldi	r30, 0x0B	; 11
    1e06:	f1 e0       	ldi	r31, 0x01	; 1
    1e08:	80 81       	ld	r24, Z
    1e0a:	8f 7d       	andi	r24, 0xDF	; 223
    1e0c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1e0e:	ab e0       	ldi	r26, 0x0B	; 11
    1e10:	b1 e0       	ldi	r27, 0x01	; 1
    1e12:	eb e0       	ldi	r30, 0x0B	; 11
    1e14:	f1 e0       	ldi	r31, 0x01	; 1
    1e16:	80 81       	ld	r24, Z
    1e18:	87 7f       	andi	r24, 0xF7	; 247
    1e1a:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1e1c:	ab e0       	ldi	r26, 0x0B	; 11
    1e1e:	b1 e0       	ldi	r27, 0x01	; 1
    1e20:	eb e0       	ldi	r30, 0x0B	; 11
    1e22:	f1 e0       	ldi	r31, 0x01	; 1
    1e24:	80 81       	ld	r24, Z
    1e26:	82 60       	ori	r24, 0x02	; 2
    1e28:	8c 93       	st	X, r24
    1e2a:	1c c0       	rjmp	.+56     	; 0x1e64 <steppermotor3Write+0x654>
                break;
            case 7 :
                PORTStepper3 |= (1 << PStepper3_1);
    1e2c:	ab e0       	ldi	r26, 0x0B	; 11
    1e2e:	b1 e0       	ldi	r27, 0x01	; 1
    1e30:	eb e0       	ldi	r30, 0x0B	; 11
    1e32:	f1 e0       	ldi	r31, 0x01	; 1
    1e34:	80 81       	ld	r24, Z
    1e36:	80 68       	ori	r24, 0x80	; 128
    1e38:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1e3a:	ab e0       	ldi	r26, 0x0B	; 11
    1e3c:	b1 e0       	ldi	r27, 0x01	; 1
    1e3e:	eb e0       	ldi	r30, 0x0B	; 11
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	80 81       	ld	r24, Z
    1e44:	8f 7d       	andi	r24, 0xDF	; 223
    1e46:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1e48:	ab e0       	ldi	r26, 0x0B	; 11
    1e4a:	b1 e0       	ldi	r27, 0x01	; 1
    1e4c:	eb e0       	ldi	r30, 0x0B	; 11
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	80 81       	ld	r24, Z
    1e52:	87 7f       	andi	r24, 0xF7	; 247
    1e54:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1e56:	ab e0       	ldi	r26, 0x0B	; 11
    1e58:	b1 e0       	ldi	r27, 0x01	; 1
    1e5a:	eb e0       	ldi	r30, 0x0B	; 11
    1e5c:	f1 e0       	ldi	r31, 0x01	; 1
    1e5e:	80 81       	ld	r24, Z
    1e60:	82 60       	ori	r24, 0x02	; 2
    1e62:	8c 93       	st	X, r24
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	aa e7       	ldi	r26, 0x7A	; 122
    1e6a:	b4 e4       	ldi	r27, 0x44	; 68
    1e6c:	8d 8b       	std	Y+21, r24	; 0x15
    1e6e:	9e 8b       	std	Y+22, r25	; 0x16
    1e70:	af 8b       	std	Y+23, r26	; 0x17
    1e72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	2b ea       	ldi	r18, 0xAB	; 171
    1e7e:	3a ea       	ldi	r19, 0xAA	; 170
    1e80:	4a ea       	ldi	r20, 0xAA	; 170
    1e82:	50 e4       	ldi	r21, 0x40	; 64
    1e84:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	89 8b       	std	Y+17, r24	; 0x11
    1e8e:	9a 8b       	std	Y+18, r25	; 0x12
    1e90:	ab 8b       	std	Y+19, r26	; 0x13
    1e92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e94:	69 89       	ldd	r22, Y+17	; 0x11
    1e96:	7a 89       	ldd	r23, Y+18	; 0x12
    1e98:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	1c f4       	brge	.+6      	; 0x1eb2 <steppermotor3Write+0x6a2>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	88 8b       	std	Y+16, r24	; 0x10
    1eb0:	91 c0       	rjmp	.+290    	; 0x1fd4 <steppermotor3Write+0x7c4>
	else if (__tmp > 255)
    1eb2:	69 89       	ldd	r22, Y+17	; 0x11
    1eb4:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	53 e4       	ldi	r21, 0x43	; 67
    1ec2:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	0c f0       	brlt	.+2      	; 0x1ecc <steppermotor3Write+0x6bc>
    1eca:	7b c0       	rjmp	.+246    	; 0x1fc2 <steppermotor3Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ece:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	54 e4       	ldi	r21, 0x44	; 68
    1edc:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8c 87       	std	Y+12, r24	; 0x0c
    1ee6:	9d 87       	std	Y+13, r25	; 0x0d
    1ee8:	ae 87       	std	Y+14, r26	; 0x0e
    1eea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eee:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ef2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a e7       	ldi	r20, 0x7A	; 122
    1efa:	55 e4       	ldi	r21, 0x45	; 69
    1efc:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	88 87       	std	Y+8, r24	; 0x08
    1f06:	99 87       	std	Y+9, r25	; 0x09
    1f08:	aa 87       	std	Y+10, r26	; 0x0a
    1f0a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f0c:	68 85       	ldd	r22, Y+8	; 0x08
    1f0e:	79 85       	ldd	r23, Y+9	; 0x09
    1f10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <steppermotor3Write+0x71e>
		__ticks = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9f 83       	std	Y+7, r25	; 0x07
    1f2a:	8e 83       	std	Y+6, r24	; 0x06
    1f2c:	3f c0       	rjmp	.+126    	; 0x1fac <steppermotor3Write+0x79c>
	else if (__tmp > 65535)
    1f2e:	68 85       	ldd	r22, Y+8	; 0x08
    1f30:	79 85       	ldd	r23, Y+9	; 0x09
    1f32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	57 e4       	ldi	r21, 0x47	; 71
    1f3e:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    1f42:	18 16       	cp	r1, r24
    1f44:	4c f5       	brge	.+82     	; 0x1f98 <steppermotor3Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f46:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f48:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9f 83       	std	Y+7, r25	; 0x07
    1f6c:	8e 83       	std	Y+6, r24	; 0x06
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <steppermotor3Write+0x77e>
    1f70:	80 e9       	ldi	r24, 0x90	; 144
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	9d 83       	std	Y+5, r25	; 0x05
    1f76:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <steppermotor3Write+0x76c>
    1f80:	9d 83       	std	Y+5, r25	; 0x05
    1f82:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	8e 81       	ldd	r24, Y+6	; 0x06
    1f86:	9f 81       	ldd	r25, Y+7	; 0x07
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	9f 83       	std	Y+7, r25	; 0x07
    1f8c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f90:	9f 81       	ldd	r25, Y+7	; 0x07
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <steppermotor3Write+0x760>
    1f96:	24 c0       	rjmp	.+72     	; 0x1fe0 <steppermotor3Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	68 85       	ldd	r22, Y+8	; 0x08
    1f9a:	79 85       	ldd	r23, Y+9	; 0x09
    1f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9f 83       	std	Y+7, r25	; 0x07
    1faa:	8e 83       	std	Y+6, r24	; 0x06
    1fac:	8e 81       	ldd	r24, Y+6	; 0x06
    1fae:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb0:	9b 83       	std	Y+3, r25	; 0x03
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <steppermotor3Write+0x7a8>
    1fbc:	9b 83       	std	Y+3, r25	; 0x03
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <steppermotor3Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fc2:	69 89       	ldd	r22, Y+17	; 0x11
    1fc4:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fca:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	88 8b       	std	Y+16, r24	; 0x10
    1fd4:	88 89       	ldd	r24, Y+16	; 0x10
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	8a 95       	dec	r24
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <steppermotor3Write+0x7ca>
    1fde:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1fe0:	89 a9       	ldd	r24, Y+49	; 0x31
    1fe2:	9a a9       	ldd	r25, Y+50	; 0x32
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9a ab       	std	Y+50, r25	; 0x32
    1fe8:	89 ab       	std	Y+49, r24	; 0x31
    1fea:	89 a9       	ldd	r24, Y+49	; 0x31
    1fec:	9a a9       	ldd	r25, Y+50	; 0x32
    1fee:	18 16       	cp	r1, r24
    1ff0:	19 06       	cpc	r1, r25
    1ff2:	0c f4       	brge	.+2      	; 0x1ff6 <steppermotor3Write+0x7e6>
    1ff4:	17 ce       	rjmp	.-978    	; 0x1c24 <steppermotor3Write+0x414>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1ff6:	1e aa       	std	Y+54, r1	; 0x36
    1ff8:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    1ffa:	8d a9       	ldd	r24, Y+53	; 0x35
    1ffc:	9e a9       	ldd	r25, Y+54	; 0x36
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	91 05       	cpc	r25, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <steppermotor3Write+0x7f6>
    2004:	0a ce       	rjmp	.-1004   	; 0x1c1a <steppermotor3Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    2006:	ea 96       	adiw	r28, 0x3a	; 58
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <steppermotor4Write>:

void steppermotor4Write(int a)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	ea 97       	sbiw	r28, 0x3a	; 58
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	9e ab       	std	Y+54, r25	; 0x36
    202e:	8d ab       	std	Y+53, r24	; 0x35
    2030:	f1 c1       	rjmp	.+994    	; 0x2414 <__stack+0x215>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c ab       	std	Y+52, r25	; 0x34
    2038:	8b ab       	std	Y+51, r24	; 0x33
    203a:	e4 c1       	rjmp	.+968    	; 0x2404 <__stack+0x205>
        {
            switch (i)
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	98 af       	std	Y+56, r25	; 0x38
    2042:	8f ab       	std	Y+55, r24	; 0x37
    2044:	8f a9       	ldd	r24, Y+55	; 0x37
    2046:	98 ad       	ldd	r25, Y+56	; 0x38
    2048:	84 30       	cpi	r24, 0x04	; 4
    204a:	91 05       	cpc	r25, r1
    204c:	09 f4       	brne	.+2      	; 0x2050 <steppermotor4Write+0x38>
    204e:	87 c0       	rjmp	.+270    	; 0x215e <steppermotor4Write+0x146>
    2050:	8f a9       	ldd	r24, Y+55	; 0x37
    2052:	98 ad       	ldd	r25, Y+56	; 0x38
    2054:	85 30       	cpi	r24, 0x05	; 5
    2056:	91 05       	cpc	r25, r1
    2058:	94 f4       	brge	.+36     	; 0x207e <steppermotor4Write+0x66>
    205a:	8f a9       	ldd	r24, Y+55	; 0x37
    205c:	98 ad       	ldd	r25, Y+56	; 0x38
    205e:	82 30       	cpi	r24, 0x02	; 2
    2060:	91 05       	cpc	r25, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <steppermotor4Write+0x4e>
    2064:	42 c0       	rjmp	.+132    	; 0x20ea <steppermotor4Write+0xd2>
    2066:	8f a9       	ldd	r24, Y+55	; 0x37
    2068:	98 ad       	ldd	r25, Y+56	; 0x38
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	91 05       	cpc	r25, r1
    206e:	0c f0       	brlt	.+2      	; 0x2072 <steppermotor4Write+0x5a>
    2070:	59 c0       	rjmp	.+178    	; 0x2124 <steppermotor4Write+0x10c>
    2072:	8f a9       	ldd	r24, Y+55	; 0x37
    2074:	98 ad       	ldd	r25, Y+56	; 0x38
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	91 05       	cpc	r25, r1
    207a:	d1 f0       	breq	.+52     	; 0x20b0 <steppermotor4Write+0x98>
    207c:	00 c1       	rjmp	.+512    	; 0x227e <__stack+0x7f>
    207e:	8f a9       	ldd	r24, Y+55	; 0x37
    2080:	98 ad       	ldd	r25, Y+56	; 0x38
    2082:	86 30       	cpi	r24, 0x06	; 6
    2084:	91 05       	cpc	r25, r1
    2086:	09 f4       	brne	.+2      	; 0x208a <steppermotor4Write+0x72>
    2088:	a4 c0       	rjmp	.+328    	; 0x21d2 <steppermotor4Write+0x1ba>
    208a:	8f a9       	ldd	r24, Y+55	; 0x37
    208c:	98 ad       	ldd	r25, Y+56	; 0x38
    208e:	86 30       	cpi	r24, 0x06	; 6
    2090:	91 05       	cpc	r25, r1
    2092:	0c f4       	brge	.+2      	; 0x2096 <steppermotor4Write+0x7e>
    2094:	81 c0       	rjmp	.+258    	; 0x2198 <steppermotor4Write+0x180>
    2096:	8f a9       	ldd	r24, Y+55	; 0x37
    2098:	98 ad       	ldd	r25, Y+56	; 0x38
    209a:	87 30       	cpi	r24, 0x07	; 7
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <steppermotor4Write+0x8a>
    20a0:	b5 c0       	rjmp	.+362    	; 0x220c <__stack+0xd>
    20a2:	8f a9       	ldd	r24, Y+55	; 0x37
    20a4:	98 ad       	ldd	r25, Y+56	; 0x38
    20a6:	88 30       	cpi	r24, 0x08	; 8
    20a8:	91 05       	cpc	r25, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <steppermotor4Write+0x96>
    20ac:	cc c0       	rjmp	.+408    	; 0x2246 <__stack+0x47>
    20ae:	e7 c0       	rjmp	.+462    	; 0x227e <__stack+0x7f>
            {
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    20b0:	ab e0       	ldi	r26, 0x0B	; 11
    20b2:	b1 e0       	ldi	r27, 0x01	; 1
    20b4:	eb e0       	ldi	r30, 0x0B	; 11
    20b6:	f1 e0       	ldi	r31, 0x01	; 1
    20b8:	80 81       	ld	r24, Z
    20ba:	80 64       	ori	r24, 0x40	; 64
    20bc:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    20be:	ab e0       	ldi	r26, 0x0B	; 11
    20c0:	b1 e0       	ldi	r27, 0x01	; 1
    20c2:	eb e0       	ldi	r30, 0x0B	; 11
    20c4:	f1 e0       	ldi	r31, 0x01	; 1
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 7e       	andi	r24, 0xEF	; 239
    20ca:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    20cc:	ab e0       	ldi	r26, 0x0B	; 11
    20ce:	b1 e0       	ldi	r27, 0x01	; 1
    20d0:	eb e0       	ldi	r30, 0x0B	; 11
    20d2:	f1 e0       	ldi	r31, 0x01	; 1
    20d4:	80 81       	ld	r24, Z
    20d6:	8b 7f       	andi	r24, 0xFB	; 251
    20d8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    20da:	ab e0       	ldi	r26, 0x0B	; 11
    20dc:	b1 e0       	ldi	r27, 0x01	; 1
    20de:	eb e0       	ldi	r30, 0x0B	; 11
    20e0:	f1 e0       	ldi	r31, 0x01	; 1
    20e2:	80 81       	ld	r24, Z
    20e4:	8e 7f       	andi	r24, 0xFE	; 254
    20e6:	8c 93       	st	X, r24
    20e8:	ca c0       	rjmp	.+404    	; 0x227e <__stack+0x7f>
                break;
            case 2 :
                PORTStepper4 |= (1 << PStepper4_1);
    20ea:	ab e0       	ldi	r26, 0x0B	; 11
    20ec:	b1 e0       	ldi	r27, 0x01	; 1
    20ee:	eb e0       	ldi	r30, 0x0B	; 11
    20f0:	f1 e0       	ldi	r31, 0x01	; 1
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    20f8:	ab e0       	ldi	r26, 0x0B	; 11
    20fa:	b1 e0       	ldi	r27, 0x01	; 1
    20fc:	eb e0       	ldi	r30, 0x0B	; 11
    20fe:	f1 e0       	ldi	r31, 0x01	; 1
    2100:	80 81       	ld	r24, Z
    2102:	80 61       	ori	r24, 0x10	; 16
    2104:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2106:	ab e0       	ldi	r26, 0x0B	; 11
    2108:	b1 e0       	ldi	r27, 0x01	; 1
    210a:	eb e0       	ldi	r30, 0x0B	; 11
    210c:	f1 e0       	ldi	r31, 0x01	; 1
    210e:	80 81       	ld	r24, Z
    2110:	8b 7f       	andi	r24, 0xFB	; 251
    2112:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2114:	ab e0       	ldi	r26, 0x0B	; 11
    2116:	b1 e0       	ldi	r27, 0x01	; 1
    2118:	eb e0       	ldi	r30, 0x0B	; 11
    211a:	f1 e0       	ldi	r31, 0x01	; 1
    211c:	80 81       	ld	r24, Z
    211e:	8e 7f       	andi	r24, 0xFE	; 254
    2120:	8c 93       	st	X, r24
    2122:	ad c0       	rjmp	.+346    	; 0x227e <__stack+0x7f>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2124:	ab e0       	ldi	r26, 0x0B	; 11
    2126:	b1 e0       	ldi	r27, 0x01	; 1
    2128:	eb e0       	ldi	r30, 0x0B	; 11
    212a:	f1 e0       	ldi	r31, 0x01	; 1
    212c:	80 81       	ld	r24, Z
    212e:	8f 7b       	andi	r24, 0xBF	; 191
    2130:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2132:	ab e0       	ldi	r26, 0x0B	; 11
    2134:	b1 e0       	ldi	r27, 0x01	; 1
    2136:	eb e0       	ldi	r30, 0x0B	; 11
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	80 81       	ld	r24, Z
    213c:	80 61       	ori	r24, 0x10	; 16
    213e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2140:	ab e0       	ldi	r26, 0x0B	; 11
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	eb e0       	ldi	r30, 0x0B	; 11
    2146:	f1 e0       	ldi	r31, 0x01	; 1
    2148:	80 81       	ld	r24, Z
    214a:	8b 7f       	andi	r24, 0xFB	; 251
    214c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    214e:	ab e0       	ldi	r26, 0x0B	; 11
    2150:	b1 e0       	ldi	r27, 0x01	; 1
    2152:	eb e0       	ldi	r30, 0x0B	; 11
    2154:	f1 e0       	ldi	r31, 0x01	; 1
    2156:	80 81       	ld	r24, Z
    2158:	8e 7f       	andi	r24, 0xFE	; 254
    215a:	8c 93       	st	X, r24
    215c:	90 c0       	rjmp	.+288    	; 0x227e <__stack+0x7f>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    215e:	ab e0       	ldi	r26, 0x0B	; 11
    2160:	b1 e0       	ldi	r27, 0x01	; 1
    2162:	eb e0       	ldi	r30, 0x0B	; 11
    2164:	f1 e0       	ldi	r31, 0x01	; 1
    2166:	80 81       	ld	r24, Z
    2168:	8f 7b       	andi	r24, 0xBF	; 191
    216a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    216c:	ab e0       	ldi	r26, 0x0B	; 11
    216e:	b1 e0       	ldi	r27, 0x01	; 1
    2170:	eb e0       	ldi	r30, 0x0B	; 11
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	80 81       	ld	r24, Z
    2176:	80 61       	ori	r24, 0x10	; 16
    2178:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    217a:	ab e0       	ldi	r26, 0x0B	; 11
    217c:	b1 e0       	ldi	r27, 0x01	; 1
    217e:	eb e0       	ldi	r30, 0x0B	; 11
    2180:	f1 e0       	ldi	r31, 0x01	; 1
    2182:	80 81       	ld	r24, Z
    2184:	84 60       	ori	r24, 0x04	; 4
    2186:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2188:	ab e0       	ldi	r26, 0x0B	; 11
    218a:	b1 e0       	ldi	r27, 0x01	; 1
    218c:	eb e0       	ldi	r30, 0x0B	; 11
    218e:	f1 e0       	ldi	r31, 0x01	; 1
    2190:	80 81       	ld	r24, Z
    2192:	8e 7f       	andi	r24, 0xFE	; 254
    2194:	8c 93       	st	X, r24
    2196:	73 c0       	rjmp	.+230    	; 0x227e <__stack+0x7f>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2198:	ab e0       	ldi	r26, 0x0B	; 11
    219a:	b1 e0       	ldi	r27, 0x01	; 1
    219c:	eb e0       	ldi	r30, 0x0B	; 11
    219e:	f1 e0       	ldi	r31, 0x01	; 1
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 7b       	andi	r24, 0xBF	; 191
    21a4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    21a6:	ab e0       	ldi	r26, 0x0B	; 11
    21a8:	b1 e0       	ldi	r27, 0x01	; 1
    21aa:	eb e0       	ldi	r30, 0x0B	; 11
    21ac:	f1 e0       	ldi	r31, 0x01	; 1
    21ae:	80 81       	ld	r24, Z
    21b0:	8f 7e       	andi	r24, 0xEF	; 239
    21b2:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    21b4:	ab e0       	ldi	r26, 0x0B	; 11
    21b6:	b1 e0       	ldi	r27, 0x01	; 1
    21b8:	eb e0       	ldi	r30, 0x0B	; 11
    21ba:	f1 e0       	ldi	r31, 0x01	; 1
    21bc:	80 81       	ld	r24, Z
    21be:	84 60       	ori	r24, 0x04	; 4
    21c0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    21c2:	ab e0       	ldi	r26, 0x0B	; 11
    21c4:	b1 e0       	ldi	r27, 0x01	; 1
    21c6:	eb e0       	ldi	r30, 0x0B	; 11
    21c8:	f1 e0       	ldi	r31, 0x01	; 1
    21ca:	80 81       	ld	r24, Z
    21cc:	8e 7f       	andi	r24, 0xFE	; 254
    21ce:	8c 93       	st	X, r24
    21d0:	56 c0       	rjmp	.+172    	; 0x227e <__stack+0x7f>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    21d2:	ab e0       	ldi	r26, 0x0B	; 11
    21d4:	b1 e0       	ldi	r27, 0x01	; 1
    21d6:	eb e0       	ldi	r30, 0x0B	; 11
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	80 81       	ld	r24, Z
    21dc:	8f 7b       	andi	r24, 0xBF	; 191
    21de:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    21e0:	ab e0       	ldi	r26, 0x0B	; 11
    21e2:	b1 e0       	ldi	r27, 0x01	; 1
    21e4:	eb e0       	ldi	r30, 0x0B	; 11
    21e6:	f1 e0       	ldi	r31, 0x01	; 1
    21e8:	80 81       	ld	r24, Z
    21ea:	8f 7e       	andi	r24, 0xEF	; 239
    21ec:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    21ee:	ab e0       	ldi	r26, 0x0B	; 11
    21f0:	b1 e0       	ldi	r27, 0x01	; 1
    21f2:	eb e0       	ldi	r30, 0x0B	; 11
    21f4:	f1 e0       	ldi	r31, 0x01	; 1
    21f6:	80 81       	ld	r24, Z
    21f8:	84 60       	ori	r24, 0x04	; 4
    21fa:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    21fc:	ab e0       	ldi	r26, 0x0B	; 11
    21fe:	b1 e0       	ldi	r27, 0x01	; 1
    2200:	eb e0       	ldi	r30, 0x0B	; 11
    2202:	f1 e0       	ldi	r31, 0x01	; 1
    2204:	80 81       	ld	r24, Z
    2206:	81 60       	ori	r24, 0x01	; 1
    2208:	8c 93       	st	X, r24
    220a:	39 c0       	rjmp	.+114    	; 0x227e <__stack+0x7f>
                break;
            case 7 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    220c:	ab e0       	ldi	r26, 0x0B	; 11
    220e:	b1 e0       	ldi	r27, 0x01	; 1
    2210:	eb e0       	ldi	r30, 0x0B	; 11
    2212:	f1 e0       	ldi	r31, 0x01	; 1
    2214:	80 81       	ld	r24, Z
    2216:	8f 7b       	andi	r24, 0xBF	; 191
    2218:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    221a:	ab e0       	ldi	r26, 0x0B	; 11
    221c:	b1 e0       	ldi	r27, 0x01	; 1
    221e:	eb e0       	ldi	r30, 0x0B	; 11
    2220:	f1 e0       	ldi	r31, 0x01	; 1
    2222:	80 81       	ld	r24, Z
    2224:	8f 7e       	andi	r24, 0xEF	; 239
    2226:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2228:	ab e0       	ldi	r26, 0x0B	; 11
    222a:	b1 e0       	ldi	r27, 0x01	; 1
    222c:	eb e0       	ldi	r30, 0x0B	; 11
    222e:	f1 e0       	ldi	r31, 0x01	; 1
    2230:	80 81       	ld	r24, Z
    2232:	8b 7f       	andi	r24, 0xFB	; 251
    2234:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2236:	ab e0       	ldi	r26, 0x0B	; 11
    2238:	b1 e0       	ldi	r27, 0x01	; 1
    223a:	eb e0       	ldi	r30, 0x0B	; 11
    223c:	f1 e0       	ldi	r31, 0x01	; 1
    223e:	80 81       	ld	r24, Z
    2240:	81 60       	ori	r24, 0x01	; 1
    2242:	8c 93       	st	X, r24
    2244:	1c c0       	rjmp	.+56     	; 0x227e <__stack+0x7f>
                break;
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2246:	ab e0       	ldi	r26, 0x0B	; 11
    2248:	b1 e0       	ldi	r27, 0x01	; 1
    224a:	eb e0       	ldi	r30, 0x0B	; 11
    224c:	f1 e0       	ldi	r31, 0x01	; 1
    224e:	80 81       	ld	r24, Z
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2254:	ab e0       	ldi	r26, 0x0B	; 11
    2256:	b1 e0       	ldi	r27, 0x01	; 1
    2258:	eb e0       	ldi	r30, 0x0B	; 11
    225a:	f1 e0       	ldi	r31, 0x01	; 1
    225c:	80 81       	ld	r24, Z
    225e:	8f 7e       	andi	r24, 0xEF	; 239
    2260:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2262:	ab e0       	ldi	r26, 0x0B	; 11
    2264:	b1 e0       	ldi	r27, 0x01	; 1
    2266:	eb e0       	ldi	r30, 0x0B	; 11
    2268:	f1 e0       	ldi	r31, 0x01	; 1
    226a:	80 81       	ld	r24, Z
    226c:	8b 7f       	andi	r24, 0xFB	; 251
    226e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2270:	ab e0       	ldi	r26, 0x0B	; 11
    2272:	b1 e0       	ldi	r27, 0x01	; 1
    2274:	eb e0       	ldi	r30, 0x0B	; 11
    2276:	f1 e0       	ldi	r31, 0x01	; 1
    2278:	80 81       	ld	r24, Z
    227a:	81 60       	ori	r24, 0x01	; 1
    227c:	8c 93       	st	X, r24
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	aa e7       	ldi	r26, 0x7A	; 122
    2284:	b4 e4       	ldi	r27, 0x44	; 68
    2286:	8d a7       	std	Y+45, r24	; 0x2d
    2288:	9e a7       	std	Y+46, r25	; 0x2e
    228a:	af a7       	std	Y+47, r26	; 0x2f
    228c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2290:	7e a5       	ldd	r23, Y+46	; 0x2e
    2292:	8f a5       	ldd	r24, Y+47	; 0x2f
    2294:	98 a9       	ldd	r25, Y+48	; 0x30
    2296:	2b ea       	ldi	r18, 0xAB	; 171
    2298:	3a ea       	ldi	r19, 0xAA	; 170
    229a:	4a ea       	ldi	r20, 0xAA	; 170
    229c:	50 e4       	ldi	r21, 0x40	; 64
    229e:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	89 a7       	std	Y+41, r24	; 0x29
    22a8:	9a a7       	std	Y+42, r25	; 0x2a
    22aa:	ab a7       	std	Y+43, r26	; 0x2b
    22ac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22ae:	69 a5       	ldd	r22, Y+41	; 0x29
    22b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    22b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	1c f4       	brge	.+6      	; 0x22cc <__stack+0xcd>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	88 a7       	std	Y+40, r24	; 0x28
    22ca:	91 c0       	rjmp	.+290    	; 0x23ee <__stack+0x1ef>
	else if (__tmp > 255)
    22cc:	69 a5       	ldd	r22, Y+41	; 0x29
    22ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    22d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	0c f0       	brlt	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	7b c0       	rjmp	.+246    	; 0x23dc <__stack+0x1dd>
	{
		_delay_ms(__us / 1000.0);
    22e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    22ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ec:	98 a9       	ldd	r25, Y+48	; 0x30
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8c a3       	std	Y+36, r24	; 0x24
    2300:	9d a3       	std	Y+37, r25	; 0x25
    2302:	ae a3       	std	Y+38, r26	; 0x26
    2304:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6c a1       	ldd	r22, Y+36	; 0x24
    2308:	7d a1       	ldd	r23, Y+37	; 0x25
    230a:	8e a1       	ldd	r24, Y+38	; 0x26
    230c:	9f a1       	ldd	r25, Y+39	; 0x27
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	55 e4       	ldi	r21, 0x45	; 69
    2316:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	88 a3       	std	Y+32, r24	; 0x20
    2320:	99 a3       	std	Y+33, r25	; 0x21
    2322:	aa a3       	std	Y+34, r26	; 0x22
    2324:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2326:	68 a1       	ldd	r22, Y+32	; 0x20
    2328:	79 a1       	ldd	r23, Y+33	; 0x21
    232a:	8a a1       	ldd	r24, Y+34	; 0x22
    232c:	9b a1       	ldd	r25, Y+35	; 0x23
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <__stack+0x149>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9f 8f       	std	Y+31, r25	; 0x1f
    2344:	8e 8f       	std	Y+30, r24	; 0x1e
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <__stack+0x1c7>
	else if (__tmp > 65535)
    2348:	68 a1       	ldd	r22, Y+32	; 0x20
    234a:	79 a1       	ldd	r23, Y+33	; 0x21
    234c:	8a a1       	ldd	r24, Y+34	; 0x22
    234e:	9b a1       	ldd	r25, Y+35	; 0x23
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <__stack+0x1b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6c a1       	ldd	r22, Y+36	; 0x24
    2362:	7d a1       	ldd	r23, Y+37	; 0x25
    2364:	8e a1       	ldd	r24, Y+38	; 0x26
    2366:	9f a1       	ldd	r25, Y+39	; 0x27
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9f 8f       	std	Y+31, r25	; 0x1f
    2386:	8e 8f       	std	Y+30, r24	; 0x1e
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <__stack+0x1a9>
    238a:	80 e9       	ldi	r24, 0x90	; 144
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	9d 8f       	std	Y+29, r25	; 0x1d
    2390:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2392:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2394:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <__stack+0x197>
    239a:	9d 8f       	std	Y+29, r25	; 0x1d
    239c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9f 8f       	std	Y+31, r25	; 0x1f
    23a6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <__stack+0x18b>
    23b0:	24 c0       	rjmp	.+72     	; 0x23fa <__stack+0x1fb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	68 a1       	ldd	r22, Y+32	; 0x20
    23b4:	79 a1       	ldd	r23, Y+33	; 0x21
    23b6:	8a a1       	ldd	r24, Y+34	; 0x22
    23b8:	9b a1       	ldd	r25, Y+35	; 0x23
    23ba:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9f 8f       	std	Y+31, r25	; 0x1f
    23c4:	8e 8f       	std	Y+30, r24	; 0x1e
    23c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ca:	9b 8f       	std	Y+27, r25	; 0x1b
    23cc:	8a 8f       	std	Y+26, r24	; 0x1a
    23ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <__stack+0x1d3>
    23d6:	9b 8f       	std	Y+27, r25	; 0x1b
    23d8:	8a 8f       	std	Y+26, r24	; 0x1a
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <__stack+0x1fb>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23dc:	69 a5       	ldd	r22, Y+41	; 0x29
    23de:	7a a5       	ldd	r23, Y+42	; 0x2a
    23e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23e4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	88 a7       	std	Y+40, r24	; 0x28
    23ee:	88 a5       	ldd	r24, Y+40	; 0x28
    23f0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f2:	89 8d       	ldd	r24, Y+25	; 0x19
    23f4:	8a 95       	dec	r24
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <__stack+0x1f5>
    23f8:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor4Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    23fa:	8b a9       	ldd	r24, Y+51	; 0x33
    23fc:	9c a9       	ldd	r25, Y+52	; 0x34
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	9c ab       	std	Y+52, r25	; 0x34
    2402:	8b ab       	std	Y+51, r24	; 0x33
    2404:	8b a9       	ldd	r24, Y+51	; 0x33
    2406:	9c a9       	ldd	r25, Y+52	; 0x34
    2408:	88 30       	cpi	r24, 0x08	; 8
    240a:	91 05       	cpc	r25, r1
    240c:	0c f4       	brge	.+2      	; 0x2410 <__stack+0x211>
    240e:	16 ce       	rjmp	.-980    	; 0x203c <steppermotor4Write+0x24>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    2410:	1e aa       	std	Y+54, r1	; 0x36
    2412:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor4Write(int a)
{
    while(a  == 1)
    2414:	8d a9       	ldd	r24, Y+53	; 0x35
    2416:	9e a9       	ldd	r25, Y+54	; 0x36
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	09 f4       	brne	.+2      	; 0x2420 <__stack+0x221>
    241e:	09 ce       	rjmp	.-1006   	; 0x2032 <steppermotor4Write+0x1a>
    2420:	f0 c1       	rjmp	.+992    	; 0x2802 <__stack+0x603>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    2422:	88 e0       	ldi	r24, 0x08	; 8
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a ab       	std	Y+50, r25	; 0x32
    2428:	89 ab       	std	Y+49, r24	; 0x31
    242a:	e3 c1       	rjmp	.+966    	; 0x27f2 <__stack+0x5f3>
        {
            switch (i)
    242c:	89 a9       	ldd	r24, Y+49	; 0x31
    242e:	9a a9       	ldd	r25, Y+50	; 0x32
    2430:	9a af       	std	Y+58, r25	; 0x3a
    2432:	89 af       	std	Y+57, r24	; 0x39
    2434:	89 ad       	ldd	r24, Y+57	; 0x39
    2436:	9a ad       	ldd	r25, Y+58	; 0x3a
    2438:	84 30       	cpi	r24, 0x04	; 4
    243a:	91 05       	cpc	r25, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <__stack+0x241>
    243e:	a3 c0       	rjmp	.+326    	; 0x2586 <__stack+0x387>
    2440:	89 ad       	ldd	r24, Y+57	; 0x39
    2442:	9a ad       	ldd	r25, Y+58	; 0x3a
    2444:	85 30       	cpi	r24, 0x05	; 5
    2446:	91 05       	cpc	r25, r1
    2448:	94 f4       	brge	.+36     	; 0x246e <__stack+0x26f>
    244a:	89 ad       	ldd	r24, Y+57	; 0x39
    244c:	9a ad       	ldd	r25, Y+58	; 0x3a
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	91 05       	cpc	r25, r1
    2452:	09 f4       	brne	.+2      	; 0x2456 <__stack+0x257>
    2454:	5e c0       	rjmp	.+188    	; 0x2512 <__stack+0x313>
    2456:	89 ad       	ldd	r24, Y+57	; 0x39
    2458:	9a ad       	ldd	r25, Y+58	; 0x3a
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	91 05       	cpc	r25, r1
    245e:	0c f0       	brlt	.+2      	; 0x2462 <__stack+0x263>
    2460:	75 c0       	rjmp	.+234    	; 0x254c <__stack+0x34d>
    2462:	89 ad       	ldd	r24, Y+57	; 0x39
    2464:	9a ad       	ldd	r25, Y+58	; 0x3a
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	b1 f1       	breq	.+108    	; 0x24d8 <__stack+0x2d9>
    246c:	ff c0       	rjmp	.+510    	; 0x266c <__stack+0x46d>
    246e:	89 ad       	ldd	r24, Y+57	; 0x39
    2470:	9a ad       	ldd	r25, Y+58	; 0x3a
    2472:	86 30       	cpi	r24, 0x06	; 6
    2474:	91 05       	cpc	r25, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <__stack+0x27b>
    2478:	c0 c0       	rjmp	.+384    	; 0x25fa <__stack+0x3fb>
    247a:	89 ad       	ldd	r24, Y+57	; 0x39
    247c:	9a ad       	ldd	r25, Y+58	; 0x3a
    247e:	86 30       	cpi	r24, 0x06	; 6
    2480:	91 05       	cpc	r25, r1
    2482:	0c f4       	brge	.+2      	; 0x2486 <__stack+0x287>
    2484:	9d c0       	rjmp	.+314    	; 0x25c0 <__stack+0x3c1>
    2486:	89 ad       	ldd	r24, Y+57	; 0x39
    2488:	9a ad       	ldd	r25, Y+58	; 0x3a
    248a:	87 30       	cpi	r24, 0x07	; 7
    248c:	91 05       	cpc	r25, r1
    248e:	09 f4       	brne	.+2      	; 0x2492 <__stack+0x293>
    2490:	d1 c0       	rjmp	.+418    	; 0x2634 <__stack+0x435>
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	9a ad       	ldd	r25, Y+58	; 0x3a
    2496:	88 30       	cpi	r24, 0x08	; 8
    2498:	91 05       	cpc	r25, r1
    249a:	09 f0       	breq	.+2      	; 0x249e <__stack+0x29f>
    249c:	e7 c0       	rjmp	.+462    	; 0x266c <__stack+0x46d>
            {
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    249e:	ab e0       	ldi	r26, 0x0B	; 11
    24a0:	b1 e0       	ldi	r27, 0x01	; 1
    24a2:	eb e0       	ldi	r30, 0x0B	; 11
    24a4:	f1 e0       	ldi	r31, 0x01	; 1
    24a6:	80 81       	ld	r24, Z
    24a8:	80 64       	ori	r24, 0x40	; 64
    24aa:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    24ac:	ab e0       	ldi	r26, 0x0B	; 11
    24ae:	b1 e0       	ldi	r27, 0x01	; 1
    24b0:	eb e0       	ldi	r30, 0x0B	; 11
    24b2:	f1 e0       	ldi	r31, 0x01	; 1
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 7e       	andi	r24, 0xEF	; 239
    24b8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24ba:	ab e0       	ldi	r26, 0x0B	; 11
    24bc:	b1 e0       	ldi	r27, 0x01	; 1
    24be:	eb e0       	ldi	r30, 0x0B	; 11
    24c0:	f1 e0       	ldi	r31, 0x01	; 1
    24c2:	80 81       	ld	r24, Z
    24c4:	8b 7f       	andi	r24, 0xFB	; 251
    24c6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24c8:	ab e0       	ldi	r26, 0x0B	; 11
    24ca:	b1 e0       	ldi	r27, 0x01	; 1
    24cc:	eb e0       	ldi	r30, 0x0B	; 11
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	80 81       	ld	r24, Z
    24d2:	8e 7f       	andi	r24, 0xFE	; 254
    24d4:	8c 93       	st	X, r24
    24d6:	ca c0       	rjmp	.+404    	; 0x266c <__stack+0x46d>
                break;
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    24d8:	ab e0       	ldi	r26, 0x0B	; 11
    24da:	b1 e0       	ldi	r27, 0x01	; 1
    24dc:	eb e0       	ldi	r30, 0x0B	; 11
    24de:	f1 e0       	ldi	r31, 0x01	; 1
    24e0:	80 81       	ld	r24, Z
    24e2:	80 64       	ori	r24, 0x40	; 64
    24e4:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24e6:	ab e0       	ldi	r26, 0x0B	; 11
    24e8:	b1 e0       	ldi	r27, 0x01	; 1
    24ea:	eb e0       	ldi	r30, 0x0B	; 11
    24ec:	f1 e0       	ldi	r31, 0x01	; 1
    24ee:	80 81       	ld	r24, Z
    24f0:	80 61       	ori	r24, 0x10	; 16
    24f2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24f4:	ab e0       	ldi	r26, 0x0B	; 11
    24f6:	b1 e0       	ldi	r27, 0x01	; 1
    24f8:	eb e0       	ldi	r30, 0x0B	; 11
    24fa:	f1 e0       	ldi	r31, 0x01	; 1
    24fc:	80 81       	ld	r24, Z
    24fe:	8b 7f       	andi	r24, 0xFB	; 251
    2500:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2502:	ab e0       	ldi	r26, 0x0B	; 11
    2504:	b1 e0       	ldi	r27, 0x01	; 1
    2506:	eb e0       	ldi	r30, 0x0B	; 11
    2508:	f1 e0       	ldi	r31, 0x01	; 1
    250a:	80 81       	ld	r24, Z
    250c:	8e 7f       	andi	r24, 0xFE	; 254
    250e:	8c 93       	st	X, r24
    2510:	ad c0       	rjmp	.+346    	; 0x266c <__stack+0x46d>
                break;
            case 2 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2512:	ab e0       	ldi	r26, 0x0B	; 11
    2514:	b1 e0       	ldi	r27, 0x01	; 1
    2516:	eb e0       	ldi	r30, 0x0B	; 11
    2518:	f1 e0       	ldi	r31, 0x01	; 1
    251a:	80 81       	ld	r24, Z
    251c:	8f 7b       	andi	r24, 0xBF	; 191
    251e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2520:	ab e0       	ldi	r26, 0x0B	; 11
    2522:	b1 e0       	ldi	r27, 0x01	; 1
    2524:	eb e0       	ldi	r30, 0x0B	; 11
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	80 81       	ld	r24, Z
    252a:	80 61       	ori	r24, 0x10	; 16
    252c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    252e:	ab e0       	ldi	r26, 0x0B	; 11
    2530:	b1 e0       	ldi	r27, 0x01	; 1
    2532:	eb e0       	ldi	r30, 0x0B	; 11
    2534:	f1 e0       	ldi	r31, 0x01	; 1
    2536:	80 81       	ld	r24, Z
    2538:	8b 7f       	andi	r24, 0xFB	; 251
    253a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    253c:	ab e0       	ldi	r26, 0x0B	; 11
    253e:	b1 e0       	ldi	r27, 0x01	; 1
    2540:	eb e0       	ldi	r30, 0x0B	; 11
    2542:	f1 e0       	ldi	r31, 0x01	; 1
    2544:	80 81       	ld	r24, Z
    2546:	8e 7f       	andi	r24, 0xFE	; 254
    2548:	8c 93       	st	X, r24
    254a:	90 c0       	rjmp	.+288    	; 0x266c <__stack+0x46d>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    254c:	ab e0       	ldi	r26, 0x0B	; 11
    254e:	b1 e0       	ldi	r27, 0x01	; 1
    2550:	eb e0       	ldi	r30, 0x0B	; 11
    2552:	f1 e0       	ldi	r31, 0x01	; 1
    2554:	80 81       	ld	r24, Z
    2556:	8f 7b       	andi	r24, 0xBF	; 191
    2558:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    255a:	ab e0       	ldi	r26, 0x0B	; 11
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	eb e0       	ldi	r30, 0x0B	; 11
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	80 81       	ld	r24, Z
    2564:	80 61       	ori	r24, 0x10	; 16
    2566:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2568:	ab e0       	ldi	r26, 0x0B	; 11
    256a:	b1 e0       	ldi	r27, 0x01	; 1
    256c:	eb e0       	ldi	r30, 0x0B	; 11
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	80 81       	ld	r24, Z
    2572:	84 60       	ori	r24, 0x04	; 4
    2574:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2576:	ab e0       	ldi	r26, 0x0B	; 11
    2578:	b1 e0       	ldi	r27, 0x01	; 1
    257a:	eb e0       	ldi	r30, 0x0B	; 11
    257c:	f1 e0       	ldi	r31, 0x01	; 1
    257e:	80 81       	ld	r24, Z
    2580:	8e 7f       	andi	r24, 0xFE	; 254
    2582:	8c 93       	st	X, r24
    2584:	73 c0       	rjmp	.+230    	; 0x266c <__stack+0x46d>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2586:	ab e0       	ldi	r26, 0x0B	; 11
    2588:	b1 e0       	ldi	r27, 0x01	; 1
    258a:	eb e0       	ldi	r30, 0x0B	; 11
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	80 81       	ld	r24, Z
    2590:	8f 7b       	andi	r24, 0xBF	; 191
    2592:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2594:	ab e0       	ldi	r26, 0x0B	; 11
    2596:	b1 e0       	ldi	r27, 0x01	; 1
    2598:	eb e0       	ldi	r30, 0x0B	; 11
    259a:	f1 e0       	ldi	r31, 0x01	; 1
    259c:	80 81       	ld	r24, Z
    259e:	8f 7e       	andi	r24, 0xEF	; 239
    25a0:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    25a2:	ab e0       	ldi	r26, 0x0B	; 11
    25a4:	b1 e0       	ldi	r27, 0x01	; 1
    25a6:	eb e0       	ldi	r30, 0x0B	; 11
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	80 81       	ld	r24, Z
    25ac:	84 60       	ori	r24, 0x04	; 4
    25ae:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    25b0:	ab e0       	ldi	r26, 0x0B	; 11
    25b2:	b1 e0       	ldi	r27, 0x01	; 1
    25b4:	eb e0       	ldi	r30, 0x0B	; 11
    25b6:	f1 e0       	ldi	r31, 0x01	; 1
    25b8:	80 81       	ld	r24, Z
    25ba:	8e 7f       	andi	r24, 0xFE	; 254
    25bc:	8c 93       	st	X, r24
    25be:	56 c0       	rjmp	.+172    	; 0x266c <__stack+0x46d>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    25c0:	ab e0       	ldi	r26, 0x0B	; 11
    25c2:	b1 e0       	ldi	r27, 0x01	; 1
    25c4:	eb e0       	ldi	r30, 0x0B	; 11
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7b       	andi	r24, 0xBF	; 191
    25cc:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25ce:	ab e0       	ldi	r26, 0x0B	; 11
    25d0:	b1 e0       	ldi	r27, 0x01	; 1
    25d2:	eb e0       	ldi	r30, 0x0B	; 11
    25d4:	f1 e0       	ldi	r31, 0x01	; 1
    25d6:	80 81       	ld	r24, Z
    25d8:	8f 7e       	andi	r24, 0xEF	; 239
    25da:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    25dc:	ab e0       	ldi	r26, 0x0B	; 11
    25de:	b1 e0       	ldi	r27, 0x01	; 1
    25e0:	eb e0       	ldi	r30, 0x0B	; 11
    25e2:	f1 e0       	ldi	r31, 0x01	; 1
    25e4:	80 81       	ld	r24, Z
    25e6:	84 60       	ori	r24, 0x04	; 4
    25e8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25ea:	ab e0       	ldi	r26, 0x0B	; 11
    25ec:	b1 e0       	ldi	r27, 0x01	; 1
    25ee:	eb e0       	ldi	r30, 0x0B	; 11
    25f0:	f1 e0       	ldi	r31, 0x01	; 1
    25f2:	80 81       	ld	r24, Z
    25f4:	81 60       	ori	r24, 0x01	; 1
    25f6:	8c 93       	st	X, r24
    25f8:	39 c0       	rjmp	.+114    	; 0x266c <__stack+0x46d>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    25fa:	ab e0       	ldi	r26, 0x0B	; 11
    25fc:	b1 e0       	ldi	r27, 0x01	; 1
    25fe:	eb e0       	ldi	r30, 0x0B	; 11
    2600:	f1 e0       	ldi	r31, 0x01	; 1
    2602:	80 81       	ld	r24, Z
    2604:	8f 7b       	andi	r24, 0xBF	; 191
    2606:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2608:	ab e0       	ldi	r26, 0x0B	; 11
    260a:	b1 e0       	ldi	r27, 0x01	; 1
    260c:	eb e0       	ldi	r30, 0x0B	; 11
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	80 81       	ld	r24, Z
    2612:	8f 7e       	andi	r24, 0xEF	; 239
    2614:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2616:	ab e0       	ldi	r26, 0x0B	; 11
    2618:	b1 e0       	ldi	r27, 0x01	; 1
    261a:	eb e0       	ldi	r30, 0x0B	; 11
    261c:	f1 e0       	ldi	r31, 0x01	; 1
    261e:	80 81       	ld	r24, Z
    2620:	8b 7f       	andi	r24, 0xFB	; 251
    2622:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2624:	ab e0       	ldi	r26, 0x0B	; 11
    2626:	b1 e0       	ldi	r27, 0x01	; 1
    2628:	eb e0       	ldi	r30, 0x0B	; 11
    262a:	f1 e0       	ldi	r31, 0x01	; 1
    262c:	80 81       	ld	r24, Z
    262e:	81 60       	ori	r24, 0x01	; 1
    2630:	8c 93       	st	X, r24
    2632:	1c c0       	rjmp	.+56     	; 0x266c <__stack+0x46d>
                break;
            case 7 :
                PORTStepper4 |= (1 << PStepper4_1);
    2634:	ab e0       	ldi	r26, 0x0B	; 11
    2636:	b1 e0       	ldi	r27, 0x01	; 1
    2638:	eb e0       	ldi	r30, 0x0B	; 11
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	80 81       	ld	r24, Z
    263e:	80 64       	ori	r24, 0x40	; 64
    2640:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2642:	ab e0       	ldi	r26, 0x0B	; 11
    2644:	b1 e0       	ldi	r27, 0x01	; 1
    2646:	eb e0       	ldi	r30, 0x0B	; 11
    2648:	f1 e0       	ldi	r31, 0x01	; 1
    264a:	80 81       	ld	r24, Z
    264c:	8f 7e       	andi	r24, 0xEF	; 239
    264e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2650:	ab e0       	ldi	r26, 0x0B	; 11
    2652:	b1 e0       	ldi	r27, 0x01	; 1
    2654:	eb e0       	ldi	r30, 0x0B	; 11
    2656:	f1 e0       	ldi	r31, 0x01	; 1
    2658:	80 81       	ld	r24, Z
    265a:	8b 7f       	andi	r24, 0xFB	; 251
    265c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    265e:	ab e0       	ldi	r26, 0x0B	; 11
    2660:	b1 e0       	ldi	r27, 0x01	; 1
    2662:	eb e0       	ldi	r30, 0x0B	; 11
    2664:	f1 e0       	ldi	r31, 0x01	; 1
    2666:	80 81       	ld	r24, Z
    2668:	81 60       	ori	r24, 0x01	; 1
    266a:	8c 93       	st	X, r24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	aa e7       	ldi	r26, 0x7A	; 122
    2672:	b4 e4       	ldi	r27, 0x44	; 68
    2674:	8d 8b       	std	Y+21, r24	; 0x15
    2676:	9e 8b       	std	Y+22, r25	; 0x16
    2678:	af 8b       	std	Y+23, r26	; 0x17
    267a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    267c:	6d 89       	ldd	r22, Y+21	; 0x15
    267e:	7e 89       	ldd	r23, Y+22	; 0x16
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	98 8d       	ldd	r25, Y+24	; 0x18
    2684:	2b ea       	ldi	r18, 0xAB	; 171
    2686:	3a ea       	ldi	r19, 0xAA	; 170
    2688:	4a ea       	ldi	r20, 0xAA	; 170
    268a:	50 e4       	ldi	r21, 0x40	; 64
    268c:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	89 8b       	std	Y+17, r24	; 0x11
    2696:	9a 8b       	std	Y+18, r25	; 0x12
    2698:	ab 8b       	std	Y+19, r26	; 0x13
    269a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    269c:	69 89       	ldd	r22, Y+17	; 0x11
    269e:	7a 89       	ldd	r23, Y+18	; 0x12
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	1c f4       	brge	.+6      	; 0x26ba <__stack+0x4bb>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	88 8b       	std	Y+16, r24	; 0x10
    26b8:	91 c0       	rjmp	.+290    	; 0x27dc <__stack+0x5dd>
	else if (__tmp > 255)
    26ba:	69 89       	ldd	r22, Y+17	; 0x11
    26bc:	7a 89       	ldd	r23, Y+18	; 0x12
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	53 e4       	ldi	r21, 0x43	; 67
    26ca:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <__stack+0x4d5>
    26d2:	7b c0       	rjmp	.+246    	; 0x27ca <__stack+0x5cb>
	{
		_delay_ms(__us / 1000.0);
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a e7       	ldi	r20, 0x7A	; 122
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8c 87       	std	Y+12, r24	; 0x0c
    26ee:	9d 87       	std	Y+13, r25	; 0x0d
    26f0:	ae 87       	std	Y+14, r26	; 0x0e
    26f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    26f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    26f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    26fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a e7       	ldi	r20, 0x7A	; 122
    2702:	55 e4       	ldi	r21, 0x45	; 69
    2704:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	88 87       	std	Y+8, r24	; 0x08
    270e:	99 87       	std	Y+9, r25	; 0x09
    2710:	aa 87       	std	Y+10, r26	; 0x0a
    2712:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2714:	68 85       	ldd	r22, Y+8	; 0x08
    2716:	79 85       	ldd	r23, Y+9	; 0x09
    2718:	8a 85       	ldd	r24, Y+10	; 0x0a
    271a:	9b 85       	ldd	r25, Y+11	; 0x0b
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <__stack+0x537>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9f 83       	std	Y+7, r25	; 0x07
    2732:	8e 83       	std	Y+6, r24	; 0x06
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <__stack+0x5b5>
	else if (__tmp > 65535)
    2736:	68 85       	ldd	r22, Y+8	; 0x08
    2738:	79 85       	ldd	r23, Y+9	; 0x09
    273a:	8a 85       	ldd	r24, Y+10	; 0x0a
    273c:	9b 85       	ldd	r25, Y+11	; 0x0b
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <__stack+0x5a1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2750:	7d 85       	ldd	r23, Y+13	; 0x0d
    2752:	8e 85       	ldd	r24, Y+14	; 0x0e
    2754:	9f 85       	ldd	r25, Y+15	; 0x0f
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9f 83       	std	Y+7, r25	; 0x07
    2774:	8e 83       	std	Y+6, r24	; 0x06
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <__stack+0x597>
    2778:	80 e9       	ldi	r24, 0x90	; 144
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	9d 83       	std	Y+5, r25	; 0x05
    277e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <__stack+0x585>
    2788:	9d 83       	std	Y+5, r25	; 0x05
    278a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8e 81       	ldd	r24, Y+6	; 0x06
    278e:	9f 81       	ldd	r25, Y+7	; 0x07
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9f 83       	std	Y+7, r25	; 0x07
    2794:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8e 81       	ldd	r24, Y+6	; 0x06
    2798:	9f 81       	ldd	r25, Y+7	; 0x07
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <__stack+0x579>
    279e:	24 c0       	rjmp	.+72     	; 0x27e8 <__stack+0x5e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	68 85       	ldd	r22, Y+8	; 0x08
    27a2:	79 85       	ldd	r23, Y+9	; 0x09
    27a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a8:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9f 83       	std	Y+7, r25	; 0x07
    27b2:	8e 83       	std	Y+6, r24	; 0x06
    27b4:	8e 81       	ldd	r24, Y+6	; 0x06
    27b6:	9f 81       	ldd	r25, Y+7	; 0x07
    27b8:	9b 83       	std	Y+3, r25	; 0x03
    27ba:	8a 83       	std	Y+2, r24	; 0x02
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	9b 81       	ldd	r25, Y+3	; 0x03
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <__stack+0x5c1>
    27c4:	9b 83       	std	Y+3, r25	; 0x03
    27c6:	8a 83       	std	Y+2, r24	; 0x02
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <__stack+0x5e9>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27ca:	69 89       	ldd	r22, Y+17	; 0x11
    27cc:	7a 89       	ldd	r23, Y+18	; 0x12
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	88 8b       	std	Y+16, r24	; 0x10
    27dc:	88 89       	ldd	r24, Y+16	; 0x10
    27de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	8a 95       	dec	r24
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <__stack+0x5e3>
    27e6:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    27e8:	89 a9       	ldd	r24, Y+49	; 0x31
    27ea:	9a a9       	ldd	r25, Y+50	; 0x32
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9a ab       	std	Y+50, r25	; 0x32
    27f0:	89 ab       	std	Y+49, r24	; 0x31
    27f2:	89 a9       	ldd	r24, Y+49	; 0x31
    27f4:	9a a9       	ldd	r25, Y+50	; 0x32
    27f6:	18 16       	cp	r1, r24
    27f8:	19 06       	cpc	r1, r25
    27fa:	0c f4       	brge	.+2      	; 0x27fe <__stack+0x5ff>
    27fc:	17 ce       	rjmp	.-978    	; 0x242c <__stack+0x22d>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    27fe:	1e aa       	std	Y+54, r1	; 0x36
    2800:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    2802:	8d a9       	ldd	r24, Y+53	; 0x35
    2804:	9e a9       	ldd	r25, Y+54	; 0x36
    2806:	82 30       	cpi	r24, 0x02	; 2
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <__stack+0x60f>
    280c:	0a ce       	rjmp	.-1004   	; 0x2422 <__stack+0x223>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    280e:	ea 96       	adiw	r28, 0x3a	; 58
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <Vooruit>:

void Vooruit(int Steppermotortijd)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	00 d0       	rcall	.+0      	; 0x2826 <Vooruit+0x6>
    2826:	0f 92       	push	r0
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	9c 83       	std	Y+4, r25	; 0x04
    282e:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2830:	1a 82       	std	Y+2, r1	; 0x02
    2832:	19 82       	std	Y+1, r1	; 0x01
    2834:	15 c0       	rjmp	.+42     	; 0x2860 <Vooruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 00 04 	call	0x800	; 0x800 <steppermotor1Write>
        steppermotor2Write(1);
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0e 94 04 08 	call	0x1008	; 0x1008 <steppermotor2Write>
        steppermotor3Write(1);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 08 0c 	call	0x1810	; 0x1810 <steppermotor3Write>
        steppermotor4Write(1);
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 0c 10 	call	0x2018	; 0x2018 <steppermotor4Write>
        j++;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
}

void Vooruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2860:	29 81       	ldd	r18, Y+1	; 0x01
    2862:	3a 81       	ldd	r19, Y+2	; 0x02
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	28 17       	cp	r18, r24
    286a:	39 07       	cpc	r19, r25
    286c:	24 f3       	brlt	.-56     	; 0x2836 <Vooruit+0x16>
        steppermotor2Write(1);
        steppermotor3Write(1);
        steppermotor4Write(1);
        j++;
    }
}
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <Achteruit>:

void Achteruit(int Steppermotortijd)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <Achteruit+0x6>
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    288c:	1a 82       	std	Y+2, r1	; 0x02
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	15 c0       	rjmp	.+42     	; 0x28bc <Achteruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 00 04 	call	0x800	; 0x800 <steppermotor1Write>
        steppermotor2Write(2);
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 04 08 	call	0x1008	; 0x1008 <steppermotor2Write>
        steppermotor3Write(2);
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 08 0c 	call	0x1810	; 0x1810 <steppermotor3Write>
        steppermotor4Write(2);
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 0c 10 	call	0x2018	; 0x2018 <steppermotor4Write>
        j++;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
}

void Achteruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    28bc:	29 81       	ldd	r18, Y+1	; 0x01
    28be:	3a 81       	ldd	r19, Y+2	; 0x02
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	24 f3       	brlt	.-56     	; 0x2892 <Achteruit+0x16>
        steppermotor2Write(2);
        steppermotor3Write(2);
        steppermotor4Write(2);
        j++;
    }
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <Rechtsaf>:

void Rechtsaf(int Steppermotortijd)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <Rechtsaf+0x6>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    28e8:	1a 82       	std	Y+2, r1	; 0x02
    28ea:	19 82       	std	Y+1, r1	; 0x01
    28ec:	15 c0       	rjmp	.+42     	; 0x2918 <Rechtsaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 00 04 	call	0x800	; 0x800 <steppermotor1Write>
        steppermotor2Write(2);
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 04 08 	call	0x1008	; 0x1008 <steppermotor2Write>
        steppermotor3Write(1);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 08 0c 	call	0x1810	; 0x1810 <steppermotor3Write>
        steppermotor4Write(2);
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 0c 10 	call	0x2018	; 0x2018 <steppermotor4Write>
        j++;
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
}

void Rechtsaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2918:	29 81       	ldd	r18, Y+1	; 0x01
    291a:	3a 81       	ldd	r19, Y+2	; 0x02
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	28 17       	cp	r18, r24
    2922:	39 07       	cpc	r19, r25
    2924:	24 f3       	brlt	.-56     	; 0x28ee <Rechtsaf+0x16>
        steppermotor2Write(2);
        steppermotor3Write(1);
        steppermotor4Write(2);
        j++;
    }
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <Linksaf>:

void Linksaf(int Steppermotortijd)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <Linksaf+0x6>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2944:	1a 82       	std	Y+2, r1	; 0x02
    2946:	19 82       	std	Y+1, r1	; 0x01
    2948:	15 c0       	rjmp	.+42     	; 0x2974 <Linksaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 00 04 	call	0x800	; 0x800 <steppermotor1Write>
        steppermotor2Write(1);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 04 08 	call	0x1008	; 0x1008 <steppermotor2Write>
        steppermotor3Write(2);
    295a:	82 e0       	ldi	r24, 0x02	; 2
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 08 0c 	call	0x1810	; 0x1810 <steppermotor3Write>
        steppermotor4Write(1);
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 0c 10 	call	0x2018	; 0x2018 <steppermotor4Write>
        j++;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
}

void Linksaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2974:	29 81       	ldd	r18, Y+1	; 0x01
    2976:	3a 81       	ldd	r19, Y+2	; 0x02
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	28 17       	cp	r18, r24
    297e:	39 07       	cpc	r19, r25
    2980:	24 f3       	brlt	.-56     	; 0x294a <Linksaf+0x16>
        steppermotor2Write(1);
        steppermotor3Write(2);
        steppermotor4Write(1);
        j++;
    }
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <distance>:
static volatile unsigned long pulse = 0; //the variable for the pulse
static volatile int echo_pin = 0; //logic for the ultrasoon
volatile int isTriggerd = 0;    // used in the while loop
volatile int overflows = 0;

int distance(int triggerpin) {
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	ea 97       	sbiw	r28, 0x3a	; 58
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	9e ab       	std	Y+54, r25	; 0x36
    29a6:	8d ab       	std	Y+53, r24	; 0x35

    switch(triggerpin)
    29a8:	8d a9       	ldd	r24, Y+53	; 0x35
    29aa:	9e a9       	ldd	r25, Y+54	; 0x36
    29ac:	9a af       	std	Y+58, r25	; 0x3a
    29ae:	89 af       	std	Y+57, r24	; 0x39
    29b0:	89 ad       	ldd	r24, Y+57	; 0x39
    29b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	31 f0       	breq	.+12     	; 0x29c4 <distance+0x34>
    29b8:	89 ad       	ldd	r24, Y+57	; 0x39
    29ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	91 05       	cpc	r25, r1
    29c0:	49 f0       	breq	.+18     	; 0x29d4 <distance+0x44>
    29c2:	0f c0       	rjmp	.+30     	; 0x29e2 <distance+0x52>
    {
        case ultra_1_trigger:
            PCMASK = 0;
    29c4:	eb e6       	ldi	r30, 0x6B	; 107
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	10 82       	st	Z, r1
            PCMASK = ultra_1_pin;
    29ca:	eb e6       	ldi	r30, 0x6B	; 107
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	80 83       	st	Z, r24
    29d2:	07 c0       	rjmp	.+14     	; 0x29e2 <distance+0x52>
        break;

        case ultra_2_trigger:
            PCMASK = 0;
    29d4:	eb e6       	ldi	r30, 0x6B	; 107
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	10 82       	st	Z, r1
            PCMASK = ultra_2_pin;
    29da:	eb e6       	ldi	r30, 0x6B	; 107
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	80 83       	st	Z, r24
        break;
    }

    TRIGGERPORT |= (1 << triggerpin);
    29e2:	ab e2       	ldi	r26, 0x2B	; 43
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	eb e2       	ldi	r30, 0x2B	; 43
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	28 2f       	mov	r18, r24
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0d a8       	ldd	r0, Y+53	; 0x35
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <distance+0x6a>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <distance+0x66>
    29fe:	82 2b       	or	r24, r18
    2a00:	8c 93       	st	X, r24
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e7       	ldi	r26, 0x70	; 112
    2a08:	b1 e4       	ldi	r27, 0x41	; 65
    2a0a:	8d a7       	std	Y+45, r24	; 0x2d
    2a0c:	9e a7       	std	Y+46, r25	; 0x2e
    2a0e:	af a7       	std	Y+47, r26	; 0x2f
    2a10:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a12:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a14:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a18:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1a:	2b ea       	ldi	r18, 0xAB	; 171
    2a1c:	3a ea       	ldi	r19, 0xAA	; 170
    2a1e:	4a ea       	ldi	r20, 0xAA	; 170
    2a20:	50 e4       	ldi	r21, 0x40	; 64
    2a22:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	89 a7       	std	Y+41, r24	; 0x29
    2a2c:	9a a7       	std	Y+42, r25	; 0x2a
    2a2e:	ab a7       	std	Y+43, r26	; 0x2b
    2a30:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2a32:	69 a5       	ldd	r22, Y+41	; 0x29
    2a34:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5f e3       	ldi	r21, 0x3F	; 63
    2a42:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    2a46:	88 23       	and	r24, r24
    2a48:	1c f4       	brge	.+6      	; 0x2a50 <distance+0xc0>
		__ticks = 1;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	88 a7       	std	Y+40, r24	; 0x28
    2a4e:	91 c0       	rjmp	.+290    	; 0x2b72 <distance+0x1e2>
	else if (__tmp > 255)
    2a50:	69 a5       	ldd	r22, Y+41	; 0x29
    2a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	53 e4       	ldi	r21, 0x43	; 67
    2a60:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	0c f0       	brlt	.+2      	; 0x2a6a <distance+0xda>
    2a68:	7b c0       	rjmp	.+246    	; 0x2b60 <distance+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    2a6a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a6c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a70:	98 a9       	ldd	r25, Y+48	; 0x30
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a e7       	ldi	r20, 0x7A	; 122
    2a78:	54 e4       	ldi	r21, 0x44	; 68
    2a7a:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8c a3       	std	Y+36, r24	; 0x24
    2a84:	9d a3       	std	Y+37, r25	; 0x25
    2a86:	ae a3       	std	Y+38, r26	; 0x26
    2a88:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	6c a1       	ldd	r22, Y+36	; 0x24
    2a8c:	7d a1       	ldd	r23, Y+37	; 0x25
    2a8e:	8e a1       	ldd	r24, Y+38	; 0x26
    2a90:	9f a1       	ldd	r25, Y+39	; 0x27
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a e7       	ldi	r20, 0x7A	; 122
    2a98:	55 e4       	ldi	r21, 0x45	; 69
    2a9a:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	88 a3       	std	Y+32, r24	; 0x20
    2aa4:	99 a3       	std	Y+33, r25	; 0x21
    2aa6:	aa a3       	std	Y+34, r26	; 0x22
    2aa8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2aaa:	68 a1       	ldd	r22, Y+32	; 0x20
    2aac:	79 a1       	ldd	r23, Y+33	; 0x21
    2aae:	8a a1       	ldd	r24, Y+34	; 0x22
    2ab0:	9b a1       	ldd	r25, Y+35	; 0x23
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <distance+0x13c>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ac8:	8e 8f       	std	Y+30, r24	; 0x1e
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <distance+0x1ba>
	else if (__tmp > 65535)
    2acc:	68 a1       	ldd	r22, Y+32	; 0x20
    2ace:	79 a1       	ldd	r23, Y+33	; 0x21
    2ad0:	8a a1       	ldd	r24, Y+34	; 0x22
    2ad2:	9b a1       	ldd	r25, Y+35	; 0x23
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <distance+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	6c a1       	ldd	r22, Y+36	; 0x24
    2ae6:	7d a1       	ldd	r23, Y+37	; 0x25
    2ae8:	8e a1       	ldd	r24, Y+38	; 0x26
    2aea:	9f a1       	ldd	r25, Y+39	; 0x27
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9f 8f       	std	Y+31, r25	; 0x1f
    2b0a:	8e 8f       	std	Y+30, r24	; 0x1e
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <distance+0x19c>
    2b0e:	80 e9       	ldi	r24, 0x90	; 144
    2b10:	91 e0       	ldi	r25, 0x01	; 1
    2b12:	9d 8f       	std	Y+29, r25	; 0x1d
    2b14:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b18:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <distance+0x18a>
    2b1e:	9d 8f       	std	Y+29, r25	; 0x1d
    2b20:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9f 8f       	std	Y+31, r25	; 0x1f
    2b2a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <distance+0x17e>
    2b34:	24 c0       	rjmp	.+72     	; 0x2b7e <distance+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	68 a1       	ldd	r22, Y+32	; 0x20
    2b38:	79 a1       	ldd	r23, Y+33	; 0x21
    2b3a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b3c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b3e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9f 8f       	std	Y+31, r25	; 0x1f
    2b48:	8e 8f       	std	Y+30, r24	; 0x1e
    2b4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b4e:	9b 8f       	std	Y+27, r25	; 0x1b
    2b50:	8a 8f       	std	Y+26, r24	; 0x1a
    2b52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <distance+0x1c6>
    2b5a:	9b 8f       	std	Y+27, r25	; 0x1b
    2b5c:	8a 8f       	std	Y+26, r24	; 0x1a
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <distance+0x1ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b60:	69 a5       	ldd	r22, Y+41	; 0x29
    2b62:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b68:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	88 a7       	std	Y+40, r24	; 0x28
    2b72:	88 a5       	ldd	r24, Y+40	; 0x28
    2b74:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b76:	89 8d       	ldd	r24, Y+25	; 0x19
    2b78:	8a 95       	dec	r24
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <distance+0x1e8>
    2b7c:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(15);
    TRIGGERPORT &= ~( 1 << triggerpin);
    2b7e:	ab e2       	ldi	r26, 0x2B	; 43
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	eb e2       	ldi	r30, 0x2B	; 43
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	28 2f       	mov	r18, r24
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	0d a8       	ldd	r0, Y+53	; 0x35
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <distance+0x206>
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	0a 94       	dec	r0
    2b98:	e2 f7       	brpl	.-8      	; 0x2b92 <distance+0x202>
    2b9a:	80 95       	com	r24
    2b9c:	82 23       	and	r24, r18
    2b9e:	8c 93       	st	X, r24
    isTriggerd = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	90 93 09 03 	sts	0x0309, r25
    2ba8:	80 93 08 03 	sts	0x0308, r24
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e7       	ldi	r26, 0x70	; 112
    2bb2:	b1 e4       	ldi	r27, 0x41	; 65
    2bb4:	8d 8b       	std	Y+21, r24	; 0x15
    2bb6:	9e 8b       	std	Y+22, r25	; 0x16
    2bb8:	af 8b       	std	Y+23, r26	; 0x17
    2bba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	2b ea       	ldi	r18, 0xAB	; 171
    2bc6:	3a ea       	ldi	r19, 0xAA	; 170
    2bc8:	4a ea       	ldi	r20, 0xAA	; 170
    2bca:	50 e4       	ldi	r21, 0x40	; 64
    2bcc:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	89 8b       	std	Y+17, r24	; 0x11
    2bd6:	9a 8b       	std	Y+18, r25	; 0x12
    2bd8:	ab 8b       	std	Y+19, r26	; 0x13
    2bda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bdc:	69 89       	ldd	r22, Y+17	; 0x11
    2bde:	7a 89       	ldd	r23, Y+18	; 0x12
    2be0:	8b 89       	ldd	r24, Y+19	; 0x13
    2be2:	9c 89       	ldd	r25, Y+20	; 0x14
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	1c f4       	brge	.+6      	; 0x2bfa <distance+0x26a>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	88 8b       	std	Y+16, r24	; 0x10
    2bf8:	91 c0       	rjmp	.+290    	; 0x2d1c <distance+0x38c>
	else if (__tmp > 255)
    2bfa:	69 89       	ldd	r22, Y+17	; 0x11
    2bfc:	7a 89       	ldd	r23, Y+18	; 0x12
    2bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2c00:	9c 89       	ldd	r25, Y+20	; 0x14
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	53 e4       	ldi	r21, 0x43	; 67
    2c0a:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	0c f0       	brlt	.+2      	; 0x2c14 <distance+0x284>
    2c12:	7b c0       	rjmp	.+246    	; 0x2d0a <distance+0x37a>
	{
		_delay_ms(__us / 1000.0);
    2c14:	6d 89       	ldd	r22, Y+21	; 0x15
    2c16:	7e 89       	ldd	r23, Y+22	; 0x16
    2c18:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a e7       	ldi	r20, 0x7A	; 122
    2c22:	54 e4       	ldi	r21, 0x44	; 68
    2c24:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8c 87       	std	Y+12, r24	; 0x0c
    2c2e:	9d 87       	std	Y+13, r25	; 0x0d
    2c30:	ae 87       	std	Y+14, r26	; 0x0e
    2c32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c36:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a e7       	ldi	r20, 0x7A	; 122
    2c42:	55 e4       	ldi	r21, 0x45	; 69
    2c44:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	88 87       	std	Y+8, r24	; 0x08
    2c4e:	99 87       	std	Y+9, r25	; 0x09
    2c50:	aa 87       	std	Y+10, r26	; 0x0a
    2c52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c54:	68 85       	ldd	r22, Y+8	; 0x08
    2c56:	79 85       	ldd	r23, Y+9	; 0x09
    2c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 8f 1b 	call	0x371e	; 0x371e <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <distance+0x2e6>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9f 83       	std	Y+7, r25	; 0x07
    2c72:	8e 83       	std	Y+6, r24	; 0x06
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <distance+0x364>
	else if (__tmp > 65535)
    2c76:	68 85       	ldd	r22, Y+8	; 0x08
    2c78:	79 85       	ldd	r23, Y+9	; 0x09
    2c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 2f 1b 	call	0x365e	; 0x365e <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <distance+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c90:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 89 19 	call	0x3312	; 0x3312 <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9f 83       	std	Y+7, r25	; 0x07
    2cb4:	8e 83       	std	Y+6, r24	; 0x06
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <distance+0x346>
    2cb8:	80 e9       	ldi	r24, 0x90	; 144
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	9d 83       	std	Y+5, r25	; 0x05
    2cbe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <distance+0x334>
    2cc8:	9d 83       	std	Y+5, r25	; 0x05
    2cca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cce:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9f 83       	std	Y+7, r25	; 0x07
    2cd4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <distance+0x328>
    2cde:	24 c0       	rjmp	.+72     	; 0x2d28 <distance+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	68 85       	ldd	r22, Y+8	; 0x08
    2ce2:	79 85       	ldd	r23, Y+9	; 0x09
    2ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ce8:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9f 83       	std	Y+7, r25	; 0x07
    2cf2:	8e 83       	std	Y+6, r24	; 0x06
    2cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf8:	9b 83       	std	Y+3, r25	; 0x03
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <distance+0x370>
    2d04:	9b 83       	std	Y+3, r25	; 0x03
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <distance+0x398>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d0a:	69 89       	ldd	r22, Y+17	; 0x11
    2d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d10:	9c 89       	ldd	r25, Y+20	; 0x14
    2d12:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	88 8b       	std	Y+16, r24	; 0x10
    2d1c:	88 89       	ldd	r24, Y+16	; 0x10
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	8a 95       	dec	r24
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <distance+0x392>
    2d26:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);

    unsigned long i = 0;
    2d28:	19 aa       	std	Y+49, r1	; 0x31
    2d2a:	1a aa       	std	Y+50, r1	; 0x32
    2d2c:	1b aa       	std	Y+51, r1	; 0x33
    2d2e:	1c aa       	std	Y+52, r1	; 0x34
    2d30:	1f c0       	rjmp	.+62     	; 0x2d70 <distance+0x3e0>
    while(isTriggerd){
       if(i > ((RETURNVALUE+10)*16))
    2d32:	89 a9       	ldd	r24, Y+49	; 0x31
    2d34:	9a a9       	ldd	r25, Y+50	; 0x32
    2d36:	ab a9       	ldd	r26, Y+51	; 0x33
    2d38:	bc a9       	ldd	r27, Y+52	; 0x34
    2d3a:	81 3e       	cpi	r24, 0xE1	; 225
    2d3c:	26 e0       	ldi	r18, 0x06	; 6
    2d3e:	92 07       	cpc	r25, r18
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	a2 07       	cpc	r26, r18
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	b2 07       	cpc	r27, r18
    2d48:	40 f0       	brcs	.+16     	; 0x2d5a <distance+0x3ca>
       {
           PCMASK = 0;
    2d4a:	eb e6       	ldi	r30, 0x6B	; 107
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	10 82       	st	Z, r1
           return RETURNVALUE;
    2d50:	84 e6       	ldi	r24, 0x64	; 100
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	98 af       	std	Y+56, r25	; 0x38
    2d56:	8f ab       	std	Y+55, r24	; 0x37
    2d58:	31 c0       	rjmp	.+98     	; 0x2dbc <distance+0x42c>
       }
       i++;
    2d5a:	89 a9       	ldd	r24, Y+49	; 0x31
    2d5c:	9a a9       	ldd	r25, Y+50	; 0x32
    2d5e:	ab a9       	ldd	r26, Y+51	; 0x33
    2d60:	bc a9       	ldd	r27, Y+52	; 0x34
    2d62:	01 96       	adiw	r24, 0x01	; 1
    2d64:	a1 1d       	adc	r26, r1
    2d66:	b1 1d       	adc	r27, r1
    2d68:	89 ab       	std	Y+49, r24	; 0x31
    2d6a:	9a ab       	std	Y+50, r25	; 0x32
    2d6c:	ab ab       	std	Y+51, r26	; 0x33
    2d6e:	bc ab       	std	Y+52, r27	; 0x34
    TRIGGERPORT &= ~( 1 << triggerpin);
    isTriggerd = 1;
    _delay_us(15);

    unsigned long i = 0;
    while(isTriggerd){
    2d70:	80 91 08 03 	lds	r24, 0x0308
    2d74:	90 91 09 03 	lds	r25, 0x0309
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	d9 f6       	brne	.-74     	; 0x2d32 <distance+0x3a2>
       }
       i++;

    }

    return pulse/928.0;
    2d7c:	80 91 0c 03 	lds	r24, 0x030C
    2d80:	90 91 0d 03 	lds	r25, 0x030D
    2d84:	a0 91 0e 03 	lds	r26, 0x030E
    2d88:	b0 91 0f 03 	lds	r27, 0x030F
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__floatunsisf>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	bc 01       	movw	r22, r24
    2d9a:	cd 01       	movw	r24, r26
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	48 e6       	ldi	r20, 0x68	; 104
    2da2:	54 e4       	ldi	r21, 0x44	; 68
    2da4:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	0e 94 1d 1c 	call	0x383a	; 0x383a <__fixsfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	98 af       	std	Y+56, r25	; 0x38
    2dba:	8f ab       	std	Y+55, r24	; 0x37
    2dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dbe:	98 ad       	ldd	r25, Y+56	; 0x38
}
    2dc0:	ea 96       	adiw	r28, 0x3a	; 58
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <init_ultrasoon>:
void init_ultrasoon(){
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    TRIGGERDDR |= (1 << ultra_1_trigger) | (1 << ultra_2_trigger);
    2dda:	aa e2       	ldi	r26, 0x2A	; 42
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	ea e2       	ldi	r30, 0x2A	; 42
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	83 60       	ori	r24, 0x03	; 3
    2de6:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_1_trigger);
    2de8:	ab e2       	ldi	r26, 0x2B	; 43
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	eb e2       	ldi	r30, 0x2B	; 43
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	8e 7f       	andi	r24, 0xFE	; 254
    2df4:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_2_trigger);
    2df6:	ab e2       	ldi	r26, 0x2B	; 43
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	eb e2       	ldi	r30, 0x2B	; 43
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	8d 7f       	andi	r24, 0xFD	; 253
    2e02:	8c 93       	st	X, r24
    PCICR |= (1 << PCREG);
    2e04:	a8 e6       	ldi	r26, 0x68	; 104
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e8 e6       	ldi	r30, 0x68	; 104
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	81 60       	ori	r24, 0x01	; 1
    2e10:	8c 93       	st	X, r24
    PCMASK = 0;
    2e12:	eb e6       	ldi	r30, 0x6B	; 107
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	10 82       	st	Z, r1
}
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <__vector_9>:

ISR(PCISR)   // Interrupt service routine.
{
    2e1e:	1f 92       	push	r1
    2e20:	0f 92       	push	r0
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	0f 92       	push	r0
    2e26:	00 90 5b 00 	lds	r0, 0x005B
    2e2a:	0f 92       	push	r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	ef 92       	push	r14
    2e30:	ff 92       	push	r15
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	2f 93       	push	r18
    2e38:	3f 93       	push	r19
    2e3a:	4f 93       	push	r20
    2e3c:	5f 93       	push	r21
    2e3e:	6f 93       	push	r22
    2e40:	7f 93       	push	r23
    2e42:	8f 93       	push	r24
    2e44:	9f 93       	push	r25
    2e46:	af 93       	push	r26
    2e48:	bf 93       	push	r27
    2e4a:	ef 93       	push	r30
    2e4c:	ff 93       	push	r31
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    if (echo_pin==1)
    2e56:	80 91 10 03 	lds	r24, 0x0310
    2e5a:	90 91 11 03 	lds	r25, 0x0311
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	91 05       	cpc	r25, r1
    2e62:	c9 f5       	brne	.+114    	; 0x2ed6 <__vector_9+0xb8>
	{
		TIMER_B = 0;    //TIMER COUNTER CONTROL REGITER (Stop the counter)
    2e64:	e1 e2       	ldi	r30, 0x21	; 33
    2e66:	f1 e0       	ldi	r31, 0x01	; 1
    2e68:	10 82       	st	Z, r1
		pulse=TNCT_timer+(overflows*OVERFLOW);  // store the value of counter
    2e6a:	e4 e2       	ldi	r30, 0x24	; 36
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	7c 01       	movw	r14, r24
    2e74:	00 e0       	ldi	r16, 0x00	; 0
    2e76:	10 e0       	ldi	r17, 0x00	; 0
    2e78:	80 91 0a 03 	lds	r24, 0x030A
    2e7c:	90 91 0b 03 	lds	r25, 0x030B
    2e80:	aa 27       	eor	r26, r26
    2e82:	97 fd       	sbrc	r25, 7
    2e84:	a0 95       	com	r26
    2e86:	ba 2f       	mov	r27, r26
    2e88:	2f ef       	ldi	r18, 0xFF	; 255
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__mulsi3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8e 0d       	add	r24, r14
    2e9e:	9f 1d       	adc	r25, r15
    2ea0:	a0 1f       	adc	r26, r16
    2ea2:	b1 1f       	adc	r27, r17
    2ea4:	80 93 0c 03 	sts	0x030C, r24
    2ea8:	90 93 0d 03 	sts	0x030D, r25
    2eac:	a0 93 0e 03 	sts	0x030E, r26
    2eb0:	b0 93 0f 03 	sts	0x030F, r27
		TNCT_timer=0;     // reset the counter
    2eb4:	e4 e2       	ldi	r30, 0x24	; 36
    2eb6:	f1 e0       	ldi	r31, 0x01	; 1
    2eb8:	11 82       	std	Z+1, r1	; 0x01
    2eba:	10 82       	st	Z, r1
		echo_pin=0;
    2ebc:	10 92 11 03 	sts	0x0311, r1
    2ec0:	10 92 10 03 	sts	0x0310, r1
		isTriggerd = 0;
    2ec4:	10 92 09 03 	sts	0x0309, r1
    2ec8:	10 92 08 03 	sts	0x0308, r1
		overflows = 0;
    2ecc:	10 92 0b 03 	sts	0x030B, r1
    2ed0:	10 92 0a 03 	sts	0x030A, r1
    2ed4:	11 c0       	rjmp	.+34     	; 0x2ef8 <__vector_9+0xda>
	}
	else
	{
		TIMER_B |=(1<<CS10);  // used to start the internal counter of microcontroller
    2ed6:	a1 e2       	ldi	r26, 0x21	; 33
    2ed8:	b1 e0       	ldi	r27, 0x01	; 1
    2eda:	e1 e2       	ldi	r30, 0x21	; 33
    2edc:	f1 e0       	ldi	r31, 0x01	; 1
    2ede:	80 81       	ld	r24, Z
    2ee0:	81 60       	ori	r24, 0x01	; 1
    2ee2:	8c 93       	st	X, r24
		TIMSK_timer = (1 <<TIMSK_bit);
    2ee4:	e3 e7       	ldi	r30, 0x73	; 115
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 83       	st	Z, r24
		echo_pin=1;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	90 93 11 03 	sts	0x0311, r25
    2ef4:	80 93 10 03 	sts	0x0310, r24
	}
}
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	ff 91       	pop	r31
    2efe:	ef 91       	pop	r30
    2f00:	bf 91       	pop	r27
    2f02:	af 91       	pop	r26
    2f04:	9f 91       	pop	r25
    2f06:	8f 91       	pop	r24
    2f08:	7f 91       	pop	r23
    2f0a:	6f 91       	pop	r22
    2f0c:	5f 91       	pop	r21
    2f0e:	4f 91       	pop	r20
    2f10:	3f 91       	pop	r19
    2f12:	2f 91       	pop	r18
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	0f 90       	pop	r0
    2f1e:	00 92 5b 00 	sts	0x005B, r0
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	0f 90       	pop	r0
    2f28:	1f 90       	pop	r1
    2f2a:	18 95       	reti

00002f2c <__vector_50>:

ISR(ISR_TIMER_OVF){
    2f2c:	1f 92       	push	r1
    2f2e:	0f 92       	push	r0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	0f 92       	push	r0
    2f34:	11 24       	eor	r1, r1
    2f36:	8f 93       	push	r24
    2f38:	9f 93       	push	r25
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    overflows++;
    2f42:	80 91 0a 03 	lds	r24, 0x030A
    2f46:	90 91 0b 03 	lds	r25, 0x030B
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    2f4c:	90 93 0b 03 	sts	0x030B, r25
    2f50:	80 93 0a 03 	sts	0x030A, r24
}
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	9f 91       	pop	r25
    2f5a:	8f 91       	pop	r24
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <__fixunssfsi>:
    2f66:	ef 92       	push	r14
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	7b 01       	movw	r14, r22
    2f70:	8c 01       	movw	r16, r24
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	5f e4       	ldi	r21, 0x4F	; 79
    2f7a:	0e 94 5f 1b 	call	0x36be	; 0x36be <__gesf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	8c f0       	brlt	.+34     	; 0x2fa4 <__fixunssfsi+0x3e>
    2f82:	c8 01       	movw	r24, r16
    2f84:	b7 01       	movw	r22, r14
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	5f e4       	ldi	r21, 0x4F	; 79
    2f8e:	0e 94 2b 19 	call	0x3256	; 0x3256 <__subsf3>
    2f92:	0e 94 1d 1c 	call	0x383a	; 0x383a <__fixsfsi>
    2f96:	9b 01       	movw	r18, r22
    2f98:	ac 01       	movw	r20, r24
    2f9a:	20 50       	subi	r18, 0x00	; 0
    2f9c:	30 40       	sbci	r19, 0x00	; 0
    2f9e:	40 40       	sbci	r20, 0x00	; 0
    2fa0:	50 48       	sbci	r21, 0x80	; 128
    2fa2:	06 c0       	rjmp	.+12     	; 0x2fb0 <__fixunssfsi+0x4a>
    2fa4:	c8 01       	movw	r24, r16
    2fa6:	b7 01       	movw	r22, r14
    2fa8:	0e 94 1d 1c 	call	0x383a	; 0x383a <__fixsfsi>
    2fac:	9b 01       	movw	r18, r22
    2fae:	ac 01       	movw	r20, r24
    2fb0:	b9 01       	movw	r22, r18
    2fb2:	ca 01       	movw	r24, r20
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	ff 90       	pop	r15
    2fba:	ef 90       	pop	r14
    2fbc:	08 95       	ret

00002fbe <_fpadd_parts>:
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2fc4:	f7 e1       	ldi	r31, 0x17	; 23
    2fc6:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__prologue_saves__>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	2b 01       	movw	r4, r22
    2fce:	fa 01       	movw	r30, r20
    2fd0:	9c 91       	ld	r25, X
    2fd2:	92 30       	cpi	r25, 0x02	; 2
    2fd4:	08 f4       	brcc	.+2      	; 0x2fd8 <_fpadd_parts+0x1a>
    2fd6:	39 c1       	rjmp	.+626    	; 0x324a <_fpadd_parts+0x28c>
    2fd8:	eb 01       	movw	r28, r22
    2fda:	88 81       	ld	r24, Y
    2fdc:	82 30       	cpi	r24, 0x02	; 2
    2fde:	08 f4       	brcc	.+2      	; 0x2fe2 <_fpadd_parts+0x24>
    2fe0:	33 c1       	rjmp	.+614    	; 0x3248 <_fpadd_parts+0x28a>
    2fe2:	94 30       	cpi	r25, 0x04	; 4
    2fe4:	69 f4       	brne	.+26     	; 0x3000 <_fpadd_parts+0x42>
    2fe6:	84 30       	cpi	r24, 0x04	; 4
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <_fpadd_parts+0x2e>
    2fea:	2f c1       	rjmp	.+606    	; 0x324a <_fpadd_parts+0x28c>
    2fec:	11 96       	adiw	r26, 0x01	; 1
    2fee:	9c 91       	ld	r25, X
    2ff0:	11 97       	sbiw	r26, 0x01	; 1
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	98 17       	cp	r25, r24
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <_fpadd_parts+0x3c>
    2ff8:	28 c1       	rjmp	.+592    	; 0x324a <_fpadd_parts+0x28c>
    2ffa:	a0 e0       	ldi	r26, 0x00	; 0
    2ffc:	b2 e0       	ldi	r27, 0x02	; 2
    2ffe:	25 c1       	rjmp	.+586    	; 0x324a <_fpadd_parts+0x28c>
    3000:	84 30       	cpi	r24, 0x04	; 4
    3002:	09 f4       	brne	.+2      	; 0x3006 <_fpadd_parts+0x48>
    3004:	21 c1       	rjmp	.+578    	; 0x3248 <_fpadd_parts+0x28a>
    3006:	82 30       	cpi	r24, 0x02	; 2
    3008:	a9 f4       	brne	.+42     	; 0x3034 <_fpadd_parts+0x76>
    300a:	92 30       	cpi	r25, 0x02	; 2
    300c:	09 f0       	breq	.+2      	; 0x3010 <_fpadd_parts+0x52>
    300e:	1d c1       	rjmp	.+570    	; 0x324a <_fpadd_parts+0x28c>
    3010:	9a 01       	movw	r18, r20
    3012:	ad 01       	movw	r20, r26
    3014:	88 e0       	ldi	r24, 0x08	; 8
    3016:	ea 01       	movw	r28, r20
    3018:	09 90       	ld	r0, Y+
    301a:	ae 01       	movw	r20, r28
    301c:	e9 01       	movw	r28, r18
    301e:	09 92       	st	Y+, r0
    3020:	9e 01       	movw	r18, r28
    3022:	81 50       	subi	r24, 0x01	; 1
    3024:	c1 f7       	brne	.-16     	; 0x3016 <_fpadd_parts+0x58>
    3026:	e2 01       	movw	r28, r4
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	9c 91       	ld	r25, X
    302e:	89 23       	and	r24, r25
    3030:	81 83       	std	Z+1, r24	; 0x01
    3032:	08 c1       	rjmp	.+528    	; 0x3244 <_fpadd_parts+0x286>
    3034:	92 30       	cpi	r25, 0x02	; 2
    3036:	09 f4       	brne	.+2      	; 0x303a <_fpadd_parts+0x7c>
    3038:	07 c1       	rjmp	.+526    	; 0x3248 <_fpadd_parts+0x28a>
    303a:	12 96       	adiw	r26, 0x02	; 2
    303c:	2d 90       	ld	r2, X+
    303e:	3c 90       	ld	r3, X
    3040:	13 97       	sbiw	r26, 0x03	; 3
    3042:	eb 01       	movw	r28, r22
    3044:	8a 81       	ldd	r24, Y+2	; 0x02
    3046:	9b 81       	ldd	r25, Y+3	; 0x03
    3048:	14 96       	adiw	r26, 0x04	; 4
    304a:	ad 90       	ld	r10, X+
    304c:	bd 90       	ld	r11, X+
    304e:	cd 90       	ld	r12, X+
    3050:	dc 90       	ld	r13, X
    3052:	17 97       	sbiw	r26, 0x07	; 7
    3054:	ec 80       	ldd	r14, Y+4	; 0x04
    3056:	fd 80       	ldd	r15, Y+5	; 0x05
    3058:	0e 81       	ldd	r16, Y+6	; 0x06
    305a:	1f 81       	ldd	r17, Y+7	; 0x07
    305c:	91 01       	movw	r18, r2
    305e:	28 1b       	sub	r18, r24
    3060:	39 0b       	sbc	r19, r25
    3062:	b9 01       	movw	r22, r18
    3064:	37 ff       	sbrs	r19, 7
    3066:	04 c0       	rjmp	.+8      	; 0x3070 <_fpadd_parts+0xb2>
    3068:	66 27       	eor	r22, r22
    306a:	77 27       	eor	r23, r23
    306c:	62 1b       	sub	r22, r18
    306e:	73 0b       	sbc	r23, r19
    3070:	60 32       	cpi	r22, 0x20	; 32
    3072:	71 05       	cpc	r23, r1
    3074:	0c f0       	brlt	.+2      	; 0x3078 <_fpadd_parts+0xba>
    3076:	61 c0       	rjmp	.+194    	; 0x313a <_fpadd_parts+0x17c>
    3078:	12 16       	cp	r1, r18
    307a:	13 06       	cpc	r1, r19
    307c:	6c f5       	brge	.+90     	; 0x30d8 <_fpadd_parts+0x11a>
    307e:	37 01       	movw	r6, r14
    3080:	48 01       	movw	r8, r16
    3082:	06 2e       	mov	r0, r22
    3084:	04 c0       	rjmp	.+8      	; 0x308e <_fpadd_parts+0xd0>
    3086:	96 94       	lsr	r9
    3088:	87 94       	ror	r8
    308a:	77 94       	ror	r7
    308c:	67 94       	ror	r6
    308e:	0a 94       	dec	r0
    3090:	d2 f7       	brpl	.-12     	; 0x3086 <_fpadd_parts+0xc8>
    3092:	21 e0       	ldi	r18, 0x01	; 1
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e0       	ldi	r20, 0x00	; 0
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <_fpadd_parts+0xe6>
    309c:	22 0f       	add	r18, r18
    309e:	33 1f       	adc	r19, r19
    30a0:	44 1f       	adc	r20, r20
    30a2:	55 1f       	adc	r21, r21
    30a4:	6a 95       	dec	r22
    30a6:	d2 f7       	brpl	.-12     	; 0x309c <_fpadd_parts+0xde>
    30a8:	21 50       	subi	r18, 0x01	; 1
    30aa:	30 40       	sbci	r19, 0x00	; 0
    30ac:	40 40       	sbci	r20, 0x00	; 0
    30ae:	50 40       	sbci	r21, 0x00	; 0
    30b0:	2e 21       	and	r18, r14
    30b2:	3f 21       	and	r19, r15
    30b4:	40 23       	and	r20, r16
    30b6:	51 23       	and	r21, r17
    30b8:	21 15       	cp	r18, r1
    30ba:	31 05       	cpc	r19, r1
    30bc:	41 05       	cpc	r20, r1
    30be:	51 05       	cpc	r21, r1
    30c0:	21 f0       	breq	.+8      	; 0x30ca <_fpadd_parts+0x10c>
    30c2:	21 e0       	ldi	r18, 0x01	; 1
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e0       	ldi	r20, 0x00	; 0
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	79 01       	movw	r14, r18
    30cc:	8a 01       	movw	r16, r20
    30ce:	e6 28       	or	r14, r6
    30d0:	f7 28       	or	r15, r7
    30d2:	08 29       	or	r16, r8
    30d4:	19 29       	or	r17, r9
    30d6:	3c c0       	rjmp	.+120    	; 0x3150 <_fpadd_parts+0x192>
    30d8:	23 2b       	or	r18, r19
    30da:	d1 f1       	breq	.+116    	; 0x3150 <_fpadd_parts+0x192>
    30dc:	26 0e       	add	r2, r22
    30de:	37 1e       	adc	r3, r23
    30e0:	35 01       	movw	r6, r10
    30e2:	46 01       	movw	r8, r12
    30e4:	06 2e       	mov	r0, r22
    30e6:	04 c0       	rjmp	.+8      	; 0x30f0 <_fpadd_parts+0x132>
    30e8:	96 94       	lsr	r9
    30ea:	87 94       	ror	r8
    30ec:	77 94       	ror	r7
    30ee:	67 94       	ror	r6
    30f0:	0a 94       	dec	r0
    30f2:	d2 f7       	brpl	.-12     	; 0x30e8 <_fpadd_parts+0x12a>
    30f4:	21 e0       	ldi	r18, 0x01	; 1
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	04 c0       	rjmp	.+8      	; 0x3106 <_fpadd_parts+0x148>
    30fe:	22 0f       	add	r18, r18
    3100:	33 1f       	adc	r19, r19
    3102:	44 1f       	adc	r20, r20
    3104:	55 1f       	adc	r21, r21
    3106:	6a 95       	dec	r22
    3108:	d2 f7       	brpl	.-12     	; 0x30fe <_fpadd_parts+0x140>
    310a:	21 50       	subi	r18, 0x01	; 1
    310c:	30 40       	sbci	r19, 0x00	; 0
    310e:	40 40       	sbci	r20, 0x00	; 0
    3110:	50 40       	sbci	r21, 0x00	; 0
    3112:	2a 21       	and	r18, r10
    3114:	3b 21       	and	r19, r11
    3116:	4c 21       	and	r20, r12
    3118:	5d 21       	and	r21, r13
    311a:	21 15       	cp	r18, r1
    311c:	31 05       	cpc	r19, r1
    311e:	41 05       	cpc	r20, r1
    3120:	51 05       	cpc	r21, r1
    3122:	21 f0       	breq	.+8      	; 0x312c <_fpadd_parts+0x16e>
    3124:	21 e0       	ldi	r18, 0x01	; 1
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	59 01       	movw	r10, r18
    312e:	6a 01       	movw	r12, r20
    3130:	a6 28       	or	r10, r6
    3132:	b7 28       	or	r11, r7
    3134:	c8 28       	or	r12, r8
    3136:	d9 28       	or	r13, r9
    3138:	0b c0       	rjmp	.+22     	; 0x3150 <_fpadd_parts+0x192>
    313a:	82 15       	cp	r24, r2
    313c:	93 05       	cpc	r25, r3
    313e:	2c f0       	brlt	.+10     	; 0x314a <_fpadd_parts+0x18c>
    3140:	1c 01       	movw	r2, r24
    3142:	aa 24       	eor	r10, r10
    3144:	bb 24       	eor	r11, r11
    3146:	65 01       	movw	r12, r10
    3148:	03 c0       	rjmp	.+6      	; 0x3150 <_fpadd_parts+0x192>
    314a:	ee 24       	eor	r14, r14
    314c:	ff 24       	eor	r15, r15
    314e:	87 01       	movw	r16, r14
    3150:	11 96       	adiw	r26, 0x01	; 1
    3152:	9c 91       	ld	r25, X
    3154:	d2 01       	movw	r26, r4
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	8c 91       	ld	r24, X
    315a:	98 17       	cp	r25, r24
    315c:	09 f4       	brne	.+2      	; 0x3160 <_fpadd_parts+0x1a2>
    315e:	45 c0       	rjmp	.+138    	; 0x31ea <_fpadd_parts+0x22c>
    3160:	99 23       	and	r25, r25
    3162:	39 f0       	breq	.+14     	; 0x3172 <_fpadd_parts+0x1b4>
    3164:	a8 01       	movw	r20, r16
    3166:	97 01       	movw	r18, r14
    3168:	2a 19       	sub	r18, r10
    316a:	3b 09       	sbc	r19, r11
    316c:	4c 09       	sbc	r20, r12
    316e:	5d 09       	sbc	r21, r13
    3170:	06 c0       	rjmp	.+12     	; 0x317e <_fpadd_parts+0x1c0>
    3172:	a6 01       	movw	r20, r12
    3174:	95 01       	movw	r18, r10
    3176:	2e 19       	sub	r18, r14
    3178:	3f 09       	sbc	r19, r15
    317a:	40 0b       	sbc	r20, r16
    317c:	51 0b       	sbc	r21, r17
    317e:	57 fd       	sbrc	r21, 7
    3180:	08 c0       	rjmp	.+16     	; 0x3192 <_fpadd_parts+0x1d4>
    3182:	11 82       	std	Z+1, r1	; 0x01
    3184:	33 82       	std	Z+3, r3	; 0x03
    3186:	22 82       	std	Z+2, r2	; 0x02
    3188:	24 83       	std	Z+4, r18	; 0x04
    318a:	35 83       	std	Z+5, r19	; 0x05
    318c:	46 83       	std	Z+6, r20	; 0x06
    318e:	57 83       	std	Z+7, r21	; 0x07
    3190:	1d c0       	rjmp	.+58     	; 0x31cc <_fpadd_parts+0x20e>
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	81 83       	std	Z+1, r24	; 0x01
    3196:	33 82       	std	Z+3, r3	; 0x03
    3198:	22 82       	std	Z+2, r2	; 0x02
    319a:	88 27       	eor	r24, r24
    319c:	99 27       	eor	r25, r25
    319e:	dc 01       	movw	r26, r24
    31a0:	82 1b       	sub	r24, r18
    31a2:	93 0b       	sbc	r25, r19
    31a4:	a4 0b       	sbc	r26, r20
    31a6:	b5 0b       	sbc	r27, r21
    31a8:	84 83       	std	Z+4, r24	; 0x04
    31aa:	95 83       	std	Z+5, r25	; 0x05
    31ac:	a6 83       	std	Z+6, r26	; 0x06
    31ae:	b7 83       	std	Z+7, r27	; 0x07
    31b0:	0d c0       	rjmp	.+26     	; 0x31cc <_fpadd_parts+0x20e>
    31b2:	22 0f       	add	r18, r18
    31b4:	33 1f       	adc	r19, r19
    31b6:	44 1f       	adc	r20, r20
    31b8:	55 1f       	adc	r21, r21
    31ba:	24 83       	std	Z+4, r18	; 0x04
    31bc:	35 83       	std	Z+5, r19	; 0x05
    31be:	46 83       	std	Z+6, r20	; 0x06
    31c0:	57 83       	std	Z+7, r21	; 0x07
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	93 83       	std	Z+3, r25	; 0x03
    31ca:	82 83       	std	Z+2, r24	; 0x02
    31cc:	24 81       	ldd	r18, Z+4	; 0x04
    31ce:	35 81       	ldd	r19, Z+5	; 0x05
    31d0:	46 81       	ldd	r20, Z+6	; 0x06
    31d2:	57 81       	ldd	r21, Z+7	; 0x07
    31d4:	da 01       	movw	r26, r20
    31d6:	c9 01       	movw	r24, r18
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	a1 09       	sbc	r26, r1
    31dc:	b1 09       	sbc	r27, r1
    31de:	8f 5f       	subi	r24, 0xFF	; 255
    31e0:	9f 4f       	sbci	r25, 0xFF	; 255
    31e2:	af 4f       	sbci	r26, 0xFF	; 255
    31e4:	bf 43       	sbci	r27, 0x3F	; 63
    31e6:	28 f3       	brcs	.-54     	; 0x31b2 <_fpadd_parts+0x1f4>
    31e8:	0b c0       	rjmp	.+22     	; 0x3200 <_fpadd_parts+0x242>
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	33 82       	std	Z+3, r3	; 0x03
    31ee:	22 82       	std	Z+2, r2	; 0x02
    31f0:	ea 0c       	add	r14, r10
    31f2:	fb 1c       	adc	r15, r11
    31f4:	0c 1d       	adc	r16, r12
    31f6:	1d 1d       	adc	r17, r13
    31f8:	e4 82       	std	Z+4, r14	; 0x04
    31fa:	f5 82       	std	Z+5, r15	; 0x05
    31fc:	06 83       	std	Z+6, r16	; 0x06
    31fe:	17 83       	std	Z+7, r17	; 0x07
    3200:	83 e0       	ldi	r24, 0x03	; 3
    3202:	80 83       	st	Z, r24
    3204:	24 81       	ldd	r18, Z+4	; 0x04
    3206:	35 81       	ldd	r19, Z+5	; 0x05
    3208:	46 81       	ldd	r20, Z+6	; 0x06
    320a:	57 81       	ldd	r21, Z+7	; 0x07
    320c:	57 ff       	sbrs	r21, 7
    320e:	1a c0       	rjmp	.+52     	; 0x3244 <_fpadd_parts+0x286>
    3210:	c9 01       	movw	r24, r18
    3212:	aa 27       	eor	r26, r26
    3214:	97 fd       	sbrc	r25, 7
    3216:	a0 95       	com	r26
    3218:	ba 2f       	mov	r27, r26
    321a:	81 70       	andi	r24, 0x01	; 1
    321c:	90 70       	andi	r25, 0x00	; 0
    321e:	a0 70       	andi	r26, 0x00	; 0
    3220:	b0 70       	andi	r27, 0x00	; 0
    3222:	56 95       	lsr	r21
    3224:	47 95       	ror	r20
    3226:	37 95       	ror	r19
    3228:	27 95       	ror	r18
    322a:	82 2b       	or	r24, r18
    322c:	93 2b       	or	r25, r19
    322e:	a4 2b       	or	r26, r20
    3230:	b5 2b       	or	r27, r21
    3232:	84 83       	std	Z+4, r24	; 0x04
    3234:	95 83       	std	Z+5, r25	; 0x05
    3236:	a6 83       	std	Z+6, r26	; 0x06
    3238:	b7 83       	std	Z+7, r27	; 0x07
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	93 83       	std	Z+3, r25	; 0x03
    3242:	82 83       	std	Z+2, r24	; 0x02
    3244:	df 01       	movw	r26, r30
    3246:	01 c0       	rjmp	.+2      	; 0x324a <_fpadd_parts+0x28c>
    3248:	d2 01       	movw	r26, r4
    324a:	cd 01       	movw	r24, r26
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	e2 e1       	ldi	r30, 0x12	; 18
    3252:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <__epilogue_restores__>

00003256 <__subsf3>:
    3256:	a0 e2       	ldi	r26, 0x20	; 32
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e1 e3       	ldi	r30, 0x31	; 49
    325c:	f9 e1       	ldi	r31, 0x19	; 25
    325e:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x18>
    3262:	69 83       	std	Y+1, r22	; 0x01
    3264:	7a 83       	std	Y+2, r23	; 0x02
    3266:	8b 83       	std	Y+3, r24	; 0x03
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	2d 83       	std	Y+5, r18	; 0x05
    326c:	3e 83       	std	Y+6, r19	; 0x06
    326e:	4f 83       	std	Y+7, r20	; 0x07
    3270:	58 87       	std	Y+8, r21	; 0x08
    3272:	e9 e0       	ldi	r30, 0x09	; 9
    3274:	ee 2e       	mov	r14, r30
    3276:	f1 2c       	mov	r15, r1
    3278:	ec 0e       	add	r14, r28
    327a:	fd 1e       	adc	r15, r29
    327c:	ce 01       	movw	r24, r28
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	b7 01       	movw	r22, r14
    3282:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    3286:	8e 01       	movw	r16, r28
    3288:	0f 5e       	subi	r16, 0xEF	; 239
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	ce 01       	movw	r24, r28
    328e:	05 96       	adiw	r24, 0x05	; 5
    3290:	b8 01       	movw	r22, r16
    3292:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    3296:	8a 89       	ldd	r24, Y+18	; 0x12
    3298:	91 e0       	ldi	r25, 0x01	; 1
    329a:	89 27       	eor	r24, r25
    329c:	8a 8b       	std	Y+18, r24	; 0x12
    329e:	c7 01       	movw	r24, r14
    32a0:	b8 01       	movw	r22, r16
    32a2:	ae 01       	movw	r20, r28
    32a4:	47 5e       	subi	r20, 0xE7	; 231
    32a6:	5f 4f       	sbci	r21, 0xFF	; 255
    32a8:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_fpadd_parts>
    32ac:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__pack_f>
    32b0:	a0 96       	adiw	r28, 0x20	; 32
    32b2:	e6 e0       	ldi	r30, 0x06	; 6
    32b4:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x18>

000032b8 <__addsf3>:
    32b8:	a0 e2       	ldi	r26, 0x20	; 32
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e2 e6       	ldi	r30, 0x62	; 98
    32be:	f9 e1       	ldi	r31, 0x19	; 25
    32c0:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x18>
    32c4:	69 83       	std	Y+1, r22	; 0x01
    32c6:	7a 83       	std	Y+2, r23	; 0x02
    32c8:	8b 83       	std	Y+3, r24	; 0x03
    32ca:	9c 83       	std	Y+4, r25	; 0x04
    32cc:	2d 83       	std	Y+5, r18	; 0x05
    32ce:	3e 83       	std	Y+6, r19	; 0x06
    32d0:	4f 83       	std	Y+7, r20	; 0x07
    32d2:	58 87       	std	Y+8, r21	; 0x08
    32d4:	f9 e0       	ldi	r31, 0x09	; 9
    32d6:	ef 2e       	mov	r14, r31
    32d8:	f1 2c       	mov	r15, r1
    32da:	ec 0e       	add	r14, r28
    32dc:	fd 1e       	adc	r15, r29
    32de:	ce 01       	movw	r24, r28
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	b7 01       	movw	r22, r14
    32e4:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    32e8:	8e 01       	movw	r16, r28
    32ea:	0f 5e       	subi	r16, 0xEF	; 239
    32ec:	1f 4f       	sbci	r17, 0xFF	; 255
    32ee:	ce 01       	movw	r24, r28
    32f0:	05 96       	adiw	r24, 0x05	; 5
    32f2:	b8 01       	movw	r22, r16
    32f4:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    32f8:	c7 01       	movw	r24, r14
    32fa:	b8 01       	movw	r22, r16
    32fc:	ae 01       	movw	r20, r28
    32fe:	47 5e       	subi	r20, 0xE7	; 231
    3300:	5f 4f       	sbci	r21, 0xFF	; 255
    3302:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_fpadd_parts>
    3306:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__pack_f>
    330a:	a0 96       	adiw	r28, 0x20	; 32
    330c:	e6 e0       	ldi	r30, 0x06	; 6
    330e:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x18>

00003312 <__mulsf3>:
    3312:	a0 e2       	ldi	r26, 0x20	; 32
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ef e8       	ldi	r30, 0x8F	; 143
    3318:	f9 e1       	ldi	r31, 0x19	; 25
    331a:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__prologue_saves__>
    331e:	69 83       	std	Y+1, r22	; 0x01
    3320:	7a 83       	std	Y+2, r23	; 0x02
    3322:	8b 83       	std	Y+3, r24	; 0x03
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	2d 83       	std	Y+5, r18	; 0x05
    3328:	3e 83       	std	Y+6, r19	; 0x06
    332a:	4f 83       	std	Y+7, r20	; 0x07
    332c:	58 87       	std	Y+8, r21	; 0x08
    332e:	ce 01       	movw	r24, r28
    3330:	01 96       	adiw	r24, 0x01	; 1
    3332:	be 01       	movw	r22, r28
    3334:	67 5f       	subi	r22, 0xF7	; 247
    3336:	7f 4f       	sbci	r23, 0xFF	; 255
    3338:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    333c:	ce 01       	movw	r24, r28
    333e:	05 96       	adiw	r24, 0x05	; 5
    3340:	be 01       	movw	r22, r28
    3342:	6f 5e       	subi	r22, 0xEF	; 239
    3344:	7f 4f       	sbci	r23, 0xFF	; 255
    3346:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    334a:	99 85       	ldd	r25, Y+9	; 0x09
    334c:	92 30       	cpi	r25, 0x02	; 2
    334e:	88 f0       	brcs	.+34     	; 0x3372 <__mulsf3+0x60>
    3350:	89 89       	ldd	r24, Y+17	; 0x11
    3352:	82 30       	cpi	r24, 0x02	; 2
    3354:	c8 f0       	brcs	.+50     	; 0x3388 <__mulsf3+0x76>
    3356:	94 30       	cpi	r25, 0x04	; 4
    3358:	19 f4       	brne	.+6      	; 0x3360 <__mulsf3+0x4e>
    335a:	82 30       	cpi	r24, 0x02	; 2
    335c:	51 f4       	brne	.+20     	; 0x3372 <__mulsf3+0x60>
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <__mulsf3+0x56>
    3360:	84 30       	cpi	r24, 0x04	; 4
    3362:	29 f4       	brne	.+10     	; 0x336e <__mulsf3+0x5c>
    3364:	92 30       	cpi	r25, 0x02	; 2
    3366:	81 f4       	brne	.+32     	; 0x3388 <__mulsf3+0x76>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	92 e0       	ldi	r25, 0x02	; 2
    336c:	c6 c0       	rjmp	.+396    	; 0x34fa <__mulsf3+0x1e8>
    336e:	92 30       	cpi	r25, 0x02	; 2
    3370:	49 f4       	brne	.+18     	; 0x3384 <__mulsf3+0x72>
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	9a 85       	ldd	r25, Y+10	; 0x0a
    3376:	8a 89       	ldd	r24, Y+18	; 0x12
    3378:	98 13       	cpse	r25, r24
    337a:	21 e0       	ldi	r18, 0x01	; 1
    337c:	2a 87       	std	Y+10, r18	; 0x0a
    337e:	ce 01       	movw	r24, r28
    3380:	09 96       	adiw	r24, 0x09	; 9
    3382:	bb c0       	rjmp	.+374    	; 0x34fa <__mulsf3+0x1e8>
    3384:	82 30       	cpi	r24, 0x02	; 2
    3386:	49 f4       	brne	.+18     	; 0x339a <__mulsf3+0x88>
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	9a 85       	ldd	r25, Y+10	; 0x0a
    338c:	8a 89       	ldd	r24, Y+18	; 0x12
    338e:	98 13       	cpse	r25, r24
    3390:	21 e0       	ldi	r18, 0x01	; 1
    3392:	2a 8b       	std	Y+18, r18	; 0x12
    3394:	ce 01       	movw	r24, r28
    3396:	41 96       	adiw	r24, 0x11	; 17
    3398:	b0 c0       	rjmp	.+352    	; 0x34fa <__mulsf3+0x1e8>
    339a:	2d 84       	ldd	r2, Y+13	; 0x0d
    339c:	3e 84       	ldd	r3, Y+14	; 0x0e
    339e:	4f 84       	ldd	r4, Y+15	; 0x0f
    33a0:	58 88       	ldd	r5, Y+16	; 0x10
    33a2:	6d 88       	ldd	r6, Y+21	; 0x15
    33a4:	7e 88       	ldd	r7, Y+22	; 0x16
    33a6:	8f 88       	ldd	r8, Y+23	; 0x17
    33a8:	98 8c       	ldd	r9, Y+24	; 0x18
    33aa:	ee 24       	eor	r14, r14
    33ac:	ff 24       	eor	r15, r15
    33ae:	87 01       	movw	r16, r14
    33b0:	aa 24       	eor	r10, r10
    33b2:	bb 24       	eor	r11, r11
    33b4:	65 01       	movw	r12, r10
    33b6:	40 e0       	ldi	r20, 0x00	; 0
    33b8:	50 e0       	ldi	r21, 0x00	; 0
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	e0 e0       	ldi	r30, 0x00	; 0
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	c1 01       	movw	r24, r2
    33c4:	81 70       	andi	r24, 0x01	; 1
    33c6:	90 70       	andi	r25, 0x00	; 0
    33c8:	89 2b       	or	r24, r25
    33ca:	e9 f0       	breq	.+58     	; 0x3406 <__mulsf3+0xf4>
    33cc:	e6 0c       	add	r14, r6
    33ce:	f7 1c       	adc	r15, r7
    33d0:	08 1d       	adc	r16, r8
    33d2:	19 1d       	adc	r17, r9
    33d4:	9a 01       	movw	r18, r20
    33d6:	ab 01       	movw	r20, r22
    33d8:	2a 0d       	add	r18, r10
    33da:	3b 1d       	adc	r19, r11
    33dc:	4c 1d       	adc	r20, r12
    33de:	5d 1d       	adc	r21, r13
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 e0       	ldi	r26, 0x00	; 0
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e6 14       	cp	r14, r6
    33ea:	f7 04       	cpc	r15, r7
    33ec:	08 05       	cpc	r16, r8
    33ee:	19 05       	cpc	r17, r9
    33f0:	20 f4       	brcc	.+8      	; 0x33fa <__mulsf3+0xe8>
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	a0 e0       	ldi	r26, 0x00	; 0
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	ba 01       	movw	r22, r20
    33fc:	a9 01       	movw	r20, r18
    33fe:	48 0f       	add	r20, r24
    3400:	59 1f       	adc	r21, r25
    3402:	6a 1f       	adc	r22, r26
    3404:	7b 1f       	adc	r23, r27
    3406:	aa 0c       	add	r10, r10
    3408:	bb 1c       	adc	r11, r11
    340a:	cc 1c       	adc	r12, r12
    340c:	dd 1c       	adc	r13, r13
    340e:	97 fe       	sbrs	r9, 7
    3410:	08 c0       	rjmp	.+16     	; 0x3422 <__mulsf3+0x110>
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a0 e0       	ldi	r26, 0x00	; 0
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	a8 2a       	or	r10, r24
    341c:	b9 2a       	or	r11, r25
    341e:	ca 2a       	or	r12, r26
    3420:	db 2a       	or	r13, r27
    3422:	31 96       	adiw	r30, 0x01	; 1
    3424:	e0 32       	cpi	r30, 0x20	; 32
    3426:	f1 05       	cpc	r31, r1
    3428:	49 f0       	breq	.+18     	; 0x343c <__mulsf3+0x12a>
    342a:	66 0c       	add	r6, r6
    342c:	77 1c       	adc	r7, r7
    342e:	88 1c       	adc	r8, r8
    3430:	99 1c       	adc	r9, r9
    3432:	56 94       	lsr	r5
    3434:	47 94       	ror	r4
    3436:	37 94       	ror	r3
    3438:	27 94       	ror	r2
    343a:	c3 cf       	rjmp	.-122    	; 0x33c2 <__mulsf3+0xb0>
    343c:	fa 85       	ldd	r31, Y+10	; 0x0a
    343e:	ea 89       	ldd	r30, Y+18	; 0x12
    3440:	2b 89       	ldd	r18, Y+19	; 0x13
    3442:	3c 89       	ldd	r19, Y+20	; 0x14
    3444:	8b 85       	ldd	r24, Y+11	; 0x0b
    3446:	9c 85       	ldd	r25, Y+12	; 0x0c
    3448:	28 0f       	add	r18, r24
    344a:	39 1f       	adc	r19, r25
    344c:	2e 5f       	subi	r18, 0xFE	; 254
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	17 c0       	rjmp	.+46     	; 0x3480 <__mulsf3+0x16e>
    3452:	ca 01       	movw	r24, r20
    3454:	81 70       	andi	r24, 0x01	; 1
    3456:	90 70       	andi	r25, 0x00	; 0
    3458:	89 2b       	or	r24, r25
    345a:	61 f0       	breq	.+24     	; 0x3474 <__mulsf3+0x162>
    345c:	16 95       	lsr	r17
    345e:	07 95       	ror	r16
    3460:	f7 94       	ror	r15
    3462:	e7 94       	ror	r14
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	a0 e0       	ldi	r26, 0x00	; 0
    346a:	b0 e8       	ldi	r27, 0x80	; 128
    346c:	e8 2a       	or	r14, r24
    346e:	f9 2a       	or	r15, r25
    3470:	0a 2b       	or	r16, r26
    3472:	1b 2b       	or	r17, r27
    3474:	76 95       	lsr	r23
    3476:	67 95       	ror	r22
    3478:	57 95       	ror	r21
    347a:	47 95       	ror	r20
    347c:	2f 5f       	subi	r18, 0xFF	; 255
    347e:	3f 4f       	sbci	r19, 0xFF	; 255
    3480:	77 fd       	sbrc	r23, 7
    3482:	e7 cf       	rjmp	.-50     	; 0x3452 <__mulsf3+0x140>
    3484:	0c c0       	rjmp	.+24     	; 0x349e <__mulsf3+0x18c>
    3486:	44 0f       	add	r20, r20
    3488:	55 1f       	adc	r21, r21
    348a:	66 1f       	adc	r22, r22
    348c:	77 1f       	adc	r23, r23
    348e:	17 fd       	sbrc	r17, 7
    3490:	41 60       	ori	r20, 0x01	; 1
    3492:	ee 0c       	add	r14, r14
    3494:	ff 1c       	adc	r15, r15
    3496:	00 1f       	adc	r16, r16
    3498:	11 1f       	adc	r17, r17
    349a:	21 50       	subi	r18, 0x01	; 1
    349c:	30 40       	sbci	r19, 0x00	; 0
    349e:	40 30       	cpi	r20, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	59 07       	cpc	r21, r25
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	69 07       	cpc	r22, r25
    34a8:	90 e4       	ldi	r25, 0x40	; 64
    34aa:	79 07       	cpc	r23, r25
    34ac:	60 f3       	brcs	.-40     	; 0x3486 <__mulsf3+0x174>
    34ae:	2b 8f       	std	Y+27, r18	; 0x1b
    34b0:	3c 8f       	std	Y+28, r19	; 0x1c
    34b2:	db 01       	movw	r26, r22
    34b4:	ca 01       	movw	r24, r20
    34b6:	8f 77       	andi	r24, 0x7F	; 127
    34b8:	90 70       	andi	r25, 0x00	; 0
    34ba:	a0 70       	andi	r26, 0x00	; 0
    34bc:	b0 70       	andi	r27, 0x00	; 0
    34be:	80 34       	cpi	r24, 0x40	; 64
    34c0:	91 05       	cpc	r25, r1
    34c2:	a1 05       	cpc	r26, r1
    34c4:	b1 05       	cpc	r27, r1
    34c6:	61 f4       	brne	.+24     	; 0x34e0 <__mulsf3+0x1ce>
    34c8:	47 fd       	sbrc	r20, 7
    34ca:	0a c0       	rjmp	.+20     	; 0x34e0 <__mulsf3+0x1ce>
    34cc:	e1 14       	cp	r14, r1
    34ce:	f1 04       	cpc	r15, r1
    34d0:	01 05       	cpc	r16, r1
    34d2:	11 05       	cpc	r17, r1
    34d4:	29 f0       	breq	.+10     	; 0x34e0 <__mulsf3+0x1ce>
    34d6:	40 5c       	subi	r20, 0xC0	; 192
    34d8:	5f 4f       	sbci	r21, 0xFF	; 255
    34da:	6f 4f       	sbci	r22, 0xFF	; 255
    34dc:	7f 4f       	sbci	r23, 0xFF	; 255
    34de:	40 78       	andi	r20, 0x80	; 128
    34e0:	1a 8e       	std	Y+26, r1	; 0x1a
    34e2:	fe 17       	cp	r31, r30
    34e4:	11 f0       	breq	.+4      	; 0x34ea <__mulsf3+0x1d8>
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	8a 8f       	std	Y+26, r24	; 0x1a
    34ea:	4d 8f       	std	Y+29, r20	; 0x1d
    34ec:	5e 8f       	std	Y+30, r21	; 0x1e
    34ee:	6f 8f       	std	Y+31, r22	; 0x1f
    34f0:	78 a3       	std	Y+32, r23	; 0x20
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	89 8f       	std	Y+25, r24	; 0x19
    34f6:	ce 01       	movw	r24, r28
    34f8:	49 96       	adiw	r24, 0x19	; 25
    34fa:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__pack_f>
    34fe:	a0 96       	adiw	r28, 0x20	; 32
    3500:	e2 e1       	ldi	r30, 0x12	; 18
    3502:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <__epilogue_restores__>

00003506 <__divsf3>:
    3506:	a8 e1       	ldi	r26, 0x18	; 24
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e9 e8       	ldi	r30, 0x89	; 137
    350c:	fa e1       	ldi	r31, 0x1A	; 26
    350e:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x10>
    3512:	69 83       	std	Y+1, r22	; 0x01
    3514:	7a 83       	std	Y+2, r23	; 0x02
    3516:	8b 83       	std	Y+3, r24	; 0x03
    3518:	9c 83       	std	Y+4, r25	; 0x04
    351a:	2d 83       	std	Y+5, r18	; 0x05
    351c:	3e 83       	std	Y+6, r19	; 0x06
    351e:	4f 83       	std	Y+7, r20	; 0x07
    3520:	58 87       	std	Y+8, r21	; 0x08
    3522:	b9 e0       	ldi	r27, 0x09	; 9
    3524:	eb 2e       	mov	r14, r27
    3526:	f1 2c       	mov	r15, r1
    3528:	ec 0e       	add	r14, r28
    352a:	fd 1e       	adc	r15, r29
    352c:	ce 01       	movw	r24, r28
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	b7 01       	movw	r22, r14
    3532:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    3536:	8e 01       	movw	r16, r28
    3538:	0f 5e       	subi	r16, 0xEF	; 239
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	ce 01       	movw	r24, r28
    353e:	05 96       	adiw	r24, 0x05	; 5
    3540:	b8 01       	movw	r22, r16
    3542:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    3546:	29 85       	ldd	r18, Y+9	; 0x09
    3548:	22 30       	cpi	r18, 0x02	; 2
    354a:	08 f4       	brcc	.+2      	; 0x354e <__divsf3+0x48>
    354c:	7e c0       	rjmp	.+252    	; 0x364a <__divsf3+0x144>
    354e:	39 89       	ldd	r19, Y+17	; 0x11
    3550:	32 30       	cpi	r19, 0x02	; 2
    3552:	10 f4       	brcc	.+4      	; 0x3558 <__divsf3+0x52>
    3554:	b8 01       	movw	r22, r16
    3556:	7c c0       	rjmp	.+248    	; 0x3650 <__divsf3+0x14a>
    3558:	8a 85       	ldd	r24, Y+10	; 0x0a
    355a:	9a 89       	ldd	r25, Y+18	; 0x12
    355c:	89 27       	eor	r24, r25
    355e:	8a 87       	std	Y+10, r24	; 0x0a
    3560:	24 30       	cpi	r18, 0x04	; 4
    3562:	11 f0       	breq	.+4      	; 0x3568 <__divsf3+0x62>
    3564:	22 30       	cpi	r18, 0x02	; 2
    3566:	31 f4       	brne	.+12     	; 0x3574 <__divsf3+0x6e>
    3568:	23 17       	cp	r18, r19
    356a:	09 f0       	breq	.+2      	; 0x356e <__divsf3+0x68>
    356c:	6e c0       	rjmp	.+220    	; 0x364a <__divsf3+0x144>
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	72 e0       	ldi	r23, 0x02	; 2
    3572:	6e c0       	rjmp	.+220    	; 0x3650 <__divsf3+0x14a>
    3574:	34 30       	cpi	r19, 0x04	; 4
    3576:	39 f4       	brne	.+14     	; 0x3586 <__divsf3+0x80>
    3578:	1d 86       	std	Y+13, r1	; 0x0d
    357a:	1e 86       	std	Y+14, r1	; 0x0e
    357c:	1f 86       	std	Y+15, r1	; 0x0f
    357e:	18 8a       	std	Y+16, r1	; 0x10
    3580:	1c 86       	std	Y+12, r1	; 0x0c
    3582:	1b 86       	std	Y+11, r1	; 0x0b
    3584:	04 c0       	rjmp	.+8      	; 0x358e <__divsf3+0x88>
    3586:	32 30       	cpi	r19, 0x02	; 2
    3588:	21 f4       	brne	.+8      	; 0x3592 <__divsf3+0x8c>
    358a:	84 e0       	ldi	r24, 0x04	; 4
    358c:	89 87       	std	Y+9, r24	; 0x09
    358e:	b7 01       	movw	r22, r14
    3590:	5f c0       	rjmp	.+190    	; 0x3650 <__divsf3+0x14a>
    3592:	2b 85       	ldd	r18, Y+11	; 0x0b
    3594:	3c 85       	ldd	r19, Y+12	; 0x0c
    3596:	8b 89       	ldd	r24, Y+19	; 0x13
    3598:	9c 89       	ldd	r25, Y+20	; 0x14
    359a:	28 1b       	sub	r18, r24
    359c:	39 0b       	sbc	r19, r25
    359e:	3c 87       	std	Y+12, r19	; 0x0c
    35a0:	2b 87       	std	Y+11, r18	; 0x0b
    35a2:	ed 84       	ldd	r14, Y+13	; 0x0d
    35a4:	fe 84       	ldd	r15, Y+14	; 0x0e
    35a6:	0f 85       	ldd	r16, Y+15	; 0x0f
    35a8:	18 89       	ldd	r17, Y+16	; 0x10
    35aa:	ad 88       	ldd	r10, Y+21	; 0x15
    35ac:	be 88       	ldd	r11, Y+22	; 0x16
    35ae:	cf 88       	ldd	r12, Y+23	; 0x17
    35b0:	d8 8c       	ldd	r13, Y+24	; 0x18
    35b2:	ea 14       	cp	r14, r10
    35b4:	fb 04       	cpc	r15, r11
    35b6:	0c 05       	cpc	r16, r12
    35b8:	1d 05       	cpc	r17, r13
    35ba:	40 f4       	brcc	.+16     	; 0x35cc <__divsf3+0xc6>
    35bc:	ee 0c       	add	r14, r14
    35be:	ff 1c       	adc	r15, r15
    35c0:	00 1f       	adc	r16, r16
    35c2:	11 1f       	adc	r17, r17
    35c4:	21 50       	subi	r18, 0x01	; 1
    35c6:	30 40       	sbci	r19, 0x00	; 0
    35c8:	3c 87       	std	Y+12, r19	; 0x0c
    35ca:	2b 87       	std	Y+11, r18	; 0x0b
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a0 e0       	ldi	r26, 0x00	; 0
    35da:	b0 e4       	ldi	r27, 0x40	; 64
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	ea 14       	cp	r14, r10
    35e2:	fb 04       	cpc	r15, r11
    35e4:	0c 05       	cpc	r16, r12
    35e6:	1d 05       	cpc	r17, r13
    35e8:	40 f0       	brcs	.+16     	; 0x35fa <__divsf3+0xf4>
    35ea:	28 2b       	or	r18, r24
    35ec:	39 2b       	or	r19, r25
    35ee:	4a 2b       	or	r20, r26
    35f0:	5b 2b       	or	r21, r27
    35f2:	ea 18       	sub	r14, r10
    35f4:	fb 08       	sbc	r15, r11
    35f6:	0c 09       	sbc	r16, r12
    35f8:	1d 09       	sbc	r17, r13
    35fa:	b6 95       	lsr	r27
    35fc:	a7 95       	ror	r26
    35fe:	97 95       	ror	r25
    3600:	87 95       	ror	r24
    3602:	ee 0c       	add	r14, r14
    3604:	ff 1c       	adc	r15, r15
    3606:	00 1f       	adc	r16, r16
    3608:	11 1f       	adc	r17, r17
    360a:	6f 5f       	subi	r22, 0xFF	; 255
    360c:	7f 4f       	sbci	r23, 0xFF	; 255
    360e:	6f 31       	cpi	r22, 0x1F	; 31
    3610:	71 05       	cpc	r23, r1
    3612:	31 f7       	brne	.-52     	; 0x35e0 <__divsf3+0xda>
    3614:	da 01       	movw	r26, r20
    3616:	c9 01       	movw	r24, r18
    3618:	8f 77       	andi	r24, 0x7F	; 127
    361a:	90 70       	andi	r25, 0x00	; 0
    361c:	a0 70       	andi	r26, 0x00	; 0
    361e:	b0 70       	andi	r27, 0x00	; 0
    3620:	80 34       	cpi	r24, 0x40	; 64
    3622:	91 05       	cpc	r25, r1
    3624:	a1 05       	cpc	r26, r1
    3626:	b1 05       	cpc	r27, r1
    3628:	61 f4       	brne	.+24     	; 0x3642 <__divsf3+0x13c>
    362a:	27 fd       	sbrc	r18, 7
    362c:	0a c0       	rjmp	.+20     	; 0x3642 <__divsf3+0x13c>
    362e:	e1 14       	cp	r14, r1
    3630:	f1 04       	cpc	r15, r1
    3632:	01 05       	cpc	r16, r1
    3634:	11 05       	cpc	r17, r1
    3636:	29 f0       	breq	.+10     	; 0x3642 <__divsf3+0x13c>
    3638:	20 5c       	subi	r18, 0xC0	; 192
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	4f 4f       	sbci	r20, 0xFF	; 255
    363e:	5f 4f       	sbci	r21, 0xFF	; 255
    3640:	20 78       	andi	r18, 0x80	; 128
    3642:	2d 87       	std	Y+13, r18	; 0x0d
    3644:	3e 87       	std	Y+14, r19	; 0x0e
    3646:	4f 87       	std	Y+15, r20	; 0x0f
    3648:	58 8b       	std	Y+16, r21	; 0x10
    364a:	be 01       	movw	r22, r28
    364c:	67 5f       	subi	r22, 0xF7	; 247
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	cb 01       	movw	r24, r22
    3652:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__pack_f>
    3656:	68 96       	adiw	r28, 0x18	; 24
    3658:	ea e0       	ldi	r30, 0x0A	; 10
    365a:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x10>

0000365e <__gtsf2>:
    365e:	a8 e1       	ldi	r26, 0x18	; 24
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	e5 e3       	ldi	r30, 0x35	; 53
    3664:	fb e1       	ldi	r31, 0x1B	; 27
    3666:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x18>
    366a:	69 83       	std	Y+1, r22	; 0x01
    366c:	7a 83       	std	Y+2, r23	; 0x02
    366e:	8b 83       	std	Y+3, r24	; 0x03
    3670:	9c 83       	std	Y+4, r25	; 0x04
    3672:	2d 83       	std	Y+5, r18	; 0x05
    3674:	3e 83       	std	Y+6, r19	; 0x06
    3676:	4f 83       	std	Y+7, r20	; 0x07
    3678:	58 87       	std	Y+8, r21	; 0x08
    367a:	89 e0       	ldi	r24, 0x09	; 9
    367c:	e8 2e       	mov	r14, r24
    367e:	f1 2c       	mov	r15, r1
    3680:	ec 0e       	add	r14, r28
    3682:	fd 1e       	adc	r15, r29
    3684:	ce 01       	movw	r24, r28
    3686:	01 96       	adiw	r24, 0x01	; 1
    3688:	b7 01       	movw	r22, r14
    368a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    368e:	8e 01       	movw	r16, r28
    3690:	0f 5e       	subi	r16, 0xEF	; 239
    3692:	1f 4f       	sbci	r17, 0xFF	; 255
    3694:	ce 01       	movw	r24, r28
    3696:	05 96       	adiw	r24, 0x05	; 5
    3698:	b8 01       	movw	r22, r16
    369a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    369e:	89 85       	ldd	r24, Y+9	; 0x09
    36a0:	82 30       	cpi	r24, 0x02	; 2
    36a2:	40 f0       	brcs	.+16     	; 0x36b4 <__gtsf2+0x56>
    36a4:	89 89       	ldd	r24, Y+17	; 0x11
    36a6:	82 30       	cpi	r24, 0x02	; 2
    36a8:	28 f0       	brcs	.+10     	; 0x36b4 <__gtsf2+0x56>
    36aa:	c7 01       	movw	r24, r14
    36ac:	b8 01       	movw	r22, r16
    36ae:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__fpcmp_parts_f>
    36b2:	01 c0       	rjmp	.+2      	; 0x36b6 <__gtsf2+0x58>
    36b4:	8f ef       	ldi	r24, 0xFF	; 255
    36b6:	68 96       	adiw	r28, 0x18	; 24
    36b8:	e6 e0       	ldi	r30, 0x06	; 6
    36ba:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x18>

000036be <__gesf2>:
    36be:	a8 e1       	ldi	r26, 0x18	; 24
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e5 e6       	ldi	r30, 0x65	; 101
    36c4:	fb e1       	ldi	r31, 0x1B	; 27
    36c6:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x18>
    36ca:	69 83       	std	Y+1, r22	; 0x01
    36cc:	7a 83       	std	Y+2, r23	; 0x02
    36ce:	8b 83       	std	Y+3, r24	; 0x03
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	2d 83       	std	Y+5, r18	; 0x05
    36d4:	3e 83       	std	Y+6, r19	; 0x06
    36d6:	4f 83       	std	Y+7, r20	; 0x07
    36d8:	58 87       	std	Y+8, r21	; 0x08
    36da:	89 e0       	ldi	r24, 0x09	; 9
    36dc:	e8 2e       	mov	r14, r24
    36de:	f1 2c       	mov	r15, r1
    36e0:	ec 0e       	add	r14, r28
    36e2:	fd 1e       	adc	r15, r29
    36e4:	ce 01       	movw	r24, r28
    36e6:	01 96       	adiw	r24, 0x01	; 1
    36e8:	b7 01       	movw	r22, r14
    36ea:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    36ee:	8e 01       	movw	r16, r28
    36f0:	0f 5e       	subi	r16, 0xEF	; 239
    36f2:	1f 4f       	sbci	r17, 0xFF	; 255
    36f4:	ce 01       	movw	r24, r28
    36f6:	05 96       	adiw	r24, 0x05	; 5
    36f8:	b8 01       	movw	r22, r16
    36fa:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	82 30       	cpi	r24, 0x02	; 2
    3702:	40 f0       	brcs	.+16     	; 0x3714 <__gesf2+0x56>
    3704:	89 89       	ldd	r24, Y+17	; 0x11
    3706:	82 30       	cpi	r24, 0x02	; 2
    3708:	28 f0       	brcs	.+10     	; 0x3714 <__gesf2+0x56>
    370a:	c7 01       	movw	r24, r14
    370c:	b8 01       	movw	r22, r16
    370e:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__fpcmp_parts_f>
    3712:	01 c0       	rjmp	.+2      	; 0x3716 <__gesf2+0x58>
    3714:	8f ef       	ldi	r24, 0xFF	; 255
    3716:	68 96       	adiw	r28, 0x18	; 24
    3718:	e6 e0       	ldi	r30, 0x06	; 6
    371a:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x18>

0000371e <__ltsf2>:
    371e:	a8 e1       	ldi	r26, 0x18	; 24
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e5 e9       	ldi	r30, 0x95	; 149
    3724:	fb e1       	ldi	r31, 0x1B	; 27
    3726:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x18>
    372a:	69 83       	std	Y+1, r22	; 0x01
    372c:	7a 83       	std	Y+2, r23	; 0x02
    372e:	8b 83       	std	Y+3, r24	; 0x03
    3730:	9c 83       	std	Y+4, r25	; 0x04
    3732:	2d 83       	std	Y+5, r18	; 0x05
    3734:	3e 83       	std	Y+6, r19	; 0x06
    3736:	4f 83       	std	Y+7, r20	; 0x07
    3738:	58 87       	std	Y+8, r21	; 0x08
    373a:	89 e0       	ldi	r24, 0x09	; 9
    373c:	e8 2e       	mov	r14, r24
    373e:	f1 2c       	mov	r15, r1
    3740:	ec 0e       	add	r14, r28
    3742:	fd 1e       	adc	r15, r29
    3744:	ce 01       	movw	r24, r28
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	b7 01       	movw	r22, r14
    374a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    374e:	8e 01       	movw	r16, r28
    3750:	0f 5e       	subi	r16, 0xEF	; 239
    3752:	1f 4f       	sbci	r17, 0xFF	; 255
    3754:	ce 01       	movw	r24, r28
    3756:	05 96       	adiw	r24, 0x05	; 5
    3758:	b8 01       	movw	r22, r16
    375a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    375e:	89 85       	ldd	r24, Y+9	; 0x09
    3760:	82 30       	cpi	r24, 0x02	; 2
    3762:	40 f0       	brcs	.+16     	; 0x3774 <__ltsf2+0x56>
    3764:	89 89       	ldd	r24, Y+17	; 0x11
    3766:	82 30       	cpi	r24, 0x02	; 2
    3768:	28 f0       	brcs	.+10     	; 0x3774 <__ltsf2+0x56>
    376a:	c7 01       	movw	r24, r14
    376c:	b8 01       	movw	r22, r16
    376e:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__fpcmp_parts_f>
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <__ltsf2+0x58>
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	68 96       	adiw	r28, 0x18	; 24
    3778:	e6 e0       	ldi	r30, 0x06	; 6
    377a:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x18>

0000377e <__floatsisf>:
    377e:	a8 e0       	ldi	r26, 0x08	; 8
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	e5 ec       	ldi	r30, 0xC5	; 197
    3784:	fb e1       	ldi	r31, 0x1B	; 27
    3786:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x12>
    378a:	9b 01       	movw	r18, r22
    378c:	ac 01       	movw	r20, r24
    378e:	83 e0       	ldi	r24, 0x03	; 3
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	da 01       	movw	r26, r20
    3794:	c9 01       	movw	r24, r18
    3796:	88 27       	eor	r24, r24
    3798:	b7 fd       	sbrc	r27, 7
    379a:	83 95       	inc	r24
    379c:	99 27       	eor	r25, r25
    379e:	aa 27       	eor	r26, r26
    37a0:	bb 27       	eor	r27, r27
    37a2:	b8 2e       	mov	r11, r24
    37a4:	21 15       	cp	r18, r1
    37a6:	31 05       	cpc	r19, r1
    37a8:	41 05       	cpc	r20, r1
    37aa:	51 05       	cpc	r21, r1
    37ac:	19 f4       	brne	.+6      	; 0x37b4 <__floatsisf+0x36>
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	89 83       	std	Y+1, r24	; 0x01
    37b2:	3a c0       	rjmp	.+116    	; 0x3828 <__floatsisf+0xaa>
    37b4:	88 23       	and	r24, r24
    37b6:	a9 f0       	breq	.+42     	; 0x37e2 <__floatsisf+0x64>
    37b8:	20 30       	cpi	r18, 0x00	; 0
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	38 07       	cpc	r19, r24
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	48 07       	cpc	r20, r24
    37c2:	80 e8       	ldi	r24, 0x80	; 128
    37c4:	58 07       	cpc	r21, r24
    37c6:	29 f4       	brne	.+10     	; 0x37d2 <__floatsisf+0x54>
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	70 e0       	ldi	r23, 0x00	; 0
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	9f ec       	ldi	r25, 0xCF	; 207
    37d0:	30 c0       	rjmp	.+96     	; 0x3832 <__floatsisf+0xb4>
    37d2:	ee 24       	eor	r14, r14
    37d4:	ff 24       	eor	r15, r15
    37d6:	87 01       	movw	r16, r14
    37d8:	e2 1a       	sub	r14, r18
    37da:	f3 0a       	sbc	r15, r19
    37dc:	04 0b       	sbc	r16, r20
    37de:	15 0b       	sbc	r17, r21
    37e0:	02 c0       	rjmp	.+4      	; 0x37e6 <__floatsisf+0x68>
    37e2:	79 01       	movw	r14, r18
    37e4:	8a 01       	movw	r16, r20
    37e6:	8e e1       	ldi	r24, 0x1E	; 30
    37e8:	c8 2e       	mov	r12, r24
    37ea:	d1 2c       	mov	r13, r1
    37ec:	dc 82       	std	Y+4, r13	; 0x04
    37ee:	cb 82       	std	Y+3, r12	; 0x03
    37f0:	ed 82       	std	Y+5, r14	; 0x05
    37f2:	fe 82       	std	Y+6, r15	; 0x06
    37f4:	0f 83       	std	Y+7, r16	; 0x07
    37f6:	18 87       	std	Y+8, r17	; 0x08
    37f8:	c8 01       	movw	r24, r16
    37fa:	b7 01       	movw	r22, r14
    37fc:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <__clzsi2>
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	18 16       	cp	r1, r24
    3804:	19 06       	cpc	r1, r25
    3806:	84 f4       	brge	.+32     	; 0x3828 <__floatsisf+0xaa>
    3808:	08 2e       	mov	r0, r24
    380a:	04 c0       	rjmp	.+8      	; 0x3814 <__floatsisf+0x96>
    380c:	ee 0c       	add	r14, r14
    380e:	ff 1c       	adc	r15, r15
    3810:	00 1f       	adc	r16, r16
    3812:	11 1f       	adc	r17, r17
    3814:	0a 94       	dec	r0
    3816:	d2 f7       	brpl	.-12     	; 0x380c <__floatsisf+0x8e>
    3818:	ed 82       	std	Y+5, r14	; 0x05
    381a:	fe 82       	std	Y+6, r15	; 0x06
    381c:	0f 83       	std	Y+7, r16	; 0x07
    381e:	18 87       	std	Y+8, r17	; 0x08
    3820:	c8 1a       	sub	r12, r24
    3822:	d9 0a       	sbc	r13, r25
    3824:	dc 82       	std	Y+4, r13	; 0x04
    3826:	cb 82       	std	Y+3, r12	; 0x03
    3828:	ba 82       	std	Y+2, r11	; 0x02
    382a:	ce 01       	movw	r24, r28
    382c:	01 96       	adiw	r24, 0x01	; 1
    382e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__pack_f>
    3832:	28 96       	adiw	r28, 0x08	; 8
    3834:	e9 e0       	ldi	r30, 0x09	; 9
    3836:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x12>

0000383a <__fixsfsi>:
    383a:	ac e0       	ldi	r26, 0x0C	; 12
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	e3 e2       	ldi	r30, 0x23	; 35
    3840:	fc e1       	ldi	r31, 0x1C	; 28
    3842:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__prologue_saves__+0x20>
    3846:	69 83       	std	Y+1, r22	; 0x01
    3848:	7a 83       	std	Y+2, r23	; 0x02
    384a:	8b 83       	std	Y+3, r24	; 0x03
    384c:	9c 83       	std	Y+4, r25	; 0x04
    384e:	ce 01       	movw	r24, r28
    3850:	01 96       	adiw	r24, 0x01	; 1
    3852:	be 01       	movw	r22, r28
    3854:	6b 5f       	subi	r22, 0xFB	; 251
    3856:	7f 4f       	sbci	r23, 0xFF	; 255
    3858:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__unpack_f>
    385c:	8d 81       	ldd	r24, Y+5	; 0x05
    385e:	82 30       	cpi	r24, 0x02	; 2
    3860:	61 f1       	breq	.+88     	; 0x38ba <__fixsfsi+0x80>
    3862:	82 30       	cpi	r24, 0x02	; 2
    3864:	50 f1       	brcs	.+84     	; 0x38ba <__fixsfsi+0x80>
    3866:	84 30       	cpi	r24, 0x04	; 4
    3868:	21 f4       	brne	.+8      	; 0x3872 <__fixsfsi+0x38>
    386a:	8e 81       	ldd	r24, Y+6	; 0x06
    386c:	88 23       	and	r24, r24
    386e:	51 f1       	breq	.+84     	; 0x38c4 <__fixsfsi+0x8a>
    3870:	2e c0       	rjmp	.+92     	; 0x38ce <__fixsfsi+0x94>
    3872:	2f 81       	ldd	r18, Y+7	; 0x07
    3874:	38 85       	ldd	r19, Y+8	; 0x08
    3876:	37 fd       	sbrc	r19, 7
    3878:	20 c0       	rjmp	.+64     	; 0x38ba <__fixsfsi+0x80>
    387a:	6e 81       	ldd	r22, Y+6	; 0x06
    387c:	2f 31       	cpi	r18, 0x1F	; 31
    387e:	31 05       	cpc	r19, r1
    3880:	1c f0       	brlt	.+6      	; 0x3888 <__fixsfsi+0x4e>
    3882:	66 23       	and	r22, r22
    3884:	f9 f0       	breq	.+62     	; 0x38c4 <__fixsfsi+0x8a>
    3886:	23 c0       	rjmp	.+70     	; 0x38ce <__fixsfsi+0x94>
    3888:	8e e1       	ldi	r24, 0x1E	; 30
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	82 1b       	sub	r24, r18
    388e:	93 0b       	sbc	r25, r19
    3890:	29 85       	ldd	r18, Y+9	; 0x09
    3892:	3a 85       	ldd	r19, Y+10	; 0x0a
    3894:	4b 85       	ldd	r20, Y+11	; 0x0b
    3896:	5c 85       	ldd	r21, Y+12	; 0x0c
    3898:	04 c0       	rjmp	.+8      	; 0x38a2 <__fixsfsi+0x68>
    389a:	56 95       	lsr	r21
    389c:	47 95       	ror	r20
    389e:	37 95       	ror	r19
    38a0:	27 95       	ror	r18
    38a2:	8a 95       	dec	r24
    38a4:	d2 f7       	brpl	.-12     	; 0x389a <__fixsfsi+0x60>
    38a6:	66 23       	and	r22, r22
    38a8:	b1 f0       	breq	.+44     	; 0x38d6 <__fixsfsi+0x9c>
    38aa:	50 95       	com	r21
    38ac:	40 95       	com	r20
    38ae:	30 95       	com	r19
    38b0:	21 95       	neg	r18
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
    38b4:	4f 4f       	sbci	r20, 0xFF	; 255
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
    38b8:	0e c0       	rjmp	.+28     	; 0x38d6 <__fixsfsi+0x9c>
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	09 c0       	rjmp	.+18     	; 0x38d6 <__fixsfsi+0x9c>
    38c4:	2f ef       	ldi	r18, 0xFF	; 255
    38c6:	3f ef       	ldi	r19, 0xFF	; 255
    38c8:	4f ef       	ldi	r20, 0xFF	; 255
    38ca:	5f e7       	ldi	r21, 0x7F	; 127
    38cc:	04 c0       	rjmp	.+8      	; 0x38d6 <__fixsfsi+0x9c>
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	50 e8       	ldi	r21, 0x80	; 128
    38d6:	b9 01       	movw	r22, r18
    38d8:	ca 01       	movw	r24, r20
    38da:	2c 96       	adiw	r28, 0x0c	; 12
    38dc:	e2 e0       	ldi	r30, 0x02	; 2
    38de:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__epilogue_restores__+0x20>

000038e2 <__floatunsisf>:
    38e2:	a8 e0       	ldi	r26, 0x08	; 8
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	e7 e7       	ldi	r30, 0x77	; 119
    38e8:	fc e1       	ldi	r31, 0x1C	; 28
    38ea:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x10>
    38ee:	7b 01       	movw	r14, r22
    38f0:	8c 01       	movw	r16, r24
    38f2:	61 15       	cp	r22, r1
    38f4:	71 05       	cpc	r23, r1
    38f6:	81 05       	cpc	r24, r1
    38f8:	91 05       	cpc	r25, r1
    38fa:	19 f4       	brne	.+6      	; 0x3902 <__floatunsisf+0x20>
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	89 83       	std	Y+1, r24	; 0x01
    3900:	60 c0       	rjmp	.+192    	; 0x39c2 <__floatunsisf+0xe0>
    3902:	83 e0       	ldi	r24, 0x03	; 3
    3904:	89 83       	std	Y+1, r24	; 0x01
    3906:	8e e1       	ldi	r24, 0x1E	; 30
    3908:	c8 2e       	mov	r12, r24
    390a:	d1 2c       	mov	r13, r1
    390c:	dc 82       	std	Y+4, r13	; 0x04
    390e:	cb 82       	std	Y+3, r12	; 0x03
    3910:	ed 82       	std	Y+5, r14	; 0x05
    3912:	fe 82       	std	Y+6, r15	; 0x06
    3914:	0f 83       	std	Y+7, r16	; 0x07
    3916:	18 87       	std	Y+8, r17	; 0x08
    3918:	c8 01       	movw	r24, r16
    391a:	b7 01       	movw	r22, r14
    391c:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <__clzsi2>
    3920:	fc 01       	movw	r30, r24
    3922:	31 97       	sbiw	r30, 0x01	; 1
    3924:	f7 ff       	sbrs	r31, 7
    3926:	3b c0       	rjmp	.+118    	; 0x399e <__floatunsisf+0xbc>
    3928:	22 27       	eor	r18, r18
    392a:	33 27       	eor	r19, r19
    392c:	2e 1b       	sub	r18, r30
    392e:	3f 0b       	sbc	r19, r31
    3930:	57 01       	movw	r10, r14
    3932:	68 01       	movw	r12, r16
    3934:	02 2e       	mov	r0, r18
    3936:	04 c0       	rjmp	.+8      	; 0x3940 <__floatunsisf+0x5e>
    3938:	d6 94       	lsr	r13
    393a:	c7 94       	ror	r12
    393c:	b7 94       	ror	r11
    393e:	a7 94       	ror	r10
    3940:	0a 94       	dec	r0
    3942:	d2 f7       	brpl	.-12     	; 0x3938 <__floatunsisf+0x56>
    3944:	40 e0       	ldi	r20, 0x00	; 0
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	60 e0       	ldi	r22, 0x00	; 0
    394a:	70 e0       	ldi	r23, 0x00	; 0
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	a0 e0       	ldi	r26, 0x00	; 0
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	04 c0       	rjmp	.+8      	; 0x395e <__floatunsisf+0x7c>
    3956:	88 0f       	add	r24, r24
    3958:	99 1f       	adc	r25, r25
    395a:	aa 1f       	adc	r26, r26
    395c:	bb 1f       	adc	r27, r27
    395e:	2a 95       	dec	r18
    3960:	d2 f7       	brpl	.-12     	; 0x3956 <__floatunsisf+0x74>
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	a1 09       	sbc	r26, r1
    3966:	b1 09       	sbc	r27, r1
    3968:	8e 21       	and	r24, r14
    396a:	9f 21       	and	r25, r15
    396c:	a0 23       	and	r26, r16
    396e:	b1 23       	and	r27, r17
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	a1 05       	cpc	r26, r1
    3974:	b1 05       	cpc	r27, r1
    3976:	21 f0       	breq	.+8      	; 0x3980 <__floatunsisf+0x9e>
    3978:	41 e0       	ldi	r20, 0x01	; 1
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	4a 29       	or	r20, r10
    3982:	5b 29       	or	r21, r11
    3984:	6c 29       	or	r22, r12
    3986:	7d 29       	or	r23, r13
    3988:	4d 83       	std	Y+5, r20	; 0x05
    398a:	5e 83       	std	Y+6, r21	; 0x06
    398c:	6f 83       	std	Y+7, r22	; 0x07
    398e:	78 87       	std	Y+8, r23	; 0x08
    3990:	8e e1       	ldi	r24, 0x1E	; 30
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	8e 1b       	sub	r24, r30
    3996:	9f 0b       	sbc	r25, r31
    3998:	9c 83       	std	Y+4, r25	; 0x04
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	12 c0       	rjmp	.+36     	; 0x39c2 <__floatunsisf+0xe0>
    399e:	30 97       	sbiw	r30, 0x00	; 0
    39a0:	81 f0       	breq	.+32     	; 0x39c2 <__floatunsisf+0xe0>
    39a2:	0e 2e       	mov	r0, r30
    39a4:	04 c0       	rjmp	.+8      	; 0x39ae <__floatunsisf+0xcc>
    39a6:	ee 0c       	add	r14, r14
    39a8:	ff 1c       	adc	r15, r15
    39aa:	00 1f       	adc	r16, r16
    39ac:	11 1f       	adc	r17, r17
    39ae:	0a 94       	dec	r0
    39b0:	d2 f7       	brpl	.-12     	; 0x39a6 <__floatunsisf+0xc4>
    39b2:	ed 82       	std	Y+5, r14	; 0x05
    39b4:	fe 82       	std	Y+6, r15	; 0x06
    39b6:	0f 83       	std	Y+7, r16	; 0x07
    39b8:	18 87       	std	Y+8, r17	; 0x08
    39ba:	ce 1a       	sub	r12, r30
    39bc:	df 0a       	sbc	r13, r31
    39be:	dc 82       	std	Y+4, r13	; 0x04
    39c0:	cb 82       	std	Y+3, r12	; 0x03
    39c2:	1a 82       	std	Y+2, r1	; 0x02
    39c4:	ce 01       	movw	r24, r28
    39c6:	01 96       	adiw	r24, 0x01	; 1
    39c8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__pack_f>
    39cc:	28 96       	adiw	r28, 0x08	; 8
    39ce:	ea e0       	ldi	r30, 0x0A	; 10
    39d0:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x10>

000039d4 <__clzsi2>:
    39d4:	ef 92       	push	r14
    39d6:	ff 92       	push	r15
    39d8:	0f 93       	push	r16
    39da:	1f 93       	push	r17
    39dc:	7b 01       	movw	r14, r22
    39de:	8c 01       	movw	r16, r24
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	e8 16       	cp	r14, r24
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	f8 06       	cpc	r15, r24
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	08 07       	cpc	r16, r24
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	18 07       	cpc	r17, r24
    39f0:	88 f4       	brcc	.+34     	; 0x3a14 <__clzsi2+0x40>
    39f2:	8f ef       	ldi	r24, 0xFF	; 255
    39f4:	e8 16       	cp	r14, r24
    39f6:	f1 04       	cpc	r15, r1
    39f8:	01 05       	cpc	r16, r1
    39fa:	11 05       	cpc	r17, r1
    39fc:	31 f0       	breq	.+12     	; 0x3a0a <__clzsi2+0x36>
    39fe:	28 f0       	brcs	.+10     	; 0x3a0a <__clzsi2+0x36>
    3a00:	88 e0       	ldi	r24, 0x08	; 8
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	a0 e0       	ldi	r26, 0x00	; 0
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	17 c0       	rjmp	.+46     	; 0x3a38 <__clzsi2+0x64>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	12 c0       	rjmp	.+36     	; 0x3a38 <__clzsi2+0x64>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	e8 16       	cp	r14, r24
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	f8 06       	cpc	r15, r24
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	08 07       	cpc	r16, r24
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	18 07       	cpc	r17, r24
    3a24:	28 f0       	brcs	.+10     	; 0x3a30 <__clzsi2+0x5c>
    3a26:	88 e1       	ldi	r24, 0x18	; 24
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	04 c0       	rjmp	.+8      	; 0x3a38 <__clzsi2+0x64>
    3a30:	80 e1       	ldi	r24, 0x10	; 16
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	a0 e0       	ldi	r26, 0x00	; 0
    3a36:	b0 e0       	ldi	r27, 0x00	; 0
    3a38:	20 e2       	ldi	r18, 0x20	; 32
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	50 e0       	ldi	r21, 0x00	; 0
    3a40:	28 1b       	sub	r18, r24
    3a42:	39 0b       	sbc	r19, r25
    3a44:	4a 0b       	sbc	r20, r26
    3a46:	5b 0b       	sbc	r21, r27
    3a48:	04 c0       	rjmp	.+8      	; 0x3a52 <__clzsi2+0x7e>
    3a4a:	16 95       	lsr	r17
    3a4c:	07 95       	ror	r16
    3a4e:	f7 94       	ror	r15
    3a50:	e7 94       	ror	r14
    3a52:	8a 95       	dec	r24
    3a54:	d2 f7       	brpl	.-12     	; 0x3a4a <__clzsi2+0x76>
    3a56:	f7 01       	movw	r30, r14
    3a58:	e8 5f       	subi	r30, 0xF8	; 248
    3a5a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a5c:	80 81       	ld	r24, Z
    3a5e:	28 1b       	sub	r18, r24
    3a60:	31 09       	sbc	r19, r1
    3a62:	41 09       	sbc	r20, r1
    3a64:	51 09       	sbc	r21, r1
    3a66:	c9 01       	movw	r24, r18
    3a68:	1f 91       	pop	r17
    3a6a:	0f 91       	pop	r16
    3a6c:	ff 90       	pop	r15
    3a6e:	ef 90       	pop	r14
    3a70:	08 95       	ret

00003a72 <__pack_f>:
    3a72:	df 92       	push	r13
    3a74:	ef 92       	push	r14
    3a76:	ff 92       	push	r15
    3a78:	0f 93       	push	r16
    3a7a:	1f 93       	push	r17
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	e4 80       	ldd	r14, Z+4	; 0x04
    3a80:	f5 80       	ldd	r15, Z+5	; 0x05
    3a82:	06 81       	ldd	r16, Z+6	; 0x06
    3a84:	17 81       	ldd	r17, Z+7	; 0x07
    3a86:	d1 80       	ldd	r13, Z+1	; 0x01
    3a88:	80 81       	ld	r24, Z
    3a8a:	82 30       	cpi	r24, 0x02	; 2
    3a8c:	48 f4       	brcc	.+18     	; 0x3aa0 <__pack_f+0x2e>
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	a0 e1       	ldi	r26, 0x10	; 16
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	e8 2a       	or	r14, r24
    3a98:	f9 2a       	or	r15, r25
    3a9a:	0a 2b       	or	r16, r26
    3a9c:	1b 2b       	or	r17, r27
    3a9e:	a5 c0       	rjmp	.+330    	; 0x3bea <__pack_f+0x178>
    3aa0:	84 30       	cpi	r24, 0x04	; 4
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <__pack_f+0x34>
    3aa4:	9f c0       	rjmp	.+318    	; 0x3be4 <__pack_f+0x172>
    3aa6:	82 30       	cpi	r24, 0x02	; 2
    3aa8:	21 f4       	brne	.+8      	; 0x3ab2 <__pack_f+0x40>
    3aaa:	ee 24       	eor	r14, r14
    3aac:	ff 24       	eor	r15, r15
    3aae:	87 01       	movw	r16, r14
    3ab0:	05 c0       	rjmp	.+10     	; 0x3abc <__pack_f+0x4a>
    3ab2:	e1 14       	cp	r14, r1
    3ab4:	f1 04       	cpc	r15, r1
    3ab6:	01 05       	cpc	r16, r1
    3ab8:	11 05       	cpc	r17, r1
    3aba:	19 f4       	brne	.+6      	; 0x3ac2 <__pack_f+0x50>
    3abc:	e0 e0       	ldi	r30, 0x00	; 0
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	96 c0       	rjmp	.+300    	; 0x3bee <__pack_f+0x17c>
    3ac2:	62 81       	ldd	r22, Z+2	; 0x02
    3ac4:	73 81       	ldd	r23, Z+3	; 0x03
    3ac6:	9f ef       	ldi	r25, 0xFF	; 255
    3ac8:	62 38       	cpi	r22, 0x82	; 130
    3aca:	79 07       	cpc	r23, r25
    3acc:	0c f0       	brlt	.+2      	; 0x3ad0 <__pack_f+0x5e>
    3ace:	5b c0       	rjmp	.+182    	; 0x3b86 <__pack_f+0x114>
    3ad0:	22 e8       	ldi	r18, 0x82	; 130
    3ad2:	3f ef       	ldi	r19, 0xFF	; 255
    3ad4:	26 1b       	sub	r18, r22
    3ad6:	37 0b       	sbc	r19, r23
    3ad8:	2a 31       	cpi	r18, 0x1A	; 26
    3ada:	31 05       	cpc	r19, r1
    3adc:	2c f0       	brlt	.+10     	; 0x3ae8 <__pack_f+0x76>
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	2a c0       	rjmp	.+84     	; 0x3b3c <__pack_f+0xca>
    3ae8:	b8 01       	movw	r22, r16
    3aea:	a7 01       	movw	r20, r14
    3aec:	02 2e       	mov	r0, r18
    3aee:	04 c0       	rjmp	.+8      	; 0x3af8 <__pack_f+0x86>
    3af0:	76 95       	lsr	r23
    3af2:	67 95       	ror	r22
    3af4:	57 95       	ror	r21
    3af6:	47 95       	ror	r20
    3af8:	0a 94       	dec	r0
    3afa:	d2 f7       	brpl	.-12     	; 0x3af0 <__pack_f+0x7e>
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a0 e0       	ldi	r26, 0x00	; 0
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	04 c0       	rjmp	.+8      	; 0x3b0e <__pack_f+0x9c>
    3b06:	88 0f       	add	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	aa 1f       	adc	r26, r26
    3b0c:	bb 1f       	adc	r27, r27
    3b0e:	2a 95       	dec	r18
    3b10:	d2 f7       	brpl	.-12     	; 0x3b06 <__pack_f+0x94>
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	a1 09       	sbc	r26, r1
    3b16:	b1 09       	sbc	r27, r1
    3b18:	8e 21       	and	r24, r14
    3b1a:	9f 21       	and	r25, r15
    3b1c:	a0 23       	and	r26, r16
    3b1e:	b1 23       	and	r27, r17
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	a1 05       	cpc	r26, r1
    3b24:	b1 05       	cpc	r27, r1
    3b26:	21 f0       	breq	.+8      	; 0x3b30 <__pack_f+0xbe>
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	a0 e0       	ldi	r26, 0x00	; 0
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	9a 01       	movw	r18, r20
    3b32:	ab 01       	movw	r20, r22
    3b34:	28 2b       	or	r18, r24
    3b36:	39 2b       	or	r19, r25
    3b38:	4a 2b       	or	r20, r26
    3b3a:	5b 2b       	or	r21, r27
    3b3c:	da 01       	movw	r26, r20
    3b3e:	c9 01       	movw	r24, r18
    3b40:	8f 77       	andi	r24, 0x7F	; 127
    3b42:	90 70       	andi	r25, 0x00	; 0
    3b44:	a0 70       	andi	r26, 0x00	; 0
    3b46:	b0 70       	andi	r27, 0x00	; 0
    3b48:	80 34       	cpi	r24, 0x40	; 64
    3b4a:	91 05       	cpc	r25, r1
    3b4c:	a1 05       	cpc	r26, r1
    3b4e:	b1 05       	cpc	r27, r1
    3b50:	39 f4       	brne	.+14     	; 0x3b60 <__pack_f+0xee>
    3b52:	27 ff       	sbrs	r18, 7
    3b54:	09 c0       	rjmp	.+18     	; 0x3b68 <__pack_f+0xf6>
    3b56:	20 5c       	subi	r18, 0xC0	; 192
    3b58:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5a:	4f 4f       	sbci	r20, 0xFF	; 255
    3b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <__pack_f+0xf6>
    3b60:	21 5c       	subi	r18, 0xC1	; 193
    3b62:	3f 4f       	sbci	r19, 0xFF	; 255
    3b64:	4f 4f       	sbci	r20, 0xFF	; 255
    3b66:	5f 4f       	sbci	r21, 0xFF	; 255
    3b68:	e0 e0       	ldi	r30, 0x00	; 0
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	20 30       	cpi	r18, 0x00	; 0
    3b6e:	a0 e0       	ldi	r26, 0x00	; 0
    3b70:	3a 07       	cpc	r19, r26
    3b72:	a0 e0       	ldi	r26, 0x00	; 0
    3b74:	4a 07       	cpc	r20, r26
    3b76:	a0 e4       	ldi	r26, 0x40	; 64
    3b78:	5a 07       	cpc	r21, r26
    3b7a:	10 f0       	brcs	.+4      	; 0x3b80 <__pack_f+0x10e>
    3b7c:	e1 e0       	ldi	r30, 0x01	; 1
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	79 01       	movw	r14, r18
    3b82:	8a 01       	movw	r16, r20
    3b84:	27 c0       	rjmp	.+78     	; 0x3bd4 <__pack_f+0x162>
    3b86:	60 38       	cpi	r22, 0x80	; 128
    3b88:	71 05       	cpc	r23, r1
    3b8a:	64 f5       	brge	.+88     	; 0x3be4 <__pack_f+0x172>
    3b8c:	fb 01       	movw	r30, r22
    3b8e:	e1 58       	subi	r30, 0x81	; 129
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	d8 01       	movw	r26, r16
    3b94:	c7 01       	movw	r24, r14
    3b96:	8f 77       	andi	r24, 0x7F	; 127
    3b98:	90 70       	andi	r25, 0x00	; 0
    3b9a:	a0 70       	andi	r26, 0x00	; 0
    3b9c:	b0 70       	andi	r27, 0x00	; 0
    3b9e:	80 34       	cpi	r24, 0x40	; 64
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	a1 05       	cpc	r26, r1
    3ba4:	b1 05       	cpc	r27, r1
    3ba6:	39 f4       	brne	.+14     	; 0x3bb6 <__pack_f+0x144>
    3ba8:	e7 fe       	sbrs	r14, 7
    3baa:	0d c0       	rjmp	.+26     	; 0x3bc6 <__pack_f+0x154>
    3bac:	80 e4       	ldi	r24, 0x40	; 64
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	04 c0       	rjmp	.+8      	; 0x3bbe <__pack_f+0x14c>
    3bb6:	8f e3       	ldi	r24, 0x3F	; 63
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	a0 e0       	ldi	r26, 0x00	; 0
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	e8 0e       	add	r14, r24
    3bc0:	f9 1e       	adc	r15, r25
    3bc2:	0a 1f       	adc	r16, r26
    3bc4:	1b 1f       	adc	r17, r27
    3bc6:	17 ff       	sbrs	r17, 7
    3bc8:	05 c0       	rjmp	.+10     	; 0x3bd4 <__pack_f+0x162>
    3bca:	16 95       	lsr	r17
    3bcc:	07 95       	ror	r16
    3bce:	f7 94       	ror	r15
    3bd0:	e7 94       	ror	r14
    3bd2:	31 96       	adiw	r30, 0x01	; 1
    3bd4:	87 e0       	ldi	r24, 0x07	; 7
    3bd6:	16 95       	lsr	r17
    3bd8:	07 95       	ror	r16
    3bda:	f7 94       	ror	r15
    3bdc:	e7 94       	ror	r14
    3bde:	8a 95       	dec	r24
    3be0:	d1 f7       	brne	.-12     	; 0x3bd6 <__pack_f+0x164>
    3be2:	05 c0       	rjmp	.+10     	; 0x3bee <__pack_f+0x17c>
    3be4:	ee 24       	eor	r14, r14
    3be6:	ff 24       	eor	r15, r15
    3be8:	87 01       	movw	r16, r14
    3bea:	ef ef       	ldi	r30, 0xFF	; 255
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	6e 2f       	mov	r22, r30
    3bf0:	67 95       	ror	r22
    3bf2:	66 27       	eor	r22, r22
    3bf4:	67 95       	ror	r22
    3bf6:	90 2f       	mov	r25, r16
    3bf8:	9f 77       	andi	r25, 0x7F	; 127
    3bfa:	d7 94       	ror	r13
    3bfc:	dd 24       	eor	r13, r13
    3bfe:	d7 94       	ror	r13
    3c00:	8e 2f       	mov	r24, r30
    3c02:	86 95       	lsr	r24
    3c04:	49 2f       	mov	r20, r25
    3c06:	46 2b       	or	r20, r22
    3c08:	58 2f       	mov	r21, r24
    3c0a:	5d 29       	or	r21, r13
    3c0c:	b7 01       	movw	r22, r14
    3c0e:	ca 01       	movw	r24, r20
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	ff 90       	pop	r15
    3c16:	ef 90       	pop	r14
    3c18:	df 90       	pop	r13
    3c1a:	08 95       	ret

00003c1c <__unpack_f>:
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	db 01       	movw	r26, r22
    3c20:	40 81       	ld	r20, Z
    3c22:	51 81       	ldd	r21, Z+1	; 0x01
    3c24:	22 81       	ldd	r18, Z+2	; 0x02
    3c26:	62 2f       	mov	r22, r18
    3c28:	6f 77       	andi	r22, 0x7F	; 127
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	22 1f       	adc	r18, r18
    3c2e:	22 27       	eor	r18, r18
    3c30:	22 1f       	adc	r18, r18
    3c32:	93 81       	ldd	r25, Z+3	; 0x03
    3c34:	89 2f       	mov	r24, r25
    3c36:	88 0f       	add	r24, r24
    3c38:	82 2b       	or	r24, r18
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	99 1f       	adc	r25, r25
    3c40:	99 27       	eor	r25, r25
    3c42:	99 1f       	adc	r25, r25
    3c44:	11 96       	adiw	r26, 0x01	; 1
    3c46:	9c 93       	st	X, r25
    3c48:	11 97       	sbiw	r26, 0x01	; 1
    3c4a:	21 15       	cp	r18, r1
    3c4c:	31 05       	cpc	r19, r1
    3c4e:	a9 f5       	brne	.+106    	; 0x3cba <__unpack_f+0x9e>
    3c50:	41 15       	cp	r20, r1
    3c52:	51 05       	cpc	r21, r1
    3c54:	61 05       	cpc	r22, r1
    3c56:	71 05       	cpc	r23, r1
    3c58:	11 f4       	brne	.+4      	; 0x3c5e <__unpack_f+0x42>
    3c5a:	82 e0       	ldi	r24, 0x02	; 2
    3c5c:	37 c0       	rjmp	.+110    	; 0x3ccc <__unpack_f+0xb0>
    3c5e:	82 e8       	ldi	r24, 0x82	; 130
    3c60:	9f ef       	ldi	r25, 0xFF	; 255
    3c62:	13 96       	adiw	r26, 0x03	; 3
    3c64:	9c 93       	st	X, r25
    3c66:	8e 93       	st	-X, r24
    3c68:	12 97       	sbiw	r26, 0x02	; 2
    3c6a:	9a 01       	movw	r18, r20
    3c6c:	ab 01       	movw	r20, r22
    3c6e:	67 e0       	ldi	r22, 0x07	; 7
    3c70:	22 0f       	add	r18, r18
    3c72:	33 1f       	adc	r19, r19
    3c74:	44 1f       	adc	r20, r20
    3c76:	55 1f       	adc	r21, r21
    3c78:	6a 95       	dec	r22
    3c7a:	d1 f7       	brne	.-12     	; 0x3c70 <__unpack_f+0x54>
    3c7c:	83 e0       	ldi	r24, 0x03	; 3
    3c7e:	8c 93       	st	X, r24
    3c80:	0d c0       	rjmp	.+26     	; 0x3c9c <__unpack_f+0x80>
    3c82:	22 0f       	add	r18, r18
    3c84:	33 1f       	adc	r19, r19
    3c86:	44 1f       	adc	r20, r20
    3c88:	55 1f       	adc	r21, r21
    3c8a:	12 96       	adiw	r26, 0x02	; 2
    3c8c:	8d 91       	ld	r24, X+
    3c8e:	9c 91       	ld	r25, X
    3c90:	13 97       	sbiw	r26, 0x03	; 3
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	13 96       	adiw	r26, 0x03	; 3
    3c96:	9c 93       	st	X, r25
    3c98:	8e 93       	st	-X, r24
    3c9a:	12 97       	sbiw	r26, 0x02	; 2
    3c9c:	20 30       	cpi	r18, 0x00	; 0
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	38 07       	cpc	r19, r24
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	48 07       	cpc	r20, r24
    3ca6:	80 e4       	ldi	r24, 0x40	; 64
    3ca8:	58 07       	cpc	r21, r24
    3caa:	58 f3       	brcs	.-42     	; 0x3c82 <__unpack_f+0x66>
    3cac:	14 96       	adiw	r26, 0x04	; 4
    3cae:	2d 93       	st	X+, r18
    3cb0:	3d 93       	st	X+, r19
    3cb2:	4d 93       	st	X+, r20
    3cb4:	5c 93       	st	X, r21
    3cb6:	17 97       	sbiw	r26, 0x07	; 7
    3cb8:	08 95       	ret
    3cba:	2f 3f       	cpi	r18, 0xFF	; 255
    3cbc:	31 05       	cpc	r19, r1
    3cbe:	79 f4       	brne	.+30     	; 0x3cde <__unpack_f+0xc2>
    3cc0:	41 15       	cp	r20, r1
    3cc2:	51 05       	cpc	r21, r1
    3cc4:	61 05       	cpc	r22, r1
    3cc6:	71 05       	cpc	r23, r1
    3cc8:	19 f4       	brne	.+6      	; 0x3cd0 <__unpack_f+0xb4>
    3cca:	84 e0       	ldi	r24, 0x04	; 4
    3ccc:	8c 93       	st	X, r24
    3cce:	08 95       	ret
    3cd0:	64 ff       	sbrs	r22, 4
    3cd2:	03 c0       	rjmp	.+6      	; 0x3cda <__unpack_f+0xbe>
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	8c 93       	st	X, r24
    3cd8:	12 c0       	rjmp	.+36     	; 0x3cfe <__unpack_f+0xe2>
    3cda:	1c 92       	st	X, r1
    3cdc:	10 c0       	rjmp	.+32     	; 0x3cfe <__unpack_f+0xe2>
    3cde:	2f 57       	subi	r18, 0x7F	; 127
    3ce0:	30 40       	sbci	r19, 0x00	; 0
    3ce2:	13 96       	adiw	r26, 0x03	; 3
    3ce4:	3c 93       	st	X, r19
    3ce6:	2e 93       	st	-X, r18
    3ce8:	12 97       	sbiw	r26, 0x02	; 2
    3cea:	83 e0       	ldi	r24, 0x03	; 3
    3cec:	8c 93       	st	X, r24
    3cee:	87 e0       	ldi	r24, 0x07	; 7
    3cf0:	44 0f       	add	r20, r20
    3cf2:	55 1f       	adc	r21, r21
    3cf4:	66 1f       	adc	r22, r22
    3cf6:	77 1f       	adc	r23, r23
    3cf8:	8a 95       	dec	r24
    3cfa:	d1 f7       	brne	.-12     	; 0x3cf0 <__unpack_f+0xd4>
    3cfc:	70 64       	ori	r23, 0x40	; 64
    3cfe:	14 96       	adiw	r26, 0x04	; 4
    3d00:	4d 93       	st	X+, r20
    3d02:	5d 93       	st	X+, r21
    3d04:	6d 93       	st	X+, r22
    3d06:	7c 93       	st	X, r23
    3d08:	17 97       	sbiw	r26, 0x07	; 7
    3d0a:	08 95       	ret

00003d0c <__fpcmp_parts_f>:
    3d0c:	1f 93       	push	r17
    3d0e:	dc 01       	movw	r26, r24
    3d10:	fb 01       	movw	r30, r22
    3d12:	9c 91       	ld	r25, X
    3d14:	92 30       	cpi	r25, 0x02	; 2
    3d16:	08 f4       	brcc	.+2      	; 0x3d1a <__fpcmp_parts_f+0xe>
    3d18:	47 c0       	rjmp	.+142    	; 0x3da8 <__fpcmp_parts_f+0x9c>
    3d1a:	80 81       	ld	r24, Z
    3d1c:	82 30       	cpi	r24, 0x02	; 2
    3d1e:	08 f4       	brcc	.+2      	; 0x3d22 <__fpcmp_parts_f+0x16>
    3d20:	43 c0       	rjmp	.+134    	; 0x3da8 <__fpcmp_parts_f+0x9c>
    3d22:	94 30       	cpi	r25, 0x04	; 4
    3d24:	51 f4       	brne	.+20     	; 0x3d3a <__fpcmp_parts_f+0x2e>
    3d26:	11 96       	adiw	r26, 0x01	; 1
    3d28:	1c 91       	ld	r17, X
    3d2a:	84 30       	cpi	r24, 0x04	; 4
    3d2c:	99 f5       	brne	.+102    	; 0x3d94 <__fpcmp_parts_f+0x88>
    3d2e:	81 81       	ldd	r24, Z+1	; 0x01
    3d30:	68 2f       	mov	r22, r24
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	61 1b       	sub	r22, r17
    3d36:	71 09       	sbc	r23, r1
    3d38:	3f c0       	rjmp	.+126    	; 0x3db8 <__fpcmp_parts_f+0xac>
    3d3a:	84 30       	cpi	r24, 0x04	; 4
    3d3c:	21 f0       	breq	.+8      	; 0x3d46 <__fpcmp_parts_f+0x3a>
    3d3e:	92 30       	cpi	r25, 0x02	; 2
    3d40:	31 f4       	brne	.+12     	; 0x3d4e <__fpcmp_parts_f+0x42>
    3d42:	82 30       	cpi	r24, 0x02	; 2
    3d44:	b9 f1       	breq	.+110    	; 0x3db4 <__fpcmp_parts_f+0xa8>
    3d46:	81 81       	ldd	r24, Z+1	; 0x01
    3d48:	88 23       	and	r24, r24
    3d4a:	89 f1       	breq	.+98     	; 0x3dae <__fpcmp_parts_f+0xa2>
    3d4c:	2d c0       	rjmp	.+90     	; 0x3da8 <__fpcmp_parts_f+0x9c>
    3d4e:	11 96       	adiw	r26, 0x01	; 1
    3d50:	1c 91       	ld	r17, X
    3d52:	11 97       	sbiw	r26, 0x01	; 1
    3d54:	82 30       	cpi	r24, 0x02	; 2
    3d56:	f1 f0       	breq	.+60     	; 0x3d94 <__fpcmp_parts_f+0x88>
    3d58:	81 81       	ldd	r24, Z+1	; 0x01
    3d5a:	18 17       	cp	r17, r24
    3d5c:	d9 f4       	brne	.+54     	; 0x3d94 <__fpcmp_parts_f+0x88>
    3d5e:	12 96       	adiw	r26, 0x02	; 2
    3d60:	2d 91       	ld	r18, X+
    3d62:	3c 91       	ld	r19, X
    3d64:	13 97       	sbiw	r26, 0x03	; 3
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	82 17       	cp	r24, r18
    3d6c:	93 07       	cpc	r25, r19
    3d6e:	94 f0       	brlt	.+36     	; 0x3d94 <__fpcmp_parts_f+0x88>
    3d70:	28 17       	cp	r18, r24
    3d72:	39 07       	cpc	r19, r25
    3d74:	bc f0       	brlt	.+46     	; 0x3da4 <__fpcmp_parts_f+0x98>
    3d76:	14 96       	adiw	r26, 0x04	; 4
    3d78:	8d 91       	ld	r24, X+
    3d7a:	9d 91       	ld	r25, X+
    3d7c:	0d 90       	ld	r0, X+
    3d7e:	bc 91       	ld	r27, X
    3d80:	a0 2d       	mov	r26, r0
    3d82:	24 81       	ldd	r18, Z+4	; 0x04
    3d84:	35 81       	ldd	r19, Z+5	; 0x05
    3d86:	46 81       	ldd	r20, Z+6	; 0x06
    3d88:	57 81       	ldd	r21, Z+7	; 0x07
    3d8a:	28 17       	cp	r18, r24
    3d8c:	39 07       	cpc	r19, r25
    3d8e:	4a 07       	cpc	r20, r26
    3d90:	5b 07       	cpc	r21, r27
    3d92:	18 f4       	brcc	.+6      	; 0x3d9a <__fpcmp_parts_f+0x8e>
    3d94:	11 23       	and	r17, r17
    3d96:	41 f0       	breq	.+16     	; 0x3da8 <__fpcmp_parts_f+0x9c>
    3d98:	0a c0       	rjmp	.+20     	; 0x3dae <__fpcmp_parts_f+0xa2>
    3d9a:	82 17       	cp	r24, r18
    3d9c:	93 07       	cpc	r25, r19
    3d9e:	a4 07       	cpc	r26, r20
    3da0:	b5 07       	cpc	r27, r21
    3da2:	40 f4       	brcc	.+16     	; 0x3db4 <__fpcmp_parts_f+0xa8>
    3da4:	11 23       	and	r17, r17
    3da6:	19 f0       	breq	.+6      	; 0x3dae <__fpcmp_parts_f+0xa2>
    3da8:	61 e0       	ldi	r22, 0x01	; 1
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	05 c0       	rjmp	.+10     	; 0x3db8 <__fpcmp_parts_f+0xac>
    3dae:	6f ef       	ldi	r22, 0xFF	; 255
    3db0:	7f ef       	ldi	r23, 0xFF	; 255
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <__fpcmp_parts_f+0xac>
    3db4:	60 e0       	ldi	r22, 0x00	; 0
    3db6:	70 e0       	ldi	r23, 0x00	; 0
    3db8:	cb 01       	movw	r24, r22
    3dba:	1f 91       	pop	r17
    3dbc:	08 95       	ret

00003dbe <__mulsi3>:
    3dbe:	62 9f       	mul	r22, r18
    3dc0:	d0 01       	movw	r26, r0
    3dc2:	73 9f       	mul	r23, r19
    3dc4:	f0 01       	movw	r30, r0
    3dc6:	82 9f       	mul	r24, r18
    3dc8:	e0 0d       	add	r30, r0
    3dca:	f1 1d       	adc	r31, r1
    3dcc:	64 9f       	mul	r22, r20
    3dce:	e0 0d       	add	r30, r0
    3dd0:	f1 1d       	adc	r31, r1
    3dd2:	92 9f       	mul	r25, r18
    3dd4:	f0 0d       	add	r31, r0
    3dd6:	83 9f       	mul	r24, r19
    3dd8:	f0 0d       	add	r31, r0
    3dda:	74 9f       	mul	r23, r20
    3ddc:	f0 0d       	add	r31, r0
    3dde:	65 9f       	mul	r22, r21
    3de0:	f0 0d       	add	r31, r0
    3de2:	99 27       	eor	r25, r25
    3de4:	72 9f       	mul	r23, r18
    3de6:	b0 0d       	add	r27, r0
    3de8:	e1 1d       	adc	r30, r1
    3dea:	f9 1f       	adc	r31, r25
    3dec:	63 9f       	mul	r22, r19
    3dee:	b0 0d       	add	r27, r0
    3df0:	e1 1d       	adc	r30, r1
    3df2:	f9 1f       	adc	r31, r25
    3df4:	bd 01       	movw	r22, r26
    3df6:	cf 01       	movw	r24, r30
    3df8:	11 24       	eor	r1, r1
    3dfa:	08 95       	ret

00003dfc <__prologue_saves__>:
    3dfc:	2f 92       	push	r2
    3dfe:	3f 92       	push	r3
    3e00:	4f 92       	push	r4
    3e02:	5f 92       	push	r5
    3e04:	6f 92       	push	r6
    3e06:	7f 92       	push	r7
    3e08:	8f 92       	push	r8
    3e0a:	9f 92       	push	r9
    3e0c:	af 92       	push	r10
    3e0e:	bf 92       	push	r11
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ef 92       	push	r14
    3e16:	ff 92       	push	r15
    3e18:	0f 93       	push	r16
    3e1a:	1f 93       	push	r17
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	ca 1b       	sub	r28, r26
    3e26:	db 0b       	sbc	r29, r27
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	f8 94       	cli
    3e2c:	de bf       	out	0x3e, r29	; 62
    3e2e:	0f be       	out	0x3f, r0	; 63
    3e30:	cd bf       	out	0x3d, r28	; 61
    3e32:	19 94       	eijmp

00003e34 <__epilogue_restores__>:
    3e34:	2a 88       	ldd	r2, Y+18	; 0x12
    3e36:	39 88       	ldd	r3, Y+17	; 0x11
    3e38:	48 88       	ldd	r4, Y+16	; 0x10
    3e3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e40:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e42:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e44:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e46:	b9 84       	ldd	r11, Y+9	; 0x09
    3e48:	c8 84       	ldd	r12, Y+8	; 0x08
    3e4a:	df 80       	ldd	r13, Y+7	; 0x07
    3e4c:	ee 80       	ldd	r14, Y+6	; 0x06
    3e4e:	fd 80       	ldd	r15, Y+5	; 0x05
    3e50:	0c 81       	ldd	r16, Y+4	; 0x04
    3e52:	1b 81       	ldd	r17, Y+3	; 0x03
    3e54:	aa 81       	ldd	r26, Y+2	; 0x02
    3e56:	b9 81       	ldd	r27, Y+1	; 0x01
    3e58:	ce 0f       	add	r28, r30
    3e5a:	d1 1d       	adc	r29, r1
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	ed 01       	movw	r28, r26
    3e68:	08 95       	ret

00003e6a <_exit>:
    3e6a:	f8 94       	cli

00003e6c <__stop_program>:
    3e6c:	ff cf       	rjmp	.-2      	; 0x3e6c <__stop_program>
