
bin\Debug\B2AGVMainCodeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  000049c6  00004a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049c6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800308  00800308  00004b82  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00004b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00004b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000360  00000000  00000000  00004d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000338b  00000000  00000000  000050e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001775  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e78  00000000  00000000  00009be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  0000ca60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e5  00000000  00000000  0000cd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000d235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000dba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__vector_50>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ec       	ldi	r30, 0xC6	; 198
      fc:	f9 e4       	ldi	r31, 0x49	; 73
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 31       	cpi	r26, 0x12	; 18
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b5 02 	call	0x56a	; 0x56a <main>
     122:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED>:

#define PINIRsensor1 PINJ
#define PINIRsensor2 PINJ

void LED(int Richting)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <LED+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
    switch (Richting)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	9c 83       	std	Y+4, r25	; 0x04
     140:	8b 83       	std	Y+3, r24	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	83 30       	cpi	r24, 0x03	; 3
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <LED+0x24>
     14c:	96 c0       	rjmp	.+300    	; 0x27a <LED+0x150>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	91 05       	cpc	r25, r1
     156:	64 f4       	brge	.+24     	; 0x170 <LED+0x46>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	d1 f0       	breq	.+52     	; 0x196 <LED+0x6c>
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	91 05       	cpc	r25, r1
     16a:	09 f4       	brne	.+2      	; 0x16e <LED+0x44>
     16c:	4d c0       	rjmp	.+154    	; 0x208 <LED+0xde>
     16e:	69 c1       	rjmp	.+722    	; 0x442 <LED+0x318>
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	85 30       	cpi	r24, 0x05	; 5
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <LED+0x52>
     17a:	f1 c0       	rjmp	.+482    	; 0x35e <LED+0x234>
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	85 30       	cpi	r24, 0x05	; 5
     182:	91 05       	cpc	r25, r1
     184:	0c f4       	brge	.+2      	; 0x188 <LED+0x5e>
     186:	b2 c0       	rjmp	.+356    	; 0x2ec <LED+0x1c2>
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	9c 81       	ldd	r25, Y+4	; 0x04
     18c:	86 30       	cpi	r24, 0x06	; 6
     18e:	91 05       	cpc	r25, r1
     190:	09 f4       	brne	.+2      	; 0x194 <LED+0x6a>
     192:	1e c1       	rjmp	.+572    	; 0x3d0 <LED+0x2a6>
     194:	56 c1       	rjmp	.+684    	; 0x442 <LED+0x318>
    {
    case 1 :		//Vooruit
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     196:	a2 e2       	ldi	r26, 0x22	; 34
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e2 e2       	ldi	r30, 0x22	; 34
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     1a4:	a2 e2       	ldi	r26, 0x22	; 34
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e2 e2       	ldi	r30, 0x22	; 34
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     1b2:	a2 e2       	ldi	r26, 0x22	; 34
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e2 e2       	ldi	r30, 0x22	; 34
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8b 7f       	andi	r24, 0xFB	; 251
     1be:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     1c0:	a2 e2       	ldi	r26, 0x22	; 34
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e2 e2       	ldi	r30, 0x22	; 34
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     1ce:	a2 e2       	ldi	r26, 0x22	; 34
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e2 e2       	ldi	r30, 0x22	; 34
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     1dc:	a2 e2       	ldi	r26, 0x22	; 34
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e2 e2       	ldi	r30, 0x22	; 34
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7d       	andi	r24, 0xDF	; 223
     1e8:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     1ea:	a2 e2       	ldi	r26, 0x22	; 34
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e2 e2       	ldi	r30, 0x22	; 34
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 7b       	andi	r24, 0xBF	; 191
     1f6:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     1f8:	a2 e2       	ldi	r26, 0x22	; 34
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e2 e2       	ldi	r30, 0x22	; 34
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	8c 93       	st	X, r24
     206:	55 c1       	rjmp	.+682    	; 0x4b2 <LED+0x388>
        break;
    case 2 :		//Achteruit
        PORTLEDRood |= (1 << PLEDRoodVoor);
     208:	a2 e2       	ldi	r26, 0x22	; 34
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e2 e2       	ldi	r30, 0x22	; 34
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     216:	a2 e2       	ldi	r26, 0x22	; 34
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e2 e2       	ldi	r30, 0x22	; 34
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8d 7f       	andi	r24, 0xFD	; 253
     222:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     224:	a2 e2       	ldi	r26, 0x22	; 34
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e2 e2       	ldi	r30, 0x22	; 34
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     240:	a2 e2       	ldi	r26, 0x22	; 34
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7e       	andi	r24, 0xEF	; 239
     24c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     24e:	a2 e2       	ldi	r26, 0x22	; 34
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e2 e2       	ldi	r30, 0x22	; 34
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 62       	ori	r24, 0x20	; 32
     25a:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     25c:	a2 e2       	ldi	r26, 0x22	; 34
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e2 e2       	ldi	r30, 0x22	; 34
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 7b       	andi	r24, 0xBF	; 191
     268:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     26a:	a2 e2       	ldi	r26, 0x22	; 34
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e2       	ldi	r30, 0x22	; 34
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	8c 93       	st	X, r24
     278:	1c c1       	rjmp	.+568    	; 0x4b2 <LED+0x388>
        break;
    case 3 :		//Rechtsaf
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     27a:	a2 e2       	ldi	r26, 0x22	; 34
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e2 e2       	ldi	r30, 0x22	; 34
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8e 7f       	andi	r24, 0xFE	; 254
     286:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     288:	a2 e2       	ldi	r26, 0x22	; 34
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e2 e2       	ldi	r30, 0x22	; 34
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	8d 7f       	andi	r24, 0xFD	; 253
     294:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     296:	a2 e2       	ldi	r26, 0x22	; 34
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 e2       	ldi	r30, 0x22	; 34
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8b 7f       	andi	r24, 0xFB	; 251
     2a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     2a4:	a2 e2       	ldi	r26, 0x22	; 34
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e2 e2       	ldi	r30, 0x22	; 34
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     2b2:	a2 e2       	ldi	r26, 0x22	; 34
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e2 e2       	ldi	r30, 0x22	; 34
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     2c0:	a2 e2       	ldi	r26, 0x22	; 34
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e2 e2       	ldi	r30, 0x22	; 34
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e2       	ldi	r30, 0x22	; 34
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     2dc:	a2 e2       	ldi	r26, 0x22	; 34
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 77       	andi	r24, 0x7F	; 127
     2e8:	8c 93       	st	X, r24
     2ea:	e3 c0       	rjmp	.+454    	; 0x4b2 <LED+0x388>
        break;
    case 4 :		//Linkaf
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     2ec:	a2 e2       	ldi	r26, 0x22	; 34
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e2 e2       	ldi	r30, 0x22	; 34
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     2fa:	a2 e2       	ldi	r26, 0x22	; 34
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e2 e2       	ldi	r30, 0x22	; 34
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     308:	a2 e2       	ldi	r26, 0x22	; 34
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	e2 e2       	ldi	r30, 0x22	; 34
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	84 60       	ori	r24, 0x04	; 4
     314:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e2 e2       	ldi	r30, 0x22	; 34
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     324:	a2 e2       	ldi	r26, 0x22	; 34
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e2 e2       	ldi	r30, 0x22	; 34
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7e       	andi	r24, 0xEF	; 239
     330:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     332:	a2 e2       	ldi	r26, 0x22	; 34
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e2 e2       	ldi	r30, 0x22	; 34
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7d       	andi	r24, 0xDF	; 223
     33e:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     340:	a2 e2       	ldi	r26, 0x22	; 34
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e2 e2       	ldi	r30, 0x22	; 34
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     34e:	a2 e2       	ldi	r26, 0x22	; 34
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e2 e2       	ldi	r30, 0x22	; 34
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	8c 93       	st	X, r24
     35c:	aa c0       	rjmp	.+340    	; 0x4b2 <LED+0x388>
        break;
    case 5 :		//Stop/stilstand
        PORTLEDRood |= (1 << PLEDRoodVoor);
     35e:	a2 e2       	ldi	r26, 0x22	; 34
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	e2 e2       	ldi	r30, 0x22	; 34
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     36c:	a2 e2       	ldi	r26, 0x22	; 34
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e2 e2       	ldi	r30, 0x22	; 34
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	82 60       	ori	r24, 0x02	; 2
     378:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     37a:	a2 e2       	ldi	r26, 0x22	; 34
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e2 e2       	ldi	r30, 0x22	; 34
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     388:	a2 e2       	ldi	r26, 0x22	; 34
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e2 e2       	ldi	r30, 0x22	; 34
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     396:	a2 e2       	ldi	r26, 0x22	; 34
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e2 e2       	ldi	r30, 0x22	; 34
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     3a4:	a2 e2       	ldi	r26, 0x22	; 34
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e2 e2       	ldi	r30, 0x22	; 34
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 7d       	andi	r24, 0xDF	; 223
     3b0:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     3b2:	a2 e2       	ldi	r26, 0x22	; 34
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7b       	andi	r24, 0xBF	; 191
     3be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     3c0:	a2 e2       	ldi	r26, 0x22	; 34
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e2 e2       	ldi	r30, 0x22	; 34
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	8c 93       	st	X, r24
     3ce:	71 c0       	rjmp	.+226    	; 0x4b2 <LED+0x388>
        break;
    case 6 :		//Stoppen voor boom
        PORTLEDRood |= (1 << PLEDRoodVoor);
     3d0:	a2 e2       	ldi	r26, 0x22	; 34
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e2       	ldi	r30, 0x22	; 34
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     3de:	a2 e2       	ldi	r26, 0x22	; 34
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e2 e2       	ldi	r30, 0x22	; 34
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     3ec:	a2 e2       	ldi	r26, 0x22	; 34
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	e2 e2       	ldi	r30, 0x22	; 34
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	84 60       	ori	r24, 0x04	; 4
     3f8:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     3fa:	a2 e2       	ldi	r26, 0x22	; 34
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e2 e2       	ldi	r30, 0x22	; 34
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 60       	ori	r24, 0x08	; 8
     406:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     408:	a2 e2       	ldi	r26, 0x22	; 34
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e2 e2       	ldi	r30, 0x22	; 34
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     416:	a2 e2       	ldi	r26, 0x22	; 34
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e2 e2       	ldi	r30, 0x22	; 34
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     424:	a2 e2       	ldi	r26, 0x22	; 34
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e2 e2       	ldi	r30, 0x22	; 34
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     432:	a2 e2       	ldi	r26, 0x22	; 34
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e2 e2       	ldi	r30, 0x22	; 34
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8c 93       	st	X, r24
     440:	38 c0       	rjmp	.+112    	; 0x4b2 <LED+0x388>
        break;
    default :		//Alles uit
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     442:	a2 e2       	ldi	r26, 0x22	; 34
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e2 e2       	ldi	r30, 0x22	; 34
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     450:	a2 e2       	ldi	r26, 0x22	; 34
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e2 e2       	ldi	r30, 0x22	; 34
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     45e:	a2 e2       	ldi	r26, 0x22	; 34
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e2 e2       	ldi	r30, 0x22	; 34
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8b 7f       	andi	r24, 0xFB	; 251
     46a:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     46c:	a2 e2       	ldi	r26, 0x22	; 34
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e2 e2       	ldi	r30, 0x22	; 34
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     47a:	a2 e2       	ldi	r26, 0x22	; 34
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e2 e2       	ldi	r30, 0x22	; 34
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 7e       	andi	r24, 0xEF	; 239
     486:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     488:	a2 e2       	ldi	r26, 0x22	; 34
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e2 e2       	ldi	r30, 0x22	; 34
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     496:	a2 e2       	ldi	r26, 0x22	; 34
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e2 e2       	ldi	r30, 0x22	; 34
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     4a4:	a2 e2       	ldi	r26, 0x22	; 34
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e2 e2       	ldi	r30, 0x22	; 34
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	8c 93       	st	X, r24
    }
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <init>:


void init(void)
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	0f 92       	push	r0
     4c6:	0f 92       	push	r0
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
    LED(5);
     4cc:	85 e0       	ldi	r24, 0x05	; 5
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    DDRLEDRood |= (1 << PLEDRoodVoor);
     4d4:	a1 e2       	ldi	r26, 0x21	; 33
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	e1 e2       	ldi	r30, 0x21	; 33
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	81 60       	ori	r24, 0x01	; 1
     4e0:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodAchter);
     4e2:	a1 e2       	ldi	r26, 0x21	; 33
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e1 e2       	ldi	r30, 0x21	; 33
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	82 60       	ori	r24, 0x02	; 2
     4ee:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodRechts);
     4f0:	a1 e2       	ldi	r26, 0x21	; 33
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e1 e2       	ldi	r30, 0x21	; 33
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	84 60       	ori	r24, 0x04	; 4
     4fc:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodLinks);
     4fe:	a1 e2       	ldi	r26, 0x21	; 33
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e1 e2       	ldi	r30, 0x21	; 33
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	88 60       	ori	r24, 0x08	; 8
     50a:	8c 93       	st	X, r24

    DDRLEDGeel |= (1 << PLEDGeelVoor);
     50c:	a1 e2       	ldi	r26, 0x21	; 33
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	e1 e2       	ldi	r30, 0x21	; 33
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	80 61       	ori	r24, 0x10	; 16
     518:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelAchter);
     51a:	a1 e2       	ldi	r26, 0x21	; 33
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	e1 e2       	ldi	r30, 0x21	; 33
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	80 62       	ori	r24, 0x20	; 32
     526:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelRechts);
     528:	a1 e2       	ldi	r26, 0x21	; 33
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	e1 e2       	ldi	r30, 0x21	; 33
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	80 64       	ori	r24, 0x40	; 64
     534:	8c 93       	st	X, r24
    DDRLEDGeel |= (1 << PLEDGeelLinks);
     536:	a1 e2       	ldi	r26, 0x21	; 33
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	e1 e2       	ldi	r30, 0x21	; 33
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	80 68       	ori	r24, 0x80	; 128
     542:	8c 93       	st	X, r24

    DDRLEDRood |= (1 << PLEDNoodstop);
     544:	a1 e2       	ldi	r26, 0x21	; 33
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	e1 e2       	ldi	r30, 0x21	; 33
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	80 61       	ori	r24, 0x10	; 16
     550:	8c 93       	st	X, r24

    init_steppermotor();
     552:	0e 94 93 09 	call	0x1326	; 0x1326 <init_steppermotor>
    init_ultrasoon();
     556:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <init_ultrasoon>
    sei();      //enabling global interupts
     55a:	78 94       	sei
    int TreeCounter = 0;
     55c:	1a 82       	std	Y+2, r1	; 0x02
     55e:	19 82       	std	Y+1, r1	; 0x01

}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <main>:

int main(void)
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	ce 59       	subi	r28, 0x9E	; 158
     578:	d0 40       	sbci	r29, 0x00	; 0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
    double distanceUS1 = 0;
     584:	fe 01       	movw	r30, r28
     586:	e5 56       	subi	r30, 0x65	; 101
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	80 83       	st	Z, r24
     594:	91 83       	std	Z+1, r25	; 0x01
     596:	a2 83       	std	Z+2, r26	; 0x02
     598:	b3 83       	std	Z+3, r27	; 0x03
    init();
     59a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>
    LED(1);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     5a6:	fe 01       	movw	r30, r28
     5a8:	e9 56       	subi	r30, 0x69	; 105
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	a8 e4       	ldi	r26, 0x48	; 72
     5b2:	b3 e4       	ldi	r27, 0x43	; 67
     5b4:	80 83       	st	Z, r24
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	a2 83       	std	Z+2, r26	; 0x02
     5ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5bc:	8e 01       	movw	r16, r28
     5be:	0d 56       	subi	r16, 0x6D	; 109
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	fe 01       	movw	r30, r28
     5c4:	e9 56       	subi	r30, 0x69	; 105
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	60 81       	ld	r22, Z
     5ca:	71 81       	ldd	r23, Z+1	; 0x01
     5cc:	82 81       	ldd	r24, Z+2	; 0x02
     5ce:	93 81       	ldd	r25, Z+3	; 0x03
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4a e7       	ldi	r20, 0x7A	; 122
     5d6:	55 e4       	ldi	r21, 0x45	; 69
     5d8:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	f8 01       	movw	r30, r16
     5e2:	80 83       	st	Z, r24
     5e4:	91 83       	std	Z+1, r25	; 0x01
     5e6:	a2 83       	std	Z+2, r26	; 0x02
     5e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5ea:	fe 01       	movw	r30, r28
     5ec:	ed 56       	subi	r30, 0x6D	; 109
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	60 81       	ld	r22, Z
     5f2:	71 81       	ldd	r23, Z+1	; 0x01
     5f4:	82 81       	ldd	r24, Z+2	; 0x02
     5f6:	93 81       	ldd	r25, Z+3	; 0x03
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e8       	ldi	r20, 0x80	; 128
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     604:	88 23       	and	r24, r24
     606:	44 f4       	brge	.+16     	; 0x618 <main+0xae>
		__ticks = 1;
     608:	fe 01       	movw	r30, r28
     60a:	ef 56       	subi	r30, 0x6F	; 111
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	91 83       	std	Z+1, r25	; 0x01
     614:	80 83       	st	Z, r24
     616:	64 c0       	rjmp	.+200    	; 0x6e0 <main+0x176>
	else if (__tmp > 65535)
     618:	fe 01       	movw	r30, r28
     61a:	ed 56       	subi	r30, 0x6D	; 109
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
     61e:	60 81       	ld	r22, Z
     620:	71 81       	ldd	r23, Z+1	; 0x01
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	3f ef       	ldi	r19, 0xFF	; 255
     62a:	4f e7       	ldi	r20, 0x7F	; 127
     62c:	57 e4       	ldi	r21, 0x47	; 71
     62e:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     632:	18 16       	cp	r1, r24
     634:	0c f0       	brlt	.+2      	; 0x638 <main+0xce>
     636:	43 c0       	rjmp	.+134    	; 0x6be <main+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     638:	fe 01       	movw	r30, r28
     63a:	e9 56       	subi	r30, 0x69	; 105
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
     63e:	60 81       	ld	r22, Z
     640:	71 81       	ldd	r23, Z+1	; 0x01
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	8e 01       	movw	r16, r28
     658:	0f 56       	subi	r16, 0x6F	; 111
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	bc 01       	movw	r22, r24
     65e:	cd 01       	movw	r24, r26
     660:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	f8 01       	movw	r30, r16
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	80 83       	st	Z, r24
     66e:	1f c0       	rjmp	.+62     	; 0x6ae <main+0x144>
     670:	fe 01       	movw	r30, r28
     672:	e1 57       	subi	r30, 0x71	; 113
     674:	ff 4f       	sbci	r31, 0xFF	; 255
     676:	80 e9       	ldi	r24, 0x90	; 144
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     67e:	fe 01       	movw	r30, r28
     680:	e1 57       	subi	r30, 0x71	; 113
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <main+0x11e>
     68c:	fe 01       	movw	r30, r28
     68e:	e1 57       	subi	r30, 0x71	; 113
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	91 83       	std	Z+1, r25	; 0x01
     694:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     696:	de 01       	movw	r26, r28
     698:	af 56       	subi	r26, 0x6F	; 111
     69a:	bf 4f       	sbci	r27, 0xFF	; 255
     69c:	fe 01       	movw	r30, r28
     69e:	ef 56       	subi	r30, 0x6F	; 111
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	11 96       	adiw	r26, 0x01	; 1
     6aa:	9c 93       	st	X, r25
     6ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ef 56       	subi	r30, 0x6F	; 111
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	d1 f6       	brne	.-76     	; 0x670 <main+0x106>
     6bc:	27 c0       	rjmp	.+78     	; 0x70c <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6be:	8e 01       	movw	r16, r28
     6c0:	0f 56       	subi	r16, 0x6F	; 111
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	fe 01       	movw	r30, r28
     6c6:	ed 56       	subi	r30, 0x6D	; 109
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	f8 01       	movw	r30, r16
     6dc:	91 83       	std	Z+1, r25	; 0x01
     6de:	80 83       	st	Z, r24
     6e0:	de 01       	movw	r26, r28
     6e2:	a3 57       	subi	r26, 0x73	; 115
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	fe 01       	movw	r30, r28
     6e8:	ef 56       	subi	r30, 0x6F	; 111
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	8d 93       	st	X+, r24
     6f2:	9c 93       	st	X, r25
     6f4:	fe 01       	movw	r30, r28
     6f6:	e3 57       	subi	r30, 0x73	; 115
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <main+0x194>
     702:	fe 01       	movw	r30, r28
     704:	e3 57       	subi	r30, 0x73	; 115
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	91 83       	std	Z+1, r25	; 0x01
     70a:	80 83       	st	Z, r24
    _delay_ms(200);
    LED(3);
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     714:	fe 01       	movw	r30, r28
     716:	e7 57       	subi	r30, 0x77	; 119
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a8 e4       	ldi	r26, 0x48	; 72
     720:	b3 e4       	ldi	r27, 0x43	; 67
     722:	80 83       	st	Z, r24
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	a2 83       	std	Z+2, r26	; 0x02
     728:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     72a:	8e 01       	movw	r16, r28
     72c:	0b 57       	subi	r16, 0x7B	; 123
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	fe 01       	movw	r30, r28
     732:	e7 57       	subi	r30, 0x77	; 119
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	60 81       	ld	r22, Z
     738:	71 81       	ldd	r23, Z+1	; 0x01
     73a:	82 81       	ldd	r24, Z+2	; 0x02
     73c:	93 81       	ldd	r25, Z+3	; 0x03
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	4a e7       	ldi	r20, 0x7A	; 122
     744:	55 e4       	ldi	r21, 0x45	; 69
     746:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	f8 01       	movw	r30, r16
     750:	80 83       	st	Z, r24
     752:	91 83       	std	Z+1, r25	; 0x01
     754:	a2 83       	std	Z+2, r26	; 0x02
     756:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     758:	fe 01       	movw	r30, r28
     75a:	eb 57       	subi	r30, 0x7B	; 123
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	60 81       	ld	r22, Z
     760:	71 81       	ldd	r23, Z+1	; 0x01
     762:	82 81       	ldd	r24, Z+2	; 0x02
     764:	93 81       	ldd	r25, Z+3	; 0x03
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e8       	ldi	r20, 0x80	; 128
     76c:	5f e3       	ldi	r21, 0x3F	; 63
     76e:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     772:	88 23       	and	r24, r24
     774:	44 f4       	brge	.+16     	; 0x786 <main+0x21c>
		__ticks = 1;
     776:	fe 01       	movw	r30, r28
     778:	ed 57       	subi	r30, 0x7D	; 125
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	80 83       	st	Z, r24
     784:	64 c0       	rjmp	.+200    	; 0x84e <main+0x2e4>
	else if (__tmp > 65535)
     786:	fe 01       	movw	r30, r28
     788:	eb 57       	subi	r30, 0x7B	; 123
     78a:	ff 4f       	sbci	r31, 0xFF	; 255
     78c:	60 81       	ld	r22, Z
     78e:	71 81       	ldd	r23, Z+1	; 0x01
     790:	82 81       	ldd	r24, Z+2	; 0x02
     792:	93 81       	ldd	r25, Z+3	; 0x03
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	3f ef       	ldi	r19, 0xFF	; 255
     798:	4f e7       	ldi	r20, 0x7F	; 127
     79a:	57 e4       	ldi	r21, 0x47	; 71
     79c:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	0c f0       	brlt	.+2      	; 0x7a6 <main+0x23c>
     7a4:	43 c0       	rjmp	.+134    	; 0x82c <main+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a6:	fe 01       	movw	r30, r28
     7a8:	e7 57       	subi	r30, 0x77	; 119
     7aa:	ff 4f       	sbci	r31, 0xFF	; 255
     7ac:	60 81       	ld	r22, Z
     7ae:	71 81       	ldd	r23, Z+1	; 0x01
     7b0:	82 81       	ldd	r24, Z+2	; 0x02
     7b2:	93 81       	ldd	r25, Z+3	; 0x03
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e2       	ldi	r20, 0x20	; 32
     7ba:	51 e4       	ldi	r21, 0x41	; 65
     7bc:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	8e 01       	movw	r16, r28
     7c6:	0d 57       	subi	r16, 0x7D	; 125
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	bc 01       	movw	r22, r24
     7cc:	cd 01       	movw	r24, r26
     7ce:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	f8 01       	movw	r30, r16
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24
     7dc:	1f c0       	rjmp	.+62     	; 0x81c <main+0x2b2>
     7de:	fe 01       	movw	r30, r28
     7e0:	ef 57       	subi	r30, 0x7F	; 127
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	80 e9       	ldi	r24, 0x90	; 144
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	fe 01       	movw	r30, r28
     7ee:	ef 57       	subi	r30, 0x7F	; 127
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <main+0x28c>
     7fa:	fe 01       	movw	r30, r28
     7fc:	ef 57       	subi	r30, 0x7F	; 127
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	91 83       	std	Z+1, r25	; 0x01
     802:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     804:	de 01       	movw	r26, r28
     806:	ad 57       	subi	r26, 0x7D	; 125
     808:	bf 4f       	sbci	r27, 0xFF	; 255
     80a:	fe 01       	movw	r30, r28
     80c:	ed 57       	subi	r30, 0x7D	; 125
     80e:	ff 4f       	sbci	r31, 0xFF	; 255
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	11 96       	adiw	r26, 0x01	; 1
     818:	9c 93       	st	X, r25
     81a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81c:	fe 01       	movw	r30, r28
     81e:	ed 57       	subi	r30, 0x7D	; 125
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	80 81       	ld	r24, Z
     824:	91 81       	ldd	r25, Z+1	; 0x01
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	d1 f6       	brne	.-76     	; 0x7de <main+0x274>
     82a:	27 c0       	rjmp	.+78     	; 0x87a <main+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82c:	8e 01       	movw	r16, r28
     82e:	0d 57       	subi	r16, 0x7D	; 125
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	fe 01       	movw	r30, r28
     834:	eb 57       	subi	r30, 0x7B	; 123
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	60 81       	ld	r22, Z
     83a:	71 81       	ldd	r23, Z+1	; 0x01
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	93 81       	ldd	r25, Z+3	; 0x03
     840:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	f8 01       	movw	r30, r16
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	80 83       	st	Z, r24
     84e:	de 01       	movw	r26, r28
     850:	a1 58       	subi	r26, 0x81	; 129
     852:	bf 4f       	sbci	r27, 0xFF	; 255
     854:	fe 01       	movw	r30, r28
     856:	ed 57       	subi	r30, 0x7D	; 125
     858:	ff 4f       	sbci	r31, 0xFF	; 255
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	8d 93       	st	X+, r24
     860:	9c 93       	st	X, r25
     862:	fe 01       	movw	r30, r28
     864:	e1 58       	subi	r30, 0x81	; 129
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <main+0x302>
     870:	fe 01       	movw	r30, r28
     872:	e1 58       	subi	r30, 0x81	; 129
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	80 83       	st	Z, r24
    _delay_ms(200);
    LED(2);
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     882:	fe 01       	movw	r30, r28
     884:	e5 58       	subi	r30, 0x85	; 133
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a8 e4       	ldi	r26, 0x48	; 72
     88e:	b3 e4       	ldi	r27, 0x43	; 67
     890:	80 83       	st	Z, r24
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	a2 83       	std	Z+2, r26	; 0x02
     896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     898:	8e 01       	movw	r16, r28
     89a:	09 58       	subi	r16, 0x89	; 137
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
     89e:	fe 01       	movw	r30, r28
     8a0:	e5 58       	subi	r30, 0x85	; 133
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	60 81       	ld	r22, Z
     8a6:	71 81       	ldd	r23, Z+1	; 0x01
     8a8:	82 81       	ldd	r24, Z+2	; 0x02
     8aa:	93 81       	ldd	r25, Z+3	; 0x03
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4a e7       	ldi	r20, 0x7A	; 122
     8b2:	55 e4       	ldi	r21, 0x45	; 69
     8b4:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	f8 01       	movw	r30, r16
     8be:	80 83       	st	Z, r24
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	a2 83       	std	Z+2, r26	; 0x02
     8c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8c6:	fe 01       	movw	r30, r28
     8c8:	e9 58       	subi	r30, 0x89	; 137
     8ca:	ff 4f       	sbci	r31, 0xFF	; 255
     8cc:	60 81       	ld	r22, Z
     8ce:	71 81       	ldd	r23, Z+1	; 0x01
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e8       	ldi	r20, 0x80	; 128
     8da:	5f e3       	ldi	r21, 0x3F	; 63
     8dc:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     8e0:	88 23       	and	r24, r24
     8e2:	44 f4       	brge	.+16     	; 0x8f4 <main+0x38a>
		__ticks = 1;
     8e4:	fe 01       	movw	r30, r28
     8e6:	eb 58       	subi	r30, 0x8B	; 139
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
     8f2:	64 c0       	rjmp	.+200    	; 0x9bc <main+0x452>
	else if (__tmp > 65535)
     8f4:	fe 01       	movw	r30, r28
     8f6:	e9 58       	subi	r30, 0x89	; 137
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	60 81       	ld	r22, Z
     8fc:	71 81       	ldd	r23, Z+1	; 0x01
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	93 81       	ldd	r25, Z+3	; 0x03
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71
     90a:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     90e:	18 16       	cp	r1, r24
     910:	0c f0       	brlt	.+2      	; 0x914 <main+0x3aa>
     912:	43 c0       	rjmp	.+134    	; 0x99a <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     914:	fe 01       	movw	r30, r28
     916:	e5 58       	subi	r30, 0x85	; 133
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	60 81       	ld	r22, Z
     91c:	71 81       	ldd	r23, Z+1	; 0x01
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	93 81       	ldd	r25, Z+3	; 0x03
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	8e 01       	movw	r16, r28
     934:	0b 58       	subi	r16, 0x8B	; 139
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	f8 01       	movw	r30, r16
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	1f c0       	rjmp	.+62     	; 0x98a <main+0x420>
     94c:	fe 01       	movw	r30, r28
     94e:	ed 58       	subi	r30, 0x8D	; 141
     950:	ff 4f       	sbci	r31, 0xFF	; 255
     952:	80 e9       	ldi	r24, 0x90	; 144
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
     95a:	fe 01       	movw	r30, r28
     95c:	ed 58       	subi	r30, 0x8D	; 141
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <main+0x3fa>
     968:	fe 01       	movw	r30, r28
     96a:	ed 58       	subi	r30, 0x8D	; 141
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     972:	de 01       	movw	r26, r28
     974:	ab 58       	subi	r26, 0x8B	; 139
     976:	bf 4f       	sbci	r27, 0xFF	; 255
     978:	fe 01       	movw	r30, r28
     97a:	eb 58       	subi	r30, 0x8B	; 139
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	11 96       	adiw	r26, 0x01	; 1
     986:	9c 93       	st	X, r25
     988:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     98a:	fe 01       	movw	r30, r28
     98c:	eb 58       	subi	r30, 0x8B	; 139
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	d1 f6       	brne	.-76     	; 0x94c <main+0x3e2>
     998:	27 c0       	rjmp	.+78     	; 0x9e8 <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     99a:	8e 01       	movw	r16, r28
     99c:	0b 58       	subi	r16, 0x8B	; 139
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	fe 01       	movw	r30, r28
     9a2:	e9 58       	subi	r30, 0x89	; 137
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	60 81       	ld	r22, Z
     9a8:	71 81       	ldd	r23, Z+1	; 0x01
     9aa:	82 81       	ldd	r24, Z+2	; 0x02
     9ac:	93 81       	ldd	r25, Z+3	; 0x03
     9ae:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	f8 01       	movw	r30, r16
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	80 83       	st	Z, r24
     9bc:	de 01       	movw	r26, r28
     9be:	af 58       	subi	r26, 0x8F	; 143
     9c0:	bf 4f       	sbci	r27, 0xFF	; 255
     9c2:	fe 01       	movw	r30, r28
     9c4:	eb 58       	subi	r30, 0x8B	; 139
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	80 81       	ld	r24, Z
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	8d 93       	st	X+, r24
     9ce:	9c 93       	st	X, r25
     9d0:	fe 01       	movw	r30, r28
     9d2:	ef 58       	subi	r30, 0x8F	; 143
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <main+0x470>
     9de:	fe 01       	movw	r30, r28
     9e0:	ef 58       	subi	r30, 0x8F	; 143
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	80 83       	st	Z, r24
    _delay_ms(200);
    LED(4);
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     9f0:	fe 01       	movw	r30, r28
     9f2:	e3 59       	subi	r30, 0x93	; 147
     9f4:	ff 4f       	sbci	r31, 0xFF	; 255
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a8 e4       	ldi	r26, 0x48	; 72
     9fc:	b3 e4       	ldi	r27, 0x43	; 67
     9fe:	80 83       	st	Z, r24
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	a2 83       	std	Z+2, r26	; 0x02
     a04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a06:	8e 01       	movw	r16, r28
     a08:	07 59       	subi	r16, 0x97	; 151
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	fe 01       	movw	r30, r28
     a0e:	e3 59       	subi	r30, 0x93	; 147
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	60 81       	ld	r22, Z
     a14:	71 81       	ldd	r23, Z+1	; 0x01
     a16:	82 81       	ldd	r24, Z+2	; 0x02
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	4a e7       	ldi	r20, 0x7A	; 122
     a20:	55 e4       	ldi	r21, 0x45	; 69
     a22:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	f8 01       	movw	r30, r16
     a2c:	80 83       	st	Z, r24
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	a2 83       	std	Z+2, r26	; 0x02
     a32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a34:	fe 01       	movw	r30, r28
     a36:	e7 59       	subi	r30, 0x97	; 151
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
     a3a:	60 81       	ld	r22, Z
     a3c:	71 81       	ldd	r23, Z+1	; 0x01
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	93 81       	ldd	r25, Z+3	; 0x03
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e8       	ldi	r20, 0x80	; 128
     a48:	5f e3       	ldi	r21, 0x3F	; 63
     a4a:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     a4e:	88 23       	and	r24, r24
     a50:	44 f4       	brge	.+16     	; 0xa62 <main+0x4f8>
		__ticks = 1;
     a52:	fe 01       	movw	r30, r28
     a54:	e9 59       	subi	r30, 0x99	; 153
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	80 83       	st	Z, r24
     a60:	64 c0       	rjmp	.+200    	; 0xb2a <main+0x5c0>
	else if (__tmp > 65535)
     a62:	fe 01       	movw	r30, r28
     a64:	e7 59       	subi	r30, 0x97	; 151
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	60 81       	ld	r22, Z
     a6a:	71 81       	ldd	r23, Z+1	; 0x01
     a6c:	82 81       	ldd	r24, Z+2	; 0x02
     a6e:	93 81       	ldd	r25, Z+3	; 0x03
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	3f ef       	ldi	r19, 0xFF	; 255
     a74:	4f e7       	ldi	r20, 0x7F	; 127
     a76:	57 e4       	ldi	r21, 0x47	; 71
     a78:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     a7c:	18 16       	cp	r1, r24
     a7e:	0c f0       	brlt	.+2      	; 0xa82 <main+0x518>
     a80:	43 c0       	rjmp	.+134    	; 0xb08 <main+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a82:	fe 01       	movw	r30, r28
     a84:	e3 59       	subi	r30, 0x93	; 147
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	8e 01       	movw	r16, r28
     aa2:	09 59       	subi	r16, 0x99	; 153
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
     aa6:	bc 01       	movw	r22, r24
     aa8:	cd 01       	movw	r24, r26
     aaa:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     aae:	dc 01       	movw	r26, r24
     ab0:	cb 01       	movw	r24, r22
     ab2:	f8 01       	movw	r30, r16
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	80 83       	st	Z, r24
     ab8:	1f c0       	rjmp	.+62     	; 0xaf8 <main+0x58e>
     aba:	fe 01       	movw	r30, r28
     abc:	eb 59       	subi	r30, 0x9B	; 155
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	80 e9       	ldi	r24, 0x90	; 144
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
     ac8:	fe 01       	movw	r30, r28
     aca:	eb 59       	subi	r30, 0x9B	; 155
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <main+0x568>
     ad6:	fe 01       	movw	r30, r28
     ad8:	eb 59       	subi	r30, 0x9B	; 155
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae0:	de 01       	movw	r26, r28
     ae2:	a9 59       	subi	r26, 0x99	; 153
     ae4:	bf 4f       	sbci	r27, 0xFF	; 255
     ae6:	fe 01       	movw	r30, r28
     ae8:	e9 59       	subi	r30, 0x99	; 153
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	11 96       	adiw	r26, 0x01	; 1
     af4:	9c 93       	st	X, r25
     af6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af8:	fe 01       	movw	r30, r28
     afa:	e9 59       	subi	r30, 0x99	; 153
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	80 81       	ld	r24, Z
     b00:	91 81       	ldd	r25, Z+1	; 0x01
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	d1 f6       	brne	.-76     	; 0xaba <main+0x550>
     b06:	27 c0       	rjmp	.+78     	; 0xb56 <main+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b08:	8e 01       	movw	r16, r28
     b0a:	09 59       	subi	r16, 0x99	; 153
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
     b0e:	fe 01       	movw	r30, r28
     b10:	e7 59       	subi	r30, 0x97	; 151
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	f8 01       	movw	r30, r16
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24
     b2a:	de 01       	movw	r26, r28
     b2c:	ad 59       	subi	r26, 0x9D	; 157
     b2e:	bf 4f       	sbci	r27, 0xFF	; 255
     b30:	fe 01       	movw	r30, r28
     b32:	e9 59       	subi	r30, 0x99	; 153
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	8d 93       	st	X+, r24
     b3c:	9c 93       	st	X, r25
     b3e:	fe 01       	movw	r30, r28
     b40:	ed 59       	subi	r30, 0x9D	; 157
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	80 81       	ld	r24, Z
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <main+0x5de>
     b4c:	fe 01       	movw	r30, r28
     b4e:	ed 59       	subi	r30, 0x9D	; 157
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
    _delay_ms(200);
        LED(1);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     b5e:	fe 01       	movw	r30, r28
     b60:	e1 5a       	subi	r30, 0xA1	; 161
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a8 e4       	ldi	r26, 0x48	; 72
     b6a:	b3 e4       	ldi	r27, 0x43	; 67
     b6c:	80 83       	st	Z, r24
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	a2 83       	std	Z+2, r26	; 0x02
     b72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	8e 01       	movw	r16, r28
     b76:	05 5a       	subi	r16, 0xA5	; 165
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	fe 01       	movw	r30, r28
     b7c:	e1 5a       	subi	r30, 0xA1	; 161
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	60 81       	ld	r22, Z
     b82:	71 81       	ldd	r23, Z+1	; 0x01
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a e7       	ldi	r20, 0x7A	; 122
     b8e:	55 e4       	ldi	r21, 0x45	; 69
     b90:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	f8 01       	movw	r30, r16
     b9a:	80 83       	st	Z, r24
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	a2 83       	std	Z+2, r26	; 0x02
     ba0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba2:	fe 01       	movw	r30, r28
     ba4:	e5 5a       	subi	r30, 0xA5	; 165
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	44 f4       	brge	.+16     	; 0xbd0 <main+0x666>
		__ticks = 1;
     bc0:	fe 01       	movw	r30, r28
     bc2:	e7 5a       	subi	r30, 0xA7	; 167
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	64 c0       	rjmp	.+200    	; 0xc98 <main+0x72e>
	else if (__tmp > 65535)
     bd0:	fe 01       	movw	r30, r28
     bd2:	e5 5a       	subi	r30, 0xA5	; 165
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	60 81       	ld	r22, Z
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	93 81       	ldd	r25, Z+3	; 0x03
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	3f ef       	ldi	r19, 0xFF	; 255
     be2:	4f e7       	ldi	r20, 0x7F	; 127
     be4:	57 e4       	ldi	r21, 0x47	; 71
     be6:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     bea:	18 16       	cp	r1, r24
     bec:	0c f0       	brlt	.+2      	; 0xbf0 <main+0x686>
     bee:	43 c0       	rjmp	.+134    	; 0xc76 <main+0x70c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	fe 01       	movw	r30, r28
     bf2:	e1 5a       	subi	r30, 0xA1	; 161
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e2       	ldi	r20, 0x20	; 32
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	8e 01       	movw	r16, r28
     c10:	07 5a       	subi	r16, 0xA7	; 167
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	f8 01       	movw	r30, r16
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	80 83       	st	Z, r24
     c26:	1f c0       	rjmp	.+62     	; 0xc66 <main+0x6fc>
     c28:	fe 01       	movw	r30, r28
     c2a:	e9 5a       	subi	r30, 0xA9	; 169
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	80 e9       	ldi	r24, 0x90	; 144
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	fe 01       	movw	r30, r28
     c38:	e9 5a       	subi	r30, 0xA9	; 169
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0x6d6>
     c44:	fe 01       	movw	r30, r28
     c46:	e9 5a       	subi	r30, 0xA9	; 169
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4e:	de 01       	movw	r26, r28
     c50:	a7 5a       	subi	r26, 0xA7	; 167
     c52:	bf 4f       	sbci	r27, 0xFF	; 255
     c54:	fe 01       	movw	r30, r28
     c56:	e7 5a       	subi	r30, 0xA7	; 167
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	9c 93       	st	X, r25
     c64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	fe 01       	movw	r30, r28
     c68:	e7 5a       	subi	r30, 0xA7	; 167
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	d1 f6       	brne	.-76     	; 0xc28 <main+0x6be>
     c74:	27 c0       	rjmp	.+78     	; 0xcc4 <main+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c76:	8e 01       	movw	r16, r28
     c78:	07 5a       	subi	r16, 0xA7	; 167
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	fe 01       	movw	r30, r28
     c7e:	e5 5a       	subi	r30, 0xA5	; 165
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	f8 01       	movw	r30, r16
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
     c98:	de 01       	movw	r26, r28
     c9a:	ab 5a       	subi	r26, 0xAB	; 171
     c9c:	bf 4f       	sbci	r27, 0xFF	; 255
     c9e:	fe 01       	movw	r30, r28
     ca0:	e7 5a       	subi	r30, 0xA7	; 167
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	8d 93       	st	X+, r24
     caa:	9c 93       	st	X, r25
     cac:	fe 01       	movw	r30, r28
     cae:	eb 5a       	subi	r30, 0xAB	; 171
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <main+0x74c>
     cba:	fe 01       	movw	r30, r28
     cbc:	eb 5a       	subi	r30, 0xAB	; 171
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
    _delay_ms(200);
    LED(3);
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     ccc:	fe 01       	movw	r30, r28
     cce:	ef 5a       	subi	r30, 0xAF	; 175
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a8 e4       	ldi	r26, 0x48	; 72
     cd8:	b3 e4       	ldi	r27, 0x43	; 67
     cda:	80 83       	st	Z, r24
     cdc:	91 83       	std	Z+1, r25	; 0x01
     cde:	a2 83       	std	Z+2, r26	; 0x02
     ce0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce2:	8e 01       	movw	r16, r28
     ce4:	03 5b       	subi	r16, 0xB3	; 179
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	fe 01       	movw	r30, r28
     cea:	ef 5a       	subi	r30, 0xAF	; 175
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a e7       	ldi	r20, 0x7A	; 122
     cfc:	55 e4       	ldi	r21, 0x45	; 69
     cfe:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	f8 01       	movw	r30, r16
     d08:	80 83       	st	Z, r24
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	a2 83       	std	Z+2, r26	; 0x02
     d0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d10:	fe 01       	movw	r30, r28
     d12:	e3 5b       	subi	r30, 0xB3	; 179
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e8       	ldi	r20, 0x80	; 128
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     d2a:	88 23       	and	r24, r24
     d2c:	44 f4       	brge	.+16     	; 0xd3e <main+0x7d4>
		__ticks = 1;
     d2e:	fe 01       	movw	r30, r28
     d30:	e5 5b       	subi	r30, 0xB5	; 181
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	64 c0       	rjmp	.+200    	; 0xe06 <main+0x89c>
	else if (__tmp > 65535)
     d3e:	fe 01       	movw	r30, r28
     d40:	e3 5b       	subi	r30, 0xB3	; 179
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	60 81       	ld	r22, Z
     d46:	71 81       	ldd	r23, Z+1	; 0x01
     d48:	82 81       	ldd	r24, Z+2	; 0x02
     d4a:	93 81       	ldd	r25, Z+3	; 0x03
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	3f ef       	ldi	r19, 0xFF	; 255
     d50:	4f e7       	ldi	r20, 0x7F	; 127
     d52:	57 e4       	ldi	r21, 0x47	; 71
     d54:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     d58:	18 16       	cp	r1, r24
     d5a:	0c f0       	brlt	.+2      	; 0xd5e <main+0x7f4>
     d5c:	43 c0       	rjmp	.+134    	; 0xde4 <main+0x87a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	fe 01       	movw	r30, r28
     d60:	ef 5a       	subi	r30, 0xAF	; 175
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e2       	ldi	r20, 0x20	; 32
     d72:	51 e4       	ldi	r21, 0x41	; 65
     d74:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8e 01       	movw	r16, r28
     d7e:	05 5b       	subi	r16, 0xB5	; 181
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	f8 01       	movw	r30, r16
     d90:	91 83       	std	Z+1, r25	; 0x01
     d92:	80 83       	st	Z, r24
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <main+0x86a>
     d96:	fe 01       	movw	r30, r28
     d98:	e7 5b       	subi	r30, 0xB7	; 183
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	80 e9       	ldi	r24, 0x90	; 144
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24
     da4:	fe 01       	movw	r30, r28
     da6:	e7 5b       	subi	r30, 0xB7	; 183
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x844>
     db2:	fe 01       	movw	r30, r28
     db4:	e7 5b       	subi	r30, 0xB7	; 183
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	de 01       	movw	r26, r28
     dbe:	a5 5b       	subi	r26, 0xB5	; 181
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	fe 01       	movw	r30, r28
     dc4:	e5 5b       	subi	r30, 0xB5	; 181
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	9c 93       	st	X, r25
     dd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd4:	fe 01       	movw	r30, r28
     dd6:	e5 5b       	subi	r30, 0xB5	; 181
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	d1 f6       	brne	.-76     	; 0xd96 <main+0x82c>
     de2:	27 c0       	rjmp	.+78     	; 0xe32 <main+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	8e 01       	movw	r16, r28
     de6:	05 5b       	subi	r16, 0xB5	; 181
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	fe 01       	movw	r30, r28
     dec:	e3 5b       	subi	r30, 0xB3	; 179
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	f8 01       	movw	r30, r16
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
     e06:	de 01       	movw	r26, r28
     e08:	a9 5b       	subi	r26, 0xB9	; 185
     e0a:	bf 4f       	sbci	r27, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e5 5b       	subi	r30, 0xB5	; 181
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	8d 93       	st	X+, r24
     e18:	9c 93       	st	X, r25
     e1a:	fe 01       	movw	r30, r28
     e1c:	e9 5b       	subi	r30, 0xB9	; 185
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	80 81       	ld	r24, Z
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <main+0x8ba>
     e28:	fe 01       	movw	r30, r28
     e2a:	e9 5b       	subi	r30, 0xB9	; 185
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
    _delay_ms(200);
    LED(2);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     e3a:	fe 01       	movw	r30, r28
     e3c:	ed 5b       	subi	r30, 0xBD	; 189
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a8 e4       	ldi	r26, 0x48	; 72
     e46:	b3 e4       	ldi	r27, 0x43	; 67
     e48:	80 83       	st	Z, r24
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	a2 83       	std	Z+2, r26	; 0x02
     e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e50:	8e 01       	movw	r16, r28
     e52:	01 5c       	subi	r16, 0xC1	; 193
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	fe 01       	movw	r30, r28
     e58:	ed 5b       	subi	r30, 0xBD	; 189
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	55 e4       	ldi	r21, 0x45	; 69
     e6c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	f8 01       	movw	r30, r16
     e76:	80 83       	st	Z, r24
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	a2 83       	std	Z+2, r26	; 0x02
     e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7e:	fe 01       	movw	r30, r28
     e80:	ff 96       	adiw	r30, 0x3f	; 63
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <main+0x93a>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9e af       	std	Y+62, r25	; 0x3e
     ea0:	8d af       	std	Y+61, r24	; 0x3d
     ea2:	46 c0       	rjmp	.+140    	; 0xf30 <main+0x9c6>
	else if (__tmp > 65535)
     ea4:	fe 01       	movw	r30, r28
     ea6:	ff 96       	adiw	r30, 0x3f	; 63
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	3f ef       	ldi	r19, 0xFF	; 255
     eb4:	4f e7       	ldi	r20, 0x7F	; 127
     eb6:	57 e4       	ldi	r21, 0x47	; 71
     eb8:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     ebc:	18 16       	cp	r1, r24
     ebe:	64 f5       	brge	.+88     	; 0xf18 <main+0x9ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 5b       	subi	r30, 0xBD	; 189
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e2       	ldi	r20, 0x20	; 32
     ed4:	51 e4       	ldi	r21, 0x41	; 65
     ed6:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	9e af       	std	Y+62, r25	; 0x3e
     eec:	8d af       	std	Y+61, r24	; 0x3d
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <main+0x9a4>
     ef0:	80 e9       	ldi	r24, 0x90	; 144
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	9c af       	std	Y+60, r25	; 0x3c
     ef6:	8b af       	std	Y+59, r24	; 0x3b
     ef8:	8b ad       	ldd	r24, Y+59	; 0x3b
     efa:	9c ad       	ldd	r25, Y+60	; 0x3c
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <main+0x992>
     f00:	9c af       	std	Y+60, r25	; 0x3c
     f02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f04:	8d ad       	ldd	r24, Y+61	; 0x3d
     f06:	9e ad       	ldd	r25, Y+62	; 0x3e
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	9e af       	std	Y+62, r25	; 0x3e
     f0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f10:	9e ad       	ldd	r25, Y+62	; 0x3e
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	69 f7       	brne	.-38     	; 0xef0 <main+0x986>
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <main+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f18:	fe 01       	movw	r30, r28
     f1a:	ff 96       	adiw	r30, 0x3f	; 63
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e af       	std	Y+62, r25	; 0x3e
     f2e:	8d af       	std	Y+61, r24	; 0x3d
     f30:	8d ad       	ldd	r24, Y+61	; 0x3d
     f32:	9e ad       	ldd	r25, Y+62	; 0x3e
     f34:	9a af       	std	Y+58, r25	; 0x3a
     f36:	89 af       	std	Y+57, r24	; 0x39
     f38:	89 ad       	ldd	r24, Y+57	; 0x39
     f3a:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <main+0x9d2>
     f40:	9a af       	std	Y+58, r25	; 0x3a
     f42:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(200);
    LED(4);
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a8 e4       	ldi	r26, 0x48	; 72
     f52:	b3 e4       	ldi	r27, 0x43	; 67
     f54:	8d ab       	std	Y+53, r24	; 0x35
     f56:	9e ab       	std	Y+54, r25	; 0x36
     f58:	af ab       	std	Y+55, r26	; 0x37
     f5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	6d a9       	ldd	r22, Y+53	; 0x35
     f5e:	7e a9       	ldd	r23, Y+54	; 0x36
     f60:	8f a9       	ldd	r24, Y+55	; 0x37
     f62:	98 ad       	ldd	r25, Y+56	; 0x38
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a e7       	ldi	r20, 0x7A	; 122
     f6a:	55 e4       	ldi	r21, 0x45	; 69
     f6c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	89 ab       	std	Y+49, r24	; 0x31
     f76:	9a ab       	std	Y+50, r25	; 0x32
     f78:	ab ab       	std	Y+51, r26	; 0x33
     f7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f7c:	69 a9       	ldd	r22, Y+49	; 0x31
     f7e:	7a a9       	ldd	r23, Y+50	; 0x32
     f80:	8b a9       	ldd	r24, Y+51	; 0x33
     f82:	9c a9       	ldd	r25, Y+52	; 0x34
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <main+0xa34>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	98 ab       	std	Y+48, r25	; 0x30
     f9a:	8f a7       	std	Y+47, r24	; 0x2f
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <main+0xab2>
	else if (__tmp > 65535)
     f9e:	69 a9       	ldd	r22, Y+49	; 0x31
     fa0:	7a a9       	ldd	r23, Y+50	; 0x32
     fa2:	8b a9       	ldd	r24, Y+51	; 0x33
     fa4:	9c a9       	ldd	r25, Y+52	; 0x34
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <main+0xa9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	6d a9       	ldd	r22, Y+53	; 0x35
     fb8:	7e a9       	ldd	r23, Y+54	; 0x36
     fba:	8f a9       	ldd	r24, Y+55	; 0x37
     fbc:	98 ad       	ldd	r25, Y+56	; 0x38
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	98 ab       	std	Y+48, r25	; 0x30
     fdc:	8f a7       	std	Y+47, r24	; 0x2f
     fde:	0f c0       	rjmp	.+30     	; 0xffe <main+0xa94>
     fe0:	80 e9       	ldi	r24, 0x90	; 144
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	9e a7       	std	Y+46, r25	; 0x2e
     fe6:	8d a7       	std	Y+45, r24	; 0x2d
     fe8:	8d a5       	ldd	r24, Y+45	; 0x2d
     fea:	9e a5       	ldd	r25, Y+46	; 0x2e
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <main+0xa82>
     ff0:	9e a7       	std	Y+46, r25	; 0x2e
     ff2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff6:	98 a9       	ldd	r25, Y+48	; 0x30
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	98 ab       	std	Y+48, r25	; 0x30
     ffc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1000:	98 a9       	ldd	r25, Y+48	; 0x30
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f7       	brne	.-38     	; 0xfe0 <main+0xa76>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <main+0xac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	69 a9       	ldd	r22, Y+49	; 0x31
    100a:	7a a9       	ldd	r23, Y+50	; 0x32
    100c:	8b a9       	ldd	r24, Y+51	; 0x33
    100e:	9c a9       	ldd	r25, Y+52	; 0x34
    1010:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	98 ab       	std	Y+48, r25	; 0x30
    101a:	8f a7       	std	Y+47, r24	; 0x2f
    101c:	8f a5       	ldd	r24, Y+47	; 0x2f
    101e:	98 a9       	ldd	r25, Y+48	; 0x30
    1020:	9c a7       	std	Y+44, r25	; 0x2c
    1022:	8b a7       	std	Y+43, r24	; 0x2b
    1024:	8b a5       	ldd	r24, Y+43	; 0x2b
    1026:	9c a5       	ldd	r25, Y+44	; 0x2c
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <main+0xabe>
    102c:	9c a7       	std	Y+44, r25	; 0x2c
    102e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(200);
        LED(1);
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a8 e4       	ldi	r26, 0x48	; 72
    103e:	b3 e4       	ldi	r27, 0x43	; 67
    1040:	8f a3       	std	Y+39, r24	; 0x27
    1042:	98 a7       	std	Y+40, r25	; 0x28
    1044:	a9 a7       	std	Y+41, r26	; 0x29
    1046:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1048:	6f a1       	ldd	r22, Y+39	; 0x27
    104a:	78 a5       	ldd	r23, Y+40	; 0x28
    104c:	89 a5       	ldd	r24, Y+41	; 0x29
    104e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	4a e7       	ldi	r20, 0x7A	; 122
    1056:	55 e4       	ldi	r21, 0x45	; 69
    1058:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8b a3       	std	Y+35, r24	; 0x23
    1062:	9c a3       	std	Y+36, r25	; 0x24
    1064:	ad a3       	std	Y+37, r26	; 0x25
    1066:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1068:	6b a1       	ldd	r22, Y+35	; 0x23
    106a:	7c a1       	ldd	r23, Y+36	; 0x24
    106c:	8d a1       	ldd	r24, Y+37	; 0x25
    106e:	9e a1       	ldd	r25, Y+38	; 0x26
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    107c:	88 23       	and	r24, r24
    107e:	2c f4       	brge	.+10     	; 0x108a <main+0xb20>
		__ticks = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9a a3       	std	Y+34, r25	; 0x22
    1086:	89 a3       	std	Y+33, r24	; 0x21
    1088:	3f c0       	rjmp	.+126    	; 0x1108 <main+0xb9e>
	else if (__tmp > 65535)
    108a:	6b a1       	ldd	r22, Y+35	; 0x23
    108c:	7c a1       	ldd	r23, Y+36	; 0x24
    108e:	8d a1       	ldd	r24, Y+37	; 0x25
    1090:	9e a1       	ldd	r25, Y+38	; 0x26
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	3f ef       	ldi	r19, 0xFF	; 255
    1096:	4f e7       	ldi	r20, 0x7F	; 127
    1098:	57 e4       	ldi	r21, 0x47	; 71
    109a:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    109e:	18 16       	cp	r1, r24
    10a0:	4c f5       	brge	.+82     	; 0x10f4 <main+0xb8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a2:	6f a1       	ldd	r22, Y+39	; 0x27
    10a4:	78 a5       	ldd	r23, Y+40	; 0x28
    10a6:	89 a5       	ldd	r24, Y+41	; 0x29
    10a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9a a3       	std	Y+34, r25	; 0x22
    10c8:	89 a3       	std	Y+33, r24	; 0x21
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <main+0xb80>
    10cc:	80 e9       	ldi	r24, 0x90	; 144
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	98 a3       	std	Y+32, r25	; 0x20
    10d2:	8f 8f       	std	Y+31, r24	; 0x1f
    10d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d6:	98 a1       	ldd	r25, Y+32	; 0x20
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <main+0xb6e>
    10dc:	98 a3       	std	Y+32, r25	; 0x20
    10de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	89 a1       	ldd	r24, Y+33	; 0x21
    10e2:	9a a1       	ldd	r25, Y+34	; 0x22
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9a a3       	std	Y+34, r25	; 0x22
    10e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	89 a1       	ldd	r24, Y+33	; 0x21
    10ec:	9a a1       	ldd	r25, Y+34	; 0x22
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	69 f7       	brne	.-38     	; 0x10cc <main+0xb62>
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <main+0xbb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f4:	6b a1       	ldd	r22, Y+35	; 0x23
    10f6:	7c a1       	ldd	r23, Y+36	; 0x24
    10f8:	8d a1       	ldd	r24, Y+37	; 0x25
    10fa:	9e a1       	ldd	r25, Y+38	; 0x26
    10fc:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9a a3       	std	Y+34, r25	; 0x22
    1106:	89 a3       	std	Y+33, r24	; 0x21
    1108:	89 a1       	ldd	r24, Y+33	; 0x21
    110a:	9a a1       	ldd	r25, Y+34	; 0x22
    110c:	9e 8f       	std	Y+30, r25	; 0x1e
    110e:	8d 8f       	std	Y+29, r24	; 0x1d
    1110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1112:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <main+0xbaa>
    1118:	9e 8f       	std	Y+30, r25	; 0x1e
    111a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(200);
    LED(3);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a8 e4       	ldi	r26, 0x48	; 72
    112a:	b3 e4       	ldi	r27, 0x43	; 67
    112c:	89 8f       	std	Y+25, r24	; 0x19
    112e:	9a 8f       	std	Y+26, r25	; 0x1a
    1130:	ab 8f       	std	Y+27, r26	; 0x1b
    1132:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1134:	69 8d       	ldd	r22, Y+25	; 0x19
    1136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    113a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	4a e7       	ldi	r20, 0x7A	; 122
    1142:	55 e4       	ldi	r21, 0x45	; 69
    1144:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	8d 8b       	std	Y+21, r24	; 0x15
    114e:	9e 8b       	std	Y+22, r25	; 0x16
    1150:	af 8b       	std	Y+23, r26	; 0x17
    1152:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1154:	6d 89       	ldd	r22, Y+21	; 0x15
    1156:	7e 89       	ldd	r23, Y+22	; 0x16
    1158:	8f 89       	ldd	r24, Y+23	; 0x17
    115a:	98 8d       	ldd	r25, Y+24	; 0x18
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	5f e3       	ldi	r21, 0x3F	; 63
    1164:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1168:	88 23       	and	r24, r24
    116a:	2c f4       	brge	.+10     	; 0x1176 <main+0xc0c>
		__ticks = 1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9c 8b       	std	Y+20, r25	; 0x14
    1172:	8b 8b       	std	Y+19, r24	; 0x13
    1174:	3f c0       	rjmp	.+126    	; 0x11f4 <main+0xc8a>
	else if (__tmp > 65535)
    1176:	6d 89       	ldd	r22, Y+21	; 0x15
    1178:	7e 89       	ldd	r23, Y+22	; 0x16
    117a:	8f 89       	ldd	r24, Y+23	; 0x17
    117c:	98 8d       	ldd	r25, Y+24	; 0x18
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	57 e4       	ldi	r21, 0x47	; 71
    1186:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    118a:	18 16       	cp	r1, r24
    118c:	4c f5       	brge	.+82     	; 0x11e0 <main+0xc76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118e:	69 8d       	ldd	r22, Y+25	; 0x19
    1190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	51 e4       	ldi	r21, 0x41	; 65
    119e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9c 8b       	std	Y+20, r25	; 0x14
    11b4:	8b 8b       	std	Y+19, r24	; 0x13
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <main+0xc6c>
    11b8:	80 e9       	ldi	r24, 0x90	; 144
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	9a 8b       	std	Y+18, r25	; 0x12
    11be:	89 8b       	std	Y+17, r24	; 0x11
    11c0:	89 89       	ldd	r24, Y+17	; 0x11
    11c2:	9a 89       	ldd	r25, Y+18	; 0x12
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <main+0xc5a>
    11c8:	9a 8b       	std	Y+18, r25	; 0x12
    11ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	69 f7       	brne	.-38     	; 0x11b8 <main+0xc4e>
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <main+0xc9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e0:	6d 89       	ldd	r22, Y+21	; 0x15
    11e2:	7e 89       	ldd	r23, Y+22	; 0x16
    11e4:	8f 89       	ldd	r24, Y+23	; 0x17
    11e6:	98 8d       	ldd	r25, Y+24	; 0x18
    11e8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9c 8b       	std	Y+20, r25	; 0x14
    11f2:	8b 8b       	std	Y+19, r24	; 0x13
    11f4:	8b 89       	ldd	r24, Y+19	; 0x13
    11f6:	9c 89       	ldd	r25, Y+20	; 0x14
    11f8:	98 8b       	std	Y+16, r25	; 0x10
    11fa:	8f 87       	std	Y+15, r24	; 0x0f
    11fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fe:	98 89       	ldd	r25, Y+16	; 0x10
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <main+0xc96>
    1204:	98 8b       	std	Y+16, r25	; 0x10
    1206:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
    LED(2);
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a8 e4       	ldi	r26, 0x48	; 72
    1216:	b3 e4       	ldi	r27, 0x43	; 67
    1218:	8b 87       	std	Y+11, r24	; 0x0b
    121a:	9c 87       	std	Y+12, r25	; 0x0c
    121c:	ad 87       	std	Y+13, r26	; 0x0d
    121e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	7c 85       	ldd	r23, Y+12	; 0x0c
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a e7       	ldi	r20, 0x7A	; 122
    122e:	55 e4       	ldi	r21, 0x45	; 69
    1230:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8f 83       	std	Y+7, r24	; 0x07
    123a:	98 87       	std	Y+8, r25	; 0x08
    123c:	a9 87       	std	Y+9, r26	; 0x09
    123e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <main+0xcf8>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <main+0xd76>
	else if (__tmp > 65535)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <main+0xd62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <main+0xd58>
    12a4:	80 e9       	ldi	r24, 0x90	; 144
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <main+0xd46>
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <main+0xd3a>
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <main+0xd8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <main+0xd82>
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
    LED(4);
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    12fc:	08 c0       	rjmp	.+16     	; 0x130e <main+0xda4>
     //   distanceUS1 = distance(ultra_1_trigger);
        //distanceUS2 = distance(ultra_2_trigger);

            while ((distance(ultra_1_trigger) < distance_dangerzone)== 0)     //Zolang US sensor geen boom ziet
            {
				LED(1);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
                Vooruit(80);
    1306:	80 e5       	ldi	r24, 0x50	; 80
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <Vooruit>
    {
      //  double distanceUS2 = 0;
     //   distanceUS1 = distance(ultra_1_trigger);
        //distanceUS2 = distance(ultra_2_trigger);

            while ((distance(ultra_1_trigger) < distance_dangerzone)== 0)     //Zolang US sensor geen boom ziet
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <distance>
    1316:	84 31       	cpi	r24, 0x14	; 20
    1318:	91 05       	cpc	r25, r1
    131a:	8c f7       	brge	.-30     	; 0x12fe <main+0xd94>
            {
				LED(1);
                Vooruit(80);
				//distanceUS1 = distance(ultra_1_trigger);
            }
            LED(6);
    131c:	86 e0       	ldi	r24, 0x06	; 6
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    1324:	f4 cf       	rjmp	.-24     	; 0x130e <main+0xda4>

00001326 <init_steppermotor>:
#include <avr/io.h>
#include <util/delay.h>
#include "steppermotor.h"

void init_steppermotor(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    DDRStepper1 |= (1 << PStepper1_1); // PIN 30
    132e:	a7 e2       	ldi	r26, 0x27	; 39
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e7 e2       	ldi	r30, 0x27	; 39
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 68       	ori	r24, 0x80	; 128
    133a:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_2); // PIN 32
    133c:	a7 e2       	ldi	r26, 0x27	; 39
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e7 e2       	ldi	r30, 0x27	; 39
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 62       	ori	r24, 0x20	; 32
    1348:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_3); // PIN 34
    134a:	a7 e2       	ldi	r26, 0x27	; 39
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e7 e2       	ldi	r30, 0x27	; 39
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	88 60       	ori	r24, 0x08	; 8
    1356:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_4); // PIN 36
    1358:	a7 e2       	ldi	r26, 0x27	; 39
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e7 e2       	ldi	r30, 0x27	; 39
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	82 60       	ori	r24, 0x02	; 2
    1364:	8c 93       	st	X, r24

    DDRStepper2 |= (1 << PStepper2_1); // PIN 31
    1366:	a7 e2       	ldi	r26, 0x27	; 39
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e7 e2       	ldi	r30, 0x27	; 39
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_2); // PIN 33
    1374:	a7 e2       	ldi	r26, 0x27	; 39
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e7 e2       	ldi	r30, 0x27	; 39
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 61       	ori	r24, 0x10	; 16
    1380:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_3); // PIN 35
    1382:	a7 e2       	ldi	r26, 0x27	; 39
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 e2       	ldi	r30, 0x27	; 39
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	84 60       	ori	r24, 0x04	; 4
    138e:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_4); // PIN 37
    1390:	a7 e2       	ldi	r26, 0x27	; 39
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e7 e2       	ldi	r30, 0x27	; 39
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 42
    139e:	aa e0       	ldi	r26, 0x0A	; 10
    13a0:	b1 e0       	ldi	r27, 0x01	; 1
    13a2:	ea e0       	ldi	r30, 0x0A	; 10
    13a4:	f1 e0       	ldi	r31, 0x01	; 1
    13a6:	80 81       	ld	r24, Z
    13a8:	80 68       	ori	r24, 0x80	; 128
    13aa:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 44
    13ac:	aa e0       	ldi	r26, 0x0A	; 10
    13ae:	b1 e0       	ldi	r27, 0x01	; 1
    13b0:	ea e0       	ldi	r30, 0x0A	; 10
    13b2:	f1 e0       	ldi	r31, 0x01	; 1
    13b4:	80 81       	ld	r24, Z
    13b6:	80 62       	ori	r24, 0x20	; 32
    13b8:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 46
    13ba:	aa e0       	ldi	r26, 0x0A	; 10
    13bc:	b1 e0       	ldi	r27, 0x01	; 1
    13be:	ea e0       	ldi	r30, 0x0A	; 10
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	80 81       	ld	r24, Z
    13c4:	88 60       	ori	r24, 0x08	; 8
    13c6:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 48
    13c8:	aa e0       	ldi	r26, 0x0A	; 10
    13ca:	b1 e0       	ldi	r27, 0x01	; 1
    13cc:	ea e0       	ldi	r30, 0x0A	; 10
    13ce:	f1 e0       	ldi	r31, 0x01	; 1
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 43
    13d6:	aa e0       	ldi	r26, 0x0A	; 10
    13d8:	b1 e0       	ldi	r27, 0x01	; 1
    13da:	ea e0       	ldi	r30, 0x0A	; 10
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	80 81       	ld	r24, Z
    13e0:	80 68       	ori	r24, 0x80	; 128
    13e2:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 45
    13e4:	aa e0       	ldi	r26, 0x0A	; 10
    13e6:	b1 e0       	ldi	r27, 0x01	; 1
    13e8:	ea e0       	ldi	r30, 0x0A	; 10
    13ea:	f1 e0       	ldi	r31, 0x01	; 1
    13ec:	80 81       	ld	r24, Z
    13ee:	80 62       	ori	r24, 0x20	; 32
    13f0:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 47
    13f2:	aa e0       	ldi	r26, 0x0A	; 10
    13f4:	b1 e0       	ldi	r27, 0x01	; 1
    13f6:	ea e0       	ldi	r30, 0x0A	; 10
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	80 81       	ld	r24, Z
    13fc:	88 60       	ori	r24, 0x08	; 8
    13fe:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
    1400:	aa e0       	ldi	r26, 0x0A	; 10
    1402:	b1 e0       	ldi	r27, 0x01	; 1
    1404:	ea e0       	ldi	r30, 0x0A	; 10
    1406:	f1 e0       	ldi	r31, 0x01	; 1
    1408:	80 81       	ld	r24, Z
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	8c 93       	st	X, r24
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <steppermotor1Write>:

void steppermotor1Write(int a)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	ea 97       	sbiw	r28, 0x3a	; 58
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	9e ab       	std	Y+54, r25	; 0x36
    142a:	8d ab       	std	Y+53, r24	; 0x35
    142c:	f1 c1       	rjmp	.+994    	; 0x1810 <steppermotor1Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9c ab       	std	Y+52, r25	; 0x34
    1434:	8b ab       	std	Y+51, r24	; 0x33
    1436:	e4 c1       	rjmp	.+968    	; 0x1800 <steppermotor1Write+0x3ec>
        {
            switch (i)
    1438:	8b a9       	ldd	r24, Y+51	; 0x33
    143a:	9c a9       	ldd	r25, Y+52	; 0x34
    143c:	98 af       	std	Y+56, r25	; 0x38
    143e:	8f ab       	std	Y+55, r24	; 0x37
    1440:	8f a9       	ldd	r24, Y+55	; 0x37
    1442:	98 ad       	ldd	r25, Y+56	; 0x38
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	91 05       	cpc	r25, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <steppermotor1Write+0x38>
    144a:	87 c0       	rjmp	.+270    	; 0x155a <steppermotor1Write+0x146>
    144c:	8f a9       	ldd	r24, Y+55	; 0x37
    144e:	98 ad       	ldd	r25, Y+56	; 0x38
    1450:	85 30       	cpi	r24, 0x05	; 5
    1452:	91 05       	cpc	r25, r1
    1454:	94 f4       	brge	.+36     	; 0x147a <steppermotor1Write+0x66>
    1456:	8f a9       	ldd	r24, Y+55	; 0x37
    1458:	98 ad       	ldd	r25, Y+56	; 0x38
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	91 05       	cpc	r25, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <steppermotor1Write+0x4e>
    1460:	42 c0       	rjmp	.+132    	; 0x14e6 <steppermotor1Write+0xd2>
    1462:	8f a9       	ldd	r24, Y+55	; 0x37
    1464:	98 ad       	ldd	r25, Y+56	; 0x38
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	0c f0       	brlt	.+2      	; 0x146e <steppermotor1Write+0x5a>
    146c:	59 c0       	rjmp	.+178    	; 0x1520 <steppermotor1Write+0x10c>
    146e:	8f a9       	ldd	r24, Y+55	; 0x37
    1470:	98 ad       	ldd	r25, Y+56	; 0x38
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	d1 f0       	breq	.+52     	; 0x14ac <steppermotor1Write+0x98>
    1478:	00 c1       	rjmp	.+512    	; 0x167a <steppermotor1Write+0x266>
    147a:	8f a9       	ldd	r24, Y+55	; 0x37
    147c:	98 ad       	ldd	r25, Y+56	; 0x38
    147e:	86 30       	cpi	r24, 0x06	; 6
    1480:	91 05       	cpc	r25, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <steppermotor1Write+0x72>
    1484:	a4 c0       	rjmp	.+328    	; 0x15ce <steppermotor1Write+0x1ba>
    1486:	8f a9       	ldd	r24, Y+55	; 0x37
    1488:	98 ad       	ldd	r25, Y+56	; 0x38
    148a:	86 30       	cpi	r24, 0x06	; 6
    148c:	91 05       	cpc	r25, r1
    148e:	0c f4       	brge	.+2      	; 0x1492 <steppermotor1Write+0x7e>
    1490:	81 c0       	rjmp	.+258    	; 0x1594 <steppermotor1Write+0x180>
    1492:	8f a9       	ldd	r24, Y+55	; 0x37
    1494:	98 ad       	ldd	r25, Y+56	; 0x38
    1496:	87 30       	cpi	r24, 0x07	; 7
    1498:	91 05       	cpc	r25, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <steppermotor1Write+0x8a>
    149c:	b5 c0       	rjmp	.+362    	; 0x1608 <steppermotor1Write+0x1f4>
    149e:	8f a9       	ldd	r24, Y+55	; 0x37
    14a0:	98 ad       	ldd	r25, Y+56	; 0x38
    14a2:	88 30       	cpi	r24, 0x08	; 8
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <steppermotor1Write+0x96>
    14a8:	cc c0       	rjmp	.+408    	; 0x1642 <steppermotor1Write+0x22e>
    14aa:	e7 c0       	rjmp	.+462    	; 0x167a <steppermotor1Write+0x266>
            {
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
    14ac:	a8 e2       	ldi	r26, 0x28	; 40
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e8 e2       	ldi	r30, 0x28	; 40
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 68       	ori	r24, 0x80	; 128
    14b8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    14ba:	a8 e2       	ldi	r26, 0x28	; 40
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e8 e2       	ldi	r30, 0x28	; 40
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7d       	andi	r24, 0xDF	; 223
    14c6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    14c8:	a8 e2       	ldi	r26, 0x28	; 40
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e2       	ldi	r30, 0x28	; 40
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	87 7f       	andi	r24, 0xF7	; 247
    14d4:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    14d6:	a8 e2       	ldi	r26, 0x28	; 40
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e2       	ldi	r30, 0x28	; 40
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8d 7f       	andi	r24, 0xFD	; 253
    14e2:	8c 93       	st	X, r24
    14e4:	ca c0       	rjmp	.+404    	; 0x167a <steppermotor1Write+0x266>
                break;
            case 2 :
                PORTStepper1 |= (1 << PStepper1_1);
    14e6:	a8 e2       	ldi	r26, 0x28	; 40
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e8 e2       	ldi	r30, 0x28	; 40
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 68       	ori	r24, 0x80	; 128
    14f2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    14f4:	a8 e2       	ldi	r26, 0x28	; 40
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e2       	ldi	r30, 0x28	; 40
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 62       	ori	r24, 0x20	; 32
    1500:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1502:	a8 e2       	ldi	r26, 0x28	; 40
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e8 e2       	ldi	r30, 0x28	; 40
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	87 7f       	andi	r24, 0xF7	; 247
    150e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1510:	a8 e2       	ldi	r26, 0x28	; 40
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e8 e2       	ldi	r30, 0x28	; 40
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8d 7f       	andi	r24, 0xFD	; 253
    151c:	8c 93       	st	X, r24
    151e:	ad c0       	rjmp	.+346    	; 0x167a <steppermotor1Write+0x266>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1520:	a8 e2       	ldi	r26, 0x28	; 40
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e8 e2       	ldi	r30, 0x28	; 40
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 77       	andi	r24, 0x7F	; 127
    152c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    152e:	a8 e2       	ldi	r26, 0x28	; 40
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e8 e2       	ldi	r30, 0x28	; 40
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 62       	ori	r24, 0x20	; 32
    153a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    153c:	a8 e2       	ldi	r26, 0x28	; 40
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e8 e2       	ldi	r30, 0x28	; 40
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	87 7f       	andi	r24, 0xF7	; 247
    1548:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    154a:	a8 e2       	ldi	r26, 0x28	; 40
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e2       	ldi	r30, 0x28	; 40
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8d 7f       	andi	r24, 0xFD	; 253
    1556:	8c 93       	st	X, r24
    1558:	90 c0       	rjmp	.+288    	; 0x167a <steppermotor1Write+0x266>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    155a:	a8 e2       	ldi	r26, 0x28	; 40
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e8 e2       	ldi	r30, 0x28	; 40
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 77       	andi	r24, 0x7F	; 127
    1566:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    1568:	a8 e2       	ldi	r26, 0x28	; 40
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e8 e2       	ldi	r30, 0x28	; 40
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 62       	ori	r24, 0x20	; 32
    1574:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    1576:	a8 e2       	ldi	r26, 0x28	; 40
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e8 e2       	ldi	r30, 0x28	; 40
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 60       	ori	r24, 0x08	; 8
    1582:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1584:	a8 e2       	ldi	r26, 0x28	; 40
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e2       	ldi	r30, 0x28	; 40
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8d 7f       	andi	r24, 0xFD	; 253
    1590:	8c 93       	st	X, r24
    1592:	73 c0       	rjmp	.+230    	; 0x167a <steppermotor1Write+0x266>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1594:	a8 e2       	ldi	r26, 0x28	; 40
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e8 e2       	ldi	r30, 0x28	; 40
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 77       	andi	r24, 0x7F	; 127
    15a0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    15a2:	a8 e2       	ldi	r26, 0x28	; 40
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e8 e2       	ldi	r30, 0x28	; 40
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 7d       	andi	r24, 0xDF	; 223
    15ae:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    15b0:	a8 e2       	ldi	r26, 0x28	; 40
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e2       	ldi	r30, 0x28	; 40
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	88 60       	ori	r24, 0x08	; 8
    15bc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    15be:	a8 e2       	ldi	r26, 0x28	; 40
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e2       	ldi	r30, 0x28	; 40
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8d 7f       	andi	r24, 0xFD	; 253
    15ca:	8c 93       	st	X, r24
    15cc:	56 c0       	rjmp	.+172    	; 0x167a <steppermotor1Write+0x266>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    15ce:	a8 e2       	ldi	r26, 0x28	; 40
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e8 e2       	ldi	r30, 0x28	; 40
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 77       	andi	r24, 0x7F	; 127
    15da:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    15dc:	a8 e2       	ldi	r26, 0x28	; 40
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e8 e2       	ldi	r30, 0x28	; 40
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 7d       	andi	r24, 0xDF	; 223
    15e8:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    15ea:	a8 e2       	ldi	r26, 0x28	; 40
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e8 e2       	ldi	r30, 0x28	; 40
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	88 60       	ori	r24, 0x08	; 8
    15f6:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    15f8:	a8 e2       	ldi	r26, 0x28	; 40
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e2       	ldi	r30, 0x28	; 40
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	82 60       	ori	r24, 0x02	; 2
    1604:	8c 93       	st	X, r24
    1606:	39 c0       	rjmp	.+114    	; 0x167a <steppermotor1Write+0x266>
                break;
            case 7 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1608:	a8 e2       	ldi	r26, 0x28	; 40
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e8 e2       	ldi	r30, 0x28	; 40
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 77       	andi	r24, 0x7F	; 127
    1614:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1616:	a8 e2       	ldi	r26, 0x28	; 40
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e2       	ldi	r30, 0x28	; 40
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7d       	andi	r24, 0xDF	; 223
    1622:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1624:	a8 e2       	ldi	r26, 0x28	; 40
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e2       	ldi	r30, 0x28	; 40
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	87 7f       	andi	r24, 0xF7	; 247
    1630:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    1632:	a8 e2       	ldi	r26, 0x28	; 40
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e2       	ldi	r30, 0x28	; 40
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	82 60       	ori	r24, 0x02	; 2
    163e:	8c 93       	st	X, r24
    1640:	1c c0       	rjmp	.+56     	; 0x167a <steppermotor1Write+0x266>
                break;
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
    1642:	a8 e2       	ldi	r26, 0x28	; 40
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e8 e2       	ldi	r30, 0x28	; 40
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1650:	a8 e2       	ldi	r26, 0x28	; 40
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e8 e2       	ldi	r30, 0x28	; 40
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7d       	andi	r24, 0xDF	; 223
    165c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    165e:	a8 e2       	ldi	r26, 0x28	; 40
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e8 e2       	ldi	r30, 0x28	; 40
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	87 7f       	andi	r24, 0xF7	; 247
    166a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    166c:	a8 e2       	ldi	r26, 0x28	; 40
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e8 e2       	ldi	r30, 0x28	; 40
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	8c 93       	st	X, r24
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	af e2       	ldi	r26, 0x2F	; 47
    1680:	b4 e4       	ldi	r27, 0x44	; 68
    1682:	8d a7       	std	Y+45, r24	; 0x2d
    1684:	9e a7       	std	Y+46, r25	; 0x2e
    1686:	af a7       	std	Y+47, r26	; 0x2f
    1688:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    168a:	6d a5       	ldd	r22, Y+45	; 0x2d
    168c:	7e a5       	ldd	r23, Y+46	; 0x2e
    168e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1690:	98 a9       	ldd	r25, Y+48	; 0x30
    1692:	2b ea       	ldi	r18, 0xAB	; 171
    1694:	3a ea       	ldi	r19, 0xAA	; 170
    1696:	4a ea       	ldi	r20, 0xAA	; 170
    1698:	50 e4       	ldi	r21, 0x40	; 64
    169a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	89 a7       	std	Y+41, r24	; 0x29
    16a4:	9a a7       	std	Y+42, r25	; 0x2a
    16a6:	ab a7       	std	Y+43, r26	; 0x2b
    16a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16aa:	69 a5       	ldd	r22, Y+41	; 0x29
    16ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    16ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	1c f4       	brge	.+6      	; 0x16c8 <steppermotor1Write+0x2b4>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	88 a7       	std	Y+40, r24	; 0x28
    16c6:	91 c0       	rjmp	.+290    	; 0x17ea <steppermotor1Write+0x3d6>
	else if (__tmp > 255)
    16c8:	69 a5       	ldd	r22, Y+41	; 0x29
    16ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    16cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	53 e4       	ldi	r21, 0x43	; 67
    16d8:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	0c f0       	brlt	.+2      	; 0x16e2 <steppermotor1Write+0x2ce>
    16e0:	7b c0       	rjmp	.+246    	; 0x17d8 <steppermotor1Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    16e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    16e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    16e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e8:	98 a9       	ldd	r25, Y+48	; 0x30
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a e7       	ldi	r20, 0x7A	; 122
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8c a3       	std	Y+36, r24	; 0x24
    16fc:	9d a3       	std	Y+37, r25	; 0x25
    16fe:	ae a3       	std	Y+38, r26	; 0x26
    1700:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	6c a1       	ldd	r22, Y+36	; 0x24
    1704:	7d a1       	ldd	r23, Y+37	; 0x25
    1706:	8e a1       	ldd	r24, Y+38	; 0x26
    1708:	9f a1       	ldd	r25, Y+39	; 0x27
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4a e7       	ldi	r20, 0x7A	; 122
    1710:	55 e4       	ldi	r21, 0x45	; 69
    1712:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	88 a3       	std	Y+32, r24	; 0x20
    171c:	99 a3       	std	Y+33, r25	; 0x21
    171e:	aa a3       	std	Y+34, r26	; 0x22
    1720:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1722:	68 a1       	ldd	r22, Y+32	; 0x20
    1724:	79 a1       	ldd	r23, Y+33	; 0x21
    1726:	8a a1       	ldd	r24, Y+34	; 0x22
    1728:	9b a1       	ldd	r25, Y+35	; 0x23
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	2c f4       	brge	.+10     	; 0x1744 <steppermotor1Write+0x330>
		__ticks = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9f 8f       	std	Y+31, r25	; 0x1f
    1740:	8e 8f       	std	Y+30, r24	; 0x1e
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <steppermotor1Write+0x3ae>
	else if (__tmp > 65535)
    1744:	68 a1       	ldd	r22, Y+32	; 0x20
    1746:	79 a1       	ldd	r23, Y+33	; 0x21
    1748:	8a a1       	ldd	r24, Y+34	; 0x22
    174a:	9b a1       	ldd	r25, Y+35	; 0x23
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	57 e4       	ldi	r21, 0x47	; 71
    1754:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	4c f5       	brge	.+82     	; 0x17ae <steppermotor1Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	6c a1       	ldd	r22, Y+36	; 0x24
    175e:	7d a1       	ldd	r23, Y+37	; 0x25
    1760:	8e a1       	ldd	r24, Y+38	; 0x26
    1762:	9f a1       	ldd	r25, Y+39	; 0x27
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9f 8f       	std	Y+31, r25	; 0x1f
    1782:	8e 8f       	std	Y+30, r24	; 0x1e
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <steppermotor1Write+0x390>
    1786:	80 e9       	ldi	r24, 0x90	; 144
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	9d 8f       	std	Y+29, r25	; 0x1d
    178c:	8c 8f       	std	Y+28, r24	; 0x1c
    178e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1790:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <steppermotor1Write+0x37e>
    1796:	9d 8f       	std	Y+29, r25	; 0x1d
    1798:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    179c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	9f 8f       	std	Y+31, r25	; 0x1f
    17a2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f7       	brne	.-38     	; 0x1786 <steppermotor1Write+0x372>
    17ac:	24 c0       	rjmp	.+72     	; 0x17f6 <steppermotor1Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	68 a1       	ldd	r22, Y+32	; 0x20
    17b0:	79 a1       	ldd	r23, Y+33	; 0x21
    17b2:	8a a1       	ldd	r24, Y+34	; 0x22
    17b4:	9b a1       	ldd	r25, Y+35	; 0x23
    17b6:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9f 8f       	std	Y+31, r25	; 0x1f
    17c0:	8e 8f       	std	Y+30, r24	; 0x1e
    17c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17c6:	9b 8f       	std	Y+27, r25	; 0x1b
    17c8:	8a 8f       	std	Y+26, r24	; 0x1a
    17ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <steppermotor1Write+0x3ba>
    17d2:	9b 8f       	std	Y+27, r25	; 0x1b
    17d4:	8a 8f       	std	Y+26, r24	; 0x1a
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <steppermotor1Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17d8:	69 a5       	ldd	r22, Y+41	; 0x29
    17da:	7a a5       	ldd	r23, Y+42	; 0x2a
    17dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17de:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	88 a7       	std	Y+40, r24	; 0x28
    17ea:	88 a5       	ldd	r24, Y+40	; 0x28
    17ec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17ee:	89 8d       	ldd	r24, Y+25	; 0x19
    17f0:	8a 95       	dec	r24
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <steppermotor1Write+0x3dc>
    17f4:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor1Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    17f6:	8b a9       	ldd	r24, Y+51	; 0x33
    17f8:	9c a9       	ldd	r25, Y+52	; 0x34
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	9c ab       	std	Y+52, r25	; 0x34
    17fe:	8b ab       	std	Y+51, r24	; 0x33
    1800:	8b a9       	ldd	r24, Y+51	; 0x33
    1802:	9c a9       	ldd	r25, Y+52	; 0x34
    1804:	88 30       	cpi	r24, 0x08	; 8
    1806:	91 05       	cpc	r25, r1
    1808:	0c f4       	brge	.+2      	; 0x180c <steppermotor1Write+0x3f8>
    180a:	16 ce       	rjmp	.-980    	; 0x1438 <steppermotor1Write+0x24>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    180c:	1e aa       	std	Y+54, r1	; 0x36
    180e:	1d aa       	std	Y+53, r1	; 0x35
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
}

void steppermotor1Write(int a)
{
    while(a  == 1)
    1810:	8d a9       	ldd	r24, Y+53	; 0x35
    1812:	9e a9       	ldd	r25, Y+54	; 0x36
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <steppermotor1Write+0x408>
    181a:	09 ce       	rjmp	.-1006   	; 0x142e <steppermotor1Write+0x1a>
    181c:	f0 c1       	rjmp	.+992    	; 0x1bfe <steppermotor1Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    181e:	88 e0       	ldi	r24, 0x08	; 8
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9a ab       	std	Y+50, r25	; 0x32
    1824:	89 ab       	std	Y+49, r24	; 0x31
    1826:	e3 c1       	rjmp	.+966    	; 0x1bee <steppermotor1Write+0x7da>
        {
            switch (i)
    1828:	89 a9       	ldd	r24, Y+49	; 0x31
    182a:	9a a9       	ldd	r25, Y+50	; 0x32
    182c:	9a af       	std	Y+58, r25	; 0x3a
    182e:	89 af       	std	Y+57, r24	; 0x39
    1830:	89 ad       	ldd	r24, Y+57	; 0x39
    1832:	9a ad       	ldd	r25, Y+58	; 0x3a
    1834:	84 30       	cpi	r24, 0x04	; 4
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <steppermotor1Write+0x428>
    183a:	a3 c0       	rjmp	.+326    	; 0x1982 <steppermotor1Write+0x56e>
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1840:	85 30       	cpi	r24, 0x05	; 5
    1842:	91 05       	cpc	r25, r1
    1844:	94 f4       	brge	.+36     	; 0x186a <steppermotor1Write+0x456>
    1846:	89 ad       	ldd	r24, Y+57	; 0x39
    1848:	9a ad       	ldd	r25, Y+58	; 0x3a
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <steppermotor1Write+0x43e>
    1850:	5e c0       	rjmp	.+188    	; 0x190e <steppermotor1Write+0x4fa>
    1852:	89 ad       	ldd	r24, Y+57	; 0x39
    1854:	9a ad       	ldd	r25, Y+58	; 0x3a
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	0c f0       	brlt	.+2      	; 0x185e <steppermotor1Write+0x44a>
    185c:	75 c0       	rjmp	.+234    	; 0x1948 <steppermotor1Write+0x534>
    185e:	89 ad       	ldd	r24, Y+57	; 0x39
    1860:	9a ad       	ldd	r25, Y+58	; 0x3a
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	b1 f1       	breq	.+108    	; 0x18d4 <steppermotor1Write+0x4c0>
    1868:	ff c0       	rjmp	.+510    	; 0x1a68 <steppermotor1Write+0x654>
    186a:	89 ad       	ldd	r24, Y+57	; 0x39
    186c:	9a ad       	ldd	r25, Y+58	; 0x3a
    186e:	86 30       	cpi	r24, 0x06	; 6
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <steppermotor1Write+0x462>
    1874:	c0 c0       	rjmp	.+384    	; 0x19f6 <steppermotor1Write+0x5e2>
    1876:	89 ad       	ldd	r24, Y+57	; 0x39
    1878:	9a ad       	ldd	r25, Y+58	; 0x3a
    187a:	86 30       	cpi	r24, 0x06	; 6
    187c:	91 05       	cpc	r25, r1
    187e:	0c f4       	brge	.+2      	; 0x1882 <steppermotor1Write+0x46e>
    1880:	9d c0       	rjmp	.+314    	; 0x19bc <steppermotor1Write+0x5a8>
    1882:	89 ad       	ldd	r24, Y+57	; 0x39
    1884:	9a ad       	ldd	r25, Y+58	; 0x3a
    1886:	87 30       	cpi	r24, 0x07	; 7
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <steppermotor1Write+0x47a>
    188c:	d1 c0       	rjmp	.+418    	; 0x1a30 <steppermotor1Write+0x61c>
    188e:	89 ad       	ldd	r24, Y+57	; 0x39
    1890:	9a ad       	ldd	r25, Y+58	; 0x3a
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	91 05       	cpc	r25, r1
    1896:	09 f0       	breq	.+2      	; 0x189a <steppermotor1Write+0x486>
    1898:	e7 c0       	rjmp	.+462    	; 0x1a68 <steppermotor1Write+0x654>
            {
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
    189a:	a8 e2       	ldi	r26, 0x28	; 40
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e2       	ldi	r30, 0x28	; 40
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    18a8:	a8 e2       	ldi	r26, 0x28	; 40
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e8 e2       	ldi	r30, 0x28	; 40
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7d       	andi	r24, 0xDF	; 223
    18b4:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    18b6:	a8 e2       	ldi	r26, 0x28	; 40
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e8 e2       	ldi	r30, 0x28	; 40
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	87 7f       	andi	r24, 0xF7	; 247
    18c2:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    18c4:	a8 e2       	ldi	r26, 0x28	; 40
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e8 e2       	ldi	r30, 0x28	; 40
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8d 7f       	andi	r24, 0xFD	; 253
    18d0:	8c 93       	st	X, r24
    18d2:	ca c0       	rjmp	.+404    	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
    18d4:	a8 e2       	ldi	r26, 0x28	; 40
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e8 e2       	ldi	r30, 0x28	; 40
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    18e2:	a8 e2       	ldi	r26, 0x28	; 40
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e2       	ldi	r30, 0x28	; 40
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    18f0:	a8 e2       	ldi	r26, 0x28	; 40
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e8 e2       	ldi	r30, 0x28	; 40
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	87 7f       	andi	r24, 0xF7	; 247
    18fc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    18fe:	a8 e2       	ldi	r26, 0x28	; 40
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e8 e2       	ldi	r30, 0x28	; 40
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8d 7f       	andi	r24, 0xFD	; 253
    190a:	8c 93       	st	X, r24
    190c:	ad c0       	rjmp	.+346    	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 2 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    190e:	a8 e2       	ldi	r26, 0x28	; 40
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e8 e2       	ldi	r30, 0x28	; 40
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8f 77       	andi	r24, 0x7F	; 127
    191a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    191c:	a8 e2       	ldi	r26, 0x28	; 40
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e8 e2       	ldi	r30, 0x28	; 40
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 62       	ori	r24, 0x20	; 32
    1928:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    192a:	a8 e2       	ldi	r26, 0x28	; 40
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e8 e2       	ldi	r30, 0x28	; 40
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	87 7f       	andi	r24, 0xF7	; 247
    1936:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1938:	a8 e2       	ldi	r26, 0x28	; 40
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e8 e2       	ldi	r30, 0x28	; 40
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8d 7f       	andi	r24, 0xFD	; 253
    1944:	8c 93       	st	X, r24
    1946:	90 c0       	rjmp	.+288    	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1948:	a8 e2       	ldi	r26, 0x28	; 40
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e2       	ldi	r30, 0x28	; 40
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8f 77       	andi	r24, 0x7F	; 127
    1954:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
    1956:	a8 e2       	ldi	r26, 0x28	; 40
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e8 e2       	ldi	r30, 0x28	; 40
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	80 62       	ori	r24, 0x20	; 32
    1962:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    1964:	a8 e2       	ldi	r26, 0x28	; 40
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e8 e2       	ldi	r30, 0x28	; 40
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 60       	ori	r24, 0x08	; 8
    1970:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    1972:	a8 e2       	ldi	r26, 0x28	; 40
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e8 e2       	ldi	r30, 0x28	; 40
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8d 7f       	andi	r24, 0xFD	; 253
    197e:	8c 93       	st	X, r24
    1980:	73 c0       	rjmp	.+230    	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    1982:	a8 e2       	ldi	r26, 0x28	; 40
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e8 e2       	ldi	r30, 0x28	; 40
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 77       	andi	r24, 0x7F	; 127
    198e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1990:	a8 e2       	ldi	r26, 0x28	; 40
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e2       	ldi	r30, 0x28	; 40
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8f 7d       	andi	r24, 0xDF	; 223
    199c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    199e:	a8 e2       	ldi	r26, 0x28	; 40
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e8 e2       	ldi	r30, 0x28	; 40
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	88 60       	ori	r24, 0x08	; 8
    19aa:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
    19ac:	a8 e2       	ldi	r26, 0x28	; 40
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e8 e2       	ldi	r30, 0x28	; 40
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8d 7f       	andi	r24, 0xFD	; 253
    19b8:	8c 93       	st	X, r24
    19ba:	56 c0       	rjmp	.+172    	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    19bc:	a8 e2       	ldi	r26, 0x28	; 40
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e8 e2       	ldi	r30, 0x28	; 40
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 77       	andi	r24, 0x7F	; 127
    19c8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    19ca:	a8 e2       	ldi	r26, 0x28	; 40
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e8 e2       	ldi	r30, 0x28	; 40
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7d       	andi	r24, 0xDF	; 223
    19d6:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
    19d8:	a8 e2       	ldi	r26, 0x28	; 40
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e8 e2       	ldi	r30, 0x28	; 40
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	88 60       	ori	r24, 0x08	; 8
    19e4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    19e6:	a8 e2       	ldi	r26, 0x28	; 40
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e8 e2       	ldi	r30, 0x28	; 40
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	8c 93       	st	X, r24
    19f4:	39 c0       	rjmp	.+114    	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
    19f6:	a8 e2       	ldi	r26, 0x28	; 40
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e2       	ldi	r30, 0x28	; 40
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 77       	andi	r24, 0x7F	; 127
    1a02:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1a04:	a8 e2       	ldi	r26, 0x28	; 40
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e2       	ldi	r30, 0x28	; 40
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 7d       	andi	r24, 0xDF	; 223
    1a10:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1a12:	a8 e2       	ldi	r26, 0x28	; 40
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e2       	ldi	r30, 0x28	; 40
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	87 7f       	andi	r24, 0xF7	; 247
    1a1e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    1a20:	a8 e2       	ldi	r26, 0x28	; 40
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e2       	ldi	r30, 0x28	; 40
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	82 60       	ori	r24, 0x02	; 2
    1a2c:	8c 93       	st	X, r24
    1a2e:	1c c0       	rjmp	.+56     	; 0x1a68 <steppermotor1Write+0x654>
                break;
            case 7 :
                PORTStepper1 |= (1 << PStepper1_1);
    1a30:	a8 e2       	ldi	r26, 0x28	; 40
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e8 e2       	ldi	r30, 0x28	; 40
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 68       	ori	r24, 0x80	; 128
    1a3c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
    1a3e:	a8 e2       	ldi	r26, 0x28	; 40
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e8 e2       	ldi	r30, 0x28	; 40
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8f 7d       	andi	r24, 0xDF	; 223
    1a4a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
    1a4c:	a8 e2       	ldi	r26, 0x28	; 40
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e8 e2       	ldi	r30, 0x28	; 40
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	87 7f       	andi	r24, 0xF7	; 247
    1a58:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
    1a5a:	a8 e2       	ldi	r26, 0x28	; 40
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e8 e2       	ldi	r30, 0x28	; 40
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	8c 93       	st	X, r24
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	af e2       	ldi	r26, 0x2F	; 47
    1a6e:	b4 e4       	ldi	r27, 0x44	; 68
    1a70:	8d 8b       	std	Y+21, r24	; 0x15
    1a72:	9e 8b       	std	Y+22, r25	; 0x16
    1a74:	af 8b       	std	Y+23, r26	; 0x17
    1a76:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a78:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a80:	2b ea       	ldi	r18, 0xAB	; 171
    1a82:	3a ea       	ldi	r19, 0xAA	; 170
    1a84:	4a ea       	ldi	r20, 0xAA	; 170
    1a86:	50 e4       	ldi	r21, 0x40	; 64
    1a88:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	89 8b       	std	Y+17, r24	; 0x11
    1a92:	9a 8b       	std	Y+18, r25	; 0x12
    1a94:	ab 8b       	std	Y+19, r26	; 0x13
    1a96:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a98:	69 89       	ldd	r22, Y+17	; 0x11
    1a9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	1c f4       	brge	.+6      	; 0x1ab6 <steppermotor1Write+0x6a2>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	88 8b       	std	Y+16, r24	; 0x10
    1ab4:	91 c0       	rjmp	.+290    	; 0x1bd8 <steppermotor1Write+0x7c4>
	else if (__tmp > 255)
    1ab6:	69 89       	ldd	r22, Y+17	; 0x11
    1ab8:	7a 89       	ldd	r23, Y+18	; 0x12
    1aba:	8b 89       	ldd	r24, Y+19	; 0x13
    1abc:	9c 89       	ldd	r25, Y+20	; 0x14
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	53 e4       	ldi	r21, 0x43	; 67
    1ac6:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	0c f0       	brlt	.+2      	; 0x1ad0 <steppermotor1Write+0x6bc>
    1ace:	7b c0       	rjmp	.+246    	; 0x1bc6 <steppermotor1Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a e7       	ldi	r20, 0x7A	; 122
    1ade:	54 e4       	ldi	r21, 0x44	; 68
    1ae0:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8c 87       	std	Y+12, r24	; 0x0c
    1aea:	9d 87       	std	Y+13, r25	; 0x0d
    1aec:	ae 87       	std	Y+14, r26	; 0x0e
    1aee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1af2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1af4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a e7       	ldi	r20, 0x7A	; 122
    1afe:	55 e4       	ldi	r21, 0x45	; 69
    1b00:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	88 87       	std	Y+8, r24	; 0x08
    1b0a:	99 87       	std	Y+9, r25	; 0x09
    1b0c:	aa 87       	std	Y+10, r26	; 0x0a
    1b0e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b10:	68 85       	ldd	r22, Y+8	; 0x08
    1b12:	79 85       	ldd	r23, Y+9	; 0x09
    1b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <steppermotor1Write+0x71e>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9f 83       	std	Y+7, r25	; 0x07
    1b2e:	8e 83       	std	Y+6, r24	; 0x06
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <steppermotor1Write+0x79c>
	else if (__tmp > 65535)
    1b32:	68 85       	ldd	r22, Y+8	; 0x08
    1b34:	79 85       	ldd	r23, Y+9	; 0x09
    1b36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <steppermotor1Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b50:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9f 83       	std	Y+7, r25	; 0x07
    1b70:	8e 83       	std	Y+6, r24	; 0x06
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <steppermotor1Write+0x77e>
    1b74:	80 e9       	ldi	r24, 0x90	; 144
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9d 83       	std	Y+5, r25	; 0x05
    1b7a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <steppermotor1Write+0x76c>
    1b84:	9d 83       	std	Y+5, r25	; 0x05
    1b86:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9f 83       	std	Y+7, r25	; 0x07
    1b90:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	9f 81       	ldd	r25, Y+7	; 0x07
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <steppermotor1Write+0x760>
    1b9a:	24 c0       	rjmp	.+72     	; 0x1be4 <steppermotor1Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	68 85       	ldd	r22, Y+8	; 0x08
    1b9e:	79 85       	ldd	r23, Y+9	; 0x09
    1ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ba4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9f 83       	std	Y+7, r25	; 0x07
    1bae:	8e 83       	std	Y+6, r24	; 0x06
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	9b 83       	std	Y+3, r25	; 0x03
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <steppermotor1Write+0x7a8>
    1bc0:	9b 83       	std	Y+3, r25	; 0x03
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <steppermotor1Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bc6:	69 89       	ldd	r22, Y+17	; 0x11
    1bc8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bca:	8b 89       	ldd	r24, Y+19	; 0x13
    1bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bce:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	88 8b       	std	Y+16, r24	; 0x10
    1bd8:	88 89       	ldd	r24, Y+16	; 0x10
    1bda:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	8a 95       	dec	r24
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <steppermotor1Write+0x7ca>
    1be2:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1be4:	89 a9       	ldd	r24, Y+49	; 0x31
    1be6:	9a a9       	ldd	r25, Y+50	; 0x32
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9a ab       	std	Y+50, r25	; 0x32
    1bec:	89 ab       	std	Y+49, r24	; 0x31
    1bee:	89 a9       	ldd	r24, Y+49	; 0x31
    1bf0:	9a a9       	ldd	r25, Y+50	; 0x32
    1bf2:	18 16       	cp	r1, r24
    1bf4:	19 06       	cpc	r1, r25
    1bf6:	0c f4       	brge	.+2      	; 0x1bfa <steppermotor1Write+0x7e6>
    1bf8:	17 ce       	rjmp	.-978    	; 0x1828 <steppermotor1Write+0x414>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1bfa:	1e aa       	std	Y+54, r1	; 0x36
    1bfc:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    1bfe:	8d a9       	ldd	r24, Y+53	; 0x35
    1c00:	9e a9       	ldd	r25, Y+54	; 0x36
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	91 05       	cpc	r25, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <steppermotor1Write+0x7f6>
    1c08:	0a ce       	rjmp	.-1004   	; 0x181e <steppermotor1Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    1c0a:	ea 96       	adiw	r28, 0x3a	; 58
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <steppermotor2Write>:

void steppermotor2Write(int a)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	ea 97       	sbiw	r28, 0x3a	; 58
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	9e ab       	std	Y+54, r25	; 0x36
    1c32:	8d ab       	std	Y+53, r24	; 0x35
    1c34:	f1 c1       	rjmp	.+994    	; 0x2018 <steppermotor2Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c ab       	std	Y+52, r25	; 0x34
    1c3c:	8b ab       	std	Y+51, r24	; 0x33
    1c3e:	e4 c1       	rjmp	.+968    	; 0x2008 <steppermotor2Write+0x3ec>
        {
            switch (i)
    1c40:	8b a9       	ldd	r24, Y+51	; 0x33
    1c42:	9c a9       	ldd	r25, Y+52	; 0x34
    1c44:	98 af       	std	Y+56, r25	; 0x38
    1c46:	8f ab       	std	Y+55, r24	; 0x37
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <steppermotor2Write+0x38>
    1c52:	87 c0       	rjmp	.+270    	; 0x1d62 <steppermotor2Write+0x146>
    1c54:	8f a9       	ldd	r24, Y+55	; 0x37
    1c56:	98 ad       	ldd	r25, Y+56	; 0x38
    1c58:	85 30       	cpi	r24, 0x05	; 5
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	94 f4       	brge	.+36     	; 0x1c82 <steppermotor2Write+0x66>
    1c5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c60:	98 ad       	ldd	r25, Y+56	; 0x38
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	91 05       	cpc	r25, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <steppermotor2Write+0x4e>
    1c68:	42 c0       	rjmp	.+132    	; 0x1cee <steppermotor2Write+0xd2>
    1c6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	91 05       	cpc	r25, r1
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <steppermotor2Write+0x5a>
    1c74:	59 c0       	rjmp	.+178    	; 0x1d28 <steppermotor2Write+0x10c>
    1c76:	8f a9       	ldd	r24, Y+55	; 0x37
    1c78:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	d1 f0       	breq	.+52     	; 0x1cb4 <steppermotor2Write+0x98>
    1c80:	00 c1       	rjmp	.+512    	; 0x1e82 <steppermotor2Write+0x266>
    1c82:	8f a9       	ldd	r24, Y+55	; 0x37
    1c84:	98 ad       	ldd	r25, Y+56	; 0x38
    1c86:	86 30       	cpi	r24, 0x06	; 6
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <steppermotor2Write+0x72>
    1c8c:	a4 c0       	rjmp	.+328    	; 0x1dd6 <steppermotor2Write+0x1ba>
    1c8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c90:	98 ad       	ldd	r25, Y+56	; 0x38
    1c92:	86 30       	cpi	r24, 0x06	; 6
    1c94:	91 05       	cpc	r25, r1
    1c96:	0c f4       	brge	.+2      	; 0x1c9a <steppermotor2Write+0x7e>
    1c98:	81 c0       	rjmp	.+258    	; 0x1d9c <steppermotor2Write+0x180>
    1c9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c9e:	87 30       	cpi	r24, 0x07	; 7
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <steppermotor2Write+0x8a>
    1ca4:	b5 c0       	rjmp	.+362    	; 0x1e10 <steppermotor2Write+0x1f4>
    1ca6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca8:	98 ad       	ldd	r25, Y+56	; 0x38
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <steppermotor2Write+0x96>
    1cb0:	cc c0       	rjmp	.+408    	; 0x1e4a <steppermotor2Write+0x22e>
    1cb2:	e7 c0       	rjmp	.+462    	; 0x1e82 <steppermotor2Write+0x266>
            {
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    1cb4:	a8 e2       	ldi	r26, 0x28	; 40
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e8 e2       	ldi	r30, 0x28	; 40
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 64       	ori	r24, 0x40	; 64
    1cc0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1cc2:	a8 e2       	ldi	r26, 0x28	; 40
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e8 e2       	ldi	r30, 0x28	; 40
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 7e       	andi	r24, 0xEF	; 239
    1cce:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1cd0:	a8 e2       	ldi	r26, 0x28	; 40
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e8 e2       	ldi	r30, 0x28	; 40
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8b 7f       	andi	r24, 0xFB	; 251
    1cdc:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1cde:	a8 e2       	ldi	r26, 0x28	; 40
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e8 e2       	ldi	r30, 0x28	; 40
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8e 7f       	andi	r24, 0xFE	; 254
    1cea:	8c 93       	st	X, r24
    1cec:	ca c0       	rjmp	.+404    	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 2 :
                PORTStepper2 |= (1 << PStepper2_1);
    1cee:	a8 e2       	ldi	r26, 0x28	; 40
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e8 e2       	ldi	r30, 0x28	; 40
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 64       	ori	r24, 0x40	; 64
    1cfa:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1cfc:	a8 e2       	ldi	r26, 0x28	; 40
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e8 e2       	ldi	r30, 0x28	; 40
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 61       	ori	r24, 0x10	; 16
    1d08:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1d0a:	a8 e2       	ldi	r26, 0x28	; 40
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e8 e2       	ldi	r30, 0x28	; 40
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	8b 7f       	andi	r24, 0xFB	; 251
    1d16:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1d18:	a8 e2       	ldi	r26, 0x28	; 40
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e8 e2       	ldi	r30, 0x28	; 40
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8e 7f       	andi	r24, 0xFE	; 254
    1d24:	8c 93       	st	X, r24
    1d26:	ad c0       	rjmp	.+346    	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1d28:	a8 e2       	ldi	r26, 0x28	; 40
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e8 e2       	ldi	r30, 0x28	; 40
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 7b       	andi	r24, 0xBF	; 191
    1d34:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1d36:	a8 e2       	ldi	r26, 0x28	; 40
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e8 e2       	ldi	r30, 0x28	; 40
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 61       	ori	r24, 0x10	; 16
    1d42:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1d44:	a8 e2       	ldi	r26, 0x28	; 40
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e8 e2       	ldi	r30, 0x28	; 40
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8b 7f       	andi	r24, 0xFB	; 251
    1d50:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1d52:	a8 e2       	ldi	r26, 0x28	; 40
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e8 e2       	ldi	r30, 0x28	; 40
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	8c 93       	st	X, r24
    1d60:	90 c0       	rjmp	.+288    	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1d62:	a8 e2       	ldi	r26, 0x28	; 40
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e8 e2       	ldi	r30, 0x28	; 40
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8f 7b       	andi	r24, 0xBF	; 191
    1d6e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    1d70:	a8 e2       	ldi	r26, 0x28	; 40
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e8 e2       	ldi	r30, 0x28	; 40
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 61       	ori	r24, 0x10	; 16
    1d7c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1d7e:	a8 e2       	ldi	r26, 0x28	; 40
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 e2       	ldi	r30, 0x28	; 40
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	84 60       	ori	r24, 0x04	; 4
    1d8a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1d8c:	a8 e2       	ldi	r26, 0x28	; 40
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e8 e2       	ldi	r30, 0x28	; 40
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8e 7f       	andi	r24, 0xFE	; 254
    1d98:	8c 93       	st	X, r24
    1d9a:	73 c0       	rjmp	.+230    	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1d9c:	a8 e2       	ldi	r26, 0x28	; 40
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e8 e2       	ldi	r30, 0x28	; 40
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 7b       	andi	r24, 0xBF	; 191
    1da8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1daa:	a8 e2       	ldi	r26, 0x28	; 40
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e8 e2       	ldi	r30, 0x28	; 40
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 7e       	andi	r24, 0xEF	; 239
    1db6:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1db8:	a8 e2       	ldi	r26, 0x28	; 40
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e8 e2       	ldi	r30, 0x28	; 40
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	84 60       	ori	r24, 0x04	; 4
    1dc4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1dc6:	a8 e2       	ldi	r26, 0x28	; 40
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e8 e2       	ldi	r30, 0x28	; 40
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8e 7f       	andi	r24, 0xFE	; 254
    1dd2:	8c 93       	st	X, r24
    1dd4:	56 c0       	rjmp	.+172    	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1dd6:	a8 e2       	ldi	r26, 0x28	; 40
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e8 e2       	ldi	r30, 0x28	; 40
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 7b       	andi	r24, 0xBF	; 191
    1de2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1de4:	a8 e2       	ldi	r26, 0x28	; 40
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 e2       	ldi	r30, 0x28	; 40
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 7e       	andi	r24, 0xEF	; 239
    1df0:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1df2:	a8 e2       	ldi	r26, 0x28	; 40
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e8 e2       	ldi	r30, 0x28	; 40
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	84 60       	ori	r24, 0x04	; 4
    1dfe:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1e00:	a8 e2       	ldi	r26, 0x28	; 40
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e2       	ldi	r30, 0x28	; 40
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	81 60       	ori	r24, 0x01	; 1
    1e0c:	8c 93       	st	X, r24
    1e0e:	39 c0       	rjmp	.+114    	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 7 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1e10:	a8 e2       	ldi	r26, 0x28	; 40
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e8 e2       	ldi	r30, 0x28	; 40
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 7b       	andi	r24, 0xBF	; 191
    1e1c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1e1e:	a8 e2       	ldi	r26, 0x28	; 40
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e8 e2       	ldi	r30, 0x28	; 40
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	8f 7e       	andi	r24, 0xEF	; 239
    1e2a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1e2c:	a8 e2       	ldi	r26, 0x28	; 40
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e8 e2       	ldi	r30, 0x28	; 40
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8b 7f       	andi	r24, 0xFB	; 251
    1e38:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1e3a:	a8 e2       	ldi	r26, 0x28	; 40
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e8 e2       	ldi	r30, 0x28	; 40
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	81 60       	ori	r24, 0x01	; 1
    1e46:	8c 93       	st	X, r24
    1e48:	1c c0       	rjmp	.+56     	; 0x1e82 <steppermotor2Write+0x266>
                break;
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1e4a:	a8 e2       	ldi	r26, 0x28	; 40
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e8 e2       	ldi	r30, 0x28	; 40
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 64       	ori	r24, 0x40	; 64
    1e56:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1e58:	a8 e2       	ldi	r26, 0x28	; 40
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e2       	ldi	r30, 0x28	; 40
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 7e       	andi	r24, 0xEF	; 239
    1e64:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1e66:	a8 e2       	ldi	r26, 0x28	; 40
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e8 e2       	ldi	r30, 0x28	; 40
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8b 7f       	andi	r24, 0xFB	; 251
    1e72:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1e74:	a8 e2       	ldi	r26, 0x28	; 40
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e8 e2       	ldi	r30, 0x28	; 40
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 60       	ori	r24, 0x01	; 1
    1e80:	8c 93       	st	X, r24
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	af e2       	ldi	r26, 0x2F	; 47
    1e88:	b4 e4       	ldi	r27, 0x44	; 68
    1e8a:	8d a7       	std	Y+45, r24	; 0x2d
    1e8c:	9e a7       	std	Y+46, r25	; 0x2e
    1e8e:	af a7       	std	Y+47, r26	; 0x2f
    1e90:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e92:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e94:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	2b ea       	ldi	r18, 0xAB	; 171
    1e9c:	3a ea       	ldi	r19, 0xAA	; 170
    1e9e:	4a ea       	ldi	r20, 0xAA	; 170
    1ea0:	50 e4       	ldi	r21, 0x40	; 64
    1ea2:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	89 a7       	std	Y+41, r24	; 0x29
    1eac:	9a a7       	std	Y+42, r25	; 0x2a
    1eae:	ab a7       	std	Y+43, r26	; 0x2b
    1eb0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1eb2:	69 a5       	ldd	r22, Y+41	; 0x29
    1eb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	1c f4       	brge	.+6      	; 0x1ed0 <steppermotor2Write+0x2b4>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	88 a7       	std	Y+40, r24	; 0x28
    1ece:	91 c0       	rjmp	.+290    	; 0x1ff2 <steppermotor2Write+0x3d6>
	else if (__tmp > 255)
    1ed0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ed2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	53 e4       	ldi	r21, 0x43	; 67
    1ee0:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <steppermotor2Write+0x2ce>
    1ee8:	7b c0       	rjmp	.+246    	; 0x1fe0 <steppermotor2Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1eea:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eec:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a e7       	ldi	r20, 0x7A	; 122
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8c a3       	std	Y+36, r24	; 0x24
    1f04:	9d a3       	std	Y+37, r25	; 0x25
    1f06:	ae a3       	std	Y+38, r26	; 0x26
    1f08:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f0c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f0e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f10:	9f a1       	ldd	r25, Y+39	; 0x27
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a e7       	ldi	r20, 0x7A	; 122
    1f18:	55 e4       	ldi	r21, 0x45	; 69
    1f1a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	88 a3       	std	Y+32, r24	; 0x20
    1f24:	99 a3       	std	Y+33, r25	; 0x21
    1f26:	aa a3       	std	Y+34, r26	; 0x22
    1f28:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f2a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f2c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f2e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f30:	9b a1       	ldd	r25, Y+35	; 0x23
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <steppermotor2Write+0x330>
		__ticks = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9f 8f       	std	Y+31, r25	; 0x1f
    1f48:	8e 8f       	std	Y+30, r24	; 0x1e
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <steppermotor2Write+0x3ae>
	else if (__tmp > 65535)
    1f4c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f4e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f50:	8a a1       	ldd	r24, Y+34	; 0x22
    1f52:	9b a1       	ldd	r25, Y+35	; 0x23
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	4c f5       	brge	.+82     	; 0x1fb6 <steppermotor2Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	6c a1       	ldd	r22, Y+36	; 0x24
    1f66:	7d a1       	ldd	r23, Y+37	; 0x25
    1f68:	8e a1       	ldd	r24, Y+38	; 0x26
    1f6a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <steppermotor2Write+0x390>
    1f8e:	80 e9       	ldi	r24, 0x90	; 144
    1f90:	91 e0       	ldi	r25, 0x01	; 1
    1f92:	9d 8f       	std	Y+29, r25	; 0x1d
    1f94:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f98:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <steppermotor2Write+0x37e>
    1f9e:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	9f 8f       	std	Y+31, r25	; 0x1f
    1faa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <steppermotor2Write+0x372>
    1fb4:	24 c0       	rjmp	.+72     	; 0x1ffe <steppermotor2Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	68 a1       	ldd	r22, Y+32	; 0x20
    1fb8:	79 a1       	ldd	r23, Y+33	; 0x21
    1fba:	8a a1       	ldd	r24, Y+34	; 0x22
    1fbc:	9b a1       	ldd	r25, Y+35	; 0x23
    1fbe:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fce:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd0:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <steppermotor2Write+0x3ba>
    1fda:	9b 8f       	std	Y+27, r25	; 0x1b
    1fdc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <steppermotor2Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe0:	69 a5       	ldd	r22, Y+41	; 0x29
    1fe2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	88 a7       	std	Y+40, r24	; 0x28
    1ff2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ff4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ff8:	8a 95       	dec	r24
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <steppermotor2Write+0x3dc>
    1ffc:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor2Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    2000:	9c a9       	ldd	r25, Y+52	; 0x34
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	9c ab       	std	Y+52, r25	; 0x34
    2006:	8b ab       	std	Y+51, r24	; 0x33
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	88 30       	cpi	r24, 0x08	; 8
    200e:	91 05       	cpc	r25, r1
    2010:	0c f4       	brge	.+2      	; 0x2014 <steppermotor2Write+0x3f8>
    2012:	16 ce       	rjmp	.-980    	; 0x1c40 <steppermotor2Write+0x24>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    2014:	1e aa       	std	Y+54, r1	; 0x36
    2016:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor2Write(int a)
{
    while(a  == 1)
    2018:	8d a9       	ldd	r24, Y+53	; 0x35
    201a:	9e a9       	ldd	r25, Y+54	; 0x36
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <steppermotor2Write+0x408>
    2022:	09 ce       	rjmp	.-1006   	; 0x1c36 <steppermotor2Write+0x1a>
    2024:	f0 c1       	rjmp	.+992    	; 0x2406 <__stack+0x207>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    2026:	88 e0       	ldi	r24, 0x08	; 8
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9a ab       	std	Y+50, r25	; 0x32
    202c:	89 ab       	std	Y+49, r24	; 0x31
    202e:	e3 c1       	rjmp	.+966    	; 0x23f6 <__stack+0x1f7>
        {
            switch (i)
    2030:	89 a9       	ldd	r24, Y+49	; 0x31
    2032:	9a a9       	ldd	r25, Y+50	; 0x32
    2034:	9a af       	std	Y+58, r25	; 0x3a
    2036:	89 af       	std	Y+57, r24	; 0x39
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	9a ad       	ldd	r25, Y+58	; 0x3a
    203c:	84 30       	cpi	r24, 0x04	; 4
    203e:	91 05       	cpc	r25, r1
    2040:	09 f4       	brne	.+2      	; 0x2044 <steppermotor2Write+0x428>
    2042:	a3 c0       	rjmp	.+326    	; 0x218a <steppermotor2Write+0x56e>
    2044:	89 ad       	ldd	r24, Y+57	; 0x39
    2046:	9a ad       	ldd	r25, Y+58	; 0x3a
    2048:	85 30       	cpi	r24, 0x05	; 5
    204a:	91 05       	cpc	r25, r1
    204c:	94 f4       	brge	.+36     	; 0x2072 <steppermotor2Write+0x456>
    204e:	89 ad       	ldd	r24, Y+57	; 0x39
    2050:	9a ad       	ldd	r25, Y+58	; 0x3a
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	91 05       	cpc	r25, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <steppermotor2Write+0x43e>
    2058:	5e c0       	rjmp	.+188    	; 0x2116 <steppermotor2Write+0x4fa>
    205a:	89 ad       	ldd	r24, Y+57	; 0x39
    205c:	9a ad       	ldd	r25, Y+58	; 0x3a
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	91 05       	cpc	r25, r1
    2062:	0c f0       	brlt	.+2      	; 0x2066 <steppermotor2Write+0x44a>
    2064:	75 c0       	rjmp	.+234    	; 0x2150 <steppermotor2Write+0x534>
    2066:	89 ad       	ldd	r24, Y+57	; 0x39
    2068:	9a ad       	ldd	r25, Y+58	; 0x3a
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	91 05       	cpc	r25, r1
    206e:	b1 f1       	breq	.+108    	; 0x20dc <steppermotor2Write+0x4c0>
    2070:	ff c0       	rjmp	.+510    	; 0x2270 <__stack+0x71>
    2072:	89 ad       	ldd	r24, Y+57	; 0x39
    2074:	9a ad       	ldd	r25, Y+58	; 0x3a
    2076:	86 30       	cpi	r24, 0x06	; 6
    2078:	91 05       	cpc	r25, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <steppermotor2Write+0x462>
    207c:	c0 c0       	rjmp	.+384    	; 0x21fe <steppermotor2Write+0x5e2>
    207e:	89 ad       	ldd	r24, Y+57	; 0x39
    2080:	9a ad       	ldd	r25, Y+58	; 0x3a
    2082:	86 30       	cpi	r24, 0x06	; 6
    2084:	91 05       	cpc	r25, r1
    2086:	0c f4       	brge	.+2      	; 0x208a <steppermotor2Write+0x46e>
    2088:	9d c0       	rjmp	.+314    	; 0x21c4 <steppermotor2Write+0x5a8>
    208a:	89 ad       	ldd	r24, Y+57	; 0x39
    208c:	9a ad       	ldd	r25, Y+58	; 0x3a
    208e:	87 30       	cpi	r24, 0x07	; 7
    2090:	91 05       	cpc	r25, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <steppermotor2Write+0x47a>
    2094:	d1 c0       	rjmp	.+418    	; 0x2238 <__stack+0x39>
    2096:	89 ad       	ldd	r24, Y+57	; 0x39
    2098:	9a ad       	ldd	r25, Y+58	; 0x3a
    209a:	88 30       	cpi	r24, 0x08	; 8
    209c:	91 05       	cpc	r25, r1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <steppermotor2Write+0x486>
    20a0:	e7 c0       	rjmp	.+462    	; 0x2270 <__stack+0x71>
            {
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    20a2:	a8 e2       	ldi	r26, 0x28	; 40
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e8 e2       	ldi	r30, 0x28	; 40
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	80 64       	ori	r24, 0x40	; 64
    20ae:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    20b0:	a8 e2       	ldi	r26, 0x28	; 40
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e8 e2       	ldi	r30, 0x28	; 40
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	8f 7e       	andi	r24, 0xEF	; 239
    20bc:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    20be:	a8 e2       	ldi	r26, 0x28	; 40
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e8 e2       	ldi	r30, 0x28	; 40
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8b 7f       	andi	r24, 0xFB	; 251
    20ca:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    20cc:	a8 e2       	ldi	r26, 0x28	; 40
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e8 e2       	ldi	r30, 0x28	; 40
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	8e 7f       	andi	r24, 0xFE	; 254
    20d8:	8c 93       	st	X, r24
    20da:	ca c0       	rjmp	.+404    	; 0x2270 <__stack+0x71>
                break;
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    20dc:	a8 e2       	ldi	r26, 0x28	; 40
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e8 e2       	ldi	r30, 0x28	; 40
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 64       	ori	r24, 0x40	; 64
    20e8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    20ea:	a8 e2       	ldi	r26, 0x28	; 40
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e8 e2       	ldi	r30, 0x28	; 40
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 61       	ori	r24, 0x10	; 16
    20f6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    20f8:	a8 e2       	ldi	r26, 0x28	; 40
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e8 e2       	ldi	r30, 0x28	; 40
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8b 7f       	andi	r24, 0xFB	; 251
    2104:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    2106:	a8 e2       	ldi	r26, 0x28	; 40
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e8 e2       	ldi	r30, 0x28	; 40
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	8e 7f       	andi	r24, 0xFE	; 254
    2112:	8c 93       	st	X, r24
    2114:	ad c0       	rjmp	.+346    	; 0x2270 <__stack+0x71>
                break;
            case 2 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    2116:	a8 e2       	ldi	r26, 0x28	; 40
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e8 e2       	ldi	r30, 0x28	; 40
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 7b       	andi	r24, 0xBF	; 191
    2122:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    2124:	a8 e2       	ldi	r26, 0x28	; 40
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e2       	ldi	r30, 0x28	; 40
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 61       	ori	r24, 0x10	; 16
    2130:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    2132:	a8 e2       	ldi	r26, 0x28	; 40
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e8 e2       	ldi	r30, 0x28	; 40
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8b 7f       	andi	r24, 0xFB	; 251
    213e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    2140:	a8 e2       	ldi	r26, 0x28	; 40
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e8 e2       	ldi	r30, 0x28	; 40
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8e 7f       	andi	r24, 0xFE	; 254
    214c:	8c 93       	st	X, r24
    214e:	90 c0       	rjmp	.+288    	; 0x2270 <__stack+0x71>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    2150:	a8 e2       	ldi	r26, 0x28	; 40
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e8 e2       	ldi	r30, 0x28	; 40
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8f 7b       	andi	r24, 0xBF	; 191
    215c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    215e:	a8 e2       	ldi	r26, 0x28	; 40
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e8 e2       	ldi	r30, 0x28	; 40
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 61       	ori	r24, 0x10	; 16
    216a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    216c:	a8 e2       	ldi	r26, 0x28	; 40
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e8 e2       	ldi	r30, 0x28	; 40
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	84 60       	ori	r24, 0x04	; 4
    2178:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    217a:	a8 e2       	ldi	r26, 0x28	; 40
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e8 e2       	ldi	r30, 0x28	; 40
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	8e 7f       	andi	r24, 0xFE	; 254
    2186:	8c 93       	st	X, r24
    2188:	73 c0       	rjmp	.+230    	; 0x2270 <__stack+0x71>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    218a:	a8 e2       	ldi	r26, 0x28	; 40
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e8 e2       	ldi	r30, 0x28	; 40
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8f 7b       	andi	r24, 0xBF	; 191
    2196:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    2198:	a8 e2       	ldi	r26, 0x28	; 40
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e8 e2       	ldi	r30, 0x28	; 40
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 7e       	andi	r24, 0xEF	; 239
    21a4:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    21a6:	a8 e2       	ldi	r26, 0x28	; 40
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e8 e2       	ldi	r30, 0x28	; 40
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	84 60       	ori	r24, 0x04	; 4
    21b2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    21b4:	a8 e2       	ldi	r26, 0x28	; 40
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e8 e2       	ldi	r30, 0x28	; 40
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8e 7f       	andi	r24, 0xFE	; 254
    21c0:	8c 93       	st	X, r24
    21c2:	56 c0       	rjmp	.+172    	; 0x2270 <__stack+0x71>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    21c4:	a8 e2       	ldi	r26, 0x28	; 40
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e8 e2       	ldi	r30, 0x28	; 40
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8f 7b       	andi	r24, 0xBF	; 191
    21d0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    21d2:	a8 e2       	ldi	r26, 0x28	; 40
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e8 e2       	ldi	r30, 0x28	; 40
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	8f 7e       	andi	r24, 0xEF	; 239
    21de:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    21e0:	a8 e2       	ldi	r26, 0x28	; 40
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e8 e2       	ldi	r30, 0x28	; 40
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	84 60       	ori	r24, 0x04	; 4
    21ec:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    21ee:	a8 e2       	ldi	r26, 0x28	; 40
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e8 e2       	ldi	r30, 0x28	; 40
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	81 60       	ori	r24, 0x01	; 1
    21fa:	8c 93       	st	X, r24
    21fc:	39 c0       	rjmp	.+114    	; 0x2270 <__stack+0x71>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    21fe:	a8 e2       	ldi	r26, 0x28	; 40
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e8 e2       	ldi	r30, 0x28	; 40
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8f 7b       	andi	r24, 0xBF	; 191
    220a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    220c:	a8 e2       	ldi	r26, 0x28	; 40
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e8 e2       	ldi	r30, 0x28	; 40
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8f 7e       	andi	r24, 0xEF	; 239
    2218:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    221a:	a8 e2       	ldi	r26, 0x28	; 40
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e8 e2       	ldi	r30, 0x28	; 40
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	8b 7f       	andi	r24, 0xFB	; 251
    2226:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    2228:	a8 e2       	ldi	r26, 0x28	; 40
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e8 e2       	ldi	r30, 0x28	; 40
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	81 60       	ori	r24, 0x01	; 1
    2234:	8c 93       	st	X, r24
    2236:	1c c0       	rjmp	.+56     	; 0x2270 <__stack+0x71>
                break;
            case 7 :
                PORTStepper2 |= (1 << PStepper2_1);
    2238:	a8 e2       	ldi	r26, 0x28	; 40
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e8 e2       	ldi	r30, 0x28	; 40
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	80 64       	ori	r24, 0x40	; 64
    2244:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    2246:	a8 e2       	ldi	r26, 0x28	; 40
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e8 e2       	ldi	r30, 0x28	; 40
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 7e       	andi	r24, 0xEF	; 239
    2252:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    2254:	a8 e2       	ldi	r26, 0x28	; 40
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e8 e2       	ldi	r30, 0x28	; 40
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8b 7f       	andi	r24, 0xFB	; 251
    2260:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    2262:	a8 e2       	ldi	r26, 0x28	; 40
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e8 e2       	ldi	r30, 0x28	; 40
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	81 60       	ori	r24, 0x01	; 1
    226e:	8c 93       	st	X, r24
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	af e2       	ldi	r26, 0x2F	; 47
    2276:	b4 e4       	ldi	r27, 0x44	; 68
    2278:	8d 8b       	std	Y+21, r24	; 0x15
    227a:	9e 8b       	std	Y+22, r25	; 0x16
    227c:	af 8b       	std	Y+23, r26	; 0x17
    227e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2280:	6d 89       	ldd	r22, Y+21	; 0x15
    2282:	7e 89       	ldd	r23, Y+22	; 0x16
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	2b ea       	ldi	r18, 0xAB	; 171
    228a:	3a ea       	ldi	r19, 0xAA	; 170
    228c:	4a ea       	ldi	r20, 0xAA	; 170
    228e:	50 e4       	ldi	r21, 0x40	; 64
    2290:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	89 8b       	std	Y+17, r24	; 0x11
    229a:	9a 8b       	std	Y+18, r25	; 0x12
    229c:	ab 8b       	std	Y+19, r26	; 0x13
    229e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22a0:	69 89       	ldd	r22, Y+17	; 0x11
    22a2:	7a 89       	ldd	r23, Y+18	; 0x12
    22a4:	8b 89       	ldd	r24, Y+19	; 0x13
    22a6:	9c 89       	ldd	r25, Y+20	; 0x14
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	1c f4       	brge	.+6      	; 0x22be <__stack+0xbf>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	88 8b       	std	Y+16, r24	; 0x10
    22bc:	91 c0       	rjmp	.+290    	; 0x23e0 <__stack+0x1e1>
	else if (__tmp > 255)
    22be:	69 89       	ldd	r22, Y+17	; 0x11
    22c0:	7a 89       	ldd	r23, Y+18	; 0x12
    22c2:	8b 89       	ldd	r24, Y+19	; 0x13
    22c4:	9c 89       	ldd	r25, Y+20	; 0x14
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	53 e4       	ldi	r21, 0x43	; 67
    22ce:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	0c f0       	brlt	.+2      	; 0x22d8 <__stack+0xd9>
    22d6:	7b c0       	rjmp	.+246    	; 0x23ce <__stack+0x1cf>
	{
		_delay_ms(__us / 1000.0);
    22d8:	6d 89       	ldd	r22, Y+21	; 0x15
    22da:	7e 89       	ldd	r23, Y+22	; 0x16
    22dc:	8f 89       	ldd	r24, Y+23	; 0x17
    22de:	98 8d       	ldd	r25, Y+24	; 0x18
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	54 e4       	ldi	r21, 0x44	; 68
    22e8:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8c 87       	std	Y+12, r24	; 0x0c
    22f2:	9d 87       	std	Y+13, r25	; 0x0d
    22f4:	ae 87       	std	Y+14, r26	; 0x0e
    22f6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    22fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    22fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    22fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	55 e4       	ldi	r21, 0x45	; 69
    2308:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	88 87       	std	Y+8, r24	; 0x08
    2312:	99 87       	std	Y+9, r25	; 0x09
    2314:	aa 87       	std	Y+10, r26	; 0x0a
    2316:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2318:	68 85       	ldd	r22, Y+8	; 0x08
    231a:	79 85       	ldd	r23, Y+9	; 0x09
    231c:	8a 85       	ldd	r24, Y+10	; 0x0a
    231e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <__stack+0x13b>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9f 83       	std	Y+7, r25	; 0x07
    2336:	8e 83       	std	Y+6, r24	; 0x06
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <__stack+0x1b9>
	else if (__tmp > 65535)
    233a:	68 85       	ldd	r22, Y+8	; 0x08
    233c:	79 85       	ldd	r23, Y+9	; 0x09
    233e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2340:	9b 85       	ldd	r25, Y+11	; 0x0b
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <__stack+0x1a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6c 85       	ldd	r22, Y+12	; 0x0c
    2354:	7d 85       	ldd	r23, Y+13	; 0x0d
    2356:	8e 85       	ldd	r24, Y+14	; 0x0e
    2358:	9f 85       	ldd	r25, Y+15	; 0x0f
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9f 83       	std	Y+7, r25	; 0x07
    2378:	8e 83       	std	Y+6, r24	; 0x06
    237a:	0f c0       	rjmp	.+30     	; 0x239a <__stack+0x19b>
    237c:	80 e9       	ldi	r24, 0x90	; 144
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9d 83       	std	Y+5, r25	; 0x05
    2382:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <__stack+0x189>
    238c:	9d 83       	std	Y+5, r25	; 0x05
    238e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8e 81       	ldd	r24, Y+6	; 0x06
    2392:	9f 81       	ldd	r25, Y+7	; 0x07
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9f 83       	std	Y+7, r25	; 0x07
    2398:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8e 81       	ldd	r24, Y+6	; 0x06
    239c:	9f 81       	ldd	r25, Y+7	; 0x07
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <__stack+0x17d>
    23a2:	24 c0       	rjmp	.+72     	; 0x23ec <__stack+0x1ed>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	68 85       	ldd	r22, Y+8	; 0x08
    23a6:	79 85       	ldd	r23, Y+9	; 0x09
    23a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ac:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9f 83       	std	Y+7, r25	; 0x07
    23b6:	8e 83       	std	Y+6, r24	; 0x06
    23b8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ba:	9f 81       	ldd	r25, Y+7	; 0x07
    23bc:	9b 83       	std	Y+3, r25	; 0x03
    23be:	8a 83       	std	Y+2, r24	; 0x02
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <__stack+0x1c5>
    23c8:	9b 83       	std	Y+3, r25	; 0x03
    23ca:	8a 83       	std	Y+2, r24	; 0x02
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <__stack+0x1ed>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23ce:	69 89       	ldd	r22, Y+17	; 0x11
    23d0:	7a 89       	ldd	r23, Y+18	; 0x12
    23d2:	8b 89       	ldd	r24, Y+19	; 0x13
    23d4:	9c 89       	ldd	r25, Y+20	; 0x14
    23d6:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	88 8b       	std	Y+16, r24	; 0x10
    23e0:	88 89       	ldd	r24, Y+16	; 0x10
    23e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	8a 95       	dec	r24
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <__stack+0x1e7>
    23ea:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    23ec:	89 a9       	ldd	r24, Y+49	; 0x31
    23ee:	9a a9       	ldd	r25, Y+50	; 0x32
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9a ab       	std	Y+50, r25	; 0x32
    23f4:	89 ab       	std	Y+49, r24	; 0x31
    23f6:	89 a9       	ldd	r24, Y+49	; 0x31
    23f8:	9a a9       	ldd	r25, Y+50	; 0x32
    23fa:	18 16       	cp	r1, r24
    23fc:	19 06       	cpc	r1, r25
    23fe:	0c f4       	brge	.+2      	; 0x2402 <__stack+0x203>
    2400:	17 ce       	rjmp	.-978    	; 0x2030 <steppermotor2Write+0x414>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    2402:	1e aa       	std	Y+54, r1	; 0x36
    2404:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    2406:	8d a9       	ldd	r24, Y+53	; 0x35
    2408:	9e a9       	ldd	r25, Y+54	; 0x36
    240a:	82 30       	cpi	r24, 0x02	; 2
    240c:	91 05       	cpc	r25, r1
    240e:	09 f4       	brne	.+2      	; 0x2412 <__stack+0x213>
    2410:	0a ce       	rjmp	.-1004   	; 0x2026 <steppermotor2Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    2412:	ea 96       	adiw	r28, 0x3a	; 58
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <steppermotor3Write>:

void steppermotor3Write(int a)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	ea 97       	sbiw	r28, 0x3a	; 58
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	9e ab       	std	Y+54, r25	; 0x36
    243a:	8d ab       	std	Y+53, r24	; 0x35
    243c:	f1 c1       	rjmp	.+994    	; 0x2820 <steppermotor3Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c ab       	std	Y+52, r25	; 0x34
    2444:	8b ab       	std	Y+51, r24	; 0x33
    2446:	e4 c1       	rjmp	.+968    	; 0x2810 <steppermotor3Write+0x3ec>
        {
            switch (i)
    2448:	8b a9       	ldd	r24, Y+51	; 0x33
    244a:	9c a9       	ldd	r25, Y+52	; 0x34
    244c:	98 af       	std	Y+56, r25	; 0x38
    244e:	8f ab       	std	Y+55, r24	; 0x37
    2450:	8f a9       	ldd	r24, Y+55	; 0x37
    2452:	98 ad       	ldd	r25, Y+56	; 0x38
    2454:	84 30       	cpi	r24, 0x04	; 4
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <steppermotor3Write+0x38>
    245a:	87 c0       	rjmp	.+270    	; 0x256a <steppermotor3Write+0x146>
    245c:	8f a9       	ldd	r24, Y+55	; 0x37
    245e:	98 ad       	ldd	r25, Y+56	; 0x38
    2460:	85 30       	cpi	r24, 0x05	; 5
    2462:	91 05       	cpc	r25, r1
    2464:	94 f4       	brge	.+36     	; 0x248a <steppermotor3Write+0x66>
    2466:	8f a9       	ldd	r24, Y+55	; 0x37
    2468:	98 ad       	ldd	r25, Y+56	; 0x38
    246a:	82 30       	cpi	r24, 0x02	; 2
    246c:	91 05       	cpc	r25, r1
    246e:	09 f4       	brne	.+2      	; 0x2472 <steppermotor3Write+0x4e>
    2470:	42 c0       	rjmp	.+132    	; 0x24f6 <steppermotor3Write+0xd2>
    2472:	8f a9       	ldd	r24, Y+55	; 0x37
    2474:	98 ad       	ldd	r25, Y+56	; 0x38
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	91 05       	cpc	r25, r1
    247a:	0c f0       	brlt	.+2      	; 0x247e <steppermotor3Write+0x5a>
    247c:	59 c0       	rjmp	.+178    	; 0x2530 <steppermotor3Write+0x10c>
    247e:	8f a9       	ldd	r24, Y+55	; 0x37
    2480:	98 ad       	ldd	r25, Y+56	; 0x38
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	91 05       	cpc	r25, r1
    2486:	d1 f0       	breq	.+52     	; 0x24bc <steppermotor3Write+0x98>
    2488:	00 c1       	rjmp	.+512    	; 0x268a <steppermotor3Write+0x266>
    248a:	8f a9       	ldd	r24, Y+55	; 0x37
    248c:	98 ad       	ldd	r25, Y+56	; 0x38
    248e:	86 30       	cpi	r24, 0x06	; 6
    2490:	91 05       	cpc	r25, r1
    2492:	09 f4       	brne	.+2      	; 0x2496 <steppermotor3Write+0x72>
    2494:	a4 c0       	rjmp	.+328    	; 0x25de <steppermotor3Write+0x1ba>
    2496:	8f a9       	ldd	r24, Y+55	; 0x37
    2498:	98 ad       	ldd	r25, Y+56	; 0x38
    249a:	86 30       	cpi	r24, 0x06	; 6
    249c:	91 05       	cpc	r25, r1
    249e:	0c f4       	brge	.+2      	; 0x24a2 <steppermotor3Write+0x7e>
    24a0:	81 c0       	rjmp	.+258    	; 0x25a4 <steppermotor3Write+0x180>
    24a2:	8f a9       	ldd	r24, Y+55	; 0x37
    24a4:	98 ad       	ldd	r25, Y+56	; 0x38
    24a6:	87 30       	cpi	r24, 0x07	; 7
    24a8:	91 05       	cpc	r25, r1
    24aa:	09 f4       	brne	.+2      	; 0x24ae <steppermotor3Write+0x8a>
    24ac:	b5 c0       	rjmp	.+362    	; 0x2618 <steppermotor3Write+0x1f4>
    24ae:	8f a9       	ldd	r24, Y+55	; 0x37
    24b0:	98 ad       	ldd	r25, Y+56	; 0x38
    24b2:	88 30       	cpi	r24, 0x08	; 8
    24b4:	91 05       	cpc	r25, r1
    24b6:	09 f4       	brne	.+2      	; 0x24ba <steppermotor3Write+0x96>
    24b8:	cc c0       	rjmp	.+408    	; 0x2652 <steppermotor3Write+0x22e>
    24ba:	e7 c0       	rjmp	.+462    	; 0x268a <steppermotor3Write+0x266>
            {
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    24bc:	ab e0       	ldi	r26, 0x0B	; 11
    24be:	b1 e0       	ldi	r27, 0x01	; 1
    24c0:	eb e0       	ldi	r30, 0x0B	; 11
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	80 81       	ld	r24, Z
    24c6:	80 68       	ori	r24, 0x80	; 128
    24c8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    24ca:	ab e0       	ldi	r26, 0x0B	; 11
    24cc:	b1 e0       	ldi	r27, 0x01	; 1
    24ce:	eb e0       	ldi	r30, 0x0B	; 11
    24d0:	f1 e0       	ldi	r31, 0x01	; 1
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 7d       	andi	r24, 0xDF	; 223
    24d6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    24d8:	ab e0       	ldi	r26, 0x0B	; 11
    24da:	b1 e0       	ldi	r27, 0x01	; 1
    24dc:	eb e0       	ldi	r30, 0x0B	; 11
    24de:	f1 e0       	ldi	r31, 0x01	; 1
    24e0:	80 81       	ld	r24, Z
    24e2:	87 7f       	andi	r24, 0xF7	; 247
    24e4:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    24e6:	ab e0       	ldi	r26, 0x0B	; 11
    24e8:	b1 e0       	ldi	r27, 0x01	; 1
    24ea:	eb e0       	ldi	r30, 0x0B	; 11
    24ec:	f1 e0       	ldi	r31, 0x01	; 1
    24ee:	80 81       	ld	r24, Z
    24f0:	8d 7f       	andi	r24, 0xFD	; 253
    24f2:	8c 93       	st	X, r24
    24f4:	ca c0       	rjmp	.+404    	; 0x268a <steppermotor3Write+0x266>
                break;
            case 2 :
                PORTStepper3 |= (1 << PStepper3_1);
    24f6:	ab e0       	ldi	r26, 0x0B	; 11
    24f8:	b1 e0       	ldi	r27, 0x01	; 1
    24fa:	eb e0       	ldi	r30, 0x0B	; 11
    24fc:	f1 e0       	ldi	r31, 0x01	; 1
    24fe:	80 81       	ld	r24, Z
    2500:	80 68       	ori	r24, 0x80	; 128
    2502:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    2504:	ab e0       	ldi	r26, 0x0B	; 11
    2506:	b1 e0       	ldi	r27, 0x01	; 1
    2508:	eb e0       	ldi	r30, 0x0B	; 11
    250a:	f1 e0       	ldi	r31, 0x01	; 1
    250c:	80 81       	ld	r24, Z
    250e:	80 62       	ori	r24, 0x20	; 32
    2510:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2512:	ab e0       	ldi	r26, 0x0B	; 11
    2514:	b1 e0       	ldi	r27, 0x01	; 1
    2516:	eb e0       	ldi	r30, 0x0B	; 11
    2518:	f1 e0       	ldi	r31, 0x01	; 1
    251a:	80 81       	ld	r24, Z
    251c:	87 7f       	andi	r24, 0xF7	; 247
    251e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2520:	ab e0       	ldi	r26, 0x0B	; 11
    2522:	b1 e0       	ldi	r27, 0x01	; 1
    2524:	eb e0       	ldi	r30, 0x0B	; 11
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	80 81       	ld	r24, Z
    252a:	8d 7f       	andi	r24, 0xFD	; 253
    252c:	8c 93       	st	X, r24
    252e:	ad c0       	rjmp	.+346    	; 0x268a <steppermotor3Write+0x266>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2530:	ab e0       	ldi	r26, 0x0B	; 11
    2532:	b1 e0       	ldi	r27, 0x01	; 1
    2534:	eb e0       	ldi	r30, 0x0B	; 11
    2536:	f1 e0       	ldi	r31, 0x01	; 1
    2538:	80 81       	ld	r24, Z
    253a:	8f 77       	andi	r24, 0x7F	; 127
    253c:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    253e:	ab e0       	ldi	r26, 0x0B	; 11
    2540:	b1 e0       	ldi	r27, 0x01	; 1
    2542:	eb e0       	ldi	r30, 0x0B	; 11
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	80 81       	ld	r24, Z
    2548:	80 62       	ori	r24, 0x20	; 32
    254a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    254c:	ab e0       	ldi	r26, 0x0B	; 11
    254e:	b1 e0       	ldi	r27, 0x01	; 1
    2550:	eb e0       	ldi	r30, 0x0B	; 11
    2552:	f1 e0       	ldi	r31, 0x01	; 1
    2554:	80 81       	ld	r24, Z
    2556:	87 7f       	andi	r24, 0xF7	; 247
    2558:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    255a:	ab e0       	ldi	r26, 0x0B	; 11
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	eb e0       	ldi	r30, 0x0B	; 11
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	80 81       	ld	r24, Z
    2564:	8d 7f       	andi	r24, 0xFD	; 253
    2566:	8c 93       	st	X, r24
    2568:	90 c0       	rjmp	.+288    	; 0x268a <steppermotor3Write+0x266>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    256a:	ab e0       	ldi	r26, 0x0B	; 11
    256c:	b1 e0       	ldi	r27, 0x01	; 1
    256e:	eb e0       	ldi	r30, 0x0B	; 11
    2570:	f1 e0       	ldi	r31, 0x01	; 1
    2572:	80 81       	ld	r24, Z
    2574:	8f 77       	andi	r24, 0x7F	; 127
    2576:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    2578:	ab e0       	ldi	r26, 0x0B	; 11
    257a:	b1 e0       	ldi	r27, 0x01	; 1
    257c:	eb e0       	ldi	r30, 0x0B	; 11
    257e:	f1 e0       	ldi	r31, 0x01	; 1
    2580:	80 81       	ld	r24, Z
    2582:	80 62       	ori	r24, 0x20	; 32
    2584:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    2586:	ab e0       	ldi	r26, 0x0B	; 11
    2588:	b1 e0       	ldi	r27, 0x01	; 1
    258a:	eb e0       	ldi	r30, 0x0B	; 11
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2594:	ab e0       	ldi	r26, 0x0B	; 11
    2596:	b1 e0       	ldi	r27, 0x01	; 1
    2598:	eb e0       	ldi	r30, 0x0B	; 11
    259a:	f1 e0       	ldi	r31, 0x01	; 1
    259c:	80 81       	ld	r24, Z
    259e:	8d 7f       	andi	r24, 0xFD	; 253
    25a0:	8c 93       	st	X, r24
    25a2:	73 c0       	rjmp	.+230    	; 0x268a <steppermotor3Write+0x266>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    25a4:	ab e0       	ldi	r26, 0x0B	; 11
    25a6:	b1 e0       	ldi	r27, 0x01	; 1
    25a8:	eb e0       	ldi	r30, 0x0B	; 11
    25aa:	f1 e0       	ldi	r31, 0x01	; 1
    25ac:	80 81       	ld	r24, Z
    25ae:	8f 77       	andi	r24, 0x7F	; 127
    25b0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    25b2:	ab e0       	ldi	r26, 0x0B	; 11
    25b4:	b1 e0       	ldi	r27, 0x01	; 1
    25b6:	eb e0       	ldi	r30, 0x0B	; 11
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7d       	andi	r24, 0xDF	; 223
    25be:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    25c0:	ab e0       	ldi	r26, 0x0B	; 11
    25c2:	b1 e0       	ldi	r27, 0x01	; 1
    25c4:	eb e0       	ldi	r30, 0x0B	; 11
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	80 81       	ld	r24, Z
    25ca:	88 60       	ori	r24, 0x08	; 8
    25cc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    25ce:	ab e0       	ldi	r26, 0x0B	; 11
    25d0:	b1 e0       	ldi	r27, 0x01	; 1
    25d2:	eb e0       	ldi	r30, 0x0B	; 11
    25d4:	f1 e0       	ldi	r31, 0x01	; 1
    25d6:	80 81       	ld	r24, Z
    25d8:	8d 7f       	andi	r24, 0xFD	; 253
    25da:	8c 93       	st	X, r24
    25dc:	56 c0       	rjmp	.+172    	; 0x268a <steppermotor3Write+0x266>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    25de:	ab e0       	ldi	r26, 0x0B	; 11
    25e0:	b1 e0       	ldi	r27, 0x01	; 1
    25e2:	eb e0       	ldi	r30, 0x0B	; 11
    25e4:	f1 e0       	ldi	r31, 0x01	; 1
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 77       	andi	r24, 0x7F	; 127
    25ea:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    25ec:	ab e0       	ldi	r26, 0x0B	; 11
    25ee:	b1 e0       	ldi	r27, 0x01	; 1
    25f0:	eb e0       	ldi	r30, 0x0B	; 11
    25f2:	f1 e0       	ldi	r31, 0x01	; 1
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 7d       	andi	r24, 0xDF	; 223
    25f8:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    25fa:	ab e0       	ldi	r26, 0x0B	; 11
    25fc:	b1 e0       	ldi	r27, 0x01	; 1
    25fe:	eb e0       	ldi	r30, 0x0B	; 11
    2600:	f1 e0       	ldi	r31, 0x01	; 1
    2602:	80 81       	ld	r24, Z
    2604:	88 60       	ori	r24, 0x08	; 8
    2606:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    2608:	ab e0       	ldi	r26, 0x0B	; 11
    260a:	b1 e0       	ldi	r27, 0x01	; 1
    260c:	eb e0       	ldi	r30, 0x0B	; 11
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	80 81       	ld	r24, Z
    2612:	82 60       	ori	r24, 0x02	; 2
    2614:	8c 93       	st	X, r24
    2616:	39 c0       	rjmp	.+114    	; 0x268a <steppermotor3Write+0x266>
                break;
            case 7 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2618:	ab e0       	ldi	r26, 0x0B	; 11
    261a:	b1 e0       	ldi	r27, 0x01	; 1
    261c:	eb e0       	ldi	r30, 0x0B	; 11
    261e:	f1 e0       	ldi	r31, 0x01	; 1
    2620:	80 81       	ld	r24, Z
    2622:	8f 77       	andi	r24, 0x7F	; 127
    2624:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2626:	ab e0       	ldi	r26, 0x0B	; 11
    2628:	b1 e0       	ldi	r27, 0x01	; 1
    262a:	eb e0       	ldi	r30, 0x0B	; 11
    262c:	f1 e0       	ldi	r31, 0x01	; 1
    262e:	80 81       	ld	r24, Z
    2630:	8f 7d       	andi	r24, 0xDF	; 223
    2632:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2634:	ab e0       	ldi	r26, 0x0B	; 11
    2636:	b1 e0       	ldi	r27, 0x01	; 1
    2638:	eb e0       	ldi	r30, 0x0B	; 11
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	80 81       	ld	r24, Z
    263e:	87 7f       	andi	r24, 0xF7	; 247
    2640:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    2642:	ab e0       	ldi	r26, 0x0B	; 11
    2644:	b1 e0       	ldi	r27, 0x01	; 1
    2646:	eb e0       	ldi	r30, 0x0B	; 11
    2648:	f1 e0       	ldi	r31, 0x01	; 1
    264a:	80 81       	ld	r24, Z
    264c:	82 60       	ori	r24, 0x02	; 2
    264e:	8c 93       	st	X, r24
    2650:	1c c0       	rjmp	.+56     	; 0x268a <steppermotor3Write+0x266>
                break;
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    2652:	ab e0       	ldi	r26, 0x0B	; 11
    2654:	b1 e0       	ldi	r27, 0x01	; 1
    2656:	eb e0       	ldi	r30, 0x0B	; 11
    2658:	f1 e0       	ldi	r31, 0x01	; 1
    265a:	80 81       	ld	r24, Z
    265c:	80 68       	ori	r24, 0x80	; 128
    265e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2660:	ab e0       	ldi	r26, 0x0B	; 11
    2662:	b1 e0       	ldi	r27, 0x01	; 1
    2664:	eb e0       	ldi	r30, 0x0B	; 11
    2666:	f1 e0       	ldi	r31, 0x01	; 1
    2668:	80 81       	ld	r24, Z
    266a:	8f 7d       	andi	r24, 0xDF	; 223
    266c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    266e:	ab e0       	ldi	r26, 0x0B	; 11
    2670:	b1 e0       	ldi	r27, 0x01	; 1
    2672:	eb e0       	ldi	r30, 0x0B	; 11
    2674:	f1 e0       	ldi	r31, 0x01	; 1
    2676:	80 81       	ld	r24, Z
    2678:	87 7f       	andi	r24, 0xF7	; 247
    267a:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    267c:	ab e0       	ldi	r26, 0x0B	; 11
    267e:	b1 e0       	ldi	r27, 0x01	; 1
    2680:	eb e0       	ldi	r30, 0x0B	; 11
    2682:	f1 e0       	ldi	r31, 0x01	; 1
    2684:	80 81       	ld	r24, Z
    2686:	82 60       	ori	r24, 0x02	; 2
    2688:	8c 93       	st	X, r24
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	af e2       	ldi	r26, 0x2F	; 47
    2690:	b4 e4       	ldi	r27, 0x44	; 68
    2692:	8d a7       	std	Y+45, r24	; 0x2d
    2694:	9e a7       	std	Y+46, r25	; 0x2e
    2696:	af a7       	std	Y+47, r26	; 0x2f
    2698:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    269a:	6d a5       	ldd	r22, Y+45	; 0x2d
    269c:	7e a5       	ldd	r23, Y+46	; 0x2e
    269e:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a0:	98 a9       	ldd	r25, Y+48	; 0x30
    26a2:	2b ea       	ldi	r18, 0xAB	; 171
    26a4:	3a ea       	ldi	r19, 0xAA	; 170
    26a6:	4a ea       	ldi	r20, 0xAA	; 170
    26a8:	50 e4       	ldi	r21, 0x40	; 64
    26aa:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	89 a7       	std	Y+41, r24	; 0x29
    26b4:	9a a7       	std	Y+42, r25	; 0x2a
    26b6:	ab a7       	std	Y+43, r26	; 0x2b
    26b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26ba:	69 a5       	ldd	r22, Y+41	; 0x29
    26bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    26be:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	1c f4       	brge	.+6      	; 0x26d8 <steppermotor3Write+0x2b4>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	88 a7       	std	Y+40, r24	; 0x28
    26d6:	91 c0       	rjmp	.+290    	; 0x27fa <steppermotor3Write+0x3d6>
	else if (__tmp > 255)
    26d8:	69 a5       	ldd	r22, Y+41	; 0x29
    26da:	7a a5       	ldd	r23, Y+42	; 0x2a
    26dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26de:	9c a5       	ldd	r25, Y+44	; 0x2c
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	53 e4       	ldi	r21, 0x43	; 67
    26e8:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	0c f0       	brlt	.+2      	; 0x26f2 <steppermotor3Write+0x2ce>
    26f0:	7b c0       	rjmp	.+246    	; 0x27e8 <steppermotor3Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    26f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    26f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    26f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f8:	98 a9       	ldd	r25, Y+48	; 0x30
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a e7       	ldi	r20, 0x7A	; 122
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8c a3       	std	Y+36, r24	; 0x24
    270c:	9d a3       	std	Y+37, r25	; 0x25
    270e:	ae a3       	std	Y+38, r26	; 0x26
    2710:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	6c a1       	ldd	r22, Y+36	; 0x24
    2714:	7d a1       	ldd	r23, Y+37	; 0x25
    2716:	8e a1       	ldd	r24, Y+38	; 0x26
    2718:	9f a1       	ldd	r25, Y+39	; 0x27
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a e7       	ldi	r20, 0x7A	; 122
    2720:	55 e4       	ldi	r21, 0x45	; 69
    2722:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	88 a3       	std	Y+32, r24	; 0x20
    272c:	99 a3       	std	Y+33, r25	; 0x21
    272e:	aa a3       	std	Y+34, r26	; 0x22
    2730:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2732:	68 a1       	ldd	r22, Y+32	; 0x20
    2734:	79 a1       	ldd	r23, Y+33	; 0x21
    2736:	8a a1       	ldd	r24, Y+34	; 0x22
    2738:	9b a1       	ldd	r25, Y+35	; 0x23
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	2c f4       	brge	.+10     	; 0x2754 <steppermotor3Write+0x330>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9f 8f       	std	Y+31, r25	; 0x1f
    2750:	8e 8f       	std	Y+30, r24	; 0x1e
    2752:	3f c0       	rjmp	.+126    	; 0x27d2 <steppermotor3Write+0x3ae>
	else if (__tmp > 65535)
    2754:	68 a1       	ldd	r22, Y+32	; 0x20
    2756:	79 a1       	ldd	r23, Y+33	; 0x21
    2758:	8a a1       	ldd	r24, Y+34	; 0x22
    275a:	9b a1       	ldd	r25, Y+35	; 0x23
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	4c f5       	brge	.+82     	; 0x27be <steppermotor3Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	6c a1       	ldd	r22, Y+36	; 0x24
    276e:	7d a1       	ldd	r23, Y+37	; 0x25
    2770:	8e a1       	ldd	r24, Y+38	; 0x26
    2772:	9f a1       	ldd	r25, Y+39	; 0x27
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9f 8f       	std	Y+31, r25	; 0x1f
    2792:	8e 8f       	std	Y+30, r24	; 0x1e
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <steppermotor3Write+0x390>
    2796:	80 e9       	ldi	r24, 0x90	; 144
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	9d 8f       	std	Y+29, r25	; 0x1d
    279c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    279e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <steppermotor3Write+0x37e>
    27a6:	9d 8f       	std	Y+29, r25	; 0x1d
    27a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9f 8f       	std	Y+31, r25	; 0x1f
    27b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <steppermotor3Write+0x372>
    27bc:	24 c0       	rjmp	.+72     	; 0x2806 <steppermotor3Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	68 a1       	ldd	r22, Y+32	; 0x20
    27c0:	79 a1       	ldd	r23, Y+33	; 0x21
    27c2:	8a a1       	ldd	r24, Y+34	; 0x22
    27c4:	9b a1       	ldd	r25, Y+35	; 0x23
    27c6:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9f 8f       	std	Y+31, r25	; 0x1f
    27d0:	8e 8f       	std	Y+30, r24	; 0x1e
    27d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27d6:	9b 8f       	std	Y+27, r25	; 0x1b
    27d8:	8a 8f       	std	Y+26, r24	; 0x1a
    27da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <steppermotor3Write+0x3ba>
    27e2:	9b 8f       	std	Y+27, r25	; 0x1b
    27e4:	8a 8f       	std	Y+26, r24	; 0x1a
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <steppermotor3Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27e8:	69 a5       	ldd	r22, Y+41	; 0x29
    27ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    27ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	88 a7       	std	Y+40, r24	; 0x28
    27fa:	88 a5       	ldd	r24, Y+40	; 0x28
    27fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2800:	8a 95       	dec	r24
    2802:	f1 f7       	brne	.-4      	; 0x2800 <steppermotor3Write+0x3dc>
    2804:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor3Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    2806:	8b a9       	ldd	r24, Y+51	; 0x33
    2808:	9c a9       	ldd	r25, Y+52	; 0x34
    280a:	01 96       	adiw	r24, 0x01	; 1
    280c:	9c ab       	std	Y+52, r25	; 0x34
    280e:	8b ab       	std	Y+51, r24	; 0x33
    2810:	8b a9       	ldd	r24, Y+51	; 0x33
    2812:	9c a9       	ldd	r25, Y+52	; 0x34
    2814:	88 30       	cpi	r24, 0x08	; 8
    2816:	91 05       	cpc	r25, r1
    2818:	0c f4       	brge	.+2      	; 0x281c <steppermotor3Write+0x3f8>
    281a:	16 ce       	rjmp	.-980    	; 0x2448 <steppermotor3Write+0x24>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    281c:	1e aa       	std	Y+54, r1	; 0x36
    281e:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor3Write(int a)
{
    while(a  == 1)
    2820:	8d a9       	ldd	r24, Y+53	; 0x35
    2822:	9e a9       	ldd	r25, Y+54	; 0x36
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	91 05       	cpc	r25, r1
    2828:	09 f4       	brne	.+2      	; 0x282c <steppermotor3Write+0x408>
    282a:	09 ce       	rjmp	.-1006   	; 0x243e <steppermotor3Write+0x1a>
    282c:	f0 c1       	rjmp	.+992    	; 0x2c0e <steppermotor3Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    282e:	88 e0       	ldi	r24, 0x08	; 8
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9a ab       	std	Y+50, r25	; 0x32
    2834:	89 ab       	std	Y+49, r24	; 0x31
    2836:	e3 c1       	rjmp	.+966    	; 0x2bfe <steppermotor3Write+0x7da>
        {
            switch (i)
    2838:	89 a9       	ldd	r24, Y+49	; 0x31
    283a:	9a a9       	ldd	r25, Y+50	; 0x32
    283c:	9a af       	std	Y+58, r25	; 0x3a
    283e:	89 af       	std	Y+57, r24	; 0x39
    2840:	89 ad       	ldd	r24, Y+57	; 0x39
    2842:	9a ad       	ldd	r25, Y+58	; 0x3a
    2844:	84 30       	cpi	r24, 0x04	; 4
    2846:	91 05       	cpc	r25, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <steppermotor3Write+0x428>
    284a:	a3 c0       	rjmp	.+326    	; 0x2992 <steppermotor3Write+0x56e>
    284c:	89 ad       	ldd	r24, Y+57	; 0x39
    284e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2850:	85 30       	cpi	r24, 0x05	; 5
    2852:	91 05       	cpc	r25, r1
    2854:	94 f4       	brge	.+36     	; 0x287a <steppermotor3Write+0x456>
    2856:	89 ad       	ldd	r24, Y+57	; 0x39
    2858:	9a ad       	ldd	r25, Y+58	; 0x3a
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	91 05       	cpc	r25, r1
    285e:	09 f4       	brne	.+2      	; 0x2862 <steppermotor3Write+0x43e>
    2860:	5e c0       	rjmp	.+188    	; 0x291e <steppermotor3Write+0x4fa>
    2862:	89 ad       	ldd	r24, Y+57	; 0x39
    2864:	9a ad       	ldd	r25, Y+58	; 0x3a
    2866:	83 30       	cpi	r24, 0x03	; 3
    2868:	91 05       	cpc	r25, r1
    286a:	0c f0       	brlt	.+2      	; 0x286e <steppermotor3Write+0x44a>
    286c:	75 c0       	rjmp	.+234    	; 0x2958 <steppermotor3Write+0x534>
    286e:	89 ad       	ldd	r24, Y+57	; 0x39
    2870:	9a ad       	ldd	r25, Y+58	; 0x3a
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	91 05       	cpc	r25, r1
    2876:	b1 f1       	breq	.+108    	; 0x28e4 <steppermotor3Write+0x4c0>
    2878:	ff c0       	rjmp	.+510    	; 0x2a78 <steppermotor3Write+0x654>
    287a:	89 ad       	ldd	r24, Y+57	; 0x39
    287c:	9a ad       	ldd	r25, Y+58	; 0x3a
    287e:	86 30       	cpi	r24, 0x06	; 6
    2880:	91 05       	cpc	r25, r1
    2882:	09 f4       	brne	.+2      	; 0x2886 <steppermotor3Write+0x462>
    2884:	c0 c0       	rjmp	.+384    	; 0x2a06 <steppermotor3Write+0x5e2>
    2886:	89 ad       	ldd	r24, Y+57	; 0x39
    2888:	9a ad       	ldd	r25, Y+58	; 0x3a
    288a:	86 30       	cpi	r24, 0x06	; 6
    288c:	91 05       	cpc	r25, r1
    288e:	0c f4       	brge	.+2      	; 0x2892 <steppermotor3Write+0x46e>
    2890:	9d c0       	rjmp	.+314    	; 0x29cc <steppermotor3Write+0x5a8>
    2892:	89 ad       	ldd	r24, Y+57	; 0x39
    2894:	9a ad       	ldd	r25, Y+58	; 0x3a
    2896:	87 30       	cpi	r24, 0x07	; 7
    2898:	91 05       	cpc	r25, r1
    289a:	09 f4       	brne	.+2      	; 0x289e <steppermotor3Write+0x47a>
    289c:	d1 c0       	rjmp	.+418    	; 0x2a40 <steppermotor3Write+0x61c>
    289e:	89 ad       	ldd	r24, Y+57	; 0x39
    28a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    28a2:	88 30       	cpi	r24, 0x08	; 8
    28a4:	91 05       	cpc	r25, r1
    28a6:	09 f0       	breq	.+2      	; 0x28aa <steppermotor3Write+0x486>
    28a8:	e7 c0       	rjmp	.+462    	; 0x2a78 <steppermotor3Write+0x654>
            {
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    28aa:	ab e0       	ldi	r26, 0x0B	; 11
    28ac:	b1 e0       	ldi	r27, 0x01	; 1
    28ae:	eb e0       	ldi	r30, 0x0B	; 11
    28b0:	f1 e0       	ldi	r31, 0x01	; 1
    28b2:	80 81       	ld	r24, Z
    28b4:	80 68       	ori	r24, 0x80	; 128
    28b6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    28b8:	ab e0       	ldi	r26, 0x0B	; 11
    28ba:	b1 e0       	ldi	r27, 0x01	; 1
    28bc:	eb e0       	ldi	r30, 0x0B	; 11
    28be:	f1 e0       	ldi	r31, 0x01	; 1
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 7d       	andi	r24, 0xDF	; 223
    28c4:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    28c6:	ab e0       	ldi	r26, 0x0B	; 11
    28c8:	b1 e0       	ldi	r27, 0x01	; 1
    28ca:	eb e0       	ldi	r30, 0x0B	; 11
    28cc:	f1 e0       	ldi	r31, 0x01	; 1
    28ce:	80 81       	ld	r24, Z
    28d0:	87 7f       	andi	r24, 0xF7	; 247
    28d2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    28d4:	ab e0       	ldi	r26, 0x0B	; 11
    28d6:	b1 e0       	ldi	r27, 0x01	; 1
    28d8:	eb e0       	ldi	r30, 0x0B	; 11
    28da:	f1 e0       	ldi	r31, 0x01	; 1
    28dc:	80 81       	ld	r24, Z
    28de:	8d 7f       	andi	r24, 0xFD	; 253
    28e0:	8c 93       	st	X, r24
    28e2:	ca c0       	rjmp	.+404    	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    28e4:	ab e0       	ldi	r26, 0x0B	; 11
    28e6:	b1 e0       	ldi	r27, 0x01	; 1
    28e8:	eb e0       	ldi	r30, 0x0B	; 11
    28ea:	f1 e0       	ldi	r31, 0x01	; 1
    28ec:	80 81       	ld	r24, Z
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    28f2:	ab e0       	ldi	r26, 0x0B	; 11
    28f4:	b1 e0       	ldi	r27, 0x01	; 1
    28f6:	eb e0       	ldi	r30, 0x0B	; 11
    28f8:	f1 e0       	ldi	r31, 0x01	; 1
    28fa:	80 81       	ld	r24, Z
    28fc:	80 62       	ori	r24, 0x20	; 32
    28fe:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2900:	ab e0       	ldi	r26, 0x0B	; 11
    2902:	b1 e0       	ldi	r27, 0x01	; 1
    2904:	eb e0       	ldi	r30, 0x0B	; 11
    2906:	f1 e0       	ldi	r31, 0x01	; 1
    2908:	80 81       	ld	r24, Z
    290a:	87 7f       	andi	r24, 0xF7	; 247
    290c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    290e:	ab e0       	ldi	r26, 0x0B	; 11
    2910:	b1 e0       	ldi	r27, 0x01	; 1
    2912:	eb e0       	ldi	r30, 0x0B	; 11
    2914:	f1 e0       	ldi	r31, 0x01	; 1
    2916:	80 81       	ld	r24, Z
    2918:	8d 7f       	andi	r24, 0xFD	; 253
    291a:	8c 93       	st	X, r24
    291c:	ad c0       	rjmp	.+346    	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 2 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    291e:	ab e0       	ldi	r26, 0x0B	; 11
    2920:	b1 e0       	ldi	r27, 0x01	; 1
    2922:	eb e0       	ldi	r30, 0x0B	; 11
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	80 81       	ld	r24, Z
    2928:	8f 77       	andi	r24, 0x7F	; 127
    292a:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    292c:	ab e0       	ldi	r26, 0x0B	; 11
    292e:	b1 e0       	ldi	r27, 0x01	; 1
    2930:	eb e0       	ldi	r30, 0x0B	; 11
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	80 81       	ld	r24, Z
    2936:	80 62       	ori	r24, 0x20	; 32
    2938:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    293a:	ab e0       	ldi	r26, 0x0B	; 11
    293c:	b1 e0       	ldi	r27, 0x01	; 1
    293e:	eb e0       	ldi	r30, 0x0B	; 11
    2940:	f1 e0       	ldi	r31, 0x01	; 1
    2942:	80 81       	ld	r24, Z
    2944:	87 7f       	andi	r24, 0xF7	; 247
    2946:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2948:	ab e0       	ldi	r26, 0x0B	; 11
    294a:	b1 e0       	ldi	r27, 0x01	; 1
    294c:	eb e0       	ldi	r30, 0x0B	; 11
    294e:	f1 e0       	ldi	r31, 0x01	; 1
    2950:	80 81       	ld	r24, Z
    2952:	8d 7f       	andi	r24, 0xFD	; 253
    2954:	8c 93       	st	X, r24
    2956:	90 c0       	rjmp	.+288    	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2958:	ab e0       	ldi	r26, 0x0B	; 11
    295a:	b1 e0       	ldi	r27, 0x01	; 1
    295c:	eb e0       	ldi	r30, 0x0B	; 11
    295e:	f1 e0       	ldi	r31, 0x01	; 1
    2960:	80 81       	ld	r24, Z
    2962:	8f 77       	andi	r24, 0x7F	; 127
    2964:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    2966:	ab e0       	ldi	r26, 0x0B	; 11
    2968:	b1 e0       	ldi	r27, 0x01	; 1
    296a:	eb e0       	ldi	r30, 0x0B	; 11
    296c:	f1 e0       	ldi	r31, 0x01	; 1
    296e:	80 81       	ld	r24, Z
    2970:	80 62       	ori	r24, 0x20	; 32
    2972:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    2974:	ab e0       	ldi	r26, 0x0B	; 11
    2976:	b1 e0       	ldi	r27, 0x01	; 1
    2978:	eb e0       	ldi	r30, 0x0B	; 11
    297a:	f1 e0       	ldi	r31, 0x01	; 1
    297c:	80 81       	ld	r24, Z
    297e:	88 60       	ori	r24, 0x08	; 8
    2980:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    2982:	ab e0       	ldi	r26, 0x0B	; 11
    2984:	b1 e0       	ldi	r27, 0x01	; 1
    2986:	eb e0       	ldi	r30, 0x0B	; 11
    2988:	f1 e0       	ldi	r31, 0x01	; 1
    298a:	80 81       	ld	r24, Z
    298c:	8d 7f       	andi	r24, 0xFD	; 253
    298e:	8c 93       	st	X, r24
    2990:	73 c0       	rjmp	.+230    	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2992:	ab e0       	ldi	r26, 0x0B	; 11
    2994:	b1 e0       	ldi	r27, 0x01	; 1
    2996:	eb e0       	ldi	r30, 0x0B	; 11
    2998:	f1 e0       	ldi	r31, 0x01	; 1
    299a:	80 81       	ld	r24, Z
    299c:	8f 77       	andi	r24, 0x7F	; 127
    299e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    29a0:	ab e0       	ldi	r26, 0x0B	; 11
    29a2:	b1 e0       	ldi	r27, 0x01	; 1
    29a4:	eb e0       	ldi	r30, 0x0B	; 11
    29a6:	f1 e0       	ldi	r31, 0x01	; 1
    29a8:	80 81       	ld	r24, Z
    29aa:	8f 7d       	andi	r24, 0xDF	; 223
    29ac:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    29ae:	ab e0       	ldi	r26, 0x0B	; 11
    29b0:	b1 e0       	ldi	r27, 0x01	; 1
    29b2:	eb e0       	ldi	r30, 0x0B	; 11
    29b4:	f1 e0       	ldi	r31, 0x01	; 1
    29b6:	80 81       	ld	r24, Z
    29b8:	88 60       	ori	r24, 0x08	; 8
    29ba:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    29bc:	ab e0       	ldi	r26, 0x0B	; 11
    29be:	b1 e0       	ldi	r27, 0x01	; 1
    29c0:	eb e0       	ldi	r30, 0x0B	; 11
    29c2:	f1 e0       	ldi	r31, 0x01	; 1
    29c4:	80 81       	ld	r24, Z
    29c6:	8d 7f       	andi	r24, 0xFD	; 253
    29c8:	8c 93       	st	X, r24
    29ca:	56 c0       	rjmp	.+172    	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    29cc:	ab e0       	ldi	r26, 0x0B	; 11
    29ce:	b1 e0       	ldi	r27, 0x01	; 1
    29d0:	eb e0       	ldi	r30, 0x0B	; 11
    29d2:	f1 e0       	ldi	r31, 0x01	; 1
    29d4:	80 81       	ld	r24, Z
    29d6:	8f 77       	andi	r24, 0x7F	; 127
    29d8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    29da:	ab e0       	ldi	r26, 0x0B	; 11
    29dc:	b1 e0       	ldi	r27, 0x01	; 1
    29de:	eb e0       	ldi	r30, 0x0B	; 11
    29e0:	f1 e0       	ldi	r31, 0x01	; 1
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 7d       	andi	r24, 0xDF	; 223
    29e6:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    29e8:	ab e0       	ldi	r26, 0x0B	; 11
    29ea:	b1 e0       	ldi	r27, 0x01	; 1
    29ec:	eb e0       	ldi	r30, 0x0B	; 11
    29ee:	f1 e0       	ldi	r31, 0x01	; 1
    29f0:	80 81       	ld	r24, Z
    29f2:	88 60       	ori	r24, 0x08	; 8
    29f4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    29f6:	ab e0       	ldi	r26, 0x0B	; 11
    29f8:	b1 e0       	ldi	r27, 0x01	; 1
    29fa:	eb e0       	ldi	r30, 0x0B	; 11
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	80 81       	ld	r24, Z
    2a00:	82 60       	ori	r24, 0x02	; 2
    2a02:	8c 93       	st	X, r24
    2a04:	39 c0       	rjmp	.+114    	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    2a06:	ab e0       	ldi	r26, 0x0B	; 11
    2a08:	b1 e0       	ldi	r27, 0x01	; 1
    2a0a:	eb e0       	ldi	r30, 0x0B	; 11
    2a0c:	f1 e0       	ldi	r31, 0x01	; 1
    2a0e:	80 81       	ld	r24, Z
    2a10:	8f 77       	andi	r24, 0x7F	; 127
    2a12:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2a14:	ab e0       	ldi	r26, 0x0B	; 11
    2a16:	b1 e0       	ldi	r27, 0x01	; 1
    2a18:	eb e0       	ldi	r30, 0x0B	; 11
    2a1a:	f1 e0       	ldi	r31, 0x01	; 1
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8f 7d       	andi	r24, 0xDF	; 223
    2a20:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2a22:	ab e0       	ldi	r26, 0x0B	; 11
    2a24:	b1 e0       	ldi	r27, 0x01	; 1
    2a26:	eb e0       	ldi	r30, 0x0B	; 11
    2a28:	f1 e0       	ldi	r31, 0x01	; 1
    2a2a:	80 81       	ld	r24, Z
    2a2c:	87 7f       	andi	r24, 0xF7	; 247
    2a2e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    2a30:	ab e0       	ldi	r26, 0x0B	; 11
    2a32:	b1 e0       	ldi	r27, 0x01	; 1
    2a34:	eb e0       	ldi	r30, 0x0B	; 11
    2a36:	f1 e0       	ldi	r31, 0x01	; 1
    2a38:	80 81       	ld	r24, Z
    2a3a:	82 60       	ori	r24, 0x02	; 2
    2a3c:	8c 93       	st	X, r24
    2a3e:	1c c0       	rjmp	.+56     	; 0x2a78 <steppermotor3Write+0x654>
                break;
            case 7 :
                PORTStepper3 |= (1 << PStepper3_1);
    2a40:	ab e0       	ldi	r26, 0x0B	; 11
    2a42:	b1 e0       	ldi	r27, 0x01	; 1
    2a44:	eb e0       	ldi	r30, 0x0B	; 11
    2a46:	f1 e0       	ldi	r31, 0x01	; 1
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 68       	ori	r24, 0x80	; 128
    2a4c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    2a4e:	ab e0       	ldi	r26, 0x0B	; 11
    2a50:	b1 e0       	ldi	r27, 0x01	; 1
    2a52:	eb e0       	ldi	r30, 0x0B	; 11
    2a54:	f1 e0       	ldi	r31, 0x01	; 1
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7d       	andi	r24, 0xDF	; 223
    2a5a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    2a5c:	ab e0       	ldi	r26, 0x0B	; 11
    2a5e:	b1 e0       	ldi	r27, 0x01	; 1
    2a60:	eb e0       	ldi	r30, 0x0B	; 11
    2a62:	f1 e0       	ldi	r31, 0x01	; 1
    2a64:	80 81       	ld	r24, Z
    2a66:	87 7f       	andi	r24, 0xF7	; 247
    2a68:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    2a6a:	ab e0       	ldi	r26, 0x0B	; 11
    2a6c:	b1 e0       	ldi	r27, 0x01	; 1
    2a6e:	eb e0       	ldi	r30, 0x0B	; 11
    2a70:	f1 e0       	ldi	r31, 0x01	; 1
    2a72:	80 81       	ld	r24, Z
    2a74:	82 60       	ori	r24, 0x02	; 2
    2a76:	8c 93       	st	X, r24
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	af e2       	ldi	r26, 0x2F	; 47
    2a7e:	b4 e4       	ldi	r27, 0x44	; 68
    2a80:	8d 8b       	std	Y+21, r24	; 0x15
    2a82:	9e 8b       	std	Y+22, r25	; 0x16
    2a84:	af 8b       	std	Y+23, r26	; 0x17
    2a86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a88:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a90:	2b ea       	ldi	r18, 0xAB	; 171
    2a92:	3a ea       	ldi	r19, 0xAA	; 170
    2a94:	4a ea       	ldi	r20, 0xAA	; 170
    2a96:	50 e4       	ldi	r21, 0x40	; 64
    2a98:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	89 8b       	std	Y+17, r24	; 0x11
    2aa2:	9a 8b       	std	Y+18, r25	; 0x12
    2aa4:	ab 8b       	std	Y+19, r26	; 0x13
    2aa6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2aa8:	69 89       	ldd	r22, Y+17	; 0x11
    2aaa:	7a 89       	ldd	r23, Y+18	; 0x12
    2aac:	8b 89       	ldd	r24, Y+19	; 0x13
    2aae:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	1c f4       	brge	.+6      	; 0x2ac6 <steppermotor3Write+0x6a2>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	88 8b       	std	Y+16, r24	; 0x10
    2ac4:	91 c0       	rjmp	.+290    	; 0x2be8 <steppermotor3Write+0x7c4>
	else if (__tmp > 255)
    2ac6:	69 89       	ldd	r22, Y+17	; 0x11
    2ac8:	7a 89       	ldd	r23, Y+18	; 0x12
    2aca:	8b 89       	ldd	r24, Y+19	; 0x13
    2acc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	53 e4       	ldi	r21, 0x43	; 67
    2ad6:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	0c f0       	brlt	.+2      	; 0x2ae0 <steppermotor3Write+0x6bc>
    2ade:	7b c0       	rjmp	.+246    	; 0x2bd6 <steppermotor3Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    2ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a e7       	ldi	r20, 0x7A	; 122
    2aee:	54 e4       	ldi	r21, 0x44	; 68
    2af0:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8c 87       	std	Y+12, r24	; 0x0c
    2afa:	9d 87       	std	Y+13, r25	; 0x0d
    2afc:	ae 87       	std	Y+14, r26	; 0x0e
    2afe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b00:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b02:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b04:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b06:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	4a e7       	ldi	r20, 0x7A	; 122
    2b0e:	55 e4       	ldi	r21, 0x45	; 69
    2b10:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	88 87       	std	Y+8, r24	; 0x08
    2b1a:	99 87       	std	Y+9, r25	; 0x09
    2b1c:	aa 87       	std	Y+10, r26	; 0x0a
    2b1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b20:	68 85       	ldd	r22, Y+8	; 0x08
    2b22:	79 85       	ldd	r23, Y+9	; 0x09
    2b24:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b26:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <steppermotor3Write+0x71e>
		__ticks = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9f 83       	std	Y+7, r25	; 0x07
    2b3e:	8e 83       	std	Y+6, r24	; 0x06
    2b40:	3f c0       	rjmp	.+126    	; 0x2bc0 <steppermotor3Write+0x79c>
	else if (__tmp > 65535)
    2b42:	68 85       	ldd	r22, Y+8	; 0x08
    2b44:	79 85       	ldd	r23, Y+9	; 0x09
    2b46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b48:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	4c f5       	brge	.+82     	; 0x2bac <steppermotor3Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b60:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9f 83       	std	Y+7, r25	; 0x07
    2b80:	8e 83       	std	Y+6, r24	; 0x06
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <steppermotor3Write+0x77e>
    2b84:	80 e9       	ldi	r24, 0x90	; 144
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	9d 83       	std	Y+5, r25	; 0x05
    2b8a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <steppermotor3Write+0x76c>
    2b94:	9d 83       	std	Y+5, r25	; 0x05
    2b96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b98:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9f 83       	std	Y+7, r25	; 0x07
    2ba0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <steppermotor3Write+0x760>
    2baa:	24 c0       	rjmp	.+72     	; 0x2bf4 <steppermotor3Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	68 85       	ldd	r22, Y+8	; 0x08
    2bae:	79 85       	ldd	r23, Y+9	; 0x09
    2bb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9f 83       	std	Y+7, r25	; 0x07
    2bbe:	8e 83       	std	Y+6, r24	; 0x06
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc4:	9b 83       	std	Y+3, r25	; 0x03
    2bc6:	8a 83       	std	Y+2, r24	; 0x02
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	9b 81       	ldd	r25, Y+3	; 0x03
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <steppermotor3Write+0x7a8>
    2bd0:	9b 83       	std	Y+3, r25	; 0x03
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <steppermotor3Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bd6:	69 89       	ldd	r22, Y+17	; 0x11
    2bd8:	7a 89       	ldd	r23, Y+18	; 0x12
    2bda:	8b 89       	ldd	r24, Y+19	; 0x13
    2bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bde:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	88 8b       	std	Y+16, r24	; 0x10
    2be8:	88 89       	ldd	r24, Y+16	; 0x10
    2bea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	8a 95       	dec	r24
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <steppermotor3Write+0x7ca>
    2bf2:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    2bf4:	89 a9       	ldd	r24, Y+49	; 0x31
    2bf6:	9a a9       	ldd	r25, Y+50	; 0x32
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9a ab       	std	Y+50, r25	; 0x32
    2bfc:	89 ab       	std	Y+49, r24	; 0x31
    2bfe:	89 a9       	ldd	r24, Y+49	; 0x31
    2c00:	9a a9       	ldd	r25, Y+50	; 0x32
    2c02:	18 16       	cp	r1, r24
    2c04:	19 06       	cpc	r1, r25
    2c06:	0c f4       	brge	.+2      	; 0x2c0a <steppermotor3Write+0x7e6>
    2c08:	17 ce       	rjmp	.-978    	; 0x2838 <steppermotor3Write+0x414>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    2c0a:	1e aa       	std	Y+54, r1	; 0x36
    2c0c:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    2c0e:	8d a9       	ldd	r24, Y+53	; 0x35
    2c10:	9e a9       	ldd	r25, Y+54	; 0x36
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	91 05       	cpc	r25, r1
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <steppermotor3Write+0x7f6>
    2c18:	0a ce       	rjmp	.-1004   	; 0x282e <steppermotor3Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    2c1a:	ea 96       	adiw	r28, 0x3a	; 58
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <steppermotor4Write>:

void steppermotor4Write(int a)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	ea 97       	sbiw	r28, 0x3a	; 58
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	9e ab       	std	Y+54, r25	; 0x36
    2c42:	8d ab       	std	Y+53, r24	; 0x35
    2c44:	f1 c1       	rjmp	.+994    	; 0x3028 <steppermotor4Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	9c ab       	std	Y+52, r25	; 0x34
    2c4c:	8b ab       	std	Y+51, r24	; 0x33
    2c4e:	e4 c1       	rjmp	.+968    	; 0x3018 <steppermotor4Write+0x3ec>
        {
            switch (i)
    2c50:	8b a9       	ldd	r24, Y+51	; 0x33
    2c52:	9c a9       	ldd	r25, Y+52	; 0x34
    2c54:	98 af       	std	Y+56, r25	; 0x38
    2c56:	8f ab       	std	Y+55, r24	; 0x37
    2c58:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5c:	84 30       	cpi	r24, 0x04	; 4
    2c5e:	91 05       	cpc	r25, r1
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <steppermotor4Write+0x38>
    2c62:	87 c0       	rjmp	.+270    	; 0x2d72 <steppermotor4Write+0x146>
    2c64:	8f a9       	ldd	r24, Y+55	; 0x37
    2c66:	98 ad       	ldd	r25, Y+56	; 0x38
    2c68:	85 30       	cpi	r24, 0x05	; 5
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	94 f4       	brge	.+36     	; 0x2c92 <steppermotor4Write+0x66>
    2c6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c70:	98 ad       	ldd	r25, Y+56	; 0x38
    2c72:	82 30       	cpi	r24, 0x02	; 2
    2c74:	91 05       	cpc	r25, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <steppermotor4Write+0x4e>
    2c78:	42 c0       	rjmp	.+132    	; 0x2cfe <steppermotor4Write+0xd2>
    2c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c7e:	83 30       	cpi	r24, 0x03	; 3
    2c80:	91 05       	cpc	r25, r1
    2c82:	0c f0       	brlt	.+2      	; 0x2c86 <steppermotor4Write+0x5a>
    2c84:	59 c0       	rjmp	.+178    	; 0x2d38 <steppermotor4Write+0x10c>
    2c86:	8f a9       	ldd	r24, Y+55	; 0x37
    2c88:	98 ad       	ldd	r25, Y+56	; 0x38
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	d1 f0       	breq	.+52     	; 0x2cc4 <steppermotor4Write+0x98>
    2c90:	00 c1       	rjmp	.+512    	; 0x2e92 <steppermotor4Write+0x266>
    2c92:	8f a9       	ldd	r24, Y+55	; 0x37
    2c94:	98 ad       	ldd	r25, Y+56	; 0x38
    2c96:	86 30       	cpi	r24, 0x06	; 6
    2c98:	91 05       	cpc	r25, r1
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <steppermotor4Write+0x72>
    2c9c:	a4 c0       	rjmp	.+328    	; 0x2de6 <steppermotor4Write+0x1ba>
    2c9e:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca2:	86 30       	cpi	r24, 0x06	; 6
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	0c f4       	brge	.+2      	; 0x2caa <steppermotor4Write+0x7e>
    2ca8:	81 c0       	rjmp	.+258    	; 0x2dac <steppermotor4Write+0x180>
    2caa:	8f a9       	ldd	r24, Y+55	; 0x37
    2cac:	98 ad       	ldd	r25, Y+56	; 0x38
    2cae:	87 30       	cpi	r24, 0x07	; 7
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <steppermotor4Write+0x8a>
    2cb4:	b5 c0       	rjmp	.+362    	; 0x2e20 <steppermotor4Write+0x1f4>
    2cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cba:	88 30       	cpi	r24, 0x08	; 8
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <steppermotor4Write+0x96>
    2cc0:	cc c0       	rjmp	.+408    	; 0x2e5a <steppermotor4Write+0x22e>
    2cc2:	e7 c0       	rjmp	.+462    	; 0x2e92 <steppermotor4Write+0x266>
            {
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    2cc4:	ab e0       	ldi	r26, 0x0B	; 11
    2cc6:	b1 e0       	ldi	r27, 0x01	; 1
    2cc8:	eb e0       	ldi	r30, 0x0B	; 11
    2cca:	f1 e0       	ldi	r31, 0x01	; 1
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 64       	ori	r24, 0x40	; 64
    2cd0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2cd2:	ab e0       	ldi	r26, 0x0B	; 11
    2cd4:	b1 e0       	ldi	r27, 0x01	; 1
    2cd6:	eb e0       	ldi	r30, 0x0B	; 11
    2cd8:	f1 e0       	ldi	r31, 0x01	; 1
    2cda:	80 81       	ld	r24, Z
    2cdc:	8f 7e       	andi	r24, 0xEF	; 239
    2cde:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2ce0:	ab e0       	ldi	r26, 0x0B	; 11
    2ce2:	b1 e0       	ldi	r27, 0x01	; 1
    2ce4:	eb e0       	ldi	r30, 0x0B	; 11
    2ce6:	f1 e0       	ldi	r31, 0x01	; 1
    2ce8:	80 81       	ld	r24, Z
    2cea:	8b 7f       	andi	r24, 0xFB	; 251
    2cec:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2cee:	ab e0       	ldi	r26, 0x0B	; 11
    2cf0:	b1 e0       	ldi	r27, 0x01	; 1
    2cf2:	eb e0       	ldi	r30, 0x0B	; 11
    2cf4:	f1 e0       	ldi	r31, 0x01	; 1
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8e 7f       	andi	r24, 0xFE	; 254
    2cfa:	8c 93       	st	X, r24
    2cfc:	ca c0       	rjmp	.+404    	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 2 :
                PORTStepper4 |= (1 << PStepper4_1);
    2cfe:	ab e0       	ldi	r26, 0x0B	; 11
    2d00:	b1 e0       	ldi	r27, 0x01	; 1
    2d02:	eb e0       	ldi	r30, 0x0B	; 11
    2d04:	f1 e0       	ldi	r31, 0x01	; 1
    2d06:	80 81       	ld	r24, Z
    2d08:	80 64       	ori	r24, 0x40	; 64
    2d0a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2d0c:	ab e0       	ldi	r26, 0x0B	; 11
    2d0e:	b1 e0       	ldi	r27, 0x01	; 1
    2d10:	eb e0       	ldi	r30, 0x0B	; 11
    2d12:	f1 e0       	ldi	r31, 0x01	; 1
    2d14:	80 81       	ld	r24, Z
    2d16:	80 61       	ori	r24, 0x10	; 16
    2d18:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2d1a:	ab e0       	ldi	r26, 0x0B	; 11
    2d1c:	b1 e0       	ldi	r27, 0x01	; 1
    2d1e:	eb e0       	ldi	r30, 0x0B	; 11
    2d20:	f1 e0       	ldi	r31, 0x01	; 1
    2d22:	80 81       	ld	r24, Z
    2d24:	8b 7f       	andi	r24, 0xFB	; 251
    2d26:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2d28:	ab e0       	ldi	r26, 0x0B	; 11
    2d2a:	b1 e0       	ldi	r27, 0x01	; 1
    2d2c:	eb e0       	ldi	r30, 0x0B	; 11
    2d2e:	f1 e0       	ldi	r31, 0x01	; 1
    2d30:	80 81       	ld	r24, Z
    2d32:	8e 7f       	andi	r24, 0xFE	; 254
    2d34:	8c 93       	st	X, r24
    2d36:	ad c0       	rjmp	.+346    	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2d38:	ab e0       	ldi	r26, 0x0B	; 11
    2d3a:	b1 e0       	ldi	r27, 0x01	; 1
    2d3c:	eb e0       	ldi	r30, 0x0B	; 11
    2d3e:	f1 e0       	ldi	r31, 0x01	; 1
    2d40:	80 81       	ld	r24, Z
    2d42:	8f 7b       	andi	r24, 0xBF	; 191
    2d44:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2d46:	ab e0       	ldi	r26, 0x0B	; 11
    2d48:	b1 e0       	ldi	r27, 0x01	; 1
    2d4a:	eb e0       	ldi	r30, 0x0B	; 11
    2d4c:	f1 e0       	ldi	r31, 0x01	; 1
    2d4e:	80 81       	ld	r24, Z
    2d50:	80 61       	ori	r24, 0x10	; 16
    2d52:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2d54:	ab e0       	ldi	r26, 0x0B	; 11
    2d56:	b1 e0       	ldi	r27, 0x01	; 1
    2d58:	eb e0       	ldi	r30, 0x0B	; 11
    2d5a:	f1 e0       	ldi	r31, 0x01	; 1
    2d5c:	80 81       	ld	r24, Z
    2d5e:	8b 7f       	andi	r24, 0xFB	; 251
    2d60:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2d62:	ab e0       	ldi	r26, 0x0B	; 11
    2d64:	b1 e0       	ldi	r27, 0x01	; 1
    2d66:	eb e0       	ldi	r30, 0x0B	; 11
    2d68:	f1 e0       	ldi	r31, 0x01	; 1
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8e 7f       	andi	r24, 0xFE	; 254
    2d6e:	8c 93       	st	X, r24
    2d70:	90 c0       	rjmp	.+288    	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2d72:	ab e0       	ldi	r26, 0x0B	; 11
    2d74:	b1 e0       	ldi	r27, 0x01	; 1
    2d76:	eb e0       	ldi	r30, 0x0B	; 11
    2d78:	f1 e0       	ldi	r31, 0x01	; 1
    2d7a:	80 81       	ld	r24, Z
    2d7c:	8f 7b       	andi	r24, 0xBF	; 191
    2d7e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2d80:	ab e0       	ldi	r26, 0x0B	; 11
    2d82:	b1 e0       	ldi	r27, 0x01	; 1
    2d84:	eb e0       	ldi	r30, 0x0B	; 11
    2d86:	f1 e0       	ldi	r31, 0x01	; 1
    2d88:	80 81       	ld	r24, Z
    2d8a:	80 61       	ori	r24, 0x10	; 16
    2d8c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2d8e:	ab e0       	ldi	r26, 0x0B	; 11
    2d90:	b1 e0       	ldi	r27, 0x01	; 1
    2d92:	eb e0       	ldi	r30, 0x0B	; 11
    2d94:	f1 e0       	ldi	r31, 0x01	; 1
    2d96:	80 81       	ld	r24, Z
    2d98:	84 60       	ori	r24, 0x04	; 4
    2d9a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2d9c:	ab e0       	ldi	r26, 0x0B	; 11
    2d9e:	b1 e0       	ldi	r27, 0x01	; 1
    2da0:	eb e0       	ldi	r30, 0x0B	; 11
    2da2:	f1 e0       	ldi	r31, 0x01	; 1
    2da4:	80 81       	ld	r24, Z
    2da6:	8e 7f       	andi	r24, 0xFE	; 254
    2da8:	8c 93       	st	X, r24
    2daa:	73 c0       	rjmp	.+230    	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2dac:	ab e0       	ldi	r26, 0x0B	; 11
    2dae:	b1 e0       	ldi	r27, 0x01	; 1
    2db0:	eb e0       	ldi	r30, 0x0B	; 11
    2db2:	f1 e0       	ldi	r31, 0x01	; 1
    2db4:	80 81       	ld	r24, Z
    2db6:	8f 7b       	andi	r24, 0xBF	; 191
    2db8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2dba:	ab e0       	ldi	r26, 0x0B	; 11
    2dbc:	b1 e0       	ldi	r27, 0x01	; 1
    2dbe:	eb e0       	ldi	r30, 0x0B	; 11
    2dc0:	f1 e0       	ldi	r31, 0x01	; 1
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8f 7e       	andi	r24, 0xEF	; 239
    2dc6:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2dc8:	ab e0       	ldi	r26, 0x0B	; 11
    2dca:	b1 e0       	ldi	r27, 0x01	; 1
    2dcc:	eb e0       	ldi	r30, 0x0B	; 11
    2dce:	f1 e0       	ldi	r31, 0x01	; 1
    2dd0:	80 81       	ld	r24, Z
    2dd2:	84 60       	ori	r24, 0x04	; 4
    2dd4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2dd6:	ab e0       	ldi	r26, 0x0B	; 11
    2dd8:	b1 e0       	ldi	r27, 0x01	; 1
    2dda:	eb e0       	ldi	r30, 0x0B	; 11
    2ddc:	f1 e0       	ldi	r31, 0x01	; 1
    2dde:	80 81       	ld	r24, Z
    2de0:	8e 7f       	andi	r24, 0xFE	; 254
    2de2:	8c 93       	st	X, r24
    2de4:	56 c0       	rjmp	.+172    	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2de6:	ab e0       	ldi	r26, 0x0B	; 11
    2de8:	b1 e0       	ldi	r27, 0x01	; 1
    2dea:	eb e0       	ldi	r30, 0x0B	; 11
    2dec:	f1 e0       	ldi	r31, 0x01	; 1
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 7b       	andi	r24, 0xBF	; 191
    2df2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2df4:	ab e0       	ldi	r26, 0x0B	; 11
    2df6:	b1 e0       	ldi	r27, 0x01	; 1
    2df8:	eb e0       	ldi	r30, 0x0B	; 11
    2dfa:	f1 e0       	ldi	r31, 0x01	; 1
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8f 7e       	andi	r24, 0xEF	; 239
    2e00:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2e02:	ab e0       	ldi	r26, 0x0B	; 11
    2e04:	b1 e0       	ldi	r27, 0x01	; 1
    2e06:	eb e0       	ldi	r30, 0x0B	; 11
    2e08:	f1 e0       	ldi	r31, 0x01	; 1
    2e0a:	80 81       	ld	r24, Z
    2e0c:	84 60       	ori	r24, 0x04	; 4
    2e0e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2e10:	ab e0       	ldi	r26, 0x0B	; 11
    2e12:	b1 e0       	ldi	r27, 0x01	; 1
    2e14:	eb e0       	ldi	r30, 0x0B	; 11
    2e16:	f1 e0       	ldi	r31, 0x01	; 1
    2e18:	80 81       	ld	r24, Z
    2e1a:	81 60       	ori	r24, 0x01	; 1
    2e1c:	8c 93       	st	X, r24
    2e1e:	39 c0       	rjmp	.+114    	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 7 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2e20:	ab e0       	ldi	r26, 0x0B	; 11
    2e22:	b1 e0       	ldi	r27, 0x01	; 1
    2e24:	eb e0       	ldi	r30, 0x0B	; 11
    2e26:	f1 e0       	ldi	r31, 0x01	; 1
    2e28:	80 81       	ld	r24, Z
    2e2a:	8f 7b       	andi	r24, 0xBF	; 191
    2e2c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2e2e:	ab e0       	ldi	r26, 0x0B	; 11
    2e30:	b1 e0       	ldi	r27, 0x01	; 1
    2e32:	eb e0       	ldi	r30, 0x0B	; 11
    2e34:	f1 e0       	ldi	r31, 0x01	; 1
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 7e       	andi	r24, 0xEF	; 239
    2e3a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2e3c:	ab e0       	ldi	r26, 0x0B	; 11
    2e3e:	b1 e0       	ldi	r27, 0x01	; 1
    2e40:	eb e0       	ldi	r30, 0x0B	; 11
    2e42:	f1 e0       	ldi	r31, 0x01	; 1
    2e44:	80 81       	ld	r24, Z
    2e46:	8b 7f       	andi	r24, 0xFB	; 251
    2e48:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2e4a:	ab e0       	ldi	r26, 0x0B	; 11
    2e4c:	b1 e0       	ldi	r27, 0x01	; 1
    2e4e:	eb e0       	ldi	r30, 0x0B	; 11
    2e50:	f1 e0       	ldi	r31, 0x01	; 1
    2e52:	80 81       	ld	r24, Z
    2e54:	81 60       	ori	r24, 0x01	; 1
    2e56:	8c 93       	st	X, r24
    2e58:	1c c0       	rjmp	.+56     	; 0x2e92 <steppermotor4Write+0x266>
                break;
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2e5a:	ab e0       	ldi	r26, 0x0B	; 11
    2e5c:	b1 e0       	ldi	r27, 0x01	; 1
    2e5e:	eb e0       	ldi	r30, 0x0B	; 11
    2e60:	f1 e0       	ldi	r31, 0x01	; 1
    2e62:	80 81       	ld	r24, Z
    2e64:	80 64       	ori	r24, 0x40	; 64
    2e66:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2e68:	ab e0       	ldi	r26, 0x0B	; 11
    2e6a:	b1 e0       	ldi	r27, 0x01	; 1
    2e6c:	eb e0       	ldi	r30, 0x0B	; 11
    2e6e:	f1 e0       	ldi	r31, 0x01	; 1
    2e70:	80 81       	ld	r24, Z
    2e72:	8f 7e       	andi	r24, 0xEF	; 239
    2e74:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2e76:	ab e0       	ldi	r26, 0x0B	; 11
    2e78:	b1 e0       	ldi	r27, 0x01	; 1
    2e7a:	eb e0       	ldi	r30, 0x0B	; 11
    2e7c:	f1 e0       	ldi	r31, 0x01	; 1
    2e7e:	80 81       	ld	r24, Z
    2e80:	8b 7f       	andi	r24, 0xFB	; 251
    2e82:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2e84:	ab e0       	ldi	r26, 0x0B	; 11
    2e86:	b1 e0       	ldi	r27, 0x01	; 1
    2e88:	eb e0       	ldi	r30, 0x0B	; 11
    2e8a:	f1 e0       	ldi	r31, 0x01	; 1
    2e8c:	80 81       	ld	r24, Z
    2e8e:	81 60       	ori	r24, 0x01	; 1
    2e90:	8c 93       	st	X, r24
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	af e2       	ldi	r26, 0x2F	; 47
    2e98:	b4 e4       	ldi	r27, 0x44	; 68
    2e9a:	8d a7       	std	Y+45, r24	; 0x2d
    2e9c:	9e a7       	std	Y+46, r25	; 0x2e
    2e9e:	af a7       	std	Y+47, r26	; 0x2f
    2ea0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ea2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ea4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eaa:	2b ea       	ldi	r18, 0xAB	; 171
    2eac:	3a ea       	ldi	r19, 0xAA	; 170
    2eae:	4a ea       	ldi	r20, 0xAA	; 170
    2eb0:	50 e4       	ldi	r21, 0x40	; 64
    2eb2:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	89 a7       	std	Y+41, r24	; 0x29
    2ebc:	9a a7       	std	Y+42, r25	; 0x2a
    2ebe:	ab a7       	std	Y+43, r26	; 0x2b
    2ec0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ec2:	69 a5       	ldd	r22, Y+41	; 0x29
    2ec4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ec6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ec8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e8       	ldi	r20, 0x80	; 128
    2ed0:	5f e3       	ldi	r21, 0x3F	; 63
    2ed2:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    2ed6:	88 23       	and	r24, r24
    2ed8:	1c f4       	brge	.+6      	; 0x2ee0 <steppermotor4Write+0x2b4>
		__ticks = 1;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	88 a7       	std	Y+40, r24	; 0x28
    2ede:	91 c0       	rjmp	.+290    	; 0x3002 <steppermotor4Write+0x3d6>
	else if (__tmp > 255)
    2ee0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ee2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4f e7       	ldi	r20, 0x7F	; 127
    2eee:	53 e4       	ldi	r21, 0x43	; 67
    2ef0:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    2ef4:	18 16       	cp	r1, r24
    2ef6:	0c f0       	brlt	.+2      	; 0x2efa <steppermotor4Write+0x2ce>
    2ef8:	7b c0       	rjmp	.+246    	; 0x2ff0 <steppermotor4Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2efa:	6d a5       	ldd	r22, Y+45	; 0x2d
    2efc:	7e a5       	ldd	r23, Y+46	; 0x2e
    2efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f00:	98 a9       	ldd	r25, Y+48	; 0x30
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4a e7       	ldi	r20, 0x7A	; 122
    2f08:	54 e4       	ldi	r21, 0x44	; 68
    2f0a:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	8c a3       	std	Y+36, r24	; 0x24
    2f14:	9d a3       	std	Y+37, r25	; 0x25
    2f16:	ae a3       	std	Y+38, r26	; 0x26
    2f18:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6c a1       	ldd	r22, Y+36	; 0x24
    2f1c:	7d a1       	ldd	r23, Y+37	; 0x25
    2f1e:	8e a1       	ldd	r24, Y+38	; 0x26
    2f20:	9f a1       	ldd	r25, Y+39	; 0x27
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a e7       	ldi	r20, 0x7A	; 122
    2f28:	55 e4       	ldi	r21, 0x45	; 69
    2f2a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	88 a3       	std	Y+32, r24	; 0x20
    2f34:	99 a3       	std	Y+33, r25	; 0x21
    2f36:	aa a3       	std	Y+34, r26	; 0x22
    2f38:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f3a:	68 a1       	ldd	r22, Y+32	; 0x20
    2f3c:	79 a1       	ldd	r23, Y+33	; 0x21
    2f3e:	8a a1       	ldd	r24, Y+34	; 0x22
    2f40:	9b a1       	ldd	r25, Y+35	; 0x23
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <steppermotor4Write+0x330>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9f 8f       	std	Y+31, r25	; 0x1f
    2f58:	8e 8f       	std	Y+30, r24	; 0x1e
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <steppermotor4Write+0x3ae>
	else if (__tmp > 65535)
    2f5c:	68 a1       	ldd	r22, Y+32	; 0x20
    2f5e:	79 a1       	ldd	r23, Y+33	; 0x21
    2f60:	8a a1       	ldd	r24, Y+34	; 0x22
    2f62:	9b a1       	ldd	r25, Y+35	; 0x23
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <steppermotor4Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6c a1       	ldd	r22, Y+36	; 0x24
    2f76:	7d a1       	ldd	r23, Y+37	; 0x25
    2f78:	8e a1       	ldd	r24, Y+38	; 0x26
    2f7a:	9f a1       	ldd	r25, Y+39	; 0x27
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9f 8f       	std	Y+31, r25	; 0x1f
    2f9a:	8e 8f       	std	Y+30, r24	; 0x1e
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <steppermotor4Write+0x390>
    2f9e:	80 e9       	ldi	r24, 0x90	; 144
    2fa0:	91 e0       	ldi	r25, 0x01	; 1
    2fa2:	9d 8f       	std	Y+29, r25	; 0x1d
    2fa4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fa8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <steppermotor4Write+0x37e>
    2fae:	9d 8f       	std	Y+29, r25	; 0x1d
    2fb0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9f 8f       	std	Y+31, r25	; 0x1f
    2fba:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <steppermotor4Write+0x372>
    2fc4:	24 c0       	rjmp	.+72     	; 0x300e <steppermotor4Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	68 a1       	ldd	r22, Y+32	; 0x20
    2fc8:	79 a1       	ldd	r23, Y+33	; 0x21
    2fca:	8a a1       	ldd	r24, Y+34	; 0x22
    2fcc:	9b a1       	ldd	r25, Y+35	; 0x23
    2fce:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    2fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fde:	9b 8f       	std	Y+27, r25	; 0x1b
    2fe0:	8a 8f       	std	Y+26, r24	; 0x1a
    2fe2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fe4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <steppermotor4Write+0x3ba>
    2fea:	9b 8f       	std	Y+27, r25	; 0x1b
    2fec:	8a 8f       	std	Y+26, r24	; 0x1a
    2fee:	0f c0       	rjmp	.+30     	; 0x300e <steppermotor4Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	88 a7       	std	Y+40, r24	; 0x28
    3002:	88 a5       	ldd	r24, Y+40	; 0x28
    3004:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3006:	89 8d       	ldd	r24, Y+25	; 0x19
    3008:	8a 95       	dec	r24
    300a:	f1 f7       	brne	.-4      	; 0x3008 <steppermotor4Write+0x3dc>
    300c:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor4Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    300e:	8b a9       	ldd	r24, Y+51	; 0x33
    3010:	9c a9       	ldd	r25, Y+52	; 0x34
    3012:	01 96       	adiw	r24, 0x01	; 1
    3014:	9c ab       	std	Y+52, r25	; 0x34
    3016:	8b ab       	std	Y+51, r24	; 0x33
    3018:	8b a9       	ldd	r24, Y+51	; 0x33
    301a:	9c a9       	ldd	r25, Y+52	; 0x34
    301c:	88 30       	cpi	r24, 0x08	; 8
    301e:	91 05       	cpc	r25, r1
    3020:	0c f4       	brge	.+2      	; 0x3024 <steppermotor4Write+0x3f8>
    3022:	16 ce       	rjmp	.-980    	; 0x2c50 <steppermotor4Write+0x24>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    3024:	1e aa       	std	Y+54, r1	; 0x36
    3026:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor4Write(int a)
{
    while(a  == 1)
    3028:	8d a9       	ldd	r24, Y+53	; 0x35
    302a:	9e a9       	ldd	r25, Y+54	; 0x36
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	91 05       	cpc	r25, r1
    3030:	09 f4       	brne	.+2      	; 0x3034 <steppermotor4Write+0x408>
    3032:	09 ce       	rjmp	.-1006   	; 0x2c46 <steppermotor4Write+0x1a>
    3034:	f0 c1       	rjmp	.+992    	; 0x3416 <steppermotor4Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    3036:	88 e0       	ldi	r24, 0x08	; 8
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9a ab       	std	Y+50, r25	; 0x32
    303c:	89 ab       	std	Y+49, r24	; 0x31
    303e:	e3 c1       	rjmp	.+966    	; 0x3406 <steppermotor4Write+0x7da>
        {
            switch (i)
    3040:	89 a9       	ldd	r24, Y+49	; 0x31
    3042:	9a a9       	ldd	r25, Y+50	; 0x32
    3044:	9a af       	std	Y+58, r25	; 0x3a
    3046:	89 af       	std	Y+57, r24	; 0x39
    3048:	89 ad       	ldd	r24, Y+57	; 0x39
    304a:	9a ad       	ldd	r25, Y+58	; 0x3a
    304c:	84 30       	cpi	r24, 0x04	; 4
    304e:	91 05       	cpc	r25, r1
    3050:	09 f4       	brne	.+2      	; 0x3054 <steppermotor4Write+0x428>
    3052:	a3 c0       	rjmp	.+326    	; 0x319a <steppermotor4Write+0x56e>
    3054:	89 ad       	ldd	r24, Y+57	; 0x39
    3056:	9a ad       	ldd	r25, Y+58	; 0x3a
    3058:	85 30       	cpi	r24, 0x05	; 5
    305a:	91 05       	cpc	r25, r1
    305c:	94 f4       	brge	.+36     	; 0x3082 <steppermotor4Write+0x456>
    305e:	89 ad       	ldd	r24, Y+57	; 0x39
    3060:	9a ad       	ldd	r25, Y+58	; 0x3a
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	91 05       	cpc	r25, r1
    3066:	09 f4       	brne	.+2      	; 0x306a <steppermotor4Write+0x43e>
    3068:	5e c0       	rjmp	.+188    	; 0x3126 <steppermotor4Write+0x4fa>
    306a:	89 ad       	ldd	r24, Y+57	; 0x39
    306c:	9a ad       	ldd	r25, Y+58	; 0x3a
    306e:	83 30       	cpi	r24, 0x03	; 3
    3070:	91 05       	cpc	r25, r1
    3072:	0c f0       	brlt	.+2      	; 0x3076 <steppermotor4Write+0x44a>
    3074:	75 c0       	rjmp	.+234    	; 0x3160 <steppermotor4Write+0x534>
    3076:	89 ad       	ldd	r24, Y+57	; 0x39
    3078:	9a ad       	ldd	r25, Y+58	; 0x3a
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	91 05       	cpc	r25, r1
    307e:	b1 f1       	breq	.+108    	; 0x30ec <steppermotor4Write+0x4c0>
    3080:	ff c0       	rjmp	.+510    	; 0x3280 <steppermotor4Write+0x654>
    3082:	89 ad       	ldd	r24, Y+57	; 0x39
    3084:	9a ad       	ldd	r25, Y+58	; 0x3a
    3086:	86 30       	cpi	r24, 0x06	; 6
    3088:	91 05       	cpc	r25, r1
    308a:	09 f4       	brne	.+2      	; 0x308e <steppermotor4Write+0x462>
    308c:	c0 c0       	rjmp	.+384    	; 0x320e <steppermotor4Write+0x5e2>
    308e:	89 ad       	ldd	r24, Y+57	; 0x39
    3090:	9a ad       	ldd	r25, Y+58	; 0x3a
    3092:	86 30       	cpi	r24, 0x06	; 6
    3094:	91 05       	cpc	r25, r1
    3096:	0c f4       	brge	.+2      	; 0x309a <steppermotor4Write+0x46e>
    3098:	9d c0       	rjmp	.+314    	; 0x31d4 <steppermotor4Write+0x5a8>
    309a:	89 ad       	ldd	r24, Y+57	; 0x39
    309c:	9a ad       	ldd	r25, Y+58	; 0x3a
    309e:	87 30       	cpi	r24, 0x07	; 7
    30a0:	91 05       	cpc	r25, r1
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <steppermotor4Write+0x47a>
    30a4:	d1 c0       	rjmp	.+418    	; 0x3248 <steppermotor4Write+0x61c>
    30a6:	89 ad       	ldd	r24, Y+57	; 0x39
    30a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    30aa:	88 30       	cpi	r24, 0x08	; 8
    30ac:	91 05       	cpc	r25, r1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <steppermotor4Write+0x486>
    30b0:	e7 c0       	rjmp	.+462    	; 0x3280 <steppermotor4Write+0x654>
            {
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    30b2:	ab e0       	ldi	r26, 0x0B	; 11
    30b4:	b1 e0       	ldi	r27, 0x01	; 1
    30b6:	eb e0       	ldi	r30, 0x0B	; 11
    30b8:	f1 e0       	ldi	r31, 0x01	; 1
    30ba:	80 81       	ld	r24, Z
    30bc:	80 64       	ori	r24, 0x40	; 64
    30be:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    30c0:	ab e0       	ldi	r26, 0x0B	; 11
    30c2:	b1 e0       	ldi	r27, 0x01	; 1
    30c4:	eb e0       	ldi	r30, 0x0B	; 11
    30c6:	f1 e0       	ldi	r31, 0x01	; 1
    30c8:	80 81       	ld	r24, Z
    30ca:	8f 7e       	andi	r24, 0xEF	; 239
    30cc:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    30ce:	ab e0       	ldi	r26, 0x0B	; 11
    30d0:	b1 e0       	ldi	r27, 0x01	; 1
    30d2:	eb e0       	ldi	r30, 0x0B	; 11
    30d4:	f1 e0       	ldi	r31, 0x01	; 1
    30d6:	80 81       	ld	r24, Z
    30d8:	8b 7f       	andi	r24, 0xFB	; 251
    30da:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    30dc:	ab e0       	ldi	r26, 0x0B	; 11
    30de:	b1 e0       	ldi	r27, 0x01	; 1
    30e0:	eb e0       	ldi	r30, 0x0B	; 11
    30e2:	f1 e0       	ldi	r31, 0x01	; 1
    30e4:	80 81       	ld	r24, Z
    30e6:	8e 7f       	andi	r24, 0xFE	; 254
    30e8:	8c 93       	st	X, r24
    30ea:	ca c0       	rjmp	.+404    	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    30ec:	ab e0       	ldi	r26, 0x0B	; 11
    30ee:	b1 e0       	ldi	r27, 0x01	; 1
    30f0:	eb e0       	ldi	r30, 0x0B	; 11
    30f2:	f1 e0       	ldi	r31, 0x01	; 1
    30f4:	80 81       	ld	r24, Z
    30f6:	80 64       	ori	r24, 0x40	; 64
    30f8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    30fa:	ab e0       	ldi	r26, 0x0B	; 11
    30fc:	b1 e0       	ldi	r27, 0x01	; 1
    30fe:	eb e0       	ldi	r30, 0x0B	; 11
    3100:	f1 e0       	ldi	r31, 0x01	; 1
    3102:	80 81       	ld	r24, Z
    3104:	80 61       	ori	r24, 0x10	; 16
    3106:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    3108:	ab e0       	ldi	r26, 0x0B	; 11
    310a:	b1 e0       	ldi	r27, 0x01	; 1
    310c:	eb e0       	ldi	r30, 0x0B	; 11
    310e:	f1 e0       	ldi	r31, 0x01	; 1
    3110:	80 81       	ld	r24, Z
    3112:	8b 7f       	andi	r24, 0xFB	; 251
    3114:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    3116:	ab e0       	ldi	r26, 0x0B	; 11
    3118:	b1 e0       	ldi	r27, 0x01	; 1
    311a:	eb e0       	ldi	r30, 0x0B	; 11
    311c:	f1 e0       	ldi	r31, 0x01	; 1
    311e:	80 81       	ld	r24, Z
    3120:	8e 7f       	andi	r24, 0xFE	; 254
    3122:	8c 93       	st	X, r24
    3124:	ad c0       	rjmp	.+346    	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 2 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    3126:	ab e0       	ldi	r26, 0x0B	; 11
    3128:	b1 e0       	ldi	r27, 0x01	; 1
    312a:	eb e0       	ldi	r30, 0x0B	; 11
    312c:	f1 e0       	ldi	r31, 0x01	; 1
    312e:	80 81       	ld	r24, Z
    3130:	8f 7b       	andi	r24, 0xBF	; 191
    3132:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    3134:	ab e0       	ldi	r26, 0x0B	; 11
    3136:	b1 e0       	ldi	r27, 0x01	; 1
    3138:	eb e0       	ldi	r30, 0x0B	; 11
    313a:	f1 e0       	ldi	r31, 0x01	; 1
    313c:	80 81       	ld	r24, Z
    313e:	80 61       	ori	r24, 0x10	; 16
    3140:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    3142:	ab e0       	ldi	r26, 0x0B	; 11
    3144:	b1 e0       	ldi	r27, 0x01	; 1
    3146:	eb e0       	ldi	r30, 0x0B	; 11
    3148:	f1 e0       	ldi	r31, 0x01	; 1
    314a:	80 81       	ld	r24, Z
    314c:	8b 7f       	andi	r24, 0xFB	; 251
    314e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    3150:	ab e0       	ldi	r26, 0x0B	; 11
    3152:	b1 e0       	ldi	r27, 0x01	; 1
    3154:	eb e0       	ldi	r30, 0x0B	; 11
    3156:	f1 e0       	ldi	r31, 0x01	; 1
    3158:	80 81       	ld	r24, Z
    315a:	8e 7f       	andi	r24, 0xFE	; 254
    315c:	8c 93       	st	X, r24
    315e:	90 c0       	rjmp	.+288    	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    3160:	ab e0       	ldi	r26, 0x0B	; 11
    3162:	b1 e0       	ldi	r27, 0x01	; 1
    3164:	eb e0       	ldi	r30, 0x0B	; 11
    3166:	f1 e0       	ldi	r31, 0x01	; 1
    3168:	80 81       	ld	r24, Z
    316a:	8f 7b       	andi	r24, 0xBF	; 191
    316c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    316e:	ab e0       	ldi	r26, 0x0B	; 11
    3170:	b1 e0       	ldi	r27, 0x01	; 1
    3172:	eb e0       	ldi	r30, 0x0B	; 11
    3174:	f1 e0       	ldi	r31, 0x01	; 1
    3176:	80 81       	ld	r24, Z
    3178:	80 61       	ori	r24, 0x10	; 16
    317a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    317c:	ab e0       	ldi	r26, 0x0B	; 11
    317e:	b1 e0       	ldi	r27, 0x01	; 1
    3180:	eb e0       	ldi	r30, 0x0B	; 11
    3182:	f1 e0       	ldi	r31, 0x01	; 1
    3184:	80 81       	ld	r24, Z
    3186:	84 60       	ori	r24, 0x04	; 4
    3188:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    318a:	ab e0       	ldi	r26, 0x0B	; 11
    318c:	b1 e0       	ldi	r27, 0x01	; 1
    318e:	eb e0       	ldi	r30, 0x0B	; 11
    3190:	f1 e0       	ldi	r31, 0x01	; 1
    3192:	80 81       	ld	r24, Z
    3194:	8e 7f       	andi	r24, 0xFE	; 254
    3196:	8c 93       	st	X, r24
    3198:	73 c0       	rjmp	.+230    	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    319a:	ab e0       	ldi	r26, 0x0B	; 11
    319c:	b1 e0       	ldi	r27, 0x01	; 1
    319e:	eb e0       	ldi	r30, 0x0B	; 11
    31a0:	f1 e0       	ldi	r31, 0x01	; 1
    31a2:	80 81       	ld	r24, Z
    31a4:	8f 7b       	andi	r24, 0xBF	; 191
    31a6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    31a8:	ab e0       	ldi	r26, 0x0B	; 11
    31aa:	b1 e0       	ldi	r27, 0x01	; 1
    31ac:	eb e0       	ldi	r30, 0x0B	; 11
    31ae:	f1 e0       	ldi	r31, 0x01	; 1
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 7e       	andi	r24, 0xEF	; 239
    31b4:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    31b6:	ab e0       	ldi	r26, 0x0B	; 11
    31b8:	b1 e0       	ldi	r27, 0x01	; 1
    31ba:	eb e0       	ldi	r30, 0x0B	; 11
    31bc:	f1 e0       	ldi	r31, 0x01	; 1
    31be:	80 81       	ld	r24, Z
    31c0:	84 60       	ori	r24, 0x04	; 4
    31c2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    31c4:	ab e0       	ldi	r26, 0x0B	; 11
    31c6:	b1 e0       	ldi	r27, 0x01	; 1
    31c8:	eb e0       	ldi	r30, 0x0B	; 11
    31ca:	f1 e0       	ldi	r31, 0x01	; 1
    31cc:	80 81       	ld	r24, Z
    31ce:	8e 7f       	andi	r24, 0xFE	; 254
    31d0:	8c 93       	st	X, r24
    31d2:	56 c0       	rjmp	.+172    	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    31d4:	ab e0       	ldi	r26, 0x0B	; 11
    31d6:	b1 e0       	ldi	r27, 0x01	; 1
    31d8:	eb e0       	ldi	r30, 0x0B	; 11
    31da:	f1 e0       	ldi	r31, 0x01	; 1
    31dc:	80 81       	ld	r24, Z
    31de:	8f 7b       	andi	r24, 0xBF	; 191
    31e0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    31e2:	ab e0       	ldi	r26, 0x0B	; 11
    31e4:	b1 e0       	ldi	r27, 0x01	; 1
    31e6:	eb e0       	ldi	r30, 0x0B	; 11
    31e8:	f1 e0       	ldi	r31, 0x01	; 1
    31ea:	80 81       	ld	r24, Z
    31ec:	8f 7e       	andi	r24, 0xEF	; 239
    31ee:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    31f0:	ab e0       	ldi	r26, 0x0B	; 11
    31f2:	b1 e0       	ldi	r27, 0x01	; 1
    31f4:	eb e0       	ldi	r30, 0x0B	; 11
    31f6:	f1 e0       	ldi	r31, 0x01	; 1
    31f8:	80 81       	ld	r24, Z
    31fa:	84 60       	ori	r24, 0x04	; 4
    31fc:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    31fe:	ab e0       	ldi	r26, 0x0B	; 11
    3200:	b1 e0       	ldi	r27, 0x01	; 1
    3202:	eb e0       	ldi	r30, 0x0B	; 11
    3204:	f1 e0       	ldi	r31, 0x01	; 1
    3206:	80 81       	ld	r24, Z
    3208:	81 60       	ori	r24, 0x01	; 1
    320a:	8c 93       	st	X, r24
    320c:	39 c0       	rjmp	.+114    	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    320e:	ab e0       	ldi	r26, 0x0B	; 11
    3210:	b1 e0       	ldi	r27, 0x01	; 1
    3212:	eb e0       	ldi	r30, 0x0B	; 11
    3214:	f1 e0       	ldi	r31, 0x01	; 1
    3216:	80 81       	ld	r24, Z
    3218:	8f 7b       	andi	r24, 0xBF	; 191
    321a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    321c:	ab e0       	ldi	r26, 0x0B	; 11
    321e:	b1 e0       	ldi	r27, 0x01	; 1
    3220:	eb e0       	ldi	r30, 0x0B	; 11
    3222:	f1 e0       	ldi	r31, 0x01	; 1
    3224:	80 81       	ld	r24, Z
    3226:	8f 7e       	andi	r24, 0xEF	; 239
    3228:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    322a:	ab e0       	ldi	r26, 0x0B	; 11
    322c:	b1 e0       	ldi	r27, 0x01	; 1
    322e:	eb e0       	ldi	r30, 0x0B	; 11
    3230:	f1 e0       	ldi	r31, 0x01	; 1
    3232:	80 81       	ld	r24, Z
    3234:	8b 7f       	andi	r24, 0xFB	; 251
    3236:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    3238:	ab e0       	ldi	r26, 0x0B	; 11
    323a:	b1 e0       	ldi	r27, 0x01	; 1
    323c:	eb e0       	ldi	r30, 0x0B	; 11
    323e:	f1 e0       	ldi	r31, 0x01	; 1
    3240:	80 81       	ld	r24, Z
    3242:	81 60       	ori	r24, 0x01	; 1
    3244:	8c 93       	st	X, r24
    3246:	1c c0       	rjmp	.+56     	; 0x3280 <steppermotor4Write+0x654>
                break;
            case 7 :
                PORTStepper4 |= (1 << PStepper4_1);
    3248:	ab e0       	ldi	r26, 0x0B	; 11
    324a:	b1 e0       	ldi	r27, 0x01	; 1
    324c:	eb e0       	ldi	r30, 0x0B	; 11
    324e:	f1 e0       	ldi	r31, 0x01	; 1
    3250:	80 81       	ld	r24, Z
    3252:	80 64       	ori	r24, 0x40	; 64
    3254:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    3256:	ab e0       	ldi	r26, 0x0B	; 11
    3258:	b1 e0       	ldi	r27, 0x01	; 1
    325a:	eb e0       	ldi	r30, 0x0B	; 11
    325c:	f1 e0       	ldi	r31, 0x01	; 1
    325e:	80 81       	ld	r24, Z
    3260:	8f 7e       	andi	r24, 0xEF	; 239
    3262:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    3264:	ab e0       	ldi	r26, 0x0B	; 11
    3266:	b1 e0       	ldi	r27, 0x01	; 1
    3268:	eb e0       	ldi	r30, 0x0B	; 11
    326a:	f1 e0       	ldi	r31, 0x01	; 1
    326c:	80 81       	ld	r24, Z
    326e:	8b 7f       	andi	r24, 0xFB	; 251
    3270:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    3272:	ab e0       	ldi	r26, 0x0B	; 11
    3274:	b1 e0       	ldi	r27, 0x01	; 1
    3276:	eb e0       	ldi	r30, 0x0B	; 11
    3278:	f1 e0       	ldi	r31, 0x01	; 1
    327a:	80 81       	ld	r24, Z
    327c:	81 60       	ori	r24, 0x01	; 1
    327e:	8c 93       	st	X, r24
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	af e2       	ldi	r26, 0x2F	; 47
    3286:	b4 e4       	ldi	r27, 0x44	; 68
    3288:	8d 8b       	std	Y+21, r24	; 0x15
    328a:	9e 8b       	std	Y+22, r25	; 0x16
    328c:	af 8b       	std	Y+23, r26	; 0x17
    328e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3290:	6d 89       	ldd	r22, Y+21	; 0x15
    3292:	7e 89       	ldd	r23, Y+22	; 0x16
    3294:	8f 89       	ldd	r24, Y+23	; 0x17
    3296:	98 8d       	ldd	r25, Y+24	; 0x18
    3298:	2b ea       	ldi	r18, 0xAB	; 171
    329a:	3a ea       	ldi	r19, 0xAA	; 170
    329c:	4a ea       	ldi	r20, 0xAA	; 170
    329e:	50 e4       	ldi	r21, 0x40	; 64
    32a0:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	89 8b       	std	Y+17, r24	; 0x11
    32aa:	9a 8b       	std	Y+18, r25	; 0x12
    32ac:	ab 8b       	std	Y+19, r26	; 0x13
    32ae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32b0:	69 89       	ldd	r22, Y+17	; 0x11
    32b2:	7a 89       	ldd	r23, Y+18	; 0x12
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e8       	ldi	r20, 0x80	; 128
    32be:	5f e3       	ldi	r21, 0x3F	; 63
    32c0:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    32c4:	88 23       	and	r24, r24
    32c6:	1c f4       	brge	.+6      	; 0x32ce <steppermotor4Write+0x6a2>
		__ticks = 1;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	88 8b       	std	Y+16, r24	; 0x10
    32cc:	91 c0       	rjmp	.+290    	; 0x33f0 <steppermotor4Write+0x7c4>
	else if (__tmp > 255)
    32ce:	69 89       	ldd	r22, Y+17	; 0x11
    32d0:	7a 89       	ldd	r23, Y+18	; 0x12
    32d2:	8b 89       	ldd	r24, Y+19	; 0x13
    32d4:	9c 89       	ldd	r25, Y+20	; 0x14
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4f e7       	ldi	r20, 0x7F	; 127
    32dc:	53 e4       	ldi	r21, 0x43	; 67
    32de:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    32e2:	18 16       	cp	r1, r24
    32e4:	0c f0       	brlt	.+2      	; 0x32e8 <steppermotor4Write+0x6bc>
    32e6:	7b c0       	rjmp	.+246    	; 0x33de <steppermotor4Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    32e8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ea:	7e 89       	ldd	r23, Y+22	; 0x16
    32ec:	8f 89       	ldd	r24, Y+23	; 0x17
    32ee:	98 8d       	ldd	r25, Y+24	; 0x18
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	4a e7       	ldi	r20, 0x7A	; 122
    32f6:	54 e4       	ldi	r21, 0x44	; 68
    32f8:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	8c 87       	std	Y+12, r24	; 0x0c
    3302:	9d 87       	std	Y+13, r25	; 0x0d
    3304:	ae 87       	std	Y+14, r26	; 0x0e
    3306:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3308:	6c 85       	ldd	r22, Y+12	; 0x0c
    330a:	7d 85       	ldd	r23, Y+13	; 0x0d
    330c:	8e 85       	ldd	r24, Y+14	; 0x0e
    330e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	4a e7       	ldi	r20, 0x7A	; 122
    3316:	55 e4       	ldi	r21, 0x45	; 69
    3318:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	88 87       	std	Y+8, r24	; 0x08
    3322:	99 87       	std	Y+9, r25	; 0x09
    3324:	aa 87       	std	Y+10, r26	; 0x0a
    3326:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3328:	68 85       	ldd	r22, Y+8	; 0x08
    332a:	79 85       	ldd	r23, Y+9	; 0x09
    332c:	8a 85       	ldd	r24, Y+10	; 0x0a
    332e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e8       	ldi	r20, 0x80	; 128
    3336:	5f e3       	ldi	r21, 0x3F	; 63
    3338:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    333c:	88 23       	and	r24, r24
    333e:	2c f4       	brge	.+10     	; 0x334a <steppermotor4Write+0x71e>
		__ticks = 1;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	9f 83       	std	Y+7, r25	; 0x07
    3346:	8e 83       	std	Y+6, r24	; 0x06
    3348:	3f c0       	rjmp	.+126    	; 0x33c8 <steppermotor4Write+0x79c>
	else if (__tmp > 65535)
    334a:	68 85       	ldd	r22, Y+8	; 0x08
    334c:	79 85       	ldd	r23, Y+9	; 0x09
    334e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3350:	9b 85       	ldd	r25, Y+11	; 0x0b
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	3f ef       	ldi	r19, 0xFF	; 255
    3356:	4f e7       	ldi	r20, 0x7F	; 127
    3358:	57 e4       	ldi	r21, 0x47	; 71
    335a:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    335e:	18 16       	cp	r1, r24
    3360:	4c f5       	brge	.+82     	; 0x33b4 <steppermotor4Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3362:	6c 85       	ldd	r22, Y+12	; 0x0c
    3364:	7d 85       	ldd	r23, Y+13	; 0x0d
    3366:	8e 85       	ldd	r24, Y+14	; 0x0e
    3368:	9f 85       	ldd	r25, Y+15	; 0x0f
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e2       	ldi	r20, 0x20	; 32
    3370:	51 e4       	ldi	r21, 0x41	; 65
    3372:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	9f 83       	std	Y+7, r25	; 0x07
    3388:	8e 83       	std	Y+6, r24	; 0x06
    338a:	0f c0       	rjmp	.+30     	; 0x33aa <steppermotor4Write+0x77e>
    338c:	80 e9       	ldi	r24, 0x90	; 144
    338e:	91 e0       	ldi	r25, 0x01	; 1
    3390:	9d 83       	std	Y+5, r25	; 0x05
    3392:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3394:	8c 81       	ldd	r24, Y+4	; 0x04
    3396:	9d 81       	ldd	r25, Y+5	; 0x05
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <steppermotor4Write+0x76c>
    339c:	9d 83       	std	Y+5, r25	; 0x05
    339e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a0:	8e 81       	ldd	r24, Y+6	; 0x06
    33a2:	9f 81       	ldd	r25, Y+7	; 0x07
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	9f 83       	std	Y+7, r25	; 0x07
    33a8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33aa:	8e 81       	ldd	r24, Y+6	; 0x06
    33ac:	9f 81       	ldd	r25, Y+7	; 0x07
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	69 f7       	brne	.-38     	; 0x338c <steppermotor4Write+0x760>
    33b2:	24 c0       	rjmp	.+72     	; 0x33fc <steppermotor4Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b4:	68 85       	ldd	r22, Y+8	; 0x08
    33b6:	79 85       	ldd	r23, Y+9	; 0x09
    33b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    33bc:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9f 83       	std	Y+7, r25	; 0x07
    33c6:	8e 83       	std	Y+6, r24	; 0x06
    33c8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ca:	9f 81       	ldd	r25, Y+7	; 0x07
    33cc:	9b 83       	std	Y+3, r25	; 0x03
    33ce:	8a 83       	std	Y+2, r24	; 0x02
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	9b 81       	ldd	r25, Y+3	; 0x03
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <steppermotor4Write+0x7a8>
    33d8:	9b 83       	std	Y+3, r25	; 0x03
    33da:	8a 83       	std	Y+2, r24	; 0x02
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <steppermotor4Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33de:	69 89       	ldd	r22, Y+17	; 0x11
    33e0:	7a 89       	ldd	r23, Y+18	; 0x12
    33e2:	8b 89       	ldd	r24, Y+19	; 0x13
    33e4:	9c 89       	ldd	r25, Y+20	; 0x14
    33e6:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	88 8b       	std	Y+16, r24	; 0x10
    33f0:	88 89       	ldd	r24, Y+16	; 0x10
    33f2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	8a 95       	dec	r24
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <steppermotor4Write+0x7ca>
    33fa:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    33fc:	89 a9       	ldd	r24, Y+49	; 0x31
    33fe:	9a a9       	ldd	r25, Y+50	; 0x32
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	9a ab       	std	Y+50, r25	; 0x32
    3404:	89 ab       	std	Y+49, r24	; 0x31
    3406:	89 a9       	ldd	r24, Y+49	; 0x31
    3408:	9a a9       	ldd	r25, Y+50	; 0x32
    340a:	18 16       	cp	r1, r24
    340c:	19 06       	cpc	r1, r25
    340e:	0c f4       	brge	.+2      	; 0x3412 <steppermotor4Write+0x7e6>
    3410:	17 ce       	rjmp	.-978    	; 0x3040 <steppermotor4Write+0x414>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    3412:	1e aa       	std	Y+54, r1	; 0x36
    3414:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    3416:	8d a9       	ldd	r24, Y+53	; 0x35
    3418:	9e a9       	ldd	r25, Y+54	; 0x36
    341a:	82 30       	cpi	r24, 0x02	; 2
    341c:	91 05       	cpc	r25, r1
    341e:	09 f4       	brne	.+2      	; 0x3422 <steppermotor4Write+0x7f6>
    3420:	0a ce       	rjmp	.-1004   	; 0x3036 <steppermotor4Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    3422:	ea 96       	adiw	r28, 0x3a	; 58
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <Vooruit>:

void Vooruit(int Steppermotortijd)
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	00 d0       	rcall	.+0      	; 0x343a <Vooruit+0x6>
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	9c 83       	std	Y+4, r25	; 0x04
    3442:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    3444:	1a 82       	std	Y+2, r1	; 0x02
    3446:	19 82       	std	Y+1, r1	; 0x01
    3448:	15 c0       	rjmp	.+42     	; 0x3474 <Vooruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <steppermotor1Write>
        steppermotor2Write(1);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <steppermotor2Write>
        steppermotor3Write(1);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0e 94 12 12 	call	0x2424	; 0x2424 <steppermotor3Write>
        steppermotor4Write(2);
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <steppermotor4Write>
        j++;
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	9a 83       	std	Y+2, r25	; 0x02
    3472:	89 83       	std	Y+1, r24	; 0x01
}

void Vooruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    3474:	29 81       	ldd	r18, Y+1	; 0x01
    3476:	3a 81       	ldd	r19, Y+2	; 0x02
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
    347a:	9c 81       	ldd	r25, Y+4	; 0x04
    347c:	28 17       	cp	r18, r24
    347e:	39 07       	cpc	r19, r25
    3480:	24 f3       	brlt	.-56     	; 0x344a <Vooruit+0x16>
        steppermotor2Write(1);
        steppermotor3Write(1);
        steppermotor4Write(2);
        j++;
    }
}
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <Achteruit>:

void Achteruit(int Steppermotortijd)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <Achteruit+0x6>
    3496:	0f 92       	push	r0
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	9c 83       	std	Y+4, r25	; 0x04
    349e:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    34a0:	1a 82       	std	Y+2, r1	; 0x02
    34a2:	19 82       	std	Y+1, r1	; 0x01
    34a4:	15 c0       	rjmp	.+42     	; 0x34d0 <Achteruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    34a6:	82 e0       	ldi	r24, 0x02	; 2
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 0a 0a 	call	0x1414	; 0x1414 <steppermotor1Write>
        steppermotor2Write(2);
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <steppermotor2Write>
        steppermotor3Write(2);
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	0e 94 12 12 	call	0x2424	; 0x2424 <steppermotor3Write>
        steppermotor4Write(1);
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <steppermotor4Write>
        j++;
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ca:	01 96       	adiw	r24, 0x01	; 1
    34cc:	9a 83       	std	Y+2, r25	; 0x02
    34ce:	89 83       	std	Y+1, r24	; 0x01
}

void Achteruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    34d0:	29 81       	ldd	r18, Y+1	; 0x01
    34d2:	3a 81       	ldd	r19, Y+2	; 0x02
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	9c 81       	ldd	r25, Y+4	; 0x04
    34d8:	28 17       	cp	r18, r24
    34da:	39 07       	cpc	r19, r25
    34dc:	24 f3       	brlt	.-56     	; 0x34a6 <Achteruit+0x16>
        steppermotor2Write(2);
        steppermotor3Write(2);
        steppermotor4Write(1);
        j++;
    }
}
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <Rechtsaf>:

void Rechtsaf(int Steppermotortijd)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <Rechtsaf+0x6>
    34f2:	0f 92       	push	r0
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    34fc:	1a 82       	std	Y+2, r1	; 0x02
    34fe:	19 82       	std	Y+1, r1	; 0x01
    3500:	15 c0       	rjmp	.+42     	; 0x352c <Rechtsaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 0a 0a 	call	0x1414	; 0x1414 <steppermotor1Write>
        steppermotor2Write(2);
    350a:	82 e0       	ldi	r24, 0x02	; 2
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <steppermotor2Write>
        steppermotor3Write(1);
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 12 12 	call	0x2424	; 0x2424 <steppermotor3Write>
        steppermotor4Write(2);
    351a:	82 e0       	ldi	r24, 0x02	; 2
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <steppermotor4Write>
        j++;
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	9a 81       	ldd	r25, Y+2	; 0x02
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	89 83       	std	Y+1, r24	; 0x01
}

void Rechtsaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    352c:	29 81       	ldd	r18, Y+1	; 0x01
    352e:	3a 81       	ldd	r19, Y+2	; 0x02
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	9c 81       	ldd	r25, Y+4	; 0x04
    3534:	28 17       	cp	r18, r24
    3536:	39 07       	cpc	r19, r25
    3538:	24 f3       	brlt	.-56     	; 0x3502 <Rechtsaf+0x16>
        steppermotor2Write(2);
        steppermotor3Write(1);
        steppermotor4Write(2);
        j++;
    }
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	08 95       	ret

00003548 <Linksaf>:

void Linksaf(int Steppermotortijd)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	00 d0       	rcall	.+0      	; 0x354e <Linksaf+0x6>
    354e:	0f 92       	push	r0
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	9c 83       	std	Y+4, r25	; 0x04
    3556:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    3558:	1a 82       	std	Y+2, r1	; 0x02
    355a:	19 82       	std	Y+1, r1	; 0x01
    355c:	15 c0       	rjmp	.+42     	; 0x3588 <Linksaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    355e:	82 e0       	ldi	r24, 0x02	; 2
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 0a 0a 	call	0x1414	; 0x1414 <steppermotor1Write>
        steppermotor2Write(1);
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <steppermotor2Write>
        steppermotor3Write(2);
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 12 12 	call	0x2424	; 0x2424 <steppermotor3Write>
        steppermotor4Write(1);
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <steppermotor4Write>
        j++;
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	9a 81       	ldd	r25, Y+2	; 0x02
    3582:	01 96       	adiw	r24, 0x01	; 1
    3584:	9a 83       	std	Y+2, r25	; 0x02
    3586:	89 83       	std	Y+1, r24	; 0x01
}

void Linksaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    3588:	29 81       	ldd	r18, Y+1	; 0x01
    358a:	3a 81       	ldd	r19, Y+2	; 0x02
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	28 17       	cp	r18, r24
    3592:	39 07       	cpc	r19, r25
    3594:	24 f3       	brlt	.-56     	; 0x355e <Linksaf+0x16>
        steppermotor2Write(1);
        steppermotor3Write(2);
        steppermotor4Write(1);
        j++;
    }
}
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <distance>:
static volatile unsigned long pulse = 0; //the variable for the pulse
static volatile int echo_pin = 0; //logic for the ultrasoon
volatile int isTriggerd = 0;    // used in the while loop
volatile int overflows = 0;

int distance(int triggerpin) {
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	ea 97       	sbiw	r28, 0x3a	; 58
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	9e ab       	std	Y+54, r25	; 0x36
    35ba:	8d ab       	std	Y+53, r24	; 0x35

    switch(triggerpin)
    35bc:	8d a9       	ldd	r24, Y+53	; 0x35
    35be:	9e a9       	ldd	r25, Y+54	; 0x36
    35c0:	9a af       	std	Y+58, r25	; 0x3a
    35c2:	89 af       	std	Y+57, r24	; 0x39
    35c4:	89 ad       	ldd	r24, Y+57	; 0x39
    35c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	31 f0       	breq	.+12     	; 0x35d8 <distance+0x34>
    35cc:	89 ad       	ldd	r24, Y+57	; 0x39
    35ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    35d0:	81 30       	cpi	r24, 0x01	; 1
    35d2:	91 05       	cpc	r25, r1
    35d4:	49 f0       	breq	.+18     	; 0x35e8 <distance+0x44>
    35d6:	0f c0       	rjmp	.+30     	; 0x35f6 <distance+0x52>
    {
        case ultra_1_trigger:
            PCMASK = 0;
    35d8:	eb e6       	ldi	r30, 0x6B	; 107
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	10 82       	st	Z, r1
            PCMASK = ultra_1_pin;
    35de:	eb e6       	ldi	r30, 0x6B	; 107
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	80 83       	st	Z, r24
    35e6:	07 c0       	rjmp	.+14     	; 0x35f6 <distance+0x52>
        break;

        case ultra_2_trigger:
            PCMASK = 0;
    35e8:	eb e6       	ldi	r30, 0x6B	; 107
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	10 82       	st	Z, r1
            PCMASK = ultra_2_pin;
    35ee:	eb e6       	ldi	r30, 0x6B	; 107
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	80 83       	st	Z, r24
        break;
    }

    TRIGGERPORT |= (1 << triggerpin);
    35f6:	ab e2       	ldi	r26, 0x2B	; 43
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	eb e2       	ldi	r30, 0x2B	; 43
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	28 2f       	mov	r18, r24
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	0d a8       	ldd	r0, Y+53	; 0x35
    3608:	02 c0       	rjmp	.+4      	; 0x360e <distance+0x6a>
    360a:	88 0f       	add	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	0a 94       	dec	r0
    3610:	e2 f7       	brpl	.-8      	; 0x360a <distance+0x66>
    3612:	82 2b       	or	r24, r18
    3614:	8c 93       	st	X, r24
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	a0 e7       	ldi	r26, 0x70	; 112
    361c:	b1 e4       	ldi	r27, 0x41	; 65
    361e:	8d a7       	std	Y+45, r24	; 0x2d
    3620:	9e a7       	std	Y+46, r25	; 0x2e
    3622:	af a7       	std	Y+47, r26	; 0x2f
    3624:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3626:	6d a5       	ldd	r22, Y+45	; 0x2d
    3628:	7e a5       	ldd	r23, Y+46	; 0x2e
    362a:	8f a5       	ldd	r24, Y+47	; 0x2f
    362c:	98 a9       	ldd	r25, Y+48	; 0x30
    362e:	2b ea       	ldi	r18, 0xAB	; 171
    3630:	3a ea       	ldi	r19, 0xAA	; 170
    3632:	4a ea       	ldi	r20, 0xAA	; 170
    3634:	50 e4       	ldi	r21, 0x40	; 64
    3636:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	89 a7       	std	Y+41, r24	; 0x29
    3640:	9a a7       	std	Y+42, r25	; 0x2a
    3642:	ab a7       	std	Y+43, r26	; 0x2b
    3644:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3646:	69 a5       	ldd	r22, Y+41	; 0x29
    3648:	7a a5       	ldd	r23, Y+42	; 0x2a
    364a:	8b a5       	ldd	r24, Y+43	; 0x2b
    364c:	9c a5       	ldd	r25, Y+44	; 0x2c
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	1c f4       	brge	.+6      	; 0x3664 <distance+0xc0>
		__ticks = 1;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	88 a7       	std	Y+40, r24	; 0x28
    3662:	91 c0       	rjmp	.+290    	; 0x3786 <distance+0x1e2>
	else if (__tmp > 255)
    3664:	69 a5       	ldd	r22, Y+41	; 0x29
    3666:	7a a5       	ldd	r23, Y+42	; 0x2a
    3668:	8b a5       	ldd	r24, Y+43	; 0x2b
    366a:	9c a5       	ldd	r25, Y+44	; 0x2c
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	4f e7       	ldi	r20, 0x7F	; 127
    3672:	53 e4       	ldi	r21, 0x43	; 67
    3674:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    3678:	18 16       	cp	r1, r24
    367a:	0c f0       	brlt	.+2      	; 0x367e <distance+0xda>
    367c:	7b c0       	rjmp	.+246    	; 0x3774 <distance+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    367e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3680:	7e a5       	ldd	r23, Y+46	; 0x2e
    3682:	8f a5       	ldd	r24, Y+47	; 0x2f
    3684:	98 a9       	ldd	r25, Y+48	; 0x30
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	4a e7       	ldi	r20, 0x7A	; 122
    368c:	54 e4       	ldi	r21, 0x44	; 68
    368e:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8c a3       	std	Y+36, r24	; 0x24
    3698:	9d a3       	std	Y+37, r25	; 0x25
    369a:	ae a3       	std	Y+38, r26	; 0x26
    369c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369e:	6c a1       	ldd	r22, Y+36	; 0x24
    36a0:	7d a1       	ldd	r23, Y+37	; 0x25
    36a2:	8e a1       	ldd	r24, Y+38	; 0x26
    36a4:	9f a1       	ldd	r25, Y+39	; 0x27
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a e7       	ldi	r20, 0x7A	; 122
    36ac:	55 e4       	ldi	r21, 0x45	; 69
    36ae:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	88 a3       	std	Y+32, r24	; 0x20
    36b8:	99 a3       	std	Y+33, r25	; 0x21
    36ba:	aa a3       	std	Y+34, r26	; 0x22
    36bc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    36be:	68 a1       	ldd	r22, Y+32	; 0x20
    36c0:	79 a1       	ldd	r23, Y+33	; 0x21
    36c2:	8a a1       	ldd	r24, Y+34	; 0x22
    36c4:	9b a1       	ldd	r25, Y+35	; 0x23
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e8       	ldi	r20, 0x80	; 128
    36cc:	5f e3       	ldi	r21, 0x3F	; 63
    36ce:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    36d2:	88 23       	and	r24, r24
    36d4:	2c f4       	brge	.+10     	; 0x36e0 <distance+0x13c>
		__ticks = 1;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9f 8f       	std	Y+31, r25	; 0x1f
    36dc:	8e 8f       	std	Y+30, r24	; 0x1e
    36de:	3f c0       	rjmp	.+126    	; 0x375e <distance+0x1ba>
	else if (__tmp > 65535)
    36e0:	68 a1       	ldd	r22, Y+32	; 0x20
    36e2:	79 a1       	ldd	r23, Y+33	; 0x21
    36e4:	8a a1       	ldd	r24, Y+34	; 0x22
    36e6:	9b a1       	ldd	r25, Y+35	; 0x23
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	4c f5       	brge	.+82     	; 0x374a <distance+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	6c a1       	ldd	r22, Y+36	; 0x24
    36fa:	7d a1       	ldd	r23, Y+37	; 0x25
    36fc:	8e a1       	ldd	r24, Y+38	; 0x26
    36fe:	9f a1       	ldd	r25, Y+39	; 0x27
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e2       	ldi	r20, 0x20	; 32
    3706:	51 e4       	ldi	r21, 0x41	; 65
    3708:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9f 8f       	std	Y+31, r25	; 0x1f
    371e:	8e 8f       	std	Y+30, r24	; 0x1e
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <distance+0x19c>
    3722:	80 e9       	ldi	r24, 0x90	; 144
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	9d 8f       	std	Y+29, r25	; 0x1d
    3728:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    372a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    372c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <distance+0x18a>
    3732:	9d 8f       	std	Y+29, r25	; 0x1d
    3734:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3736:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3738:	9f 8d       	ldd	r25, Y+31	; 0x1f
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	9f 8f       	std	Y+31, r25	; 0x1f
    373e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3740:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3742:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	69 f7       	brne	.-38     	; 0x3722 <distance+0x17e>
    3748:	24 c0       	rjmp	.+72     	; 0x3792 <distance+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374a:	68 a1       	ldd	r22, Y+32	; 0x20
    374c:	79 a1       	ldd	r23, Y+33	; 0x21
    374e:	8a a1       	ldd	r24, Y+34	; 0x22
    3750:	9b a1       	ldd	r25, Y+35	; 0x23
    3752:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9f 8f       	std	Y+31, r25	; 0x1f
    375c:	8e 8f       	std	Y+30, r24	; 0x1e
    375e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3760:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3762:	9b 8f       	std	Y+27, r25	; 0x1b
    3764:	8a 8f       	std	Y+26, r24	; 0x1a
    3766:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3768:	9b 8d       	ldd	r25, Y+27	; 0x1b
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <distance+0x1c6>
    376e:	9b 8f       	std	Y+27, r25	; 0x1b
    3770:	8a 8f       	std	Y+26, r24	; 0x1a
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <distance+0x1ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3774:	69 a5       	ldd	r22, Y+41	; 0x29
    3776:	7a a5       	ldd	r23, Y+42	; 0x2a
    3778:	8b a5       	ldd	r24, Y+43	; 0x2b
    377a:	9c a5       	ldd	r25, Y+44	; 0x2c
    377c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	88 a7       	std	Y+40, r24	; 0x28
    3786:	88 a5       	ldd	r24, Y+40	; 0x28
    3788:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    378a:	89 8d       	ldd	r24, Y+25	; 0x19
    378c:	8a 95       	dec	r24
    378e:	f1 f7       	brne	.-4      	; 0x378c <distance+0x1e8>
    3790:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(15);
    TRIGGERPORT &= ~( 1 << triggerpin);
    3792:	ab e2       	ldi	r26, 0x2B	; 43
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	eb e2       	ldi	r30, 0x2B	; 43
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	28 2f       	mov	r18, r24
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0d a8       	ldd	r0, Y+53	; 0x35
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <distance+0x206>
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	0a 94       	dec	r0
    37ac:	e2 f7       	brpl	.-8      	; 0x37a6 <distance+0x202>
    37ae:	80 95       	com	r24
    37b0:	82 23       	and	r24, r18
    37b2:	8c 93       	st	X, r24
    isTriggerd = 1;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	90 93 09 03 	sts	0x0309, r25
    37bc:	80 93 08 03 	sts	0x0308, r24
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	a0 e7       	ldi	r26, 0x70	; 112
    37c6:	b1 e4       	ldi	r27, 0x41	; 65
    37c8:	8d 8b       	std	Y+21, r24	; 0x15
    37ca:	9e 8b       	std	Y+22, r25	; 0x16
    37cc:	af 8b       	std	Y+23, r26	; 0x17
    37ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37d0:	6d 89       	ldd	r22, Y+21	; 0x15
    37d2:	7e 89       	ldd	r23, Y+22	; 0x16
    37d4:	8f 89       	ldd	r24, Y+23	; 0x17
    37d6:	98 8d       	ldd	r25, Y+24	; 0x18
    37d8:	2b ea       	ldi	r18, 0xAB	; 171
    37da:	3a ea       	ldi	r19, 0xAA	; 170
    37dc:	4a ea       	ldi	r20, 0xAA	; 170
    37de:	50 e4       	ldi	r21, 0x40	; 64
    37e0:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	89 8b       	std	Y+17, r24	; 0x11
    37ea:	9a 8b       	std	Y+18, r25	; 0x12
    37ec:	ab 8b       	std	Y+19, r26	; 0x13
    37ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    37f0:	69 89       	ldd	r22, Y+17	; 0x11
    37f2:	7a 89       	ldd	r23, Y+18	; 0x12
    37f4:	8b 89       	ldd	r24, Y+19	; 0x13
    37f6:	9c 89       	ldd	r25, Y+20	; 0x14
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e8       	ldi	r20, 0x80	; 128
    37fe:	5f e3       	ldi	r21, 0x3F	; 63
    3800:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    3804:	88 23       	and	r24, r24
    3806:	1c f4       	brge	.+6      	; 0x380e <distance+0x26a>
		__ticks = 1;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	88 8b       	std	Y+16, r24	; 0x10
    380c:	91 c0       	rjmp	.+290    	; 0x3930 <distance+0x38c>
	else if (__tmp > 255)
    380e:	69 89       	ldd	r22, Y+17	; 0x11
    3810:	7a 89       	ldd	r23, Y+18	; 0x12
    3812:	8b 89       	ldd	r24, Y+19	; 0x13
    3814:	9c 89       	ldd	r25, Y+20	; 0x14
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4f e7       	ldi	r20, 0x7F	; 127
    381c:	53 e4       	ldi	r21, 0x43	; 67
    381e:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    3822:	18 16       	cp	r1, r24
    3824:	0c f0       	brlt	.+2      	; 0x3828 <distance+0x284>
    3826:	7b c0       	rjmp	.+246    	; 0x391e <distance+0x37a>
	{
		_delay_ms(__us / 1000.0);
    3828:	6d 89       	ldd	r22, Y+21	; 0x15
    382a:	7e 89       	ldd	r23, Y+22	; 0x16
    382c:	8f 89       	ldd	r24, Y+23	; 0x17
    382e:	98 8d       	ldd	r25, Y+24	; 0x18
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	4a e7       	ldi	r20, 0x7A	; 122
    3836:	54 e4       	ldi	r21, 0x44	; 68
    3838:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	8c 87       	std	Y+12, r24	; 0x0c
    3842:	9d 87       	std	Y+13, r25	; 0x0d
    3844:	ae 87       	std	Y+14, r26	; 0x0e
    3846:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3848:	6c 85       	ldd	r22, Y+12	; 0x0c
    384a:	7d 85       	ldd	r23, Y+13	; 0x0d
    384c:	8e 85       	ldd	r24, Y+14	; 0x0e
    384e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	4a e7       	ldi	r20, 0x7A	; 122
    3856:	55 e4       	ldi	r21, 0x45	; 69
    3858:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	88 87       	std	Y+8, r24	; 0x08
    3862:	99 87       	std	Y+9, r25	; 0x09
    3864:	aa 87       	std	Y+10, r26	; 0x0a
    3866:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3868:	68 85       	ldd	r22, Y+8	; 0x08
    386a:	79 85       	ldd	r23, Y+9	; 0x09
    386c:	8a 85       	ldd	r24, Y+10	; 0x0a
    386e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f e3       	ldi	r21, 0x3F	; 63
    3878:	0e 94 99 21 	call	0x4332	; 0x4332 <__ltsf2>
    387c:	88 23       	and	r24, r24
    387e:	2c f4       	brge	.+10     	; 0x388a <distance+0x2e6>
		__ticks = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9f 83       	std	Y+7, r25	; 0x07
    3886:	8e 83       	std	Y+6, r24	; 0x06
    3888:	3f c0       	rjmp	.+126    	; 0x3908 <distance+0x364>
	else if (__tmp > 65535)
    388a:	68 85       	ldd	r22, Y+8	; 0x08
    388c:	79 85       	ldd	r23, Y+9	; 0x09
    388e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3890:	9b 85       	ldd	r25, Y+11	; 0x0b
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	3f ef       	ldi	r19, 0xFF	; 255
    3896:	4f e7       	ldi	r20, 0x7F	; 127
    3898:	57 e4       	ldi	r21, 0x47	; 71
    389a:	0e 94 39 21 	call	0x4272	; 0x4272 <__gtsf2>
    389e:	18 16       	cp	r1, r24
    38a0:	4c f5       	brge	.+82     	; 0x38f4 <distance+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    38a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    38a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    38a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e2       	ldi	r20, 0x20	; 32
    38b0:	51 e4       	ldi	r21, 0x41	; 65
    38b2:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__mulsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	bc 01       	movw	r22, r24
    38bc:	cd 01       	movw	r24, r26
    38be:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9f 83       	std	Y+7, r25	; 0x07
    38c8:	8e 83       	std	Y+6, r24	; 0x06
    38ca:	0f c0       	rjmp	.+30     	; 0x38ea <distance+0x346>
    38cc:	80 e9       	ldi	r24, 0x90	; 144
    38ce:	91 e0       	ldi	r25, 0x01	; 1
    38d0:	9d 83       	std	Y+5, r25	; 0x05
    38d2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38d4:	8c 81       	ldd	r24, Y+4	; 0x04
    38d6:	9d 81       	ldd	r25, Y+5	; 0x05
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <distance+0x334>
    38dc:	9d 83       	std	Y+5, r25	; 0x05
    38de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e0:	8e 81       	ldd	r24, Y+6	; 0x06
    38e2:	9f 81       	ldd	r25, Y+7	; 0x07
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	9f 83       	std	Y+7, r25	; 0x07
    38e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ea:	8e 81       	ldd	r24, Y+6	; 0x06
    38ec:	9f 81       	ldd	r25, Y+7	; 0x07
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	69 f7       	brne	.-38     	; 0x38cc <distance+0x328>
    38f2:	24 c0       	rjmp	.+72     	; 0x393c <distance+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f4:	68 85       	ldd	r22, Y+8	; 0x08
    38f6:	79 85       	ldd	r23, Y+9	; 0x09
    38f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    38fc:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9f 83       	std	Y+7, r25	; 0x07
    3906:	8e 83       	std	Y+6, r24	; 0x06
    3908:	8e 81       	ldd	r24, Y+6	; 0x06
    390a:	9f 81       	ldd	r25, Y+7	; 0x07
    390c:	9b 83       	std	Y+3, r25	; 0x03
    390e:	8a 83       	std	Y+2, r24	; 0x02
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	9b 81       	ldd	r25, Y+3	; 0x03
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <distance+0x370>
    3918:	9b 83       	std	Y+3, r25	; 0x03
    391a:	8a 83       	std	Y+2, r24	; 0x02
    391c:	0f c0       	rjmp	.+30     	; 0x393c <distance+0x398>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    391e:	69 89       	ldd	r22, Y+17	; 0x11
    3920:	7a 89       	ldd	r23, Y+18	; 0x12
    3922:	8b 89       	ldd	r24, Y+19	; 0x13
    3924:	9c 89       	ldd	r25, Y+20	; 0x14
    3926:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__fixunssfsi>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	88 8b       	std	Y+16, r24	; 0x10
    3930:	88 89       	ldd	r24, Y+16	; 0x10
    3932:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	8a 95       	dec	r24
    3938:	f1 f7       	brne	.-4      	; 0x3936 <distance+0x392>
    393a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);

    unsigned long i = 0;
    393c:	19 aa       	std	Y+49, r1	; 0x31
    393e:	1a aa       	std	Y+50, r1	; 0x32
    3940:	1b aa       	std	Y+51, r1	; 0x33
    3942:	1c aa       	std	Y+52, r1	; 0x34
    3944:	1f c0       	rjmp	.+62     	; 0x3984 <distance+0x3e0>
    while(isTriggerd){
       if(i > ((RETURNVALUE+10)*16))
    3946:	89 a9       	ldd	r24, Y+49	; 0x31
    3948:	9a a9       	ldd	r25, Y+50	; 0x32
    394a:	ab a9       	ldd	r26, Y+51	; 0x33
    394c:	bc a9       	ldd	r27, Y+52	; 0x34
    394e:	81 36       	cpi	r24, 0x61	; 97
    3950:	24 e0       	ldi	r18, 0x04	; 4
    3952:	92 07       	cpc	r25, r18
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	a2 07       	cpc	r26, r18
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	b2 07       	cpc	r27, r18
    395c:	40 f0       	brcs	.+16     	; 0x396e <distance+0x3ca>
       {
           PCMASK = 0;
    395e:	eb e6       	ldi	r30, 0x6B	; 107
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	10 82       	st	Z, r1
           return RETURNVALUE;
    3964:	8c e3       	ldi	r24, 0x3C	; 60
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	98 af       	std	Y+56, r25	; 0x38
    396a:	8f ab       	std	Y+55, r24	; 0x37
    396c:	31 c0       	rjmp	.+98     	; 0x39d0 <distance+0x42c>
       }
       i++;
    396e:	89 a9       	ldd	r24, Y+49	; 0x31
    3970:	9a a9       	ldd	r25, Y+50	; 0x32
    3972:	ab a9       	ldd	r26, Y+51	; 0x33
    3974:	bc a9       	ldd	r27, Y+52	; 0x34
    3976:	01 96       	adiw	r24, 0x01	; 1
    3978:	a1 1d       	adc	r26, r1
    397a:	b1 1d       	adc	r27, r1
    397c:	89 ab       	std	Y+49, r24	; 0x31
    397e:	9a ab       	std	Y+50, r25	; 0x32
    3980:	ab ab       	std	Y+51, r26	; 0x33
    3982:	bc ab       	std	Y+52, r27	; 0x34
    TRIGGERPORT &= ~( 1 << triggerpin);
    isTriggerd = 1;
    _delay_us(15);

    unsigned long i = 0;
    while(isTriggerd){
    3984:	80 91 08 03 	lds	r24, 0x0308
    3988:	90 91 09 03 	lds	r25, 0x0309
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	d9 f6       	brne	.-74     	; 0x3946 <distance+0x3a2>
       }
       i++;

    }

    return pulse/928.0;
    3990:	80 91 0c 03 	lds	r24, 0x030C
    3994:	90 91 0d 03 	lds	r25, 0x030D
    3998:	a0 91 0e 03 	lds	r26, 0x030E
    399c:	b0 91 0f 03 	lds	r27, 0x030F
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	0e 94 1d 22 	call	0x443a	; 0x443a <__floatunsisf>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	48 e6       	ldi	r20, 0x68	; 104
    39b6:	54 e4       	ldi	r21, 0x44	; 68
    39b8:	0e 94 8d 20 	call	0x411a	; 0x411a <__divsf3>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	bc 01       	movw	r22, r24
    39c2:	cd 01       	movw	r24, r26
    39c4:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fixsfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	98 af       	std	Y+56, r25	; 0x38
    39ce:	8f ab       	std	Y+55, r24	; 0x37
    39d0:	8f a9       	ldd	r24, Y+55	; 0x37
    39d2:	98 ad       	ldd	r25, Y+56	; 0x38
}
    39d4:	ea 96       	adiw	r28, 0x3a	; 58
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	f8 94       	cli
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	cd bf       	out	0x3d, r28	; 61
    39e0:	cf 91       	pop	r28
    39e2:	df 91       	pop	r29
    39e4:	08 95       	ret

000039e6 <init_ultrasoon>:
void init_ultrasoon(){
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    TRIGGERDDR |= (1 << ultra_1_trigger) | (1 << ultra_2_trigger);
    39ee:	aa e2       	ldi	r26, 0x2A	; 42
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	ea e2       	ldi	r30, 0x2A	; 42
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	83 60       	ori	r24, 0x03	; 3
    39fa:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_1_trigger);
    39fc:	ab e2       	ldi	r26, 0x2B	; 43
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	eb e2       	ldi	r30, 0x2B	; 43
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	8e 7f       	andi	r24, 0xFE	; 254
    3a08:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_2_trigger);
    3a0a:	ab e2       	ldi	r26, 0x2B	; 43
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	eb e2       	ldi	r30, 0x2B	; 43
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	8d 7f       	andi	r24, 0xFD	; 253
    3a16:	8c 93       	st	X, r24
    PCICR |= (1 << PCREG);
    3a18:	a8 e6       	ldi	r26, 0x68	; 104
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e8 e6       	ldi	r30, 0x68	; 104
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	81 60       	ori	r24, 0x01	; 1
    3a24:	8c 93       	st	X, r24
    PCMASK = 0;
    3a26:	eb e6       	ldi	r30, 0x6B	; 107
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	10 82       	st	Z, r1
}
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <__vector_9>:

ISR(PCISR)   // Interrupt service routine.
{
    3a32:	1f 92       	push	r1
    3a34:	0f 92       	push	r0
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	0f 92       	push	r0
    3a3a:	00 90 5b 00 	lds	r0, 0x005B
    3a3e:	0f 92       	push	r0
    3a40:	11 24       	eor	r1, r1
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	2f 93       	push	r18
    3a4c:	3f 93       	push	r19
    3a4e:	4f 93       	push	r20
    3a50:	5f 93       	push	r21
    3a52:	6f 93       	push	r22
    3a54:	7f 93       	push	r23
    3a56:	8f 93       	push	r24
    3a58:	9f 93       	push	r25
    3a5a:	af 93       	push	r26
    3a5c:	bf 93       	push	r27
    3a5e:	ef 93       	push	r30
    3a60:	ff 93       	push	r31
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    if (echo_pin==1)
    3a6a:	80 91 10 03 	lds	r24, 0x0310
    3a6e:	90 91 11 03 	lds	r25, 0x0311
    3a72:	81 30       	cpi	r24, 0x01	; 1
    3a74:	91 05       	cpc	r25, r1
    3a76:	c9 f5       	brne	.+114    	; 0x3aea <__vector_9+0xb8>
	{
		TIMER_B = 0;    //TIMER COUNTER CONTROL REGITER (Stop the counter)
    3a78:	e1 e2       	ldi	r30, 0x21	; 33
    3a7a:	f1 e0       	ldi	r31, 0x01	; 1
    3a7c:	10 82       	st	Z, r1
		pulse=TNCT_timer+(overflows*OVERFLOW);  // store the value of counter
    3a7e:	e4 e2       	ldi	r30, 0x24	; 36
    3a80:	f1 e0       	ldi	r31, 0x01	; 1
    3a82:	80 81       	ld	r24, Z
    3a84:	91 81       	ldd	r25, Z+1	; 0x01
    3a86:	7c 01       	movw	r14, r24
    3a88:	00 e0       	ldi	r16, 0x00	; 0
    3a8a:	10 e0       	ldi	r17, 0x00	; 0
    3a8c:	80 91 0a 03 	lds	r24, 0x030A
    3a90:	90 91 0b 03 	lds	r25, 0x030B
    3a94:	aa 27       	eor	r26, r26
    3a96:	97 fd       	sbrc	r25, 7
    3a98:	a0 95       	com	r26
    3a9a:	ba 2f       	mov	r27, r26
    3a9c:	2f ef       	ldi	r18, 0xFF	; 255
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	40 e0       	ldi	r20, 0x00	; 0
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 8b 24 	call	0x4916	; 0x4916 <__mulsi3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	8e 0d       	add	r24, r14
    3ab2:	9f 1d       	adc	r25, r15
    3ab4:	a0 1f       	adc	r26, r16
    3ab6:	b1 1f       	adc	r27, r17
    3ab8:	80 93 0c 03 	sts	0x030C, r24
    3abc:	90 93 0d 03 	sts	0x030D, r25
    3ac0:	a0 93 0e 03 	sts	0x030E, r26
    3ac4:	b0 93 0f 03 	sts	0x030F, r27
		TNCT_timer=0;     // reset the counter
    3ac8:	e4 e2       	ldi	r30, 0x24	; 36
    3aca:	f1 e0       	ldi	r31, 0x01	; 1
    3acc:	11 82       	std	Z+1, r1	; 0x01
    3ace:	10 82       	st	Z, r1
		echo_pin=0;
    3ad0:	10 92 11 03 	sts	0x0311, r1
    3ad4:	10 92 10 03 	sts	0x0310, r1
		isTriggerd = 0;
    3ad8:	10 92 09 03 	sts	0x0309, r1
    3adc:	10 92 08 03 	sts	0x0308, r1
		overflows = 0;
    3ae0:	10 92 0b 03 	sts	0x030B, r1
    3ae4:	10 92 0a 03 	sts	0x030A, r1
    3ae8:	11 c0       	rjmp	.+34     	; 0x3b0c <__vector_9+0xda>
	}
	else
	{
		TIMER_B |=(1<<CS10);  // used to start the internal counter of microcontroller
    3aea:	a1 e2       	ldi	r26, 0x21	; 33
    3aec:	b1 e0       	ldi	r27, 0x01	; 1
    3aee:	e1 e2       	ldi	r30, 0x21	; 33
    3af0:	f1 e0       	ldi	r31, 0x01	; 1
    3af2:	80 81       	ld	r24, Z
    3af4:	81 60       	ori	r24, 0x01	; 1
    3af6:	8c 93       	st	X, r24
		TIMSK_timer = (1 <<TIMSK_bit);
    3af8:	e3 e7       	ldi	r30, 0x73	; 115
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	80 83       	st	Z, r24
		echo_pin=1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	90 93 11 03 	sts	0x0311, r25
    3b08:	80 93 10 03 	sts	0x0310, r24
	}
}
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	ff 91       	pop	r31
    3b12:	ef 91       	pop	r30
    3b14:	bf 91       	pop	r27
    3b16:	af 91       	pop	r26
    3b18:	9f 91       	pop	r25
    3b1a:	8f 91       	pop	r24
    3b1c:	7f 91       	pop	r23
    3b1e:	6f 91       	pop	r22
    3b20:	5f 91       	pop	r21
    3b22:	4f 91       	pop	r20
    3b24:	3f 91       	pop	r19
    3b26:	2f 91       	pop	r18
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	ff 90       	pop	r15
    3b2e:	ef 90       	pop	r14
    3b30:	0f 90       	pop	r0
    3b32:	00 92 5b 00 	sts	0x005B, r0
    3b36:	0f 90       	pop	r0
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	0f 90       	pop	r0
    3b3c:	1f 90       	pop	r1
    3b3e:	18 95       	reti

00003b40 <__vector_50>:

ISR(ISR_TIMER_OVF){
    3b40:	1f 92       	push	r1
    3b42:	0f 92       	push	r0
    3b44:	0f b6       	in	r0, 0x3f	; 63
    3b46:	0f 92       	push	r0
    3b48:	11 24       	eor	r1, r1
    3b4a:	8f 93       	push	r24
    3b4c:	9f 93       	push	r25
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    overflows++;
    3b56:	80 91 0a 03 	lds	r24, 0x030A
    3b5a:	90 91 0b 03 	lds	r25, 0x030B
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	90 93 0b 03 	sts	0x030B, r25
    3b64:	80 93 0a 03 	sts	0x030A, r24
}
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	9f 91       	pop	r25
    3b6e:	8f 91       	pop	r24
    3b70:	0f 90       	pop	r0
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	0f 90       	pop	r0
    3b76:	1f 90       	pop	r1
    3b78:	18 95       	reti

00003b7a <__fixunssfsi>:
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	7b 01       	movw	r14, r22
    3b84:	8c 01       	movw	r16, r24
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	40 e0       	ldi	r20, 0x00	; 0
    3b8c:	5f e4       	ldi	r21, 0x4F	; 79
    3b8e:	0e 94 69 21 	call	0x42d2	; 0x42d2 <__gesf2>
    3b92:	88 23       	and	r24, r24
    3b94:	8c f0       	brlt	.+34     	; 0x3bb8 <__fixunssfsi+0x3e>
    3b96:	c8 01       	movw	r24, r16
    3b98:	b7 01       	movw	r22, r14
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	5f e4       	ldi	r21, 0x4F	; 79
    3ba2:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__subsf3>
    3ba6:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fixsfsi>
    3baa:	9b 01       	movw	r18, r22
    3bac:	ac 01       	movw	r20, r24
    3bae:	20 50       	subi	r18, 0x00	; 0
    3bb0:	30 40       	sbci	r19, 0x00	; 0
    3bb2:	40 40       	sbci	r20, 0x00	; 0
    3bb4:	50 48       	sbci	r21, 0x80	; 128
    3bb6:	06 c0       	rjmp	.+12     	; 0x3bc4 <__fixunssfsi+0x4a>
    3bb8:	c8 01       	movw	r24, r16
    3bba:	b7 01       	movw	r22, r14
    3bbc:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fixsfsi>
    3bc0:	9b 01       	movw	r18, r22
    3bc2:	ac 01       	movw	r20, r24
    3bc4:	b9 01       	movw	r22, r18
    3bc6:	ca 01       	movw	r24, r20
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	08 95       	ret

00003bd2 <_fpadd_parts>:
    3bd2:	a0 e0       	ldi	r26, 0x00	; 0
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	ef ee       	ldi	r30, 0xEF	; 239
    3bd8:	fd e1       	ldi	r31, 0x1D	; 29
    3bda:	0c 94 aa 24 	jmp	0x4954	; 0x4954 <__prologue_saves__>
    3bde:	dc 01       	movw	r26, r24
    3be0:	2b 01       	movw	r4, r22
    3be2:	fa 01       	movw	r30, r20
    3be4:	9c 91       	ld	r25, X
    3be6:	92 30       	cpi	r25, 0x02	; 2
    3be8:	08 f4       	brcc	.+2      	; 0x3bec <_fpadd_parts+0x1a>
    3bea:	39 c1       	rjmp	.+626    	; 0x3e5e <_fpadd_parts+0x28c>
    3bec:	eb 01       	movw	r28, r22
    3bee:	88 81       	ld	r24, Y
    3bf0:	82 30       	cpi	r24, 0x02	; 2
    3bf2:	08 f4       	brcc	.+2      	; 0x3bf6 <_fpadd_parts+0x24>
    3bf4:	33 c1       	rjmp	.+614    	; 0x3e5c <_fpadd_parts+0x28a>
    3bf6:	94 30       	cpi	r25, 0x04	; 4
    3bf8:	69 f4       	brne	.+26     	; 0x3c14 <_fpadd_parts+0x42>
    3bfa:	84 30       	cpi	r24, 0x04	; 4
    3bfc:	09 f0       	breq	.+2      	; 0x3c00 <_fpadd_parts+0x2e>
    3bfe:	2f c1       	rjmp	.+606    	; 0x3e5e <_fpadd_parts+0x28c>
    3c00:	11 96       	adiw	r26, 0x01	; 1
    3c02:	9c 91       	ld	r25, X
    3c04:	11 97       	sbiw	r26, 0x01	; 1
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	98 17       	cp	r25, r24
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <_fpadd_parts+0x3c>
    3c0c:	28 c1       	rjmp	.+592    	; 0x3e5e <_fpadd_parts+0x28c>
    3c0e:	a0 e0       	ldi	r26, 0x00	; 0
    3c10:	b2 e0       	ldi	r27, 0x02	; 2
    3c12:	25 c1       	rjmp	.+586    	; 0x3e5e <_fpadd_parts+0x28c>
    3c14:	84 30       	cpi	r24, 0x04	; 4
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <_fpadd_parts+0x48>
    3c18:	21 c1       	rjmp	.+578    	; 0x3e5c <_fpadd_parts+0x28a>
    3c1a:	82 30       	cpi	r24, 0x02	; 2
    3c1c:	a9 f4       	brne	.+42     	; 0x3c48 <_fpadd_parts+0x76>
    3c1e:	92 30       	cpi	r25, 0x02	; 2
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <_fpadd_parts+0x52>
    3c22:	1d c1       	rjmp	.+570    	; 0x3e5e <_fpadd_parts+0x28c>
    3c24:	9a 01       	movw	r18, r20
    3c26:	ad 01       	movw	r20, r26
    3c28:	88 e0       	ldi	r24, 0x08	; 8
    3c2a:	ea 01       	movw	r28, r20
    3c2c:	09 90       	ld	r0, Y+
    3c2e:	ae 01       	movw	r20, r28
    3c30:	e9 01       	movw	r28, r18
    3c32:	09 92       	st	Y+, r0
    3c34:	9e 01       	movw	r18, r28
    3c36:	81 50       	subi	r24, 0x01	; 1
    3c38:	c1 f7       	brne	.-16     	; 0x3c2a <_fpadd_parts+0x58>
    3c3a:	e2 01       	movw	r28, r4
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	11 96       	adiw	r26, 0x01	; 1
    3c40:	9c 91       	ld	r25, X
    3c42:	89 23       	and	r24, r25
    3c44:	81 83       	std	Z+1, r24	; 0x01
    3c46:	08 c1       	rjmp	.+528    	; 0x3e58 <_fpadd_parts+0x286>
    3c48:	92 30       	cpi	r25, 0x02	; 2
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <_fpadd_parts+0x7c>
    3c4c:	07 c1       	rjmp	.+526    	; 0x3e5c <_fpadd_parts+0x28a>
    3c4e:	12 96       	adiw	r26, 0x02	; 2
    3c50:	2d 90       	ld	r2, X+
    3c52:	3c 90       	ld	r3, X
    3c54:	13 97       	sbiw	r26, 0x03	; 3
    3c56:	eb 01       	movw	r28, r22
    3c58:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5c:	14 96       	adiw	r26, 0x04	; 4
    3c5e:	ad 90       	ld	r10, X+
    3c60:	bd 90       	ld	r11, X+
    3c62:	cd 90       	ld	r12, X+
    3c64:	dc 90       	ld	r13, X
    3c66:	17 97       	sbiw	r26, 0x07	; 7
    3c68:	ec 80       	ldd	r14, Y+4	; 0x04
    3c6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c6c:	0e 81       	ldd	r16, Y+6	; 0x06
    3c6e:	1f 81       	ldd	r17, Y+7	; 0x07
    3c70:	91 01       	movw	r18, r2
    3c72:	28 1b       	sub	r18, r24
    3c74:	39 0b       	sbc	r19, r25
    3c76:	b9 01       	movw	r22, r18
    3c78:	37 ff       	sbrs	r19, 7
    3c7a:	04 c0       	rjmp	.+8      	; 0x3c84 <_fpadd_parts+0xb2>
    3c7c:	66 27       	eor	r22, r22
    3c7e:	77 27       	eor	r23, r23
    3c80:	62 1b       	sub	r22, r18
    3c82:	73 0b       	sbc	r23, r19
    3c84:	60 32       	cpi	r22, 0x20	; 32
    3c86:	71 05       	cpc	r23, r1
    3c88:	0c f0       	brlt	.+2      	; 0x3c8c <_fpadd_parts+0xba>
    3c8a:	61 c0       	rjmp	.+194    	; 0x3d4e <_fpadd_parts+0x17c>
    3c8c:	12 16       	cp	r1, r18
    3c8e:	13 06       	cpc	r1, r19
    3c90:	6c f5       	brge	.+90     	; 0x3cec <_fpadd_parts+0x11a>
    3c92:	37 01       	movw	r6, r14
    3c94:	48 01       	movw	r8, r16
    3c96:	06 2e       	mov	r0, r22
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <_fpadd_parts+0xd0>
    3c9a:	96 94       	lsr	r9
    3c9c:	87 94       	ror	r8
    3c9e:	77 94       	ror	r7
    3ca0:	67 94       	ror	r6
    3ca2:	0a 94       	dec	r0
    3ca4:	d2 f7       	brpl	.-12     	; 0x3c9a <_fpadd_parts+0xc8>
    3ca6:	21 e0       	ldi	r18, 0x01	; 1
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	04 c0       	rjmp	.+8      	; 0x3cb8 <_fpadd_parts+0xe6>
    3cb0:	22 0f       	add	r18, r18
    3cb2:	33 1f       	adc	r19, r19
    3cb4:	44 1f       	adc	r20, r20
    3cb6:	55 1f       	adc	r21, r21
    3cb8:	6a 95       	dec	r22
    3cba:	d2 f7       	brpl	.-12     	; 0x3cb0 <_fpadd_parts+0xde>
    3cbc:	21 50       	subi	r18, 0x01	; 1
    3cbe:	30 40       	sbci	r19, 0x00	; 0
    3cc0:	40 40       	sbci	r20, 0x00	; 0
    3cc2:	50 40       	sbci	r21, 0x00	; 0
    3cc4:	2e 21       	and	r18, r14
    3cc6:	3f 21       	and	r19, r15
    3cc8:	40 23       	and	r20, r16
    3cca:	51 23       	and	r21, r17
    3ccc:	21 15       	cp	r18, r1
    3cce:	31 05       	cpc	r19, r1
    3cd0:	41 05       	cpc	r20, r1
    3cd2:	51 05       	cpc	r21, r1
    3cd4:	21 f0       	breq	.+8      	; 0x3cde <_fpadd_parts+0x10c>
    3cd6:	21 e0       	ldi	r18, 0x01	; 1
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	79 01       	movw	r14, r18
    3ce0:	8a 01       	movw	r16, r20
    3ce2:	e6 28       	or	r14, r6
    3ce4:	f7 28       	or	r15, r7
    3ce6:	08 29       	or	r16, r8
    3ce8:	19 29       	or	r17, r9
    3cea:	3c c0       	rjmp	.+120    	; 0x3d64 <_fpadd_parts+0x192>
    3cec:	23 2b       	or	r18, r19
    3cee:	d1 f1       	breq	.+116    	; 0x3d64 <_fpadd_parts+0x192>
    3cf0:	26 0e       	add	r2, r22
    3cf2:	37 1e       	adc	r3, r23
    3cf4:	35 01       	movw	r6, r10
    3cf6:	46 01       	movw	r8, r12
    3cf8:	06 2e       	mov	r0, r22
    3cfa:	04 c0       	rjmp	.+8      	; 0x3d04 <_fpadd_parts+0x132>
    3cfc:	96 94       	lsr	r9
    3cfe:	87 94       	ror	r8
    3d00:	77 94       	ror	r7
    3d02:	67 94       	ror	r6
    3d04:	0a 94       	dec	r0
    3d06:	d2 f7       	brpl	.-12     	; 0x3cfc <_fpadd_parts+0x12a>
    3d08:	21 e0       	ldi	r18, 0x01	; 1
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	04 c0       	rjmp	.+8      	; 0x3d1a <_fpadd_parts+0x148>
    3d12:	22 0f       	add	r18, r18
    3d14:	33 1f       	adc	r19, r19
    3d16:	44 1f       	adc	r20, r20
    3d18:	55 1f       	adc	r21, r21
    3d1a:	6a 95       	dec	r22
    3d1c:	d2 f7       	brpl	.-12     	; 0x3d12 <_fpadd_parts+0x140>
    3d1e:	21 50       	subi	r18, 0x01	; 1
    3d20:	30 40       	sbci	r19, 0x00	; 0
    3d22:	40 40       	sbci	r20, 0x00	; 0
    3d24:	50 40       	sbci	r21, 0x00	; 0
    3d26:	2a 21       	and	r18, r10
    3d28:	3b 21       	and	r19, r11
    3d2a:	4c 21       	and	r20, r12
    3d2c:	5d 21       	and	r21, r13
    3d2e:	21 15       	cp	r18, r1
    3d30:	31 05       	cpc	r19, r1
    3d32:	41 05       	cpc	r20, r1
    3d34:	51 05       	cpc	r21, r1
    3d36:	21 f0       	breq	.+8      	; 0x3d40 <_fpadd_parts+0x16e>
    3d38:	21 e0       	ldi	r18, 0x01	; 1
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	50 e0       	ldi	r21, 0x00	; 0
    3d40:	59 01       	movw	r10, r18
    3d42:	6a 01       	movw	r12, r20
    3d44:	a6 28       	or	r10, r6
    3d46:	b7 28       	or	r11, r7
    3d48:	c8 28       	or	r12, r8
    3d4a:	d9 28       	or	r13, r9
    3d4c:	0b c0       	rjmp	.+22     	; 0x3d64 <_fpadd_parts+0x192>
    3d4e:	82 15       	cp	r24, r2
    3d50:	93 05       	cpc	r25, r3
    3d52:	2c f0       	brlt	.+10     	; 0x3d5e <_fpadd_parts+0x18c>
    3d54:	1c 01       	movw	r2, r24
    3d56:	aa 24       	eor	r10, r10
    3d58:	bb 24       	eor	r11, r11
    3d5a:	65 01       	movw	r12, r10
    3d5c:	03 c0       	rjmp	.+6      	; 0x3d64 <_fpadd_parts+0x192>
    3d5e:	ee 24       	eor	r14, r14
    3d60:	ff 24       	eor	r15, r15
    3d62:	87 01       	movw	r16, r14
    3d64:	11 96       	adiw	r26, 0x01	; 1
    3d66:	9c 91       	ld	r25, X
    3d68:	d2 01       	movw	r26, r4
    3d6a:	11 96       	adiw	r26, 0x01	; 1
    3d6c:	8c 91       	ld	r24, X
    3d6e:	98 17       	cp	r25, r24
    3d70:	09 f4       	brne	.+2      	; 0x3d74 <_fpadd_parts+0x1a2>
    3d72:	45 c0       	rjmp	.+138    	; 0x3dfe <_fpadd_parts+0x22c>
    3d74:	99 23       	and	r25, r25
    3d76:	39 f0       	breq	.+14     	; 0x3d86 <_fpadd_parts+0x1b4>
    3d78:	a8 01       	movw	r20, r16
    3d7a:	97 01       	movw	r18, r14
    3d7c:	2a 19       	sub	r18, r10
    3d7e:	3b 09       	sbc	r19, r11
    3d80:	4c 09       	sbc	r20, r12
    3d82:	5d 09       	sbc	r21, r13
    3d84:	06 c0       	rjmp	.+12     	; 0x3d92 <_fpadd_parts+0x1c0>
    3d86:	a6 01       	movw	r20, r12
    3d88:	95 01       	movw	r18, r10
    3d8a:	2e 19       	sub	r18, r14
    3d8c:	3f 09       	sbc	r19, r15
    3d8e:	40 0b       	sbc	r20, r16
    3d90:	51 0b       	sbc	r21, r17
    3d92:	57 fd       	sbrc	r21, 7
    3d94:	08 c0       	rjmp	.+16     	; 0x3da6 <_fpadd_parts+0x1d4>
    3d96:	11 82       	std	Z+1, r1	; 0x01
    3d98:	33 82       	std	Z+3, r3	; 0x03
    3d9a:	22 82       	std	Z+2, r2	; 0x02
    3d9c:	24 83       	std	Z+4, r18	; 0x04
    3d9e:	35 83       	std	Z+5, r19	; 0x05
    3da0:	46 83       	std	Z+6, r20	; 0x06
    3da2:	57 83       	std	Z+7, r21	; 0x07
    3da4:	1d c0       	rjmp	.+58     	; 0x3de0 <_fpadd_parts+0x20e>
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	81 83       	std	Z+1, r24	; 0x01
    3daa:	33 82       	std	Z+3, r3	; 0x03
    3dac:	22 82       	std	Z+2, r2	; 0x02
    3dae:	88 27       	eor	r24, r24
    3db0:	99 27       	eor	r25, r25
    3db2:	dc 01       	movw	r26, r24
    3db4:	82 1b       	sub	r24, r18
    3db6:	93 0b       	sbc	r25, r19
    3db8:	a4 0b       	sbc	r26, r20
    3dba:	b5 0b       	sbc	r27, r21
    3dbc:	84 83       	std	Z+4, r24	; 0x04
    3dbe:	95 83       	std	Z+5, r25	; 0x05
    3dc0:	a6 83       	std	Z+6, r26	; 0x06
    3dc2:	b7 83       	std	Z+7, r27	; 0x07
    3dc4:	0d c0       	rjmp	.+26     	; 0x3de0 <_fpadd_parts+0x20e>
    3dc6:	22 0f       	add	r18, r18
    3dc8:	33 1f       	adc	r19, r19
    3dca:	44 1f       	adc	r20, r20
    3dcc:	55 1f       	adc	r21, r21
    3dce:	24 83       	std	Z+4, r18	; 0x04
    3dd0:	35 83       	std	Z+5, r19	; 0x05
    3dd2:	46 83       	std	Z+6, r20	; 0x06
    3dd4:	57 83       	std	Z+7, r21	; 0x07
    3dd6:	82 81       	ldd	r24, Z+2	; 0x02
    3dd8:	93 81       	ldd	r25, Z+3	; 0x03
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	93 83       	std	Z+3, r25	; 0x03
    3dde:	82 83       	std	Z+2, r24	; 0x02
    3de0:	24 81       	ldd	r18, Z+4	; 0x04
    3de2:	35 81       	ldd	r19, Z+5	; 0x05
    3de4:	46 81       	ldd	r20, Z+6	; 0x06
    3de6:	57 81       	ldd	r21, Z+7	; 0x07
    3de8:	da 01       	movw	r26, r20
    3dea:	c9 01       	movw	r24, r18
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	a1 09       	sbc	r26, r1
    3df0:	b1 09       	sbc	r27, r1
    3df2:	8f 5f       	subi	r24, 0xFF	; 255
    3df4:	9f 4f       	sbci	r25, 0xFF	; 255
    3df6:	af 4f       	sbci	r26, 0xFF	; 255
    3df8:	bf 43       	sbci	r27, 0x3F	; 63
    3dfa:	28 f3       	brcs	.-54     	; 0x3dc6 <_fpadd_parts+0x1f4>
    3dfc:	0b c0       	rjmp	.+22     	; 0x3e14 <_fpadd_parts+0x242>
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	33 82       	std	Z+3, r3	; 0x03
    3e02:	22 82       	std	Z+2, r2	; 0x02
    3e04:	ea 0c       	add	r14, r10
    3e06:	fb 1c       	adc	r15, r11
    3e08:	0c 1d       	adc	r16, r12
    3e0a:	1d 1d       	adc	r17, r13
    3e0c:	e4 82       	std	Z+4, r14	; 0x04
    3e0e:	f5 82       	std	Z+5, r15	; 0x05
    3e10:	06 83       	std	Z+6, r16	; 0x06
    3e12:	17 83       	std	Z+7, r17	; 0x07
    3e14:	83 e0       	ldi	r24, 0x03	; 3
    3e16:	80 83       	st	Z, r24
    3e18:	24 81       	ldd	r18, Z+4	; 0x04
    3e1a:	35 81       	ldd	r19, Z+5	; 0x05
    3e1c:	46 81       	ldd	r20, Z+6	; 0x06
    3e1e:	57 81       	ldd	r21, Z+7	; 0x07
    3e20:	57 ff       	sbrs	r21, 7
    3e22:	1a c0       	rjmp	.+52     	; 0x3e58 <_fpadd_parts+0x286>
    3e24:	c9 01       	movw	r24, r18
    3e26:	aa 27       	eor	r26, r26
    3e28:	97 fd       	sbrc	r25, 7
    3e2a:	a0 95       	com	r26
    3e2c:	ba 2f       	mov	r27, r26
    3e2e:	81 70       	andi	r24, 0x01	; 1
    3e30:	90 70       	andi	r25, 0x00	; 0
    3e32:	a0 70       	andi	r26, 0x00	; 0
    3e34:	b0 70       	andi	r27, 0x00	; 0
    3e36:	56 95       	lsr	r21
    3e38:	47 95       	ror	r20
    3e3a:	37 95       	ror	r19
    3e3c:	27 95       	ror	r18
    3e3e:	82 2b       	or	r24, r18
    3e40:	93 2b       	or	r25, r19
    3e42:	a4 2b       	or	r26, r20
    3e44:	b5 2b       	or	r27, r21
    3e46:	84 83       	std	Z+4, r24	; 0x04
    3e48:	95 83       	std	Z+5, r25	; 0x05
    3e4a:	a6 83       	std	Z+6, r26	; 0x06
    3e4c:	b7 83       	std	Z+7, r27	; 0x07
    3e4e:	82 81       	ldd	r24, Z+2	; 0x02
    3e50:	93 81       	ldd	r25, Z+3	; 0x03
    3e52:	01 96       	adiw	r24, 0x01	; 1
    3e54:	93 83       	std	Z+3, r25	; 0x03
    3e56:	82 83       	std	Z+2, r24	; 0x02
    3e58:	df 01       	movw	r26, r30
    3e5a:	01 c0       	rjmp	.+2      	; 0x3e5e <_fpadd_parts+0x28c>
    3e5c:	d2 01       	movw	r26, r4
    3e5e:	cd 01       	movw	r24, r26
    3e60:	cd b7       	in	r28, 0x3d	; 61
    3e62:	de b7       	in	r29, 0x3e	; 62
    3e64:	e2 e1       	ldi	r30, 0x12	; 18
    3e66:	0c 94 c6 24 	jmp	0x498c	; 0x498c <__epilogue_restores__>

00003e6a <__subsf3>:
    3e6a:	a0 e2       	ldi	r26, 0x20	; 32
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	eb e3       	ldi	r30, 0x3B	; 59
    3e70:	ff e1       	ldi	r31, 0x1F	; 31
    3e72:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__prologue_saves__+0x18>
    3e76:	69 83       	std	Y+1, r22	; 0x01
    3e78:	7a 83       	std	Y+2, r23	; 0x02
    3e7a:	8b 83       	std	Y+3, r24	; 0x03
    3e7c:	9c 83       	std	Y+4, r25	; 0x04
    3e7e:	2d 83       	std	Y+5, r18	; 0x05
    3e80:	3e 83       	std	Y+6, r19	; 0x06
    3e82:	4f 83       	std	Y+7, r20	; 0x07
    3e84:	58 87       	std	Y+8, r21	; 0x08
    3e86:	e9 e0       	ldi	r30, 0x09	; 9
    3e88:	ee 2e       	mov	r14, r30
    3e8a:	f1 2c       	mov	r15, r1
    3e8c:	ec 0e       	add	r14, r28
    3e8e:	fd 1e       	adc	r15, r29
    3e90:	ce 01       	movw	r24, r28
    3e92:	01 96       	adiw	r24, 0x01	; 1
    3e94:	b7 01       	movw	r22, r14
    3e96:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	0f 5e       	subi	r16, 0xEF	; 239
    3e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	05 96       	adiw	r24, 0x05	; 5
    3ea4:	b8 01       	movw	r22, r16
    3ea6:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    3eaa:	8a 89       	ldd	r24, Y+18	; 0x12
    3eac:	91 e0       	ldi	r25, 0x01	; 1
    3eae:	89 27       	eor	r24, r25
    3eb0:	8a 8b       	std	Y+18, r24	; 0x12
    3eb2:	c7 01       	movw	r24, r14
    3eb4:	b8 01       	movw	r22, r16
    3eb6:	ae 01       	movw	r20, r28
    3eb8:	47 5e       	subi	r20, 0xE7	; 231
    3eba:	5f 4f       	sbci	r21, 0xFF	; 255
    3ebc:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_fpadd_parts>
    3ec0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__pack_f>
    3ec4:	a0 96       	adiw	r28, 0x20	; 32
    3ec6:	e6 e0       	ldi	r30, 0x06	; 6
    3ec8:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__epilogue_restores__+0x18>

00003ecc <__addsf3>:
    3ecc:	a0 e2       	ldi	r26, 0x20	; 32
    3ece:	b0 e0       	ldi	r27, 0x00	; 0
    3ed0:	ec e6       	ldi	r30, 0x6C	; 108
    3ed2:	ff e1       	ldi	r31, 0x1F	; 31
    3ed4:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__prologue_saves__+0x18>
    3ed8:	69 83       	std	Y+1, r22	; 0x01
    3eda:	7a 83       	std	Y+2, r23	; 0x02
    3edc:	8b 83       	std	Y+3, r24	; 0x03
    3ede:	9c 83       	std	Y+4, r25	; 0x04
    3ee0:	2d 83       	std	Y+5, r18	; 0x05
    3ee2:	3e 83       	std	Y+6, r19	; 0x06
    3ee4:	4f 83       	std	Y+7, r20	; 0x07
    3ee6:	58 87       	std	Y+8, r21	; 0x08
    3ee8:	f9 e0       	ldi	r31, 0x09	; 9
    3eea:	ef 2e       	mov	r14, r31
    3eec:	f1 2c       	mov	r15, r1
    3eee:	ec 0e       	add	r14, r28
    3ef0:	fd 1e       	adc	r15, r29
    3ef2:	ce 01       	movw	r24, r28
    3ef4:	01 96       	adiw	r24, 0x01	; 1
    3ef6:	b7 01       	movw	r22, r14
    3ef8:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    3efc:	8e 01       	movw	r16, r28
    3efe:	0f 5e       	subi	r16, 0xEF	; 239
    3f00:	1f 4f       	sbci	r17, 0xFF	; 255
    3f02:	ce 01       	movw	r24, r28
    3f04:	05 96       	adiw	r24, 0x05	; 5
    3f06:	b8 01       	movw	r22, r16
    3f08:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    3f0c:	c7 01       	movw	r24, r14
    3f0e:	b8 01       	movw	r22, r16
    3f10:	ae 01       	movw	r20, r28
    3f12:	47 5e       	subi	r20, 0xE7	; 231
    3f14:	5f 4f       	sbci	r21, 0xFF	; 255
    3f16:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_fpadd_parts>
    3f1a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__pack_f>
    3f1e:	a0 96       	adiw	r28, 0x20	; 32
    3f20:	e6 e0       	ldi	r30, 0x06	; 6
    3f22:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__epilogue_restores__+0x18>

00003f26 <__mulsf3>:
    3f26:	a0 e2       	ldi	r26, 0x20	; 32
    3f28:	b0 e0       	ldi	r27, 0x00	; 0
    3f2a:	e9 e9       	ldi	r30, 0x99	; 153
    3f2c:	ff e1       	ldi	r31, 0x1F	; 31
    3f2e:	0c 94 aa 24 	jmp	0x4954	; 0x4954 <__prologue_saves__>
    3f32:	69 83       	std	Y+1, r22	; 0x01
    3f34:	7a 83       	std	Y+2, r23	; 0x02
    3f36:	8b 83       	std	Y+3, r24	; 0x03
    3f38:	9c 83       	std	Y+4, r25	; 0x04
    3f3a:	2d 83       	std	Y+5, r18	; 0x05
    3f3c:	3e 83       	std	Y+6, r19	; 0x06
    3f3e:	4f 83       	std	Y+7, r20	; 0x07
    3f40:	58 87       	std	Y+8, r21	; 0x08
    3f42:	ce 01       	movw	r24, r28
    3f44:	01 96       	adiw	r24, 0x01	; 1
    3f46:	be 01       	movw	r22, r28
    3f48:	67 5f       	subi	r22, 0xF7	; 247
    3f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4c:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    3f50:	ce 01       	movw	r24, r28
    3f52:	05 96       	adiw	r24, 0x05	; 5
    3f54:	be 01       	movw	r22, r28
    3f56:	6f 5e       	subi	r22, 0xEF	; 239
    3f58:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5a:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    3f5e:	99 85       	ldd	r25, Y+9	; 0x09
    3f60:	92 30       	cpi	r25, 0x02	; 2
    3f62:	88 f0       	brcs	.+34     	; 0x3f86 <__mulsf3+0x60>
    3f64:	89 89       	ldd	r24, Y+17	; 0x11
    3f66:	82 30       	cpi	r24, 0x02	; 2
    3f68:	c8 f0       	brcs	.+50     	; 0x3f9c <__mulsf3+0x76>
    3f6a:	94 30       	cpi	r25, 0x04	; 4
    3f6c:	19 f4       	brne	.+6      	; 0x3f74 <__mulsf3+0x4e>
    3f6e:	82 30       	cpi	r24, 0x02	; 2
    3f70:	51 f4       	brne	.+20     	; 0x3f86 <__mulsf3+0x60>
    3f72:	04 c0       	rjmp	.+8      	; 0x3f7c <__mulsf3+0x56>
    3f74:	84 30       	cpi	r24, 0x04	; 4
    3f76:	29 f4       	brne	.+10     	; 0x3f82 <__mulsf3+0x5c>
    3f78:	92 30       	cpi	r25, 0x02	; 2
    3f7a:	81 f4       	brne	.+32     	; 0x3f9c <__mulsf3+0x76>
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	92 e0       	ldi	r25, 0x02	; 2
    3f80:	c6 c0       	rjmp	.+396    	; 0x410e <__mulsf3+0x1e8>
    3f82:	92 30       	cpi	r25, 0x02	; 2
    3f84:	49 f4       	brne	.+18     	; 0x3f98 <__mulsf3+0x72>
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f8c:	98 13       	cpse	r25, r24
    3f8e:	21 e0       	ldi	r18, 0x01	; 1
    3f90:	2a 87       	std	Y+10, r18	; 0x0a
    3f92:	ce 01       	movw	r24, r28
    3f94:	09 96       	adiw	r24, 0x09	; 9
    3f96:	bb c0       	rjmp	.+374    	; 0x410e <__mulsf3+0x1e8>
    3f98:	82 30       	cpi	r24, 0x02	; 2
    3f9a:	49 f4       	brne	.+18     	; 0x3fae <__mulsf3+0x88>
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    3fa2:	98 13       	cpse	r25, r24
    3fa4:	21 e0       	ldi	r18, 0x01	; 1
    3fa6:	2a 8b       	std	Y+18, r18	; 0x12
    3fa8:	ce 01       	movw	r24, r28
    3faa:	41 96       	adiw	r24, 0x11	; 17
    3fac:	b0 c0       	rjmp	.+352    	; 0x410e <__mulsf3+0x1e8>
    3fae:	2d 84       	ldd	r2, Y+13	; 0x0d
    3fb0:	3e 84       	ldd	r3, Y+14	; 0x0e
    3fb2:	4f 84       	ldd	r4, Y+15	; 0x0f
    3fb4:	58 88       	ldd	r5, Y+16	; 0x10
    3fb6:	6d 88       	ldd	r6, Y+21	; 0x15
    3fb8:	7e 88       	ldd	r7, Y+22	; 0x16
    3fba:	8f 88       	ldd	r8, Y+23	; 0x17
    3fbc:	98 8c       	ldd	r9, Y+24	; 0x18
    3fbe:	ee 24       	eor	r14, r14
    3fc0:	ff 24       	eor	r15, r15
    3fc2:	87 01       	movw	r16, r14
    3fc4:	aa 24       	eor	r10, r10
    3fc6:	bb 24       	eor	r11, r11
    3fc8:	65 01       	movw	r12, r10
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	50 e0       	ldi	r21, 0x00	; 0
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	e0 e0       	ldi	r30, 0x00	; 0
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	c1 01       	movw	r24, r2
    3fd8:	81 70       	andi	r24, 0x01	; 1
    3fda:	90 70       	andi	r25, 0x00	; 0
    3fdc:	89 2b       	or	r24, r25
    3fde:	e9 f0       	breq	.+58     	; 0x401a <__mulsf3+0xf4>
    3fe0:	e6 0c       	add	r14, r6
    3fe2:	f7 1c       	adc	r15, r7
    3fe4:	08 1d       	adc	r16, r8
    3fe6:	19 1d       	adc	r17, r9
    3fe8:	9a 01       	movw	r18, r20
    3fea:	ab 01       	movw	r20, r22
    3fec:	2a 0d       	add	r18, r10
    3fee:	3b 1d       	adc	r19, r11
    3ff0:	4c 1d       	adc	r20, r12
    3ff2:	5d 1d       	adc	r21, r13
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	a0 e0       	ldi	r26, 0x00	; 0
    3ffa:	b0 e0       	ldi	r27, 0x00	; 0
    3ffc:	e6 14       	cp	r14, r6
    3ffe:	f7 04       	cpc	r15, r7
    4000:	08 05       	cpc	r16, r8
    4002:	19 05       	cpc	r17, r9
    4004:	20 f4       	brcc	.+8      	; 0x400e <__mulsf3+0xe8>
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a0 e0       	ldi	r26, 0x00	; 0
    400c:	b0 e0       	ldi	r27, 0x00	; 0
    400e:	ba 01       	movw	r22, r20
    4010:	a9 01       	movw	r20, r18
    4012:	48 0f       	add	r20, r24
    4014:	59 1f       	adc	r21, r25
    4016:	6a 1f       	adc	r22, r26
    4018:	7b 1f       	adc	r23, r27
    401a:	aa 0c       	add	r10, r10
    401c:	bb 1c       	adc	r11, r11
    401e:	cc 1c       	adc	r12, r12
    4020:	dd 1c       	adc	r13, r13
    4022:	97 fe       	sbrs	r9, 7
    4024:	08 c0       	rjmp	.+16     	; 0x4036 <__mulsf3+0x110>
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a0 e0       	ldi	r26, 0x00	; 0
    402c:	b0 e0       	ldi	r27, 0x00	; 0
    402e:	a8 2a       	or	r10, r24
    4030:	b9 2a       	or	r11, r25
    4032:	ca 2a       	or	r12, r26
    4034:	db 2a       	or	r13, r27
    4036:	31 96       	adiw	r30, 0x01	; 1
    4038:	e0 32       	cpi	r30, 0x20	; 32
    403a:	f1 05       	cpc	r31, r1
    403c:	49 f0       	breq	.+18     	; 0x4050 <__mulsf3+0x12a>
    403e:	66 0c       	add	r6, r6
    4040:	77 1c       	adc	r7, r7
    4042:	88 1c       	adc	r8, r8
    4044:	99 1c       	adc	r9, r9
    4046:	56 94       	lsr	r5
    4048:	47 94       	ror	r4
    404a:	37 94       	ror	r3
    404c:	27 94       	ror	r2
    404e:	c3 cf       	rjmp	.-122    	; 0x3fd6 <__mulsf3+0xb0>
    4050:	fa 85       	ldd	r31, Y+10	; 0x0a
    4052:	ea 89       	ldd	r30, Y+18	; 0x12
    4054:	2b 89       	ldd	r18, Y+19	; 0x13
    4056:	3c 89       	ldd	r19, Y+20	; 0x14
    4058:	8b 85       	ldd	r24, Y+11	; 0x0b
    405a:	9c 85       	ldd	r25, Y+12	; 0x0c
    405c:	28 0f       	add	r18, r24
    405e:	39 1f       	adc	r19, r25
    4060:	2e 5f       	subi	r18, 0xFE	; 254
    4062:	3f 4f       	sbci	r19, 0xFF	; 255
    4064:	17 c0       	rjmp	.+46     	; 0x4094 <__mulsf3+0x16e>
    4066:	ca 01       	movw	r24, r20
    4068:	81 70       	andi	r24, 0x01	; 1
    406a:	90 70       	andi	r25, 0x00	; 0
    406c:	89 2b       	or	r24, r25
    406e:	61 f0       	breq	.+24     	; 0x4088 <__mulsf3+0x162>
    4070:	16 95       	lsr	r17
    4072:	07 95       	ror	r16
    4074:	f7 94       	ror	r15
    4076:	e7 94       	ror	r14
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	a0 e0       	ldi	r26, 0x00	; 0
    407e:	b0 e8       	ldi	r27, 0x80	; 128
    4080:	e8 2a       	or	r14, r24
    4082:	f9 2a       	or	r15, r25
    4084:	0a 2b       	or	r16, r26
    4086:	1b 2b       	or	r17, r27
    4088:	76 95       	lsr	r23
    408a:	67 95       	ror	r22
    408c:	57 95       	ror	r21
    408e:	47 95       	ror	r20
    4090:	2f 5f       	subi	r18, 0xFF	; 255
    4092:	3f 4f       	sbci	r19, 0xFF	; 255
    4094:	77 fd       	sbrc	r23, 7
    4096:	e7 cf       	rjmp	.-50     	; 0x4066 <__mulsf3+0x140>
    4098:	0c c0       	rjmp	.+24     	; 0x40b2 <__mulsf3+0x18c>
    409a:	44 0f       	add	r20, r20
    409c:	55 1f       	adc	r21, r21
    409e:	66 1f       	adc	r22, r22
    40a0:	77 1f       	adc	r23, r23
    40a2:	17 fd       	sbrc	r17, 7
    40a4:	41 60       	ori	r20, 0x01	; 1
    40a6:	ee 0c       	add	r14, r14
    40a8:	ff 1c       	adc	r15, r15
    40aa:	00 1f       	adc	r16, r16
    40ac:	11 1f       	adc	r17, r17
    40ae:	21 50       	subi	r18, 0x01	; 1
    40b0:	30 40       	sbci	r19, 0x00	; 0
    40b2:	40 30       	cpi	r20, 0x00	; 0
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	59 07       	cpc	r21, r25
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	69 07       	cpc	r22, r25
    40bc:	90 e4       	ldi	r25, 0x40	; 64
    40be:	79 07       	cpc	r23, r25
    40c0:	60 f3       	brcs	.-40     	; 0x409a <__mulsf3+0x174>
    40c2:	2b 8f       	std	Y+27, r18	; 0x1b
    40c4:	3c 8f       	std	Y+28, r19	; 0x1c
    40c6:	db 01       	movw	r26, r22
    40c8:	ca 01       	movw	r24, r20
    40ca:	8f 77       	andi	r24, 0x7F	; 127
    40cc:	90 70       	andi	r25, 0x00	; 0
    40ce:	a0 70       	andi	r26, 0x00	; 0
    40d0:	b0 70       	andi	r27, 0x00	; 0
    40d2:	80 34       	cpi	r24, 0x40	; 64
    40d4:	91 05       	cpc	r25, r1
    40d6:	a1 05       	cpc	r26, r1
    40d8:	b1 05       	cpc	r27, r1
    40da:	61 f4       	brne	.+24     	; 0x40f4 <__mulsf3+0x1ce>
    40dc:	47 fd       	sbrc	r20, 7
    40de:	0a c0       	rjmp	.+20     	; 0x40f4 <__mulsf3+0x1ce>
    40e0:	e1 14       	cp	r14, r1
    40e2:	f1 04       	cpc	r15, r1
    40e4:	01 05       	cpc	r16, r1
    40e6:	11 05       	cpc	r17, r1
    40e8:	29 f0       	breq	.+10     	; 0x40f4 <__mulsf3+0x1ce>
    40ea:	40 5c       	subi	r20, 0xC0	; 192
    40ec:	5f 4f       	sbci	r21, 0xFF	; 255
    40ee:	6f 4f       	sbci	r22, 0xFF	; 255
    40f0:	7f 4f       	sbci	r23, 0xFF	; 255
    40f2:	40 78       	andi	r20, 0x80	; 128
    40f4:	1a 8e       	std	Y+26, r1	; 0x1a
    40f6:	fe 17       	cp	r31, r30
    40f8:	11 f0       	breq	.+4      	; 0x40fe <__mulsf3+0x1d8>
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	8a 8f       	std	Y+26, r24	; 0x1a
    40fe:	4d 8f       	std	Y+29, r20	; 0x1d
    4100:	5e 8f       	std	Y+30, r21	; 0x1e
    4102:	6f 8f       	std	Y+31, r22	; 0x1f
    4104:	78 a3       	std	Y+32, r23	; 0x20
    4106:	83 e0       	ldi	r24, 0x03	; 3
    4108:	89 8f       	std	Y+25, r24	; 0x19
    410a:	ce 01       	movw	r24, r28
    410c:	49 96       	adiw	r24, 0x19	; 25
    410e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__pack_f>
    4112:	a0 96       	adiw	r28, 0x20	; 32
    4114:	e2 e1       	ldi	r30, 0x12	; 18
    4116:	0c 94 c6 24 	jmp	0x498c	; 0x498c <__epilogue_restores__>

0000411a <__divsf3>:
    411a:	a8 e1       	ldi	r26, 0x18	; 24
    411c:	b0 e0       	ldi	r27, 0x00	; 0
    411e:	e3 e9       	ldi	r30, 0x93	; 147
    4120:	f0 e2       	ldi	r31, 0x20	; 32
    4122:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__+0x10>
    4126:	69 83       	std	Y+1, r22	; 0x01
    4128:	7a 83       	std	Y+2, r23	; 0x02
    412a:	8b 83       	std	Y+3, r24	; 0x03
    412c:	9c 83       	std	Y+4, r25	; 0x04
    412e:	2d 83       	std	Y+5, r18	; 0x05
    4130:	3e 83       	std	Y+6, r19	; 0x06
    4132:	4f 83       	std	Y+7, r20	; 0x07
    4134:	58 87       	std	Y+8, r21	; 0x08
    4136:	b9 e0       	ldi	r27, 0x09	; 9
    4138:	eb 2e       	mov	r14, r27
    413a:	f1 2c       	mov	r15, r1
    413c:	ec 0e       	add	r14, r28
    413e:	fd 1e       	adc	r15, r29
    4140:	ce 01       	movw	r24, r28
    4142:	01 96       	adiw	r24, 0x01	; 1
    4144:	b7 01       	movw	r22, r14
    4146:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    414a:	8e 01       	movw	r16, r28
    414c:	0f 5e       	subi	r16, 0xEF	; 239
    414e:	1f 4f       	sbci	r17, 0xFF	; 255
    4150:	ce 01       	movw	r24, r28
    4152:	05 96       	adiw	r24, 0x05	; 5
    4154:	b8 01       	movw	r22, r16
    4156:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    415a:	29 85       	ldd	r18, Y+9	; 0x09
    415c:	22 30       	cpi	r18, 0x02	; 2
    415e:	08 f4       	brcc	.+2      	; 0x4162 <__divsf3+0x48>
    4160:	7e c0       	rjmp	.+252    	; 0x425e <__divsf3+0x144>
    4162:	39 89       	ldd	r19, Y+17	; 0x11
    4164:	32 30       	cpi	r19, 0x02	; 2
    4166:	10 f4       	brcc	.+4      	; 0x416c <__divsf3+0x52>
    4168:	b8 01       	movw	r22, r16
    416a:	7c c0       	rjmp	.+248    	; 0x4264 <__divsf3+0x14a>
    416c:	8a 85       	ldd	r24, Y+10	; 0x0a
    416e:	9a 89       	ldd	r25, Y+18	; 0x12
    4170:	89 27       	eor	r24, r25
    4172:	8a 87       	std	Y+10, r24	; 0x0a
    4174:	24 30       	cpi	r18, 0x04	; 4
    4176:	11 f0       	breq	.+4      	; 0x417c <__divsf3+0x62>
    4178:	22 30       	cpi	r18, 0x02	; 2
    417a:	31 f4       	brne	.+12     	; 0x4188 <__divsf3+0x6e>
    417c:	23 17       	cp	r18, r19
    417e:	09 f0       	breq	.+2      	; 0x4182 <__divsf3+0x68>
    4180:	6e c0       	rjmp	.+220    	; 0x425e <__divsf3+0x144>
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	72 e0       	ldi	r23, 0x02	; 2
    4186:	6e c0       	rjmp	.+220    	; 0x4264 <__divsf3+0x14a>
    4188:	34 30       	cpi	r19, 0x04	; 4
    418a:	39 f4       	brne	.+14     	; 0x419a <__divsf3+0x80>
    418c:	1d 86       	std	Y+13, r1	; 0x0d
    418e:	1e 86       	std	Y+14, r1	; 0x0e
    4190:	1f 86       	std	Y+15, r1	; 0x0f
    4192:	18 8a       	std	Y+16, r1	; 0x10
    4194:	1c 86       	std	Y+12, r1	; 0x0c
    4196:	1b 86       	std	Y+11, r1	; 0x0b
    4198:	04 c0       	rjmp	.+8      	; 0x41a2 <__divsf3+0x88>
    419a:	32 30       	cpi	r19, 0x02	; 2
    419c:	21 f4       	brne	.+8      	; 0x41a6 <__divsf3+0x8c>
    419e:	84 e0       	ldi	r24, 0x04	; 4
    41a0:	89 87       	std	Y+9, r24	; 0x09
    41a2:	b7 01       	movw	r22, r14
    41a4:	5f c0       	rjmp	.+190    	; 0x4264 <__divsf3+0x14a>
    41a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    41a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    41aa:	8b 89       	ldd	r24, Y+19	; 0x13
    41ac:	9c 89       	ldd	r25, Y+20	; 0x14
    41ae:	28 1b       	sub	r18, r24
    41b0:	39 0b       	sbc	r19, r25
    41b2:	3c 87       	std	Y+12, r19	; 0x0c
    41b4:	2b 87       	std	Y+11, r18	; 0x0b
    41b6:	ed 84       	ldd	r14, Y+13	; 0x0d
    41b8:	fe 84       	ldd	r15, Y+14	; 0x0e
    41ba:	0f 85       	ldd	r16, Y+15	; 0x0f
    41bc:	18 89       	ldd	r17, Y+16	; 0x10
    41be:	ad 88       	ldd	r10, Y+21	; 0x15
    41c0:	be 88       	ldd	r11, Y+22	; 0x16
    41c2:	cf 88       	ldd	r12, Y+23	; 0x17
    41c4:	d8 8c       	ldd	r13, Y+24	; 0x18
    41c6:	ea 14       	cp	r14, r10
    41c8:	fb 04       	cpc	r15, r11
    41ca:	0c 05       	cpc	r16, r12
    41cc:	1d 05       	cpc	r17, r13
    41ce:	40 f4       	brcc	.+16     	; 0x41e0 <__divsf3+0xc6>
    41d0:	ee 0c       	add	r14, r14
    41d2:	ff 1c       	adc	r15, r15
    41d4:	00 1f       	adc	r16, r16
    41d6:	11 1f       	adc	r17, r17
    41d8:	21 50       	subi	r18, 0x01	; 1
    41da:	30 40       	sbci	r19, 0x00	; 0
    41dc:	3c 87       	std	Y+12, r19	; 0x0c
    41de:	2b 87       	std	Y+11, r18	; 0x0b
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	40 e0       	ldi	r20, 0x00	; 0
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	a0 e0       	ldi	r26, 0x00	; 0
    41ee:	b0 e4       	ldi	r27, 0x40	; 64
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	70 e0       	ldi	r23, 0x00	; 0
    41f4:	ea 14       	cp	r14, r10
    41f6:	fb 04       	cpc	r15, r11
    41f8:	0c 05       	cpc	r16, r12
    41fa:	1d 05       	cpc	r17, r13
    41fc:	40 f0       	brcs	.+16     	; 0x420e <__divsf3+0xf4>
    41fe:	28 2b       	or	r18, r24
    4200:	39 2b       	or	r19, r25
    4202:	4a 2b       	or	r20, r26
    4204:	5b 2b       	or	r21, r27
    4206:	ea 18       	sub	r14, r10
    4208:	fb 08       	sbc	r15, r11
    420a:	0c 09       	sbc	r16, r12
    420c:	1d 09       	sbc	r17, r13
    420e:	b6 95       	lsr	r27
    4210:	a7 95       	ror	r26
    4212:	97 95       	ror	r25
    4214:	87 95       	ror	r24
    4216:	ee 0c       	add	r14, r14
    4218:	ff 1c       	adc	r15, r15
    421a:	00 1f       	adc	r16, r16
    421c:	11 1f       	adc	r17, r17
    421e:	6f 5f       	subi	r22, 0xFF	; 255
    4220:	7f 4f       	sbci	r23, 0xFF	; 255
    4222:	6f 31       	cpi	r22, 0x1F	; 31
    4224:	71 05       	cpc	r23, r1
    4226:	31 f7       	brne	.-52     	; 0x41f4 <__divsf3+0xda>
    4228:	da 01       	movw	r26, r20
    422a:	c9 01       	movw	r24, r18
    422c:	8f 77       	andi	r24, 0x7F	; 127
    422e:	90 70       	andi	r25, 0x00	; 0
    4230:	a0 70       	andi	r26, 0x00	; 0
    4232:	b0 70       	andi	r27, 0x00	; 0
    4234:	80 34       	cpi	r24, 0x40	; 64
    4236:	91 05       	cpc	r25, r1
    4238:	a1 05       	cpc	r26, r1
    423a:	b1 05       	cpc	r27, r1
    423c:	61 f4       	brne	.+24     	; 0x4256 <__divsf3+0x13c>
    423e:	27 fd       	sbrc	r18, 7
    4240:	0a c0       	rjmp	.+20     	; 0x4256 <__divsf3+0x13c>
    4242:	e1 14       	cp	r14, r1
    4244:	f1 04       	cpc	r15, r1
    4246:	01 05       	cpc	r16, r1
    4248:	11 05       	cpc	r17, r1
    424a:	29 f0       	breq	.+10     	; 0x4256 <__divsf3+0x13c>
    424c:	20 5c       	subi	r18, 0xC0	; 192
    424e:	3f 4f       	sbci	r19, 0xFF	; 255
    4250:	4f 4f       	sbci	r20, 0xFF	; 255
    4252:	5f 4f       	sbci	r21, 0xFF	; 255
    4254:	20 78       	andi	r18, 0x80	; 128
    4256:	2d 87       	std	Y+13, r18	; 0x0d
    4258:	3e 87       	std	Y+14, r19	; 0x0e
    425a:	4f 87       	std	Y+15, r20	; 0x0f
    425c:	58 8b       	std	Y+16, r21	; 0x10
    425e:	be 01       	movw	r22, r28
    4260:	67 5f       	subi	r22, 0xF7	; 247
    4262:	7f 4f       	sbci	r23, 0xFF	; 255
    4264:	cb 01       	movw	r24, r22
    4266:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__pack_f>
    426a:	68 96       	adiw	r28, 0x18	; 24
    426c:	ea e0       	ldi	r30, 0x0A	; 10
    426e:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__+0x10>

00004272 <__gtsf2>:
    4272:	a8 e1       	ldi	r26, 0x18	; 24
    4274:	b0 e0       	ldi	r27, 0x00	; 0
    4276:	ef e3       	ldi	r30, 0x3F	; 63
    4278:	f1 e2       	ldi	r31, 0x21	; 33
    427a:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__prologue_saves__+0x18>
    427e:	69 83       	std	Y+1, r22	; 0x01
    4280:	7a 83       	std	Y+2, r23	; 0x02
    4282:	8b 83       	std	Y+3, r24	; 0x03
    4284:	9c 83       	std	Y+4, r25	; 0x04
    4286:	2d 83       	std	Y+5, r18	; 0x05
    4288:	3e 83       	std	Y+6, r19	; 0x06
    428a:	4f 83       	std	Y+7, r20	; 0x07
    428c:	58 87       	std	Y+8, r21	; 0x08
    428e:	89 e0       	ldi	r24, 0x09	; 9
    4290:	e8 2e       	mov	r14, r24
    4292:	f1 2c       	mov	r15, r1
    4294:	ec 0e       	add	r14, r28
    4296:	fd 1e       	adc	r15, r29
    4298:	ce 01       	movw	r24, r28
    429a:	01 96       	adiw	r24, 0x01	; 1
    429c:	b7 01       	movw	r22, r14
    429e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    42a2:	8e 01       	movw	r16, r28
    42a4:	0f 5e       	subi	r16, 0xEF	; 239
    42a6:	1f 4f       	sbci	r17, 0xFF	; 255
    42a8:	ce 01       	movw	r24, r28
    42aa:	05 96       	adiw	r24, 0x05	; 5
    42ac:	b8 01       	movw	r22, r16
    42ae:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    42b2:	89 85       	ldd	r24, Y+9	; 0x09
    42b4:	82 30       	cpi	r24, 0x02	; 2
    42b6:	40 f0       	brcs	.+16     	; 0x42c8 <__gtsf2+0x56>
    42b8:	89 89       	ldd	r24, Y+17	; 0x11
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	28 f0       	brcs	.+10     	; 0x42c8 <__gtsf2+0x56>
    42be:	c7 01       	movw	r24, r14
    42c0:	b8 01       	movw	r22, r16
    42c2:	0e 94 32 24 	call	0x4864	; 0x4864 <__fpcmp_parts_f>
    42c6:	01 c0       	rjmp	.+2      	; 0x42ca <__gtsf2+0x58>
    42c8:	8f ef       	ldi	r24, 0xFF	; 255
    42ca:	68 96       	adiw	r28, 0x18	; 24
    42cc:	e6 e0       	ldi	r30, 0x06	; 6
    42ce:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__epilogue_restores__+0x18>

000042d2 <__gesf2>:
    42d2:	a8 e1       	ldi	r26, 0x18	; 24
    42d4:	b0 e0       	ldi	r27, 0x00	; 0
    42d6:	ef e6       	ldi	r30, 0x6F	; 111
    42d8:	f1 e2       	ldi	r31, 0x21	; 33
    42da:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__prologue_saves__+0x18>
    42de:	69 83       	std	Y+1, r22	; 0x01
    42e0:	7a 83       	std	Y+2, r23	; 0x02
    42e2:	8b 83       	std	Y+3, r24	; 0x03
    42e4:	9c 83       	std	Y+4, r25	; 0x04
    42e6:	2d 83       	std	Y+5, r18	; 0x05
    42e8:	3e 83       	std	Y+6, r19	; 0x06
    42ea:	4f 83       	std	Y+7, r20	; 0x07
    42ec:	58 87       	std	Y+8, r21	; 0x08
    42ee:	89 e0       	ldi	r24, 0x09	; 9
    42f0:	e8 2e       	mov	r14, r24
    42f2:	f1 2c       	mov	r15, r1
    42f4:	ec 0e       	add	r14, r28
    42f6:	fd 1e       	adc	r15, r29
    42f8:	ce 01       	movw	r24, r28
    42fa:	01 96       	adiw	r24, 0x01	; 1
    42fc:	b7 01       	movw	r22, r14
    42fe:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    4302:	8e 01       	movw	r16, r28
    4304:	0f 5e       	subi	r16, 0xEF	; 239
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	ce 01       	movw	r24, r28
    430a:	05 96       	adiw	r24, 0x05	; 5
    430c:	b8 01       	movw	r22, r16
    430e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    4312:	89 85       	ldd	r24, Y+9	; 0x09
    4314:	82 30       	cpi	r24, 0x02	; 2
    4316:	40 f0       	brcs	.+16     	; 0x4328 <__gesf2+0x56>
    4318:	89 89       	ldd	r24, Y+17	; 0x11
    431a:	82 30       	cpi	r24, 0x02	; 2
    431c:	28 f0       	brcs	.+10     	; 0x4328 <__gesf2+0x56>
    431e:	c7 01       	movw	r24, r14
    4320:	b8 01       	movw	r22, r16
    4322:	0e 94 32 24 	call	0x4864	; 0x4864 <__fpcmp_parts_f>
    4326:	01 c0       	rjmp	.+2      	; 0x432a <__gesf2+0x58>
    4328:	8f ef       	ldi	r24, 0xFF	; 255
    432a:	68 96       	adiw	r28, 0x18	; 24
    432c:	e6 e0       	ldi	r30, 0x06	; 6
    432e:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__epilogue_restores__+0x18>

00004332 <__ltsf2>:
    4332:	a8 e1       	ldi	r26, 0x18	; 24
    4334:	b0 e0       	ldi	r27, 0x00	; 0
    4336:	ef e9       	ldi	r30, 0x9F	; 159
    4338:	f1 e2       	ldi	r31, 0x21	; 33
    433a:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__prologue_saves__+0x18>
    433e:	69 83       	std	Y+1, r22	; 0x01
    4340:	7a 83       	std	Y+2, r23	; 0x02
    4342:	8b 83       	std	Y+3, r24	; 0x03
    4344:	9c 83       	std	Y+4, r25	; 0x04
    4346:	2d 83       	std	Y+5, r18	; 0x05
    4348:	3e 83       	std	Y+6, r19	; 0x06
    434a:	4f 83       	std	Y+7, r20	; 0x07
    434c:	58 87       	std	Y+8, r21	; 0x08
    434e:	89 e0       	ldi	r24, 0x09	; 9
    4350:	e8 2e       	mov	r14, r24
    4352:	f1 2c       	mov	r15, r1
    4354:	ec 0e       	add	r14, r28
    4356:	fd 1e       	adc	r15, r29
    4358:	ce 01       	movw	r24, r28
    435a:	01 96       	adiw	r24, 0x01	; 1
    435c:	b7 01       	movw	r22, r14
    435e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    4362:	8e 01       	movw	r16, r28
    4364:	0f 5e       	subi	r16, 0xEF	; 239
    4366:	1f 4f       	sbci	r17, 0xFF	; 255
    4368:	ce 01       	movw	r24, r28
    436a:	05 96       	adiw	r24, 0x05	; 5
    436c:	b8 01       	movw	r22, r16
    436e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    4372:	89 85       	ldd	r24, Y+9	; 0x09
    4374:	82 30       	cpi	r24, 0x02	; 2
    4376:	40 f0       	brcs	.+16     	; 0x4388 <__ltsf2+0x56>
    4378:	89 89       	ldd	r24, Y+17	; 0x11
    437a:	82 30       	cpi	r24, 0x02	; 2
    437c:	28 f0       	brcs	.+10     	; 0x4388 <__ltsf2+0x56>
    437e:	c7 01       	movw	r24, r14
    4380:	b8 01       	movw	r22, r16
    4382:	0e 94 32 24 	call	0x4864	; 0x4864 <__fpcmp_parts_f>
    4386:	01 c0       	rjmp	.+2      	; 0x438a <__ltsf2+0x58>
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	68 96       	adiw	r28, 0x18	; 24
    438c:	e6 e0       	ldi	r30, 0x06	; 6
    438e:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__epilogue_restores__+0x18>

00004392 <__fixsfsi>:
    4392:	ac e0       	ldi	r26, 0x0C	; 12
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	ef ec       	ldi	r30, 0xCF	; 207
    4398:	f1 e2       	ldi	r31, 0x21	; 33
    439a:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <__prologue_saves__+0x20>
    439e:	69 83       	std	Y+1, r22	; 0x01
    43a0:	7a 83       	std	Y+2, r23	; 0x02
    43a2:	8b 83       	std	Y+3, r24	; 0x03
    43a4:	9c 83       	std	Y+4, r25	; 0x04
    43a6:	ce 01       	movw	r24, r28
    43a8:	01 96       	adiw	r24, 0x01	; 1
    43aa:	be 01       	movw	r22, r28
    43ac:	6b 5f       	subi	r22, 0xFB	; 251
    43ae:	7f 4f       	sbci	r23, 0xFF	; 255
    43b0:	0e 94 ba 23 	call	0x4774	; 0x4774 <__unpack_f>
    43b4:	8d 81       	ldd	r24, Y+5	; 0x05
    43b6:	82 30       	cpi	r24, 0x02	; 2
    43b8:	61 f1       	breq	.+88     	; 0x4412 <__fixsfsi+0x80>
    43ba:	82 30       	cpi	r24, 0x02	; 2
    43bc:	50 f1       	brcs	.+84     	; 0x4412 <__fixsfsi+0x80>
    43be:	84 30       	cpi	r24, 0x04	; 4
    43c0:	21 f4       	brne	.+8      	; 0x43ca <__fixsfsi+0x38>
    43c2:	8e 81       	ldd	r24, Y+6	; 0x06
    43c4:	88 23       	and	r24, r24
    43c6:	51 f1       	breq	.+84     	; 0x441c <__fixsfsi+0x8a>
    43c8:	2e c0       	rjmp	.+92     	; 0x4426 <__fixsfsi+0x94>
    43ca:	2f 81       	ldd	r18, Y+7	; 0x07
    43cc:	38 85       	ldd	r19, Y+8	; 0x08
    43ce:	37 fd       	sbrc	r19, 7
    43d0:	20 c0       	rjmp	.+64     	; 0x4412 <__fixsfsi+0x80>
    43d2:	6e 81       	ldd	r22, Y+6	; 0x06
    43d4:	2f 31       	cpi	r18, 0x1F	; 31
    43d6:	31 05       	cpc	r19, r1
    43d8:	1c f0       	brlt	.+6      	; 0x43e0 <__fixsfsi+0x4e>
    43da:	66 23       	and	r22, r22
    43dc:	f9 f0       	breq	.+62     	; 0x441c <__fixsfsi+0x8a>
    43de:	23 c0       	rjmp	.+70     	; 0x4426 <__fixsfsi+0x94>
    43e0:	8e e1       	ldi	r24, 0x1E	; 30
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	82 1b       	sub	r24, r18
    43e6:	93 0b       	sbc	r25, r19
    43e8:	29 85       	ldd	r18, Y+9	; 0x09
    43ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    43ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    43ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    43f0:	04 c0       	rjmp	.+8      	; 0x43fa <__fixsfsi+0x68>
    43f2:	56 95       	lsr	r21
    43f4:	47 95       	ror	r20
    43f6:	37 95       	ror	r19
    43f8:	27 95       	ror	r18
    43fa:	8a 95       	dec	r24
    43fc:	d2 f7       	brpl	.-12     	; 0x43f2 <__fixsfsi+0x60>
    43fe:	66 23       	and	r22, r22
    4400:	b1 f0       	breq	.+44     	; 0x442e <__fixsfsi+0x9c>
    4402:	50 95       	com	r21
    4404:	40 95       	com	r20
    4406:	30 95       	com	r19
    4408:	21 95       	neg	r18
    440a:	3f 4f       	sbci	r19, 0xFF	; 255
    440c:	4f 4f       	sbci	r20, 0xFF	; 255
    440e:	5f 4f       	sbci	r21, 0xFF	; 255
    4410:	0e c0       	rjmp	.+28     	; 0x442e <__fixsfsi+0x9c>
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e0       	ldi	r20, 0x00	; 0
    4418:	50 e0       	ldi	r21, 0x00	; 0
    441a:	09 c0       	rjmp	.+18     	; 0x442e <__fixsfsi+0x9c>
    441c:	2f ef       	ldi	r18, 0xFF	; 255
    441e:	3f ef       	ldi	r19, 0xFF	; 255
    4420:	4f ef       	ldi	r20, 0xFF	; 255
    4422:	5f e7       	ldi	r21, 0x7F	; 127
    4424:	04 c0       	rjmp	.+8      	; 0x442e <__fixsfsi+0x9c>
    4426:	20 e0       	ldi	r18, 0x00	; 0
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	50 e8       	ldi	r21, 0x80	; 128
    442e:	b9 01       	movw	r22, r18
    4430:	ca 01       	movw	r24, r20
    4432:	2c 96       	adiw	r28, 0x0c	; 12
    4434:	e2 e0       	ldi	r30, 0x02	; 2
    4436:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <__epilogue_restores__+0x20>

0000443a <__floatunsisf>:
    443a:	a8 e0       	ldi	r26, 0x08	; 8
    443c:	b0 e0       	ldi	r27, 0x00	; 0
    443e:	e3 e2       	ldi	r30, 0x23	; 35
    4440:	f2 e2       	ldi	r31, 0x22	; 34
    4442:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__+0x10>
    4446:	7b 01       	movw	r14, r22
    4448:	8c 01       	movw	r16, r24
    444a:	61 15       	cp	r22, r1
    444c:	71 05       	cpc	r23, r1
    444e:	81 05       	cpc	r24, r1
    4450:	91 05       	cpc	r25, r1
    4452:	19 f4       	brne	.+6      	; 0x445a <__floatunsisf+0x20>
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	89 83       	std	Y+1, r24	; 0x01
    4458:	60 c0       	rjmp	.+192    	; 0x451a <__floatunsisf+0xe0>
    445a:	83 e0       	ldi	r24, 0x03	; 3
    445c:	89 83       	std	Y+1, r24	; 0x01
    445e:	8e e1       	ldi	r24, 0x1E	; 30
    4460:	c8 2e       	mov	r12, r24
    4462:	d1 2c       	mov	r13, r1
    4464:	dc 82       	std	Y+4, r13	; 0x04
    4466:	cb 82       	std	Y+3, r12	; 0x03
    4468:	ed 82       	std	Y+5, r14	; 0x05
    446a:	fe 82       	std	Y+6, r15	; 0x06
    446c:	0f 83       	std	Y+7, r16	; 0x07
    446e:	18 87       	std	Y+8, r17	; 0x08
    4470:	c8 01       	movw	r24, r16
    4472:	b7 01       	movw	r22, r14
    4474:	0e 94 96 22 	call	0x452c	; 0x452c <__clzsi2>
    4478:	fc 01       	movw	r30, r24
    447a:	31 97       	sbiw	r30, 0x01	; 1
    447c:	f7 ff       	sbrs	r31, 7
    447e:	3b c0       	rjmp	.+118    	; 0x44f6 <__floatunsisf+0xbc>
    4480:	22 27       	eor	r18, r18
    4482:	33 27       	eor	r19, r19
    4484:	2e 1b       	sub	r18, r30
    4486:	3f 0b       	sbc	r19, r31
    4488:	57 01       	movw	r10, r14
    448a:	68 01       	movw	r12, r16
    448c:	02 2e       	mov	r0, r18
    448e:	04 c0       	rjmp	.+8      	; 0x4498 <__floatunsisf+0x5e>
    4490:	d6 94       	lsr	r13
    4492:	c7 94       	ror	r12
    4494:	b7 94       	ror	r11
    4496:	a7 94       	ror	r10
    4498:	0a 94       	dec	r0
    449a:	d2 f7       	brpl	.-12     	; 0x4490 <__floatunsisf+0x56>
    449c:	40 e0       	ldi	r20, 0x00	; 0
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	70 e0       	ldi	r23, 0x00	; 0
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	a0 e0       	ldi	r26, 0x00	; 0
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	04 c0       	rjmp	.+8      	; 0x44b6 <__floatunsisf+0x7c>
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	aa 1f       	adc	r26, r26
    44b4:	bb 1f       	adc	r27, r27
    44b6:	2a 95       	dec	r18
    44b8:	d2 f7       	brpl	.-12     	; 0x44ae <__floatunsisf+0x74>
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	a1 09       	sbc	r26, r1
    44be:	b1 09       	sbc	r27, r1
    44c0:	8e 21       	and	r24, r14
    44c2:	9f 21       	and	r25, r15
    44c4:	a0 23       	and	r26, r16
    44c6:	b1 23       	and	r27, r17
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	a1 05       	cpc	r26, r1
    44cc:	b1 05       	cpc	r27, r1
    44ce:	21 f0       	breq	.+8      	; 0x44d8 <__floatunsisf+0x9e>
    44d0:	41 e0       	ldi	r20, 0x01	; 1
    44d2:	50 e0       	ldi	r21, 0x00	; 0
    44d4:	60 e0       	ldi	r22, 0x00	; 0
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	4a 29       	or	r20, r10
    44da:	5b 29       	or	r21, r11
    44dc:	6c 29       	or	r22, r12
    44de:	7d 29       	or	r23, r13
    44e0:	4d 83       	std	Y+5, r20	; 0x05
    44e2:	5e 83       	std	Y+6, r21	; 0x06
    44e4:	6f 83       	std	Y+7, r22	; 0x07
    44e6:	78 87       	std	Y+8, r23	; 0x08
    44e8:	8e e1       	ldi	r24, 0x1E	; 30
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	8e 1b       	sub	r24, r30
    44ee:	9f 0b       	sbc	r25, r31
    44f0:	9c 83       	std	Y+4, r25	; 0x04
    44f2:	8b 83       	std	Y+3, r24	; 0x03
    44f4:	12 c0       	rjmp	.+36     	; 0x451a <__floatunsisf+0xe0>
    44f6:	30 97       	sbiw	r30, 0x00	; 0
    44f8:	81 f0       	breq	.+32     	; 0x451a <__floatunsisf+0xe0>
    44fa:	0e 2e       	mov	r0, r30
    44fc:	04 c0       	rjmp	.+8      	; 0x4506 <__floatunsisf+0xcc>
    44fe:	ee 0c       	add	r14, r14
    4500:	ff 1c       	adc	r15, r15
    4502:	00 1f       	adc	r16, r16
    4504:	11 1f       	adc	r17, r17
    4506:	0a 94       	dec	r0
    4508:	d2 f7       	brpl	.-12     	; 0x44fe <__floatunsisf+0xc4>
    450a:	ed 82       	std	Y+5, r14	; 0x05
    450c:	fe 82       	std	Y+6, r15	; 0x06
    450e:	0f 83       	std	Y+7, r16	; 0x07
    4510:	18 87       	std	Y+8, r17	; 0x08
    4512:	ce 1a       	sub	r12, r30
    4514:	df 0a       	sbc	r13, r31
    4516:	dc 82       	std	Y+4, r13	; 0x04
    4518:	cb 82       	std	Y+3, r12	; 0x03
    451a:	1a 82       	std	Y+2, r1	; 0x02
    451c:	ce 01       	movw	r24, r28
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__pack_f>
    4524:	28 96       	adiw	r28, 0x08	; 8
    4526:	ea e0       	ldi	r30, 0x0A	; 10
    4528:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__+0x10>

0000452c <__clzsi2>:
    452c:	ef 92       	push	r14
    452e:	ff 92       	push	r15
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	7b 01       	movw	r14, r22
    4536:	8c 01       	movw	r16, r24
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	e8 16       	cp	r14, r24
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	f8 06       	cpc	r15, r24
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	08 07       	cpc	r16, r24
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	18 07       	cpc	r17, r24
    4548:	88 f4       	brcc	.+34     	; 0x456c <__clzsi2+0x40>
    454a:	8f ef       	ldi	r24, 0xFF	; 255
    454c:	e8 16       	cp	r14, r24
    454e:	f1 04       	cpc	r15, r1
    4550:	01 05       	cpc	r16, r1
    4552:	11 05       	cpc	r17, r1
    4554:	31 f0       	breq	.+12     	; 0x4562 <__clzsi2+0x36>
    4556:	28 f0       	brcs	.+10     	; 0x4562 <__clzsi2+0x36>
    4558:	88 e0       	ldi	r24, 0x08	; 8
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	a0 e0       	ldi	r26, 0x00	; 0
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	17 c0       	rjmp	.+46     	; 0x4590 <__clzsi2+0x64>
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	a0 e0       	ldi	r26, 0x00	; 0
    4568:	b0 e0       	ldi	r27, 0x00	; 0
    456a:	12 c0       	rjmp	.+36     	; 0x4590 <__clzsi2+0x64>
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	e8 16       	cp	r14, r24
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	f8 06       	cpc	r15, r24
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	08 07       	cpc	r16, r24
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	18 07       	cpc	r17, r24
    457c:	28 f0       	brcs	.+10     	; 0x4588 <__clzsi2+0x5c>
    457e:	88 e1       	ldi	r24, 0x18	; 24
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	a0 e0       	ldi	r26, 0x00	; 0
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	04 c0       	rjmp	.+8      	; 0x4590 <__clzsi2+0x64>
    4588:	80 e1       	ldi	r24, 0x10	; 16
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	a0 e0       	ldi	r26, 0x00	; 0
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	20 e2       	ldi	r18, 0x20	; 32
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	28 1b       	sub	r18, r24
    459a:	39 0b       	sbc	r19, r25
    459c:	4a 0b       	sbc	r20, r26
    459e:	5b 0b       	sbc	r21, r27
    45a0:	04 c0       	rjmp	.+8      	; 0x45aa <__clzsi2+0x7e>
    45a2:	16 95       	lsr	r17
    45a4:	07 95       	ror	r16
    45a6:	f7 94       	ror	r15
    45a8:	e7 94       	ror	r14
    45aa:	8a 95       	dec	r24
    45ac:	d2 f7       	brpl	.-12     	; 0x45a2 <__clzsi2+0x76>
    45ae:	f7 01       	movw	r30, r14
    45b0:	e8 5f       	subi	r30, 0xF8	; 248
    45b2:	fd 4f       	sbci	r31, 0xFD	; 253
    45b4:	80 81       	ld	r24, Z
    45b6:	28 1b       	sub	r18, r24
    45b8:	31 09       	sbc	r19, r1
    45ba:	41 09       	sbc	r20, r1
    45bc:	51 09       	sbc	r21, r1
    45be:	c9 01       	movw	r24, r18
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	ff 90       	pop	r15
    45c6:	ef 90       	pop	r14
    45c8:	08 95       	ret

000045ca <__pack_f>:
    45ca:	df 92       	push	r13
    45cc:	ef 92       	push	r14
    45ce:	ff 92       	push	r15
    45d0:	0f 93       	push	r16
    45d2:	1f 93       	push	r17
    45d4:	fc 01       	movw	r30, r24
    45d6:	e4 80       	ldd	r14, Z+4	; 0x04
    45d8:	f5 80       	ldd	r15, Z+5	; 0x05
    45da:	06 81       	ldd	r16, Z+6	; 0x06
    45dc:	17 81       	ldd	r17, Z+7	; 0x07
    45de:	d1 80       	ldd	r13, Z+1	; 0x01
    45e0:	80 81       	ld	r24, Z
    45e2:	82 30       	cpi	r24, 0x02	; 2
    45e4:	48 f4       	brcc	.+18     	; 0x45f8 <__pack_f+0x2e>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	a0 e1       	ldi	r26, 0x10	; 16
    45ec:	b0 e0       	ldi	r27, 0x00	; 0
    45ee:	e8 2a       	or	r14, r24
    45f0:	f9 2a       	or	r15, r25
    45f2:	0a 2b       	or	r16, r26
    45f4:	1b 2b       	or	r17, r27
    45f6:	a5 c0       	rjmp	.+330    	; 0x4742 <__pack_f+0x178>
    45f8:	84 30       	cpi	r24, 0x04	; 4
    45fa:	09 f4       	brne	.+2      	; 0x45fe <__pack_f+0x34>
    45fc:	9f c0       	rjmp	.+318    	; 0x473c <__pack_f+0x172>
    45fe:	82 30       	cpi	r24, 0x02	; 2
    4600:	21 f4       	brne	.+8      	; 0x460a <__pack_f+0x40>
    4602:	ee 24       	eor	r14, r14
    4604:	ff 24       	eor	r15, r15
    4606:	87 01       	movw	r16, r14
    4608:	05 c0       	rjmp	.+10     	; 0x4614 <__pack_f+0x4a>
    460a:	e1 14       	cp	r14, r1
    460c:	f1 04       	cpc	r15, r1
    460e:	01 05       	cpc	r16, r1
    4610:	11 05       	cpc	r17, r1
    4612:	19 f4       	brne	.+6      	; 0x461a <__pack_f+0x50>
    4614:	e0 e0       	ldi	r30, 0x00	; 0
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	96 c0       	rjmp	.+300    	; 0x4746 <__pack_f+0x17c>
    461a:	62 81       	ldd	r22, Z+2	; 0x02
    461c:	73 81       	ldd	r23, Z+3	; 0x03
    461e:	9f ef       	ldi	r25, 0xFF	; 255
    4620:	62 38       	cpi	r22, 0x82	; 130
    4622:	79 07       	cpc	r23, r25
    4624:	0c f0       	brlt	.+2      	; 0x4628 <__pack_f+0x5e>
    4626:	5b c0       	rjmp	.+182    	; 0x46de <__pack_f+0x114>
    4628:	22 e8       	ldi	r18, 0x82	; 130
    462a:	3f ef       	ldi	r19, 0xFF	; 255
    462c:	26 1b       	sub	r18, r22
    462e:	37 0b       	sbc	r19, r23
    4630:	2a 31       	cpi	r18, 0x1A	; 26
    4632:	31 05       	cpc	r19, r1
    4634:	2c f0       	brlt	.+10     	; 0x4640 <__pack_f+0x76>
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e0       	ldi	r20, 0x00	; 0
    463c:	50 e0       	ldi	r21, 0x00	; 0
    463e:	2a c0       	rjmp	.+84     	; 0x4694 <__pack_f+0xca>
    4640:	b8 01       	movw	r22, r16
    4642:	a7 01       	movw	r20, r14
    4644:	02 2e       	mov	r0, r18
    4646:	04 c0       	rjmp	.+8      	; 0x4650 <__pack_f+0x86>
    4648:	76 95       	lsr	r23
    464a:	67 95       	ror	r22
    464c:	57 95       	ror	r21
    464e:	47 95       	ror	r20
    4650:	0a 94       	dec	r0
    4652:	d2 f7       	brpl	.-12     	; 0x4648 <__pack_f+0x7e>
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	a0 e0       	ldi	r26, 0x00	; 0
    465a:	b0 e0       	ldi	r27, 0x00	; 0
    465c:	04 c0       	rjmp	.+8      	; 0x4666 <__pack_f+0x9c>
    465e:	88 0f       	add	r24, r24
    4660:	99 1f       	adc	r25, r25
    4662:	aa 1f       	adc	r26, r26
    4664:	bb 1f       	adc	r27, r27
    4666:	2a 95       	dec	r18
    4668:	d2 f7       	brpl	.-12     	; 0x465e <__pack_f+0x94>
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	a1 09       	sbc	r26, r1
    466e:	b1 09       	sbc	r27, r1
    4670:	8e 21       	and	r24, r14
    4672:	9f 21       	and	r25, r15
    4674:	a0 23       	and	r26, r16
    4676:	b1 23       	and	r27, r17
    4678:	00 97       	sbiw	r24, 0x00	; 0
    467a:	a1 05       	cpc	r26, r1
    467c:	b1 05       	cpc	r27, r1
    467e:	21 f0       	breq	.+8      	; 0x4688 <__pack_f+0xbe>
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	a0 e0       	ldi	r26, 0x00	; 0
    4686:	b0 e0       	ldi	r27, 0x00	; 0
    4688:	9a 01       	movw	r18, r20
    468a:	ab 01       	movw	r20, r22
    468c:	28 2b       	or	r18, r24
    468e:	39 2b       	or	r19, r25
    4690:	4a 2b       	or	r20, r26
    4692:	5b 2b       	or	r21, r27
    4694:	da 01       	movw	r26, r20
    4696:	c9 01       	movw	r24, r18
    4698:	8f 77       	andi	r24, 0x7F	; 127
    469a:	90 70       	andi	r25, 0x00	; 0
    469c:	a0 70       	andi	r26, 0x00	; 0
    469e:	b0 70       	andi	r27, 0x00	; 0
    46a0:	80 34       	cpi	r24, 0x40	; 64
    46a2:	91 05       	cpc	r25, r1
    46a4:	a1 05       	cpc	r26, r1
    46a6:	b1 05       	cpc	r27, r1
    46a8:	39 f4       	brne	.+14     	; 0x46b8 <__pack_f+0xee>
    46aa:	27 ff       	sbrs	r18, 7
    46ac:	09 c0       	rjmp	.+18     	; 0x46c0 <__pack_f+0xf6>
    46ae:	20 5c       	subi	r18, 0xC0	; 192
    46b0:	3f 4f       	sbci	r19, 0xFF	; 255
    46b2:	4f 4f       	sbci	r20, 0xFF	; 255
    46b4:	5f 4f       	sbci	r21, 0xFF	; 255
    46b6:	04 c0       	rjmp	.+8      	; 0x46c0 <__pack_f+0xf6>
    46b8:	21 5c       	subi	r18, 0xC1	; 193
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	4f 4f       	sbci	r20, 0xFF	; 255
    46be:	5f 4f       	sbci	r21, 0xFF	; 255
    46c0:	e0 e0       	ldi	r30, 0x00	; 0
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	20 30       	cpi	r18, 0x00	; 0
    46c6:	a0 e0       	ldi	r26, 0x00	; 0
    46c8:	3a 07       	cpc	r19, r26
    46ca:	a0 e0       	ldi	r26, 0x00	; 0
    46cc:	4a 07       	cpc	r20, r26
    46ce:	a0 e4       	ldi	r26, 0x40	; 64
    46d0:	5a 07       	cpc	r21, r26
    46d2:	10 f0       	brcs	.+4      	; 0x46d8 <__pack_f+0x10e>
    46d4:	e1 e0       	ldi	r30, 0x01	; 1
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	79 01       	movw	r14, r18
    46da:	8a 01       	movw	r16, r20
    46dc:	27 c0       	rjmp	.+78     	; 0x472c <__pack_f+0x162>
    46de:	60 38       	cpi	r22, 0x80	; 128
    46e0:	71 05       	cpc	r23, r1
    46e2:	64 f5       	brge	.+88     	; 0x473c <__pack_f+0x172>
    46e4:	fb 01       	movw	r30, r22
    46e6:	e1 58       	subi	r30, 0x81	; 129
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	d8 01       	movw	r26, r16
    46ec:	c7 01       	movw	r24, r14
    46ee:	8f 77       	andi	r24, 0x7F	; 127
    46f0:	90 70       	andi	r25, 0x00	; 0
    46f2:	a0 70       	andi	r26, 0x00	; 0
    46f4:	b0 70       	andi	r27, 0x00	; 0
    46f6:	80 34       	cpi	r24, 0x40	; 64
    46f8:	91 05       	cpc	r25, r1
    46fa:	a1 05       	cpc	r26, r1
    46fc:	b1 05       	cpc	r27, r1
    46fe:	39 f4       	brne	.+14     	; 0x470e <__pack_f+0x144>
    4700:	e7 fe       	sbrs	r14, 7
    4702:	0d c0       	rjmp	.+26     	; 0x471e <__pack_f+0x154>
    4704:	80 e4       	ldi	r24, 0x40	; 64
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	a0 e0       	ldi	r26, 0x00	; 0
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	04 c0       	rjmp	.+8      	; 0x4716 <__pack_f+0x14c>
    470e:	8f e3       	ldi	r24, 0x3F	; 63
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	a0 e0       	ldi	r26, 0x00	; 0
    4714:	b0 e0       	ldi	r27, 0x00	; 0
    4716:	e8 0e       	add	r14, r24
    4718:	f9 1e       	adc	r15, r25
    471a:	0a 1f       	adc	r16, r26
    471c:	1b 1f       	adc	r17, r27
    471e:	17 ff       	sbrs	r17, 7
    4720:	05 c0       	rjmp	.+10     	; 0x472c <__pack_f+0x162>
    4722:	16 95       	lsr	r17
    4724:	07 95       	ror	r16
    4726:	f7 94       	ror	r15
    4728:	e7 94       	ror	r14
    472a:	31 96       	adiw	r30, 0x01	; 1
    472c:	87 e0       	ldi	r24, 0x07	; 7
    472e:	16 95       	lsr	r17
    4730:	07 95       	ror	r16
    4732:	f7 94       	ror	r15
    4734:	e7 94       	ror	r14
    4736:	8a 95       	dec	r24
    4738:	d1 f7       	brne	.-12     	; 0x472e <__pack_f+0x164>
    473a:	05 c0       	rjmp	.+10     	; 0x4746 <__pack_f+0x17c>
    473c:	ee 24       	eor	r14, r14
    473e:	ff 24       	eor	r15, r15
    4740:	87 01       	movw	r16, r14
    4742:	ef ef       	ldi	r30, 0xFF	; 255
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	6e 2f       	mov	r22, r30
    4748:	67 95       	ror	r22
    474a:	66 27       	eor	r22, r22
    474c:	67 95       	ror	r22
    474e:	90 2f       	mov	r25, r16
    4750:	9f 77       	andi	r25, 0x7F	; 127
    4752:	d7 94       	ror	r13
    4754:	dd 24       	eor	r13, r13
    4756:	d7 94       	ror	r13
    4758:	8e 2f       	mov	r24, r30
    475a:	86 95       	lsr	r24
    475c:	49 2f       	mov	r20, r25
    475e:	46 2b       	or	r20, r22
    4760:	58 2f       	mov	r21, r24
    4762:	5d 29       	or	r21, r13
    4764:	b7 01       	movw	r22, r14
    4766:	ca 01       	movw	r24, r20
    4768:	1f 91       	pop	r17
    476a:	0f 91       	pop	r16
    476c:	ff 90       	pop	r15
    476e:	ef 90       	pop	r14
    4770:	df 90       	pop	r13
    4772:	08 95       	ret

00004774 <__unpack_f>:
    4774:	fc 01       	movw	r30, r24
    4776:	db 01       	movw	r26, r22
    4778:	40 81       	ld	r20, Z
    477a:	51 81       	ldd	r21, Z+1	; 0x01
    477c:	22 81       	ldd	r18, Z+2	; 0x02
    477e:	62 2f       	mov	r22, r18
    4780:	6f 77       	andi	r22, 0x7F	; 127
    4782:	70 e0       	ldi	r23, 0x00	; 0
    4784:	22 1f       	adc	r18, r18
    4786:	22 27       	eor	r18, r18
    4788:	22 1f       	adc	r18, r18
    478a:	93 81       	ldd	r25, Z+3	; 0x03
    478c:	89 2f       	mov	r24, r25
    478e:	88 0f       	add	r24, r24
    4790:	82 2b       	or	r24, r18
    4792:	28 2f       	mov	r18, r24
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	99 1f       	adc	r25, r25
    4798:	99 27       	eor	r25, r25
    479a:	99 1f       	adc	r25, r25
    479c:	11 96       	adiw	r26, 0x01	; 1
    479e:	9c 93       	st	X, r25
    47a0:	11 97       	sbiw	r26, 0x01	; 1
    47a2:	21 15       	cp	r18, r1
    47a4:	31 05       	cpc	r19, r1
    47a6:	a9 f5       	brne	.+106    	; 0x4812 <__unpack_f+0x9e>
    47a8:	41 15       	cp	r20, r1
    47aa:	51 05       	cpc	r21, r1
    47ac:	61 05       	cpc	r22, r1
    47ae:	71 05       	cpc	r23, r1
    47b0:	11 f4       	brne	.+4      	; 0x47b6 <__unpack_f+0x42>
    47b2:	82 e0       	ldi	r24, 0x02	; 2
    47b4:	37 c0       	rjmp	.+110    	; 0x4824 <__unpack_f+0xb0>
    47b6:	82 e8       	ldi	r24, 0x82	; 130
    47b8:	9f ef       	ldi	r25, 0xFF	; 255
    47ba:	13 96       	adiw	r26, 0x03	; 3
    47bc:	9c 93       	st	X, r25
    47be:	8e 93       	st	-X, r24
    47c0:	12 97       	sbiw	r26, 0x02	; 2
    47c2:	9a 01       	movw	r18, r20
    47c4:	ab 01       	movw	r20, r22
    47c6:	67 e0       	ldi	r22, 0x07	; 7
    47c8:	22 0f       	add	r18, r18
    47ca:	33 1f       	adc	r19, r19
    47cc:	44 1f       	adc	r20, r20
    47ce:	55 1f       	adc	r21, r21
    47d0:	6a 95       	dec	r22
    47d2:	d1 f7       	brne	.-12     	; 0x47c8 <__unpack_f+0x54>
    47d4:	83 e0       	ldi	r24, 0x03	; 3
    47d6:	8c 93       	st	X, r24
    47d8:	0d c0       	rjmp	.+26     	; 0x47f4 <__unpack_f+0x80>
    47da:	22 0f       	add	r18, r18
    47dc:	33 1f       	adc	r19, r19
    47de:	44 1f       	adc	r20, r20
    47e0:	55 1f       	adc	r21, r21
    47e2:	12 96       	adiw	r26, 0x02	; 2
    47e4:	8d 91       	ld	r24, X+
    47e6:	9c 91       	ld	r25, X
    47e8:	13 97       	sbiw	r26, 0x03	; 3
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	13 96       	adiw	r26, 0x03	; 3
    47ee:	9c 93       	st	X, r25
    47f0:	8e 93       	st	-X, r24
    47f2:	12 97       	sbiw	r26, 0x02	; 2
    47f4:	20 30       	cpi	r18, 0x00	; 0
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	38 07       	cpc	r19, r24
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	48 07       	cpc	r20, r24
    47fe:	80 e4       	ldi	r24, 0x40	; 64
    4800:	58 07       	cpc	r21, r24
    4802:	58 f3       	brcs	.-42     	; 0x47da <__unpack_f+0x66>
    4804:	14 96       	adiw	r26, 0x04	; 4
    4806:	2d 93       	st	X+, r18
    4808:	3d 93       	st	X+, r19
    480a:	4d 93       	st	X+, r20
    480c:	5c 93       	st	X, r21
    480e:	17 97       	sbiw	r26, 0x07	; 7
    4810:	08 95       	ret
    4812:	2f 3f       	cpi	r18, 0xFF	; 255
    4814:	31 05       	cpc	r19, r1
    4816:	79 f4       	brne	.+30     	; 0x4836 <__unpack_f+0xc2>
    4818:	41 15       	cp	r20, r1
    481a:	51 05       	cpc	r21, r1
    481c:	61 05       	cpc	r22, r1
    481e:	71 05       	cpc	r23, r1
    4820:	19 f4       	brne	.+6      	; 0x4828 <__unpack_f+0xb4>
    4822:	84 e0       	ldi	r24, 0x04	; 4
    4824:	8c 93       	st	X, r24
    4826:	08 95       	ret
    4828:	64 ff       	sbrs	r22, 4
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <__unpack_f+0xbe>
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	8c 93       	st	X, r24
    4830:	12 c0       	rjmp	.+36     	; 0x4856 <__unpack_f+0xe2>
    4832:	1c 92       	st	X, r1
    4834:	10 c0       	rjmp	.+32     	; 0x4856 <__unpack_f+0xe2>
    4836:	2f 57       	subi	r18, 0x7F	; 127
    4838:	30 40       	sbci	r19, 0x00	; 0
    483a:	13 96       	adiw	r26, 0x03	; 3
    483c:	3c 93       	st	X, r19
    483e:	2e 93       	st	-X, r18
    4840:	12 97       	sbiw	r26, 0x02	; 2
    4842:	83 e0       	ldi	r24, 0x03	; 3
    4844:	8c 93       	st	X, r24
    4846:	87 e0       	ldi	r24, 0x07	; 7
    4848:	44 0f       	add	r20, r20
    484a:	55 1f       	adc	r21, r21
    484c:	66 1f       	adc	r22, r22
    484e:	77 1f       	adc	r23, r23
    4850:	8a 95       	dec	r24
    4852:	d1 f7       	brne	.-12     	; 0x4848 <__unpack_f+0xd4>
    4854:	70 64       	ori	r23, 0x40	; 64
    4856:	14 96       	adiw	r26, 0x04	; 4
    4858:	4d 93       	st	X+, r20
    485a:	5d 93       	st	X+, r21
    485c:	6d 93       	st	X+, r22
    485e:	7c 93       	st	X, r23
    4860:	17 97       	sbiw	r26, 0x07	; 7
    4862:	08 95       	ret

00004864 <__fpcmp_parts_f>:
    4864:	1f 93       	push	r17
    4866:	dc 01       	movw	r26, r24
    4868:	fb 01       	movw	r30, r22
    486a:	9c 91       	ld	r25, X
    486c:	92 30       	cpi	r25, 0x02	; 2
    486e:	08 f4       	brcc	.+2      	; 0x4872 <__fpcmp_parts_f+0xe>
    4870:	47 c0       	rjmp	.+142    	; 0x4900 <__fpcmp_parts_f+0x9c>
    4872:	80 81       	ld	r24, Z
    4874:	82 30       	cpi	r24, 0x02	; 2
    4876:	08 f4       	brcc	.+2      	; 0x487a <__fpcmp_parts_f+0x16>
    4878:	43 c0       	rjmp	.+134    	; 0x4900 <__fpcmp_parts_f+0x9c>
    487a:	94 30       	cpi	r25, 0x04	; 4
    487c:	51 f4       	brne	.+20     	; 0x4892 <__fpcmp_parts_f+0x2e>
    487e:	11 96       	adiw	r26, 0x01	; 1
    4880:	1c 91       	ld	r17, X
    4882:	84 30       	cpi	r24, 0x04	; 4
    4884:	99 f5       	brne	.+102    	; 0x48ec <__fpcmp_parts_f+0x88>
    4886:	81 81       	ldd	r24, Z+1	; 0x01
    4888:	68 2f       	mov	r22, r24
    488a:	70 e0       	ldi	r23, 0x00	; 0
    488c:	61 1b       	sub	r22, r17
    488e:	71 09       	sbc	r23, r1
    4890:	3f c0       	rjmp	.+126    	; 0x4910 <__fpcmp_parts_f+0xac>
    4892:	84 30       	cpi	r24, 0x04	; 4
    4894:	21 f0       	breq	.+8      	; 0x489e <__fpcmp_parts_f+0x3a>
    4896:	92 30       	cpi	r25, 0x02	; 2
    4898:	31 f4       	brne	.+12     	; 0x48a6 <__fpcmp_parts_f+0x42>
    489a:	82 30       	cpi	r24, 0x02	; 2
    489c:	b9 f1       	breq	.+110    	; 0x490c <__fpcmp_parts_f+0xa8>
    489e:	81 81       	ldd	r24, Z+1	; 0x01
    48a0:	88 23       	and	r24, r24
    48a2:	89 f1       	breq	.+98     	; 0x4906 <__fpcmp_parts_f+0xa2>
    48a4:	2d c0       	rjmp	.+90     	; 0x4900 <__fpcmp_parts_f+0x9c>
    48a6:	11 96       	adiw	r26, 0x01	; 1
    48a8:	1c 91       	ld	r17, X
    48aa:	11 97       	sbiw	r26, 0x01	; 1
    48ac:	82 30       	cpi	r24, 0x02	; 2
    48ae:	f1 f0       	breq	.+60     	; 0x48ec <__fpcmp_parts_f+0x88>
    48b0:	81 81       	ldd	r24, Z+1	; 0x01
    48b2:	18 17       	cp	r17, r24
    48b4:	d9 f4       	brne	.+54     	; 0x48ec <__fpcmp_parts_f+0x88>
    48b6:	12 96       	adiw	r26, 0x02	; 2
    48b8:	2d 91       	ld	r18, X+
    48ba:	3c 91       	ld	r19, X
    48bc:	13 97       	sbiw	r26, 0x03	; 3
    48be:	82 81       	ldd	r24, Z+2	; 0x02
    48c0:	93 81       	ldd	r25, Z+3	; 0x03
    48c2:	82 17       	cp	r24, r18
    48c4:	93 07       	cpc	r25, r19
    48c6:	94 f0       	brlt	.+36     	; 0x48ec <__fpcmp_parts_f+0x88>
    48c8:	28 17       	cp	r18, r24
    48ca:	39 07       	cpc	r19, r25
    48cc:	bc f0       	brlt	.+46     	; 0x48fc <__fpcmp_parts_f+0x98>
    48ce:	14 96       	adiw	r26, 0x04	; 4
    48d0:	8d 91       	ld	r24, X+
    48d2:	9d 91       	ld	r25, X+
    48d4:	0d 90       	ld	r0, X+
    48d6:	bc 91       	ld	r27, X
    48d8:	a0 2d       	mov	r26, r0
    48da:	24 81       	ldd	r18, Z+4	; 0x04
    48dc:	35 81       	ldd	r19, Z+5	; 0x05
    48de:	46 81       	ldd	r20, Z+6	; 0x06
    48e0:	57 81       	ldd	r21, Z+7	; 0x07
    48e2:	28 17       	cp	r18, r24
    48e4:	39 07       	cpc	r19, r25
    48e6:	4a 07       	cpc	r20, r26
    48e8:	5b 07       	cpc	r21, r27
    48ea:	18 f4       	brcc	.+6      	; 0x48f2 <__fpcmp_parts_f+0x8e>
    48ec:	11 23       	and	r17, r17
    48ee:	41 f0       	breq	.+16     	; 0x4900 <__fpcmp_parts_f+0x9c>
    48f0:	0a c0       	rjmp	.+20     	; 0x4906 <__fpcmp_parts_f+0xa2>
    48f2:	82 17       	cp	r24, r18
    48f4:	93 07       	cpc	r25, r19
    48f6:	a4 07       	cpc	r26, r20
    48f8:	b5 07       	cpc	r27, r21
    48fa:	40 f4       	brcc	.+16     	; 0x490c <__fpcmp_parts_f+0xa8>
    48fc:	11 23       	and	r17, r17
    48fe:	19 f0       	breq	.+6      	; 0x4906 <__fpcmp_parts_f+0xa2>
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	05 c0       	rjmp	.+10     	; 0x4910 <__fpcmp_parts_f+0xac>
    4906:	6f ef       	ldi	r22, 0xFF	; 255
    4908:	7f ef       	ldi	r23, 0xFF	; 255
    490a:	02 c0       	rjmp	.+4      	; 0x4910 <__fpcmp_parts_f+0xac>
    490c:	60 e0       	ldi	r22, 0x00	; 0
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	cb 01       	movw	r24, r22
    4912:	1f 91       	pop	r17
    4914:	08 95       	ret

00004916 <__mulsi3>:
    4916:	62 9f       	mul	r22, r18
    4918:	d0 01       	movw	r26, r0
    491a:	73 9f       	mul	r23, r19
    491c:	f0 01       	movw	r30, r0
    491e:	82 9f       	mul	r24, r18
    4920:	e0 0d       	add	r30, r0
    4922:	f1 1d       	adc	r31, r1
    4924:	64 9f       	mul	r22, r20
    4926:	e0 0d       	add	r30, r0
    4928:	f1 1d       	adc	r31, r1
    492a:	92 9f       	mul	r25, r18
    492c:	f0 0d       	add	r31, r0
    492e:	83 9f       	mul	r24, r19
    4930:	f0 0d       	add	r31, r0
    4932:	74 9f       	mul	r23, r20
    4934:	f0 0d       	add	r31, r0
    4936:	65 9f       	mul	r22, r21
    4938:	f0 0d       	add	r31, r0
    493a:	99 27       	eor	r25, r25
    493c:	72 9f       	mul	r23, r18
    493e:	b0 0d       	add	r27, r0
    4940:	e1 1d       	adc	r30, r1
    4942:	f9 1f       	adc	r31, r25
    4944:	63 9f       	mul	r22, r19
    4946:	b0 0d       	add	r27, r0
    4948:	e1 1d       	adc	r30, r1
    494a:	f9 1f       	adc	r31, r25
    494c:	bd 01       	movw	r22, r26
    494e:	cf 01       	movw	r24, r30
    4950:	11 24       	eor	r1, r1
    4952:	08 95       	ret

00004954 <__prologue_saves__>:
    4954:	2f 92       	push	r2
    4956:	3f 92       	push	r3
    4958:	4f 92       	push	r4
    495a:	5f 92       	push	r5
    495c:	6f 92       	push	r6
    495e:	7f 92       	push	r7
    4960:	8f 92       	push	r8
    4962:	9f 92       	push	r9
    4964:	af 92       	push	r10
    4966:	bf 92       	push	r11
    4968:	cf 92       	push	r12
    496a:	df 92       	push	r13
    496c:	ef 92       	push	r14
    496e:	ff 92       	push	r15
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	cd b7       	in	r28, 0x3d	; 61
    497a:	de b7       	in	r29, 0x3e	; 62
    497c:	ca 1b       	sub	r28, r26
    497e:	db 0b       	sbc	r29, r27
    4980:	0f b6       	in	r0, 0x3f	; 63
    4982:	f8 94       	cli
    4984:	de bf       	out	0x3e, r29	; 62
    4986:	0f be       	out	0x3f, r0	; 63
    4988:	cd bf       	out	0x3d, r28	; 61
    498a:	19 94       	eijmp

0000498c <__epilogue_restores__>:
    498c:	2a 88       	ldd	r2, Y+18	; 0x12
    498e:	39 88       	ldd	r3, Y+17	; 0x11
    4990:	48 88       	ldd	r4, Y+16	; 0x10
    4992:	5f 84       	ldd	r5, Y+15	; 0x0f
    4994:	6e 84       	ldd	r6, Y+14	; 0x0e
    4996:	7d 84       	ldd	r7, Y+13	; 0x0d
    4998:	8c 84       	ldd	r8, Y+12	; 0x0c
    499a:	9b 84       	ldd	r9, Y+11	; 0x0b
    499c:	aa 84       	ldd	r10, Y+10	; 0x0a
    499e:	b9 84       	ldd	r11, Y+9	; 0x09
    49a0:	c8 84       	ldd	r12, Y+8	; 0x08
    49a2:	df 80       	ldd	r13, Y+7	; 0x07
    49a4:	ee 80       	ldd	r14, Y+6	; 0x06
    49a6:	fd 80       	ldd	r15, Y+5	; 0x05
    49a8:	0c 81       	ldd	r16, Y+4	; 0x04
    49aa:	1b 81       	ldd	r17, Y+3	; 0x03
    49ac:	aa 81       	ldd	r26, Y+2	; 0x02
    49ae:	b9 81       	ldd	r27, Y+1	; 0x01
    49b0:	ce 0f       	add	r28, r30
    49b2:	d1 1d       	adc	r29, r1
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	ed 01       	movw	r28, r26
    49c0:	08 95       	ret

000049c2 <_exit>:
    49c2:	f8 94       	cli

000049c4 <__stop_program>:
    49c4:	ff cf       	rjmp	.-2      	; 0x49c4 <__stop_program>
