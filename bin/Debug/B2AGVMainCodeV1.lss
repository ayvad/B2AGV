
bin\Debug\B2AGVMainCodeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00003e02  00003eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e02  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800308  00800308  00003fbe  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  00003fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000382  00000000  00000000  000041e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fb  00000000  00000000  00004563  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184d  00000000  00000000  0000775e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ac8  00000000  00000000  00008fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000ba74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  0000bd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000c27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cc94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__vector_50>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e0       	ldi	r30, 0x02	; 2
      fc:	fe e3       	ldi	r31, 0x3E	; 62
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 31       	cpi	r26, 0x12	; 18
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 93 02 	call	0x526	; 0x526 <main>
     122:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED>:

#define PINIRsensor1 PINJ
#define PINIRsensor2 PINJ

void LED(int Richting)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <LED+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
    switch (Richting)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	9c 83       	std	Y+4, r25	; 0x04
     140:	8b 83       	std	Y+3, r24	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	83 30       	cpi	r24, 0x03	; 3
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <LED+0x24>
     14c:	96 c0       	rjmp	.+300    	; 0x27a <LED+0x150>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	91 05       	cpc	r25, r1
     156:	64 f4       	brge	.+24     	; 0x170 <LED+0x46>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	d1 f0       	breq	.+52     	; 0x196 <LED+0x6c>
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	91 05       	cpc	r25, r1
     16a:	09 f4       	brne	.+2      	; 0x16e <LED+0x44>
     16c:	4d c0       	rjmp	.+154    	; 0x208 <LED+0xde>
     16e:	69 c1       	rjmp	.+722    	; 0x442 <LED+0x318>
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	85 30       	cpi	r24, 0x05	; 5
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <LED+0x52>
     17a:	f1 c0       	rjmp	.+482    	; 0x35e <LED+0x234>
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	85 30       	cpi	r24, 0x05	; 5
     182:	91 05       	cpc	r25, r1
     184:	0c f4       	brge	.+2      	; 0x188 <LED+0x5e>
     186:	b2 c0       	rjmp	.+356    	; 0x2ec <LED+0x1c2>
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	9c 81       	ldd	r25, Y+4	; 0x04
     18c:	86 30       	cpi	r24, 0x06	; 6
     18e:	91 05       	cpc	r25, r1
     190:	09 f4       	brne	.+2      	; 0x194 <LED+0x6a>
     192:	1e c1       	rjmp	.+572    	; 0x3d0 <LED+0x2a6>
     194:	56 c1       	rjmp	.+684    	; 0x442 <LED+0x318>
    {
    case 1 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     196:	a2 e2       	ldi	r26, 0x22	; 34
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e2 e2       	ldi	r30, 0x22	; 34
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     1a4:	a2 e2       	ldi	r26, 0x22	; 34
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e2 e2       	ldi	r30, 0x22	; 34
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     1b2:	a2 e2       	ldi	r26, 0x22	; 34
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e2 e2       	ldi	r30, 0x22	; 34
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8b 7f       	andi	r24, 0xFB	; 251
     1be:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     1c0:	a2 e2       	ldi	r26, 0x22	; 34
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e2 e2       	ldi	r30, 0x22	; 34
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     1ce:	a2 e2       	ldi	r26, 0x22	; 34
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e2 e2       	ldi	r30, 0x22	; 34
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     1dc:	a2 e2       	ldi	r26, 0x22	; 34
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e2 e2       	ldi	r30, 0x22	; 34
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7d       	andi	r24, 0xDF	; 223
     1e8:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     1ea:	a2 e2       	ldi	r26, 0x22	; 34
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e2 e2       	ldi	r30, 0x22	; 34
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 7b       	andi	r24, 0xBF	; 191
     1f6:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     1f8:	a2 e2       	ldi	r26, 0x22	; 34
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e2 e2       	ldi	r30, 0x22	; 34
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	8c 93       	st	X, r24
     206:	55 c1       	rjmp	.+682    	; 0x4b2 <LED+0x388>
        break;
    case 2 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     208:	a2 e2       	ldi	r26, 0x22	; 34
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e2 e2       	ldi	r30, 0x22	; 34
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     216:	a2 e2       	ldi	r26, 0x22	; 34
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e2 e2       	ldi	r30, 0x22	; 34
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8d 7f       	andi	r24, 0xFD	; 253
     222:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     224:	a2 e2       	ldi	r26, 0x22	; 34
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e2 e2       	ldi	r30, 0x22	; 34
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     240:	a2 e2       	ldi	r26, 0x22	; 34
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7e       	andi	r24, 0xEF	; 239
     24c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     24e:	a2 e2       	ldi	r26, 0x22	; 34
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e2 e2       	ldi	r30, 0x22	; 34
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 62       	ori	r24, 0x20	; 32
     25a:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     25c:	a2 e2       	ldi	r26, 0x22	; 34
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e2 e2       	ldi	r30, 0x22	; 34
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 7b       	andi	r24, 0xBF	; 191
     268:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     26a:	a2 e2       	ldi	r26, 0x22	; 34
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e2       	ldi	r30, 0x22	; 34
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	8c 93       	st	X, r24
     278:	1c c1       	rjmp	.+568    	; 0x4b2 <LED+0x388>
        break;
    case 3 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     27a:	a2 e2       	ldi	r26, 0x22	; 34
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e2 e2       	ldi	r30, 0x22	; 34
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8e 7f       	andi	r24, 0xFE	; 254
     286:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     288:	a2 e2       	ldi	r26, 0x22	; 34
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e2 e2       	ldi	r30, 0x22	; 34
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	8d 7f       	andi	r24, 0xFD	; 253
     294:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     296:	a2 e2       	ldi	r26, 0x22	; 34
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 e2       	ldi	r30, 0x22	; 34
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8b 7f       	andi	r24, 0xFB	; 251
     2a2:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     2a4:	a2 e2       	ldi	r26, 0x22	; 34
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e2 e2       	ldi	r30, 0x22	; 34
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     2b2:	a2 e2       	ldi	r26, 0x22	; 34
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e2 e2       	ldi	r30, 0x22	; 34
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     2c0:	a2 e2       	ldi	r26, 0x22	; 34
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e2 e2       	ldi	r30, 0x22	; 34
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e2 e2       	ldi	r30, 0x22	; 34
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     2dc:	a2 e2       	ldi	r26, 0x22	; 34
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 77       	andi	r24, 0x7F	; 127
     2e8:	8c 93       	st	X, r24
     2ea:	e3 c0       	rjmp	.+454    	; 0x4b2 <LED+0x388>
        break;
    case 4 :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     2ec:	a2 e2       	ldi	r26, 0x22	; 34
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e2 e2       	ldi	r30, 0x22	; 34
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     2fa:	a2 e2       	ldi	r26, 0x22	; 34
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e2 e2       	ldi	r30, 0x22	; 34
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     308:	a2 e2       	ldi	r26, 0x22	; 34
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	e2 e2       	ldi	r30, 0x22	; 34
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	84 60       	ori	r24, 0x04	; 4
     314:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e2 e2       	ldi	r30, 0x22	; 34
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     324:	a2 e2       	ldi	r26, 0x22	; 34
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e2 e2       	ldi	r30, 0x22	; 34
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7e       	andi	r24, 0xEF	; 239
     330:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     332:	a2 e2       	ldi	r26, 0x22	; 34
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e2 e2       	ldi	r30, 0x22	; 34
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	8f 7d       	andi	r24, 0xDF	; 223
     33e:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     340:	a2 e2       	ldi	r26, 0x22	; 34
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e2 e2       	ldi	r30, 0x22	; 34
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     34e:	a2 e2       	ldi	r26, 0x22	; 34
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e2 e2       	ldi	r30, 0x22	; 34
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	8c 93       	st	X, r24
     35c:	aa c0       	rjmp	.+340    	; 0x4b2 <LED+0x388>
        break;
    case 5 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     35e:	a2 e2       	ldi	r26, 0x22	; 34
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	e2 e2       	ldi	r30, 0x22	; 34
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     36c:	a2 e2       	ldi	r26, 0x22	; 34
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e2 e2       	ldi	r30, 0x22	; 34
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	82 60       	ori	r24, 0x02	; 2
     378:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     37a:	a2 e2       	ldi	r26, 0x22	; 34
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e2 e2       	ldi	r30, 0x22	; 34
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	84 60       	ori	r24, 0x04	; 4
     386:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     388:	a2 e2       	ldi	r26, 0x22	; 34
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e2 e2       	ldi	r30, 0x22	; 34
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     396:	a2 e2       	ldi	r26, 0x22	; 34
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e2 e2       	ldi	r30, 0x22	; 34
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     3a4:	a2 e2       	ldi	r26, 0x22	; 34
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e2 e2       	ldi	r30, 0x22	; 34
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 7d       	andi	r24, 0xDF	; 223
     3b0:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     3b2:	a2 e2       	ldi	r26, 0x22	; 34
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7b       	andi	r24, 0xBF	; 191
     3be:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     3c0:	a2 e2       	ldi	r26, 0x22	; 34
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e2 e2       	ldi	r30, 0x22	; 34
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	8c 93       	st	X, r24
     3ce:	71 c0       	rjmp	.+226    	; 0x4b2 <LED+0x388>
        break;
    case 6 :
        PORTLEDRood |= (1 << PLEDRoodVoor);
     3d0:	a2 e2       	ldi	r26, 0x22	; 34
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e2       	ldi	r30, 0x22	; 34
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodAchter);
     3de:	a2 e2       	ldi	r26, 0x22	; 34
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e2 e2       	ldi	r30, 0x22	; 34
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodRechts);
     3ec:	a2 e2       	ldi	r26, 0x22	; 34
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	e2 e2       	ldi	r30, 0x22	; 34
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	84 60       	ori	r24, 0x04	; 4
     3f8:	8c 93       	st	X, r24
        PORTLEDRood |= (1 << PLEDRoodLinks);
     3fa:	a2 e2       	ldi	r26, 0x22	; 34
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e2 e2       	ldi	r30, 0x22	; 34
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 60       	ori	r24, 0x08	; 8
     406:	8c 93       	st	X, r24

        PORTLEDGeel |= (1 << PLEDGeelVoor);
     408:	a2 e2       	ldi	r26, 0x22	; 34
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e2 e2       	ldi	r30, 0x22	; 34
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelAchter);
     416:	a2 e2       	ldi	r26, 0x22	; 34
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e2 e2       	ldi	r30, 0x22	; 34
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelRechts);
     424:	a2 e2       	ldi	r26, 0x22	; 34
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e2 e2       	ldi	r30, 0x22	; 34
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	8c 93       	st	X, r24
        PORTLEDGeel |= (1 << PLEDGeelLinks);
     432:	a2 e2       	ldi	r26, 0x22	; 34
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e2 e2       	ldi	r30, 0x22	; 34
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8c 93       	st	X, r24
     440:	38 c0       	rjmp	.+112    	; 0x4b2 <LED+0x388>
        break;
    default :
        PORTLEDRood &= ~(1 << PLEDRoodVoor);
     442:	a2 e2       	ldi	r26, 0x22	; 34
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e2 e2       	ldi	r30, 0x22	; 34
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodAchter);
     450:	a2 e2       	ldi	r26, 0x22	; 34
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e2 e2       	ldi	r30, 0x22	; 34
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodRechts);
     45e:	a2 e2       	ldi	r26, 0x22	; 34
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e2 e2       	ldi	r30, 0x22	; 34
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8b 7f       	andi	r24, 0xFB	; 251
     46a:	8c 93       	st	X, r24
        PORTLEDRood &= ~(1 << PLEDRoodLinks);
     46c:	a2 e2       	ldi	r26, 0x22	; 34
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e2 e2       	ldi	r30, 0x22	; 34
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	8c 93       	st	X, r24

        PORTLEDGeel &= ~(1 << PLEDGeelVoor);
     47a:	a2 e2       	ldi	r26, 0x22	; 34
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e2 e2       	ldi	r30, 0x22	; 34
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 7e       	andi	r24, 0xEF	; 239
     486:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelAchter);
     488:	a2 e2       	ldi	r26, 0x22	; 34
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e2 e2       	ldi	r30, 0x22	; 34
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelRechts);
     496:	a2 e2       	ldi	r26, 0x22	; 34
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e2 e2       	ldi	r30, 0x22	; 34
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	8c 93       	st	X, r24
        PORTLEDGeel &= ~(1 << PLEDGeelLinks);
     4a4:	a2 e2       	ldi	r26, 0x22	; 34
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e2 e2       	ldi	r30, 0x22	; 34
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	8c 93       	st	X, r24
        }
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <init>:


void init(void)
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
    LED(5);
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
    DDRLEDRood |= (1 << PLEDRoodVoor);
     4d0:	a1 e2       	ldi	r26, 0x21	; 33
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	e1 e2       	ldi	r30, 0x21	; 33
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodAchter);
     4de:	a1 e2       	ldi	r26, 0x21	; 33
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e1 e2       	ldi	r30, 0x21	; 33
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodRechts);
     4ec:	a1 e2       	ldi	r26, 0x21	; 33
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	e1 e2       	ldi	r30, 0x21	; 33
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	84 60       	ori	r24, 0x04	; 4
     4f8:	8c 93       	st	X, r24
    DDRLEDRood |= (1 << PLEDRoodLinks);
     4fa:	a1 e2       	ldi	r26, 0x21	; 33
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	e1 e2       	ldi	r30, 0x21	; 33
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 60       	ori	r24, 0x08	; 8
     506:	8c 93       	st	X, r24

    DDRLEDRood |= (1 << PLEDNoodstop);
     508:	a1 e2       	ldi	r26, 0x21	; 33
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e1 e2       	ldi	r30, 0x21	; 33
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	80 61       	ori	r24, 0x10	; 16
     514:	8c 93       	st	X, r24

    init_steppermotor();
     516:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init_steppermotor>
    init_ultrasoon();
     51a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <init_ultrasoon>
    sei();
     51e:	78 94       	sei
}
     520:	cf 91       	pop	r28
     522:	df 91       	pop	r29
     524:	08 95       	ret

00000526 <main>:

int main(void)
{
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	2a 97       	sbiw	r28, 0x0a	; 10
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
    init();
     53a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>

    while(1)
    {
        double distanceUS1 = 0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	8d 83       	std	Y+5, r24	; 0x05
     548:	9e 83       	std	Y+6, r25	; 0x06
     54a:	af 83       	std	Y+7, r26	; 0x07
     54c:	b8 87       	std	Y+8, r27	; 0x08
        double distanceUS2 = 0;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	9a 83       	std	Y+2, r25	; 0x02
     55a:	ab 83       	std	Y+3, r26	; 0x03
     55c:	bc 83       	std	Y+4, r27	; 0x04
        distanceUS1 = distance(ultra_1_trigger);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 92 14 	call	0x2924	; 0x2924 <distance>
     566:	aa 27       	eor	r26, r26
     568:	97 fd       	sbrc	r25, 7
     56a:	a0 95       	com	r26
     56c:	ba 2f       	mov	r27, r26
     56e:	bc 01       	movw	r22, r24
     570:	cd 01       	movw	r24, r26
     572:	0e 94 89 1b 	call	0x3712	; 0x3712 <__floatsisf>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	8d 83       	std	Y+5, r24	; 0x05
     57c:	9e 83       	std	Y+6, r25	; 0x06
     57e:	af 83       	std	Y+7, r26	; 0x07
     580:	b8 87       	std	Y+8, r27	; 0x08
        distanceUS2 = distance(ultra_2_trigger);
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 92 14 	call	0x2924	; 0x2924 <distance>
     58a:	aa 27       	eor	r26, r26
     58c:	97 fd       	sbrc	r25, 7
     58e:	a0 95       	com	r26
     590:	ba 2f       	mov	r27, r26
     592:	bc 01       	movw	r22, r24
     594:	cd 01       	movw	r24, r26
     596:	0e 94 89 1b 	call	0x3712	; 0x3712 <__floatsisf>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	89 83       	std	Y+1, r24	; 0x01
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	ab 83       	std	Y+3, r26	; 0x03
     5a4:	bc 83       	std	Y+4, r27	; 0x04
     5a6:	5a c0       	rjmp	.+180    	; 0x65c <main+0x136>
        while((distanceUS1 > distance_dangerzone) & (distanceUS2 > distance_dangerzone))        //Dus voer alles totdat er iets te dichtbij voor de US-sensor staat
        {
            LED(1);
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
     5b0:	28 c0       	rjmp	.+80     	; 0x602 <main+0xdc>
            while ( !(PINIRsensor1 && (1 << PIRsensor1) ) )
            {
                Vooruit(100);
     5b2:	84 e6       	ldi	r24, 0x64	; 100
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 da 13 	call	0x27b4	; 0x27b4 <Vooruit>
                distanceUS1 = distance(ultra_1_trigger);
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 92 14 	call	0x2924	; 0x2924 <distance>
     5c2:	aa 27       	eor	r26, r26
     5c4:	97 fd       	sbrc	r25, 7
     5c6:	a0 95       	com	r26
     5c8:	ba 2f       	mov	r27, r26
     5ca:	bc 01       	movw	r22, r24
     5cc:	cd 01       	movw	r24, r26
     5ce:	0e 94 89 1b 	call	0x3712	; 0x3712 <__floatsisf>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	8d 83       	std	Y+5, r24	; 0x05
     5d8:	9e 83       	std	Y+6, r25	; 0x06
     5da:	af 83       	std	Y+7, r26	; 0x07
     5dc:	b8 87       	std	Y+8, r27	; 0x08
                distanceUS2 = distance(ultra_2_trigger);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 92 14 	call	0x2924	; 0x2924 <distance>
     5e6:	aa 27       	eor	r26, r26
     5e8:	97 fd       	sbrc	r25, 7
     5ea:	a0 95       	com	r26
     5ec:	ba 2f       	mov	r27, r26
     5ee:	bc 01       	movw	r22, r24
     5f0:	cd 01       	movw	r24, r26
     5f2:	0e 94 89 1b 	call	0x3712	; 0x3712 <__floatsisf>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	ab 83       	std	Y+3, r26	; 0x03
     600:	bc 83       	std	Y+4, r27	; 0x04
        distanceUS1 = distance(ultra_1_trigger);
        distanceUS2 = distance(ultra_2_trigger);
        while((distanceUS1 > distance_dangerzone) & (distanceUS2 > distance_dangerzone))        //Dus voer alles totdat er iets te dichtbij voor de US-sensor staat
        {
            LED(1);
            while ( !(PINIRsensor1 && (1 << PIRsensor1) ) )
     602:	e3 e0       	ldi	r30, 0x03	; 3
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	80 81       	ld	r24, Z
     608:	88 23       	and	r24, r24
     60a:	99 f2       	breq	.-90     	; 0x5b2 <main+0x8c>
            {
                Vooruit(100);
                distanceUS1 = distance(ultra_1_trigger);
                distanceUS2 = distance(ultra_2_trigger);
            }
            LED(6);
     60c:	86 e0       	ldi	r24, 0x06	; 6
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 95 00 	call	0x12a	; 0x12a <LED>
            distanceUS1 = distance(ultra_1_trigger);
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 92 14 	call	0x2924	; 0x2924 <distance>
     61c:	aa 27       	eor	r26, r26
     61e:	97 fd       	sbrc	r25, 7
     620:	a0 95       	com	r26
     622:	ba 2f       	mov	r27, r26
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	0e 94 89 1b 	call	0x3712	; 0x3712 <__floatsisf>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	8d 83       	std	Y+5, r24	; 0x05
     632:	9e 83       	std	Y+6, r25	; 0x06
     634:	af 83       	std	Y+7, r26	; 0x07
     636:	b8 87       	std	Y+8, r27	; 0x08
            distanceUS2 = distance(ultra_2_trigger);
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 92 14 	call	0x2924	; 0x2924 <distance>
     640:	aa 27       	eor	r26, r26
     642:	97 fd       	sbrc	r25, 7
     644:	a0 95       	com	r26
     646:	ba 2f       	mov	r27, r26
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 89 1b 	call	0x3712	; 0x3712 <__floatsisf>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	89 83       	std	Y+1, r24	; 0x01
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	ab 83       	std	Y+3, r26	; 0x03
     65a:	bc 83       	std	Y+4, r27	; 0x04
    {
        double distanceUS1 = 0;
        double distanceUS2 = 0;
        distanceUS1 = distance(ultra_1_trigger);
        distanceUS2 = distance(ultra_2_trigger);
        while((distanceUS1 > distance_dangerzone) & (distanceUS2 > distance_dangerzone))        //Dus voer alles totdat er iets te dichtbij voor de US-sensor staat
     65c:	1a 86       	std	Y+10, r1	; 0x0a
     65e:	6d 81       	ldd	r22, Y+5	; 0x05
     660:	7e 81       	ldd	r23, Y+6	; 0x06
     662:	8f 81       	ldd	r24, Y+7	; 0x07
     664:	98 85       	ldd	r25, Y+8	; 0x08
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e7       	ldi	r20, 0x70	; 112
     66c:	51 e4       	ldi	r21, 0x41	; 65
     66e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
     672:	18 16       	cp	r1, r24
     674:	14 f4       	brge	.+4      	; 0x67a <main+0x154>
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	8a 87       	std	Y+10, r24	; 0x0a
     67a:	19 86       	std	Y+9, r1	; 0x09
     67c:	69 81       	ldd	r22, Y+1	; 0x01
     67e:	7a 81       	ldd	r23, Y+2	; 0x02
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e7       	ldi	r20, 0x70	; 112
     68a:	51 e4       	ldi	r21, 0x41	; 65
     68c:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
     690:	18 16       	cp	r1, r24
     692:	14 f4       	brge	.+4      	; 0x698 <main+0x172>
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	99 87       	std	Y+9, r25	; 0x09
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	99 85       	ldd	r25, Y+9	; 0x09
     69c:	89 23       	and	r24, r25
     69e:	88 23       	and	r24, r24
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <main+0x17e>
     6a2:	82 cf       	rjmp	.-252    	; 0x5a8 <main+0x82>
     6a4:	4c cf       	rjmp	.-360    	; 0x53e <main+0x18>

000006a6 <init_steppermotor>:
#include <util/delay.h>
#include "steppermotor.h"


void init_steppermotor(void)
{
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
    DDRStepper1 |= (1 << PStepper1_1); // PIN 30
     6ae:	a7 e2       	ldi	r26, 0x27	; 39
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	e7 e2       	ldi	r30, 0x27	; 39
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	80 68       	ori	r24, 0x80	; 128
     6ba:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_2); // PIN 32
     6bc:	a7 e2       	ldi	r26, 0x27	; 39
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	e7 e2       	ldi	r30, 0x27	; 39
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	80 62       	ori	r24, 0x20	; 32
     6c8:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_3); // PIN 34
     6ca:	a7 e2       	ldi	r26, 0x27	; 39
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e7 e2       	ldi	r30, 0x27	; 39
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	8c 93       	st	X, r24
    DDRStepper1 |= (1 << PStepper1_4); // PIN 36
     6d8:	a7 e2       	ldi	r26, 0x27	; 39
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	e7 e2       	ldi	r30, 0x27	; 39
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	8c 93       	st	X, r24

    DDRStepper2 |= (1 << PStepper2_1); // PIN 31
     6e6:	a7 e2       	ldi	r26, 0x27	; 39
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	e7 e2       	ldi	r30, 0x27	; 39
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_2); // PIN 33
     6f4:	a7 e2       	ldi	r26, 0x27	; 39
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e7 e2       	ldi	r30, 0x27	; 39
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	80 61       	ori	r24, 0x10	; 16
     700:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_3); // PIN 35
     702:	a7 e2       	ldi	r26, 0x27	; 39
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	e7 e2       	ldi	r30, 0x27	; 39
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	84 60       	ori	r24, 0x04	; 4
     70e:	8c 93       	st	X, r24
    DDRStepper2 |= (1 << PStepper2_4); // PIN 37
     710:	a7 e2       	ldi	r26, 0x27	; 39
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	e7 e2       	ldi	r30, 0x27	; 39
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	81 60       	ori	r24, 0x01	; 1
     71c:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 42
     71e:	aa e0       	ldi	r26, 0x0A	; 10
     720:	b1 e0       	ldi	r27, 0x01	; 1
     722:	ea e0       	ldi	r30, 0x0A	; 10
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	80 81       	ld	r24, Z
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 44
     72c:	aa e0       	ldi	r26, 0x0A	; 10
     72e:	b1 e0       	ldi	r27, 0x01	; 1
     730:	ea e0       	ldi	r30, 0x0A	; 10
     732:	f1 e0       	ldi	r31, 0x01	; 1
     734:	80 81       	ld	r24, Z
     736:	80 62       	ori	r24, 0x20	; 32
     738:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 46
     73a:	aa e0       	ldi	r26, 0x0A	; 10
     73c:	b1 e0       	ldi	r27, 0x01	; 1
     73e:	ea e0       	ldi	r30, 0x0A	; 10
     740:	f1 e0       	ldi	r31, 0x01	; 1
     742:	80 81       	ld	r24, Z
     744:	88 60       	ori	r24, 0x08	; 8
     746:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 48
     748:	aa e0       	ldi	r26, 0x0A	; 10
     74a:	b1 e0       	ldi	r27, 0x01	; 1
     74c:	ea e0       	ldi	r30, 0x0A	; 10
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	80 81       	ld	r24, Z
     752:	82 60       	ori	r24, 0x02	; 2
     754:	8c 93       	st	X, r24

    DDRStepper3 |= (1 << PStepper3_1); // PIN 43
     756:	aa e0       	ldi	r26, 0x0A	; 10
     758:	b1 e0       	ldi	r27, 0x01	; 1
     75a:	ea e0       	ldi	r30, 0x0A	; 10
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	80 81       	ld	r24, Z
     760:	80 68       	ori	r24, 0x80	; 128
     762:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_2); // PIN 45
     764:	aa e0       	ldi	r26, 0x0A	; 10
     766:	b1 e0       	ldi	r27, 0x01	; 1
     768:	ea e0       	ldi	r30, 0x0A	; 10
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	80 81       	ld	r24, Z
     76e:	80 62       	ori	r24, 0x20	; 32
     770:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_3); // PIN 47
     772:	aa e0       	ldi	r26, 0x0A	; 10
     774:	b1 e0       	ldi	r27, 0x01	; 1
     776:	ea e0       	ldi	r30, 0x0A	; 10
     778:	f1 e0       	ldi	r31, 0x01	; 1
     77a:	80 81       	ld	r24, Z
     77c:	88 60       	ori	r24, 0x08	; 8
     77e:	8c 93       	st	X, r24
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
     780:	aa e0       	ldi	r26, 0x0A	; 10
     782:	b1 e0       	ldi	r27, 0x01	; 1
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	80 81       	ld	r24, Z
     78a:	82 60       	ori	r24, 0x02	; 2
     78c:	8c 93       	st	X, r24
}
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <steppermotor1Write>:

void steppermotor1Write(int a)
{
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	ea 97       	sbiw	r28, 0x3a	; 58
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	9e ab       	std	Y+54, r25	; 0x36
     7aa:	8d ab       	std	Y+53, r24	; 0x35
     7ac:	f1 c1       	rjmp	.+994    	; 0xb90 <steppermotor1Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9c ab       	std	Y+52, r25	; 0x34
     7b4:	8b ab       	std	Y+51, r24	; 0x33
     7b6:	e4 c1       	rjmp	.+968    	; 0xb80 <steppermotor1Write+0x3ec>
        {
            switch (i)
     7b8:	8b a9       	ldd	r24, Y+51	; 0x33
     7ba:	9c a9       	ldd	r25, Y+52	; 0x34
     7bc:	98 af       	std	Y+56, r25	; 0x38
     7be:	8f ab       	std	Y+55, r24	; 0x37
     7c0:	8f a9       	ldd	r24, Y+55	; 0x37
     7c2:	98 ad       	ldd	r25, Y+56	; 0x38
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	91 05       	cpc	r25, r1
     7c8:	09 f4       	brne	.+2      	; 0x7cc <steppermotor1Write+0x38>
     7ca:	87 c0       	rjmp	.+270    	; 0x8da <steppermotor1Write+0x146>
     7cc:	8f a9       	ldd	r24, Y+55	; 0x37
     7ce:	98 ad       	ldd	r25, Y+56	; 0x38
     7d0:	85 30       	cpi	r24, 0x05	; 5
     7d2:	91 05       	cpc	r25, r1
     7d4:	94 f4       	brge	.+36     	; 0x7fa <steppermotor1Write+0x66>
     7d6:	8f a9       	ldd	r24, Y+55	; 0x37
     7d8:	98 ad       	ldd	r25, Y+56	; 0x38
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	91 05       	cpc	r25, r1
     7de:	09 f4       	brne	.+2      	; 0x7e2 <steppermotor1Write+0x4e>
     7e0:	42 c0       	rjmp	.+132    	; 0x866 <steppermotor1Write+0xd2>
     7e2:	8f a9       	ldd	r24, Y+55	; 0x37
     7e4:	98 ad       	ldd	r25, Y+56	; 0x38
     7e6:	83 30       	cpi	r24, 0x03	; 3
     7e8:	91 05       	cpc	r25, r1
     7ea:	0c f0       	brlt	.+2      	; 0x7ee <steppermotor1Write+0x5a>
     7ec:	59 c0       	rjmp	.+178    	; 0x8a0 <steppermotor1Write+0x10c>
     7ee:	8f a9       	ldd	r24, Y+55	; 0x37
     7f0:	98 ad       	ldd	r25, Y+56	; 0x38
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	91 05       	cpc	r25, r1
     7f6:	d1 f0       	breq	.+52     	; 0x82c <steppermotor1Write+0x98>
     7f8:	00 c1       	rjmp	.+512    	; 0x9fa <steppermotor1Write+0x266>
     7fa:	8f a9       	ldd	r24, Y+55	; 0x37
     7fc:	98 ad       	ldd	r25, Y+56	; 0x38
     7fe:	86 30       	cpi	r24, 0x06	; 6
     800:	91 05       	cpc	r25, r1
     802:	09 f4       	brne	.+2      	; 0x806 <steppermotor1Write+0x72>
     804:	a4 c0       	rjmp	.+328    	; 0x94e <steppermotor1Write+0x1ba>
     806:	8f a9       	ldd	r24, Y+55	; 0x37
     808:	98 ad       	ldd	r25, Y+56	; 0x38
     80a:	86 30       	cpi	r24, 0x06	; 6
     80c:	91 05       	cpc	r25, r1
     80e:	0c f4       	brge	.+2      	; 0x812 <steppermotor1Write+0x7e>
     810:	81 c0       	rjmp	.+258    	; 0x914 <steppermotor1Write+0x180>
     812:	8f a9       	ldd	r24, Y+55	; 0x37
     814:	98 ad       	ldd	r25, Y+56	; 0x38
     816:	87 30       	cpi	r24, 0x07	; 7
     818:	91 05       	cpc	r25, r1
     81a:	09 f4       	brne	.+2      	; 0x81e <steppermotor1Write+0x8a>
     81c:	b5 c0       	rjmp	.+362    	; 0x988 <steppermotor1Write+0x1f4>
     81e:	8f a9       	ldd	r24, Y+55	; 0x37
     820:	98 ad       	ldd	r25, Y+56	; 0x38
     822:	88 30       	cpi	r24, 0x08	; 8
     824:	91 05       	cpc	r25, r1
     826:	09 f4       	brne	.+2      	; 0x82a <steppermotor1Write+0x96>
     828:	cc c0       	rjmp	.+408    	; 0x9c2 <steppermotor1Write+0x22e>
     82a:	e7 c0       	rjmp	.+462    	; 0x9fa <steppermotor1Write+0x266>
            {
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     82c:	a8 e2       	ldi	r26, 0x28	; 40
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	e8 e2       	ldi	r30, 0x28	; 40
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	80 68       	ori	r24, 0x80	; 128
     838:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     83a:	a8 e2       	ldi	r26, 0x28	; 40
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e8 e2       	ldi	r30, 0x28	; 40
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	8f 7d       	andi	r24, 0xDF	; 223
     846:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     848:	a8 e2       	ldi	r26, 0x28	; 40
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	e8 e2       	ldi	r30, 0x28	; 40
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	87 7f       	andi	r24, 0xF7	; 247
     854:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     856:	a8 e2       	ldi	r26, 0x28	; 40
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e8 e2       	ldi	r30, 0x28	; 40
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8d 7f       	andi	r24, 0xFD	; 253
     862:	8c 93       	st	X, r24
     864:	ca c0       	rjmp	.+404    	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 2 :
                PORTStepper1 |= (1 << PStepper1_1);
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	80 68       	ori	r24, 0x80	; 128
     872:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	80 62       	ori	r24, 0x20	; 32
     880:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     882:	a8 e2       	ldi	r26, 0x28	; 40
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	e8 e2       	ldi	r30, 0x28	; 40
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	87 7f       	andi	r24, 0xF7	; 247
     88e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     890:	a8 e2       	ldi	r26, 0x28	; 40
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	e8 e2       	ldi	r30, 0x28	; 40
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	8d 7f       	andi	r24, 0xFD	; 253
     89c:	8c 93       	st	X, r24
     89e:	ad c0       	rjmp	.+346    	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     8a0:	a8 e2       	ldi	r26, 0x28	; 40
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e8 e2       	ldi	r30, 0x28	; 40
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 77       	andi	r24, 0x7F	; 127
     8ac:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     8ae:	a8 e2       	ldi	r26, 0x28	; 40
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e8 e2       	ldi	r30, 0x28	; 40
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	80 62       	ori	r24, 0x20	; 32
     8ba:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     8bc:	a8 e2       	ldi	r26, 0x28	; 40
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	e8 e2       	ldi	r30, 0x28	; 40
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	87 7f       	andi	r24, 0xF7	; 247
     8c8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     8ca:	a8 e2       	ldi	r26, 0x28	; 40
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e8 e2       	ldi	r30, 0x28	; 40
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	8d 7f       	andi	r24, 0xFD	; 253
     8d6:	8c 93       	st	X, r24
     8d8:	90 c0       	rjmp	.+288    	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     8da:	a8 e2       	ldi	r26, 0x28	; 40
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e8 e2       	ldi	r30, 0x28	; 40
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 77       	andi	r24, 0x7F	; 127
     8e6:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     8e8:	a8 e2       	ldi	r26, 0x28	; 40
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	e8 e2       	ldi	r30, 0x28	; 40
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	80 62       	ori	r24, 0x20	; 32
     8f4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     8f6:	a8 e2       	ldi	r26, 0x28	; 40
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	e8 e2       	ldi	r30, 0x28	; 40
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	88 60       	ori	r24, 0x08	; 8
     902:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     904:	a8 e2       	ldi	r26, 0x28	; 40
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e8 e2       	ldi	r30, 0x28	; 40
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	8d 7f       	andi	r24, 0xFD	; 253
     910:	8c 93       	st	X, r24
     912:	73 c0       	rjmp	.+230    	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     914:	a8 e2       	ldi	r26, 0x28	; 40
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 e2       	ldi	r30, 0x28	; 40
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     922:	a8 e2       	ldi	r26, 0x28	; 40
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e8 e2       	ldi	r30, 0x28	; 40
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     930:	a8 e2       	ldi	r26, 0x28	; 40
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	e8 e2       	ldi	r30, 0x28	; 40
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	88 60       	ori	r24, 0x08	; 8
     93c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     93e:	a8 e2       	ldi	r26, 0x28	; 40
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	e8 e2       	ldi	r30, 0x28	; 40
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	8d 7f       	andi	r24, 0xFD	; 253
     94a:	8c 93       	st	X, r24
     94c:	56 c0       	rjmp	.+172    	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     94e:	a8 e2       	ldi	r26, 0x28	; 40
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e8 e2       	ldi	r30, 0x28	; 40
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	8f 77       	andi	r24, 0x7F	; 127
     95a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     95c:	a8 e2       	ldi	r26, 0x28	; 40
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	e8 e2       	ldi	r30, 0x28	; 40
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	8f 7d       	andi	r24, 0xDF	; 223
     968:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     96a:	a8 e2       	ldi	r26, 0x28	; 40
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	e8 e2       	ldi	r30, 0x28	; 40
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	88 60       	ori	r24, 0x08	; 8
     976:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     978:	a8 e2       	ldi	r26, 0x28	; 40
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e8 e2       	ldi	r30, 0x28	; 40
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	82 60       	ori	r24, 0x02	; 2
     984:	8c 93       	st	X, r24
     986:	39 c0       	rjmp	.+114    	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 7 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     988:	a8 e2       	ldi	r26, 0x28	; 40
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	e8 e2       	ldi	r30, 0x28	; 40
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8f 77       	andi	r24, 0x7F	; 127
     994:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     996:	a8 e2       	ldi	r26, 0x28	; 40
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e8 e2       	ldi	r30, 0x28	; 40
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	8f 7d       	andi	r24, 0xDF	; 223
     9a2:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     9a4:	a8 e2       	ldi	r26, 0x28	; 40
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 e2       	ldi	r30, 0x28	; 40
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	87 7f       	andi	r24, 0xF7	; 247
     9b0:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     9b2:	a8 e2       	ldi	r26, 0x28	; 40
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e8 e2       	ldi	r30, 0x28	; 40
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	8c 93       	st	X, r24
     9c0:	1c c0       	rjmp	.+56     	; 0x9fa <steppermotor1Write+0x266>
                break;
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     9c2:	a8 e2       	ldi	r26, 0x28	; 40
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e8 e2       	ldi	r30, 0x28	; 40
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     9d0:	a8 e2       	ldi	r26, 0x28	; 40
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e8 e2       	ldi	r30, 0x28	; 40
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7d       	andi	r24, 0xDF	; 223
     9dc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     9de:	a8 e2       	ldi	r26, 0x28	; 40
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e8 e2       	ldi	r30, 0x28	; 40
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	87 7f       	andi	r24, 0xF7	; 247
     9ea:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	82 60       	ori	r24, 0x02	; 2
     9f8:	8c 93       	st	X, r24
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	aa e7       	ldi	r26, 0x7A	; 122
     a00:	b4 e4       	ldi	r27, 0x44	; 68
     a02:	8d a7       	std	Y+45, r24	; 0x2d
     a04:	9e a7       	std	Y+46, r25	; 0x2e
     a06:	af a7       	std	Y+47, r26	; 0x2f
     a08:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a0a:	6d a5       	ldd	r22, Y+45	; 0x2d
     a0c:	7e a5       	ldd	r23, Y+46	; 0x2e
     a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
     a10:	98 a9       	ldd	r25, Y+48	; 0x30
     a12:	2b ea       	ldi	r18, 0xAB	; 171
     a14:	3a ea       	ldi	r19, 0xAA	; 170
     a16:	4a ea       	ldi	r20, 0xAA	; 170
     a18:	50 e4       	ldi	r21, 0x40	; 64
     a1a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	89 a7       	std	Y+41, r24	; 0x29
     a24:	9a a7       	std	Y+42, r25	; 0x2a
     a26:	ab a7       	std	Y+43, r26	; 0x2b
     a28:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     a2a:	69 a5       	ldd	r22, Y+41	; 0x29
     a2c:	7a a5       	ldd	r23, Y+42	; 0x2a
     a2e:	8b a5       	ldd	r24, Y+43	; 0x2b
     a30:	9c a5       	ldd	r25, Y+44	; 0x2c
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
     a3e:	88 23       	and	r24, r24
     a40:	1c f4       	brge	.+6      	; 0xa48 <steppermotor1Write+0x2b4>
		__ticks = 1;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	88 a7       	std	Y+40, r24	; 0x28
     a46:	91 c0       	rjmp	.+290    	; 0xb6a <steppermotor1Write+0x3d6>
	else if (__tmp > 255)
     a48:	69 a5       	ldd	r22, Y+41	; 0x29
     a4a:	7a a5       	ldd	r23, Y+42	; 0x2a
     a4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     a4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	53 e4       	ldi	r21, 0x43	; 67
     a58:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	0c f0       	brlt	.+2      	; 0xa62 <steppermotor1Write+0x2ce>
     a60:	7b c0       	rjmp	.+246    	; 0xb58 <steppermotor1Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
     a62:	6d a5       	ldd	r22, Y+45	; 0x2d
     a64:	7e a5       	ldd	r23, Y+46	; 0x2e
     a66:	8f a5       	ldd	r24, Y+47	; 0x2f
     a68:	98 a9       	ldd	r25, Y+48	; 0x30
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	4a e7       	ldi	r20, 0x7A	; 122
     a70:	54 e4       	ldi	r21, 0x44	; 68
     a72:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	8c a3       	std	Y+36, r24	; 0x24
     a7c:	9d a3       	std	Y+37, r25	; 0x25
     a7e:	ae a3       	std	Y+38, r26	; 0x26
     a80:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a82:	6c a1       	ldd	r22, Y+36	; 0x24
     a84:	7d a1       	ldd	r23, Y+37	; 0x25
     a86:	8e a1       	ldd	r24, Y+38	; 0x26
     a88:	9f a1       	ldd	r25, Y+39	; 0x27
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	4a e7       	ldi	r20, 0x7A	; 122
     a90:	55 e4       	ldi	r21, 0x45	; 69
     a92:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	88 a3       	std	Y+32, r24	; 0x20
     a9c:	99 a3       	std	Y+33, r25	; 0x21
     a9e:	aa a3       	std	Y+34, r26	; 0x22
     aa0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     aa2:	68 a1       	ldd	r22, Y+32	; 0x20
     aa4:	79 a1       	ldd	r23, Y+33	; 0x21
     aa6:	8a a1       	ldd	r24, Y+34	; 0x22
     aa8:	9b a1       	ldd	r25, Y+35	; 0x23
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e8       	ldi	r20, 0x80	; 128
     ab0:	5f e3       	ldi	r21, 0x3F	; 63
     ab2:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
     ab6:	88 23       	and	r24, r24
     ab8:	2c f4       	brge	.+10     	; 0xac4 <steppermotor1Write+0x330>
		__ticks = 1;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	9f 8f       	std	Y+31, r25	; 0x1f
     ac0:	8e 8f       	std	Y+30, r24	; 0x1e
     ac2:	3f c0       	rjmp	.+126    	; 0xb42 <steppermotor1Write+0x3ae>
	else if (__tmp > 65535)
     ac4:	68 a1       	ldd	r22, Y+32	; 0x20
     ac6:	79 a1       	ldd	r23, Y+33	; 0x21
     ac8:	8a a1       	ldd	r24, Y+34	; 0x22
     aca:	9b a1       	ldd	r25, Y+35	; 0x23
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	57 e4       	ldi	r21, 0x47	; 71
     ad4:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
     ad8:	18 16       	cp	r1, r24
     ada:	4c f5       	brge	.+82     	; 0xb2e <steppermotor1Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     adc:	6c a1       	ldd	r22, Y+36	; 0x24
     ade:	7d a1       	ldd	r23, Y+37	; 0x25
     ae0:	8e a1       	ldd	r24, Y+38	; 0x26
     ae2:	9f a1       	ldd	r25, Y+39	; 0x27
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e2       	ldi	r20, 0x20	; 32
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	bc 01       	movw	r22, r24
     af6:	cd 01       	movw	r24, r26
     af8:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	9f 8f       	std	Y+31, r25	; 0x1f
     b02:	8e 8f       	std	Y+30, r24	; 0x1e
     b04:	0f c0       	rjmp	.+30     	; 0xb24 <steppermotor1Write+0x390>
     b06:	80 e9       	ldi	r24, 0x90	; 144
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	9d 8f       	std	Y+29, r25	; 0x1d
     b0c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b10:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <steppermotor1Write+0x37e>
     b16:	9d 8f       	std	Y+29, r25	; 0x1d
     b18:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	9f 8f       	std	Y+31, r25	; 0x1f
     b22:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	69 f7       	brne	.-38     	; 0xb06 <steppermotor1Write+0x372>
     b2c:	24 c0       	rjmp	.+72     	; 0xb76 <steppermotor1Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b2e:	68 a1       	ldd	r22, Y+32	; 0x20
     b30:	79 a1       	ldd	r23, Y+33	; 0x21
     b32:	8a a1       	ldd	r24, Y+34	; 0x22
     b34:	9b a1       	ldd	r25, Y+35	; 0x23
     b36:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	9f 8f       	std	Y+31, r25	; 0x1f
     b40:	8e 8f       	std	Y+30, r24	; 0x1e
     b42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b44:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b46:	9b 8f       	std	Y+27, r25	; 0x1b
     b48:	8a 8f       	std	Y+26, r24	; 0x1a
     b4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <steppermotor1Write+0x3ba>
     b52:	9b 8f       	std	Y+27, r25	; 0x1b
     b54:	8a 8f       	std	Y+26, r24	; 0x1a
     b56:	0f c0       	rjmp	.+30     	; 0xb76 <steppermotor1Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b58:	69 a5       	ldd	r22, Y+41	; 0x29
     b5a:	7a a5       	ldd	r23, Y+42	; 0x2a
     b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b5e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b60:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	88 a7       	std	Y+40, r24	; 0x28
     b6a:	88 a5       	ldd	r24, Y+40	; 0x28
     b6c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b6e:	89 8d       	ldd	r24, Y+25	; 0x19
     b70:	8a 95       	dec	r24
     b72:	f1 f7       	brne	.-4      	; 0xb70 <steppermotor1Write+0x3dc>
     b74:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor1Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     b76:	8b a9       	ldd	r24, Y+51	; 0x33
     b78:	9c a9       	ldd	r25, Y+52	; 0x34
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	9c ab       	std	Y+52, r25	; 0x34
     b7e:	8b ab       	std	Y+51, r24	; 0x33
     b80:	8b a9       	ldd	r24, Y+51	; 0x33
     b82:	9c a9       	ldd	r25, Y+52	; 0x34
     b84:	88 30       	cpi	r24, 0x08	; 8
     b86:	91 05       	cpc	r25, r1
     b88:	0c f4       	brge	.+2      	; 0xb8c <steppermotor1Write+0x3f8>
     b8a:	16 ce       	rjmp	.-980    	; 0x7b8 <steppermotor1Write+0x24>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
     b8c:	1e aa       	std	Y+54, r1	; 0x36
     b8e:	1d aa       	std	Y+53, r1	; 0x35
    DDRStepper3 |= (1 << PStepper3_4); // PIN 49
}

void steppermotor1Write(int a)
{
    while(a  == 1)
     b90:	8d a9       	ldd	r24, Y+53	; 0x35
     b92:	9e a9       	ldd	r25, Y+54	; 0x36
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <steppermotor1Write+0x408>
     b9a:	09 ce       	rjmp	.-1006   	; 0x7ae <steppermotor1Write+0x1a>
     b9c:	f0 c1       	rjmp	.+992    	; 0xf7e <steppermotor1Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	9a ab       	std	Y+50, r25	; 0x32
     ba4:	89 ab       	std	Y+49, r24	; 0x31
     ba6:	e3 c1       	rjmp	.+966    	; 0xf6e <steppermotor1Write+0x7da>
        {
            switch (i)
     ba8:	89 a9       	ldd	r24, Y+49	; 0x31
     baa:	9a a9       	ldd	r25, Y+50	; 0x32
     bac:	9a af       	std	Y+58, r25	; 0x3a
     bae:	89 af       	std	Y+57, r24	; 0x39
     bb0:	89 ad       	ldd	r24, Y+57	; 0x39
     bb2:	9a ad       	ldd	r25, Y+58	; 0x3a
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <steppermotor1Write+0x428>
     bba:	a3 c0       	rjmp	.+326    	; 0xd02 <steppermotor1Write+0x56e>
     bbc:	89 ad       	ldd	r24, Y+57	; 0x39
     bbe:	9a ad       	ldd	r25, Y+58	; 0x3a
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	91 05       	cpc	r25, r1
     bc4:	94 f4       	brge	.+36     	; 0xbea <steppermotor1Write+0x456>
     bc6:	89 ad       	ldd	r24, Y+57	; 0x39
     bc8:	9a ad       	ldd	r25, Y+58	; 0x3a
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	91 05       	cpc	r25, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <steppermotor1Write+0x43e>
     bd0:	5e c0       	rjmp	.+188    	; 0xc8e <steppermotor1Write+0x4fa>
     bd2:	89 ad       	ldd	r24, Y+57	; 0x39
     bd4:	9a ad       	ldd	r25, Y+58	; 0x3a
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	91 05       	cpc	r25, r1
     bda:	0c f0       	brlt	.+2      	; 0xbde <steppermotor1Write+0x44a>
     bdc:	75 c0       	rjmp	.+234    	; 0xcc8 <steppermotor1Write+0x534>
     bde:	89 ad       	ldd	r24, Y+57	; 0x39
     be0:	9a ad       	ldd	r25, Y+58	; 0x3a
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 05       	cpc	r25, r1
     be6:	b1 f1       	breq	.+108    	; 0xc54 <steppermotor1Write+0x4c0>
     be8:	ff c0       	rjmp	.+510    	; 0xde8 <steppermotor1Write+0x654>
     bea:	89 ad       	ldd	r24, Y+57	; 0x39
     bec:	9a ad       	ldd	r25, Y+58	; 0x3a
     bee:	86 30       	cpi	r24, 0x06	; 6
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <steppermotor1Write+0x462>
     bf4:	c0 c0       	rjmp	.+384    	; 0xd76 <steppermotor1Write+0x5e2>
     bf6:	89 ad       	ldd	r24, Y+57	; 0x39
     bf8:	9a ad       	ldd	r25, Y+58	; 0x3a
     bfa:	86 30       	cpi	r24, 0x06	; 6
     bfc:	91 05       	cpc	r25, r1
     bfe:	0c f4       	brge	.+2      	; 0xc02 <steppermotor1Write+0x46e>
     c00:	9d c0       	rjmp	.+314    	; 0xd3c <steppermotor1Write+0x5a8>
     c02:	89 ad       	ldd	r24, Y+57	; 0x39
     c04:	9a ad       	ldd	r25, Y+58	; 0x3a
     c06:	87 30       	cpi	r24, 0x07	; 7
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <steppermotor1Write+0x47a>
     c0c:	d1 c0       	rjmp	.+418    	; 0xdb0 <steppermotor1Write+0x61c>
     c0e:	89 ad       	ldd	r24, Y+57	; 0x39
     c10:	9a ad       	ldd	r25, Y+58	; 0x3a
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <steppermotor1Write+0x486>
     c18:	e7 c0       	rjmp	.+462    	; 0xde8 <steppermotor1Write+0x654>
            {
            case 8 :
                PORTStepper1 |= (1 << PStepper1_1);
     c1a:	a8 e2       	ldi	r26, 0x28	; 40
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 e2       	ldi	r30, 0x28	; 40
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 68       	ori	r24, 0x80	; 128
     c26:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     c28:	a8 e2       	ldi	r26, 0x28	; 40
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e8 e2       	ldi	r30, 0x28	; 40
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8f 7d       	andi	r24, 0xDF	; 223
     c34:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c36:	a8 e2       	ldi	r26, 0x28	; 40
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e8 e2       	ldi	r30, 0x28	; 40
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	87 7f       	andi	r24, 0xF7	; 247
     c42:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     c44:	a8 e2       	ldi	r26, 0x28	; 40
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 e2       	ldi	r30, 0x28	; 40
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8d 7f       	andi	r24, 0xFD	; 253
     c50:	8c 93       	st	X, r24
     c52:	ca c0       	rjmp	.+404    	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 1 :
                PORTStepper1 |= (1 << PStepper1_1);
     c54:	a8 e2       	ldi	r26, 0x28	; 40
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 e2       	ldi	r30, 0x28	; 40
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     c62:	a8 e2       	ldi	r26, 0x28	; 40
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e8 e2       	ldi	r30, 0x28	; 40
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	87 7f       	andi	r24, 0xF7	; 247
     c7c:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8d 7f       	andi	r24, 0xFD	; 253
     c8a:	8c 93       	st	X, r24
     c8c:	ad c0       	rjmp	.+346    	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 2 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8f 77       	andi	r24, 0x7F	; 127
     c9a:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	80 62       	ori	r24, 0x20	; 32
     ca8:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     cb8:	a8 e2       	ldi	r26, 0x28	; 40
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e2       	ldi	r30, 0x28	; 40
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	8c 93       	st	X, r24
     cc6:	90 c0       	rjmp	.+288    	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 3 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     cc8:	a8 e2       	ldi	r26, 0x28	; 40
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e8 e2       	ldi	r30, 0x28	; 40
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 77       	andi	r24, 0x7F	; 127
     cd4:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_2);
     cd6:	a8 e2       	ldi	r26, 0x28	; 40
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 e2       	ldi	r30, 0x28	; 40
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	80 62       	ori	r24, 0x20	; 32
     ce2:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     ce4:	a8 e2       	ldi	r26, 0x28	; 40
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 e2       	ldi	r30, 0x28	; 40
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8d 7f       	andi	r24, 0xFD	; 253
     cfe:	8c 93       	st	X, r24
     d00:	73 c0       	rjmp	.+230    	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 4 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d02:	a8 e2       	ldi	r26, 0x28	; 40
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 e2       	ldi	r30, 0x28	; 40
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8f 77       	andi	r24, 0x7F	; 127
     d0e:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8f 7d       	andi	r24, 0xDF	; 223
     d1c:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_4);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8d 7f       	andi	r24, 0xFD	; 253
     d38:	8c 93       	st	X, r24
     d3a:	56 c0       	rjmp	.+172    	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 5 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d3c:	a8 e2       	ldi	r26, 0x28	; 40
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e8 e2       	ldi	r30, 0x28	; 40
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8f 77       	andi	r24, 0x7F	; 127
     d48:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d4a:	a8 e2       	ldi	r26, 0x28	; 40
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e8 e2       	ldi	r30, 0x28	; 40
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7d       	andi	r24, 0xDF	; 223
     d56:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_3);
     d58:	a8 e2       	ldi	r26, 0x28	; 40
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e8 e2       	ldi	r30, 0x28	; 40
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     d66:	a8 e2       	ldi	r26, 0x28	; 40
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e8 e2       	ldi	r30, 0x28	; 40
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	82 60       	ori	r24, 0x02	; 2
     d72:	8c 93       	st	X, r24
     d74:	39 c0       	rjmp	.+114    	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 6 :
                PORTStepper1 &= ~(1 << PStepper1_1);
     d76:	a8 e2       	ldi	r26, 0x28	; 40
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e8 e2       	ldi	r30, 0x28	; 40
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8f 77       	andi	r24, 0x7F	; 127
     d82:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     d84:	a8 e2       	ldi	r26, 0x28	; 40
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e8 e2       	ldi	r30, 0x28	; 40
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 7d       	andi	r24, 0xDF	; 223
     d90:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     d92:	a8 e2       	ldi	r26, 0x28	; 40
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e8 e2       	ldi	r30, 0x28	; 40
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	87 7f       	andi	r24, 0xF7	; 247
     d9e:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     da0:	a8 e2       	ldi	r26, 0x28	; 40
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e8 e2       	ldi	r30, 0x28	; 40
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	8c 93       	st	X, r24
     dae:	1c c0       	rjmp	.+56     	; 0xde8 <steppermotor1Write+0x654>
                break;
            case 7 :
                PORTStepper1 |= (1 << PStepper1_1);
     db0:	a8 e2       	ldi	r26, 0x28	; 40
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e8 e2       	ldi	r30, 0x28	; 40
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_2);
     dbe:	a8 e2       	ldi	r26, 0x28	; 40
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e8 e2       	ldi	r30, 0x28	; 40
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	8c 93       	st	X, r24
                PORTStepper1 &= ~(1 << PStepper1_3);
     dcc:	a8 e2       	ldi	r26, 0x28	; 40
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e8 e2       	ldi	r30, 0x28	; 40
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	87 7f       	andi	r24, 0xF7	; 247
     dd8:	8c 93       	st	X, r24
                PORTStepper1 |= (1 << PStepper1_4);
     dda:	a8 e2       	ldi	r26, 0x28	; 40
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e2       	ldi	r30, 0x28	; 40
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	8c 93       	st	X, r24
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	aa e7       	ldi	r26, 0x7A	; 122
     dee:	b4 e4       	ldi	r27, 0x44	; 68
     df0:	8d 8b       	std	Y+21, r24	; 0x15
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	af 8b       	std	Y+23, r26	; 0x17
     df6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     df8:	6d 89       	ldd	r22, Y+21	; 0x15
     dfa:	7e 89       	ldd	r23, Y+22	; 0x16
     dfc:	8f 89       	ldd	r24, Y+23	; 0x17
     dfe:	98 8d       	ldd	r25, Y+24	; 0x18
     e00:	2b ea       	ldi	r18, 0xAB	; 171
     e02:	3a ea       	ldi	r19, 0xAA	; 170
     e04:	4a ea       	ldi	r20, 0xAA	; 170
     e06:	50 e4       	ldi	r21, 0x40	; 64
     e08:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	89 8b       	std	Y+17, r24	; 0x11
     e12:	9a 8b       	std	Y+18, r25	; 0x12
     e14:	ab 8b       	std	Y+19, r26	; 0x13
     e16:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e18:	69 89       	ldd	r22, Y+17	; 0x11
     e1a:	7a 89       	ldd	r23, Y+18	; 0x12
     e1c:	8b 89       	ldd	r24, Y+19	; 0x13
     e1e:	9c 89       	ldd	r25, Y+20	; 0x14
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f e3       	ldi	r21, 0x3F	; 63
     e28:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	1c f4       	brge	.+6      	; 0xe36 <steppermotor1Write+0x6a2>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	88 8b       	std	Y+16, r24	; 0x10
     e34:	91 c0       	rjmp	.+290    	; 0xf58 <steppermotor1Write+0x7c4>
	else if (__tmp > 255)
     e36:	69 89       	ldd	r22, Y+17	; 0x11
     e38:	7a 89       	ldd	r23, Y+18	; 0x12
     e3a:	8b 89       	ldd	r24, Y+19	; 0x13
     e3c:	9c 89       	ldd	r25, Y+20	; 0x14
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	53 e4       	ldi	r21, 0x43	; 67
     e46:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <steppermotor1Write+0x6bc>
     e4e:	7b c0       	rjmp	.+246    	; 0xf46 <steppermotor1Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
     e50:	6d 89       	ldd	r22, Y+21	; 0x15
     e52:	7e 89       	ldd	r23, Y+22	; 0x16
     e54:	8f 89       	ldd	r24, Y+23	; 0x17
     e56:	98 8d       	ldd	r25, Y+24	; 0x18
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	4a e7       	ldi	r20, 0x7A	; 122
     e5e:	54 e4       	ldi	r21, 0x44	; 68
     e60:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	8c 87       	std	Y+12, r24	; 0x0c
     e6a:	9d 87       	std	Y+13, r25	; 0x0d
     e6c:	ae 87       	std	Y+14, r26	; 0x0e
     e6e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6c 85       	ldd	r22, Y+12	; 0x0c
     e72:	7d 85       	ldd	r23, Y+13	; 0x0d
     e74:	8e 85       	ldd	r24, Y+14	; 0x0e
     e76:	9f 85       	ldd	r25, Y+15	; 0x0f
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	55 e4       	ldi	r21, 0x45	; 69
     e80:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	88 87       	std	Y+8, r24	; 0x08
     e8a:	99 87       	std	Y+9, r25	; 0x09
     e8c:	aa 87       	std	Y+10, r26	; 0x0a
     e8e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e90:	68 85       	ldd	r22, Y+8	; 0x08
     e92:	79 85       	ldd	r23, Y+9	; 0x09
     e94:	8a 85       	ldd	r24, Y+10	; 0x0a
     e96:	9b 85       	ldd	r25, Y+11	; 0x0b
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <steppermotor1Write+0x71e>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9f 83       	std	Y+7, r25	; 0x07
     eae:	8e 83       	std	Y+6, r24	; 0x06
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <steppermotor1Write+0x79c>
	else if (__tmp > 65535)
     eb2:	68 85       	ldd	r22, Y+8	; 0x08
     eb4:	79 85       	ldd	r23, Y+9	; 0x09
     eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <steppermotor1Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6c 85       	ldd	r22, Y+12	; 0x0c
     ecc:	7d 85       	ldd	r23, Y+13	; 0x0d
     ece:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9f 83       	std	Y+7, r25	; 0x07
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <steppermotor1Write+0x77e>
     ef4:	80 e9       	ldi	r24, 0x90	; 144
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	9d 83       	std	Y+5, r25	; 0x05
     efa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <steppermotor1Write+0x76c>
     f04:	9d 83       	std	Y+5, r25	; 0x05
     f06:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9f 83       	std	Y+7, r25	; 0x07
     f10:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <steppermotor1Write+0x760>
     f1a:	24 c0       	rjmp	.+72     	; 0xf64 <steppermotor1Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	68 85       	ldd	r22, Y+8	; 0x08
     f1e:	79 85       	ldd	r23, Y+9	; 0x09
     f20:	8a 85       	ldd	r24, Y+10	; 0x0a
     f22:	9b 85       	ldd	r25, Y+11	; 0x0b
     f24:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9f 83       	std	Y+7, r25	; 0x07
     f2e:	8e 83       	std	Y+6, r24	; 0x06
     f30:	8e 81       	ldd	r24, Y+6	; 0x06
     f32:	9f 81       	ldd	r25, Y+7	; 0x07
     f34:	9b 83       	std	Y+3, r25	; 0x03
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	9b 81       	ldd	r25, Y+3	; 0x03
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <steppermotor1Write+0x7a8>
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <steppermotor1Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f46:	69 89       	ldd	r22, Y+17	; 0x11
     f48:	7a 89       	ldd	r23, Y+18	; 0x12
     f4a:	8b 89       	ldd	r24, Y+19	; 0x13
     f4c:	9c 89       	ldd	r25, Y+20	; 0x14
     f4e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	88 8b       	std	Y+16, r24	; 0x10
     f58:	88 89       	ldd	r24, Y+16	; 0x10
     f5a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8a 95       	dec	r24
     f60:	f1 f7       	brne	.-4      	; 0xf5e <steppermotor1Write+0x7ca>
     f62:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
     f64:	89 a9       	ldd	r24, Y+49	; 0x31
     f66:	9a a9       	ldd	r25, Y+50	; 0x32
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9a ab       	std	Y+50, r25	; 0x32
     f6c:	89 ab       	std	Y+49, r24	; 0x31
     f6e:	89 a9       	ldd	r24, Y+49	; 0x31
     f70:	9a a9       	ldd	r25, Y+50	; 0x32
     f72:	18 16       	cp	r1, r24
     f74:	19 06       	cpc	r1, r25
     f76:	0c f4       	brge	.+2      	; 0xf7a <steppermotor1Write+0x7e6>
     f78:	17 ce       	rjmp	.-978    	; 0xba8 <steppermotor1Write+0x414>
                PORTStepper1 |= (1 << PStepper1_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
     f7a:	1e aa       	std	Y+54, r1	; 0x36
     f7c:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
     f7e:	8d a9       	ldd	r24, Y+53	; 0x35
     f80:	9e a9       	ldd	r25, Y+54	; 0x36
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	91 05       	cpc	r25, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <steppermotor1Write+0x7f6>
     f88:	0a ce       	rjmp	.-1004   	; 0xb9e <steppermotor1Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
     f8a:	ea 96       	adiw	r28, 0x3a	; 58
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <steppermotor2Write>:

void steppermotor2Write(int a)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	ea 97       	sbiw	r28, 0x3a	; 58
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	9e ab       	std	Y+54, r25	; 0x36
     fb2:	8d ab       	std	Y+53, r24	; 0x35
     fb4:	f1 c1       	rjmp	.+994    	; 0x1398 <steppermotor2Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9c ab       	std	Y+52, r25	; 0x34
     fbc:	8b ab       	std	Y+51, r24	; 0x33
     fbe:	e4 c1       	rjmp	.+968    	; 0x1388 <steppermotor2Write+0x3ec>
        {
            switch (i)
     fc0:	8b a9       	ldd	r24, Y+51	; 0x33
     fc2:	9c a9       	ldd	r25, Y+52	; 0x34
     fc4:	98 af       	std	Y+56, r25	; 0x38
     fc6:	8f ab       	std	Y+55, r24	; 0x37
     fc8:	8f a9       	ldd	r24, Y+55	; 0x37
     fca:	98 ad       	ldd	r25, Y+56	; 0x38
     fcc:	84 30       	cpi	r24, 0x04	; 4
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <steppermotor2Write+0x38>
     fd2:	87 c0       	rjmp	.+270    	; 0x10e2 <steppermotor2Write+0x146>
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	85 30       	cpi	r24, 0x05	; 5
     fda:	91 05       	cpc	r25, r1
     fdc:	94 f4       	brge	.+36     	; 0x1002 <steppermotor2Write+0x66>
     fde:	8f a9       	ldd	r24, Y+55	; 0x37
     fe0:	98 ad       	ldd	r25, Y+56	; 0x38
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <steppermotor2Write+0x4e>
     fe8:	42 c0       	rjmp	.+132    	; 0x106e <steppermotor2Write+0xd2>
     fea:	8f a9       	ldd	r24, Y+55	; 0x37
     fec:	98 ad       	ldd	r25, Y+56	; 0x38
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	0c f0       	brlt	.+2      	; 0xff6 <steppermotor2Write+0x5a>
     ff4:	59 c0       	rjmp	.+178    	; 0x10a8 <steppermotor2Write+0x10c>
     ff6:	8f a9       	ldd	r24, Y+55	; 0x37
     ff8:	98 ad       	ldd	r25, Y+56	; 0x38
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	d1 f0       	breq	.+52     	; 0x1034 <steppermotor2Write+0x98>
    1000:	00 c1       	rjmp	.+512    	; 0x1202 <steppermotor2Write+0x266>
    1002:	8f a9       	ldd	r24, Y+55	; 0x37
    1004:	98 ad       	ldd	r25, Y+56	; 0x38
    1006:	86 30       	cpi	r24, 0x06	; 6
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <steppermotor2Write+0x72>
    100c:	a4 c0       	rjmp	.+328    	; 0x1156 <steppermotor2Write+0x1ba>
    100e:	8f a9       	ldd	r24, Y+55	; 0x37
    1010:	98 ad       	ldd	r25, Y+56	; 0x38
    1012:	86 30       	cpi	r24, 0x06	; 6
    1014:	91 05       	cpc	r25, r1
    1016:	0c f4       	brge	.+2      	; 0x101a <steppermotor2Write+0x7e>
    1018:	81 c0       	rjmp	.+258    	; 0x111c <steppermotor2Write+0x180>
    101a:	8f a9       	ldd	r24, Y+55	; 0x37
    101c:	98 ad       	ldd	r25, Y+56	; 0x38
    101e:	87 30       	cpi	r24, 0x07	; 7
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <steppermotor2Write+0x8a>
    1024:	b5 c0       	rjmp	.+362    	; 0x1190 <steppermotor2Write+0x1f4>
    1026:	8f a9       	ldd	r24, Y+55	; 0x37
    1028:	98 ad       	ldd	r25, Y+56	; 0x38
    102a:	88 30       	cpi	r24, 0x08	; 8
    102c:	91 05       	cpc	r25, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <steppermotor2Write+0x96>
    1030:	cc c0       	rjmp	.+408    	; 0x11ca <steppermotor2Write+0x22e>
    1032:	e7 c0       	rjmp	.+462    	; 0x1202 <steppermotor2Write+0x266>
            {
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    1034:	a8 e2       	ldi	r26, 0x28	; 40
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e2       	ldi	r30, 0x28	; 40
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1042:	a8 e2       	ldi	r26, 0x28	; 40
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e8 e2       	ldi	r30, 0x28	; 40
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 7e       	andi	r24, 0xEF	; 239
    104e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    105e:	a8 e2       	ldi	r26, 0x28	; 40
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e2       	ldi	r30, 0x28	; 40
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	8c 93       	st	X, r24
    106c:	ca c0       	rjmp	.+404    	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 2 :
                PORTStepper2 |= (1 << PStepper2_1);
    106e:	a8 e2       	ldi	r26, 0x28	; 40
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e8 e2       	ldi	r30, 0x28	; 40
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    107c:	a8 e2       	ldi	r26, 0x28	; 40
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e8 e2       	ldi	r30, 0x28	; 40
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 61       	ori	r24, 0x10	; 16
    1088:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8b 7f       	andi	r24, 0xFB	; 251
    1096:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	8c 93       	st	X, r24
    10a6:	ad c0       	rjmp	.+346    	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    10a8:	a8 e2       	ldi	r26, 0x28	; 40
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e2       	ldi	r30, 0x28	; 40
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 7b       	andi	r24, 0xBF	; 191
    10b4:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    10b6:	a8 e2       	ldi	r26, 0x28	; 40
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e2       	ldi	r30, 0x28	; 40
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 61       	ori	r24, 0x10	; 16
    10c2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    10c4:	a8 e2       	ldi	r26, 0x28	; 40
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e2       	ldi	r30, 0x28	; 40
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8b 7f       	andi	r24, 0xFB	; 251
    10d0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	8c 93       	st	X, r24
    10e0:	90 c0       	rjmp	.+288    	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    10e2:	a8 e2       	ldi	r26, 0x28	; 40
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e8 e2       	ldi	r30, 0x28	; 40
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8f 7b       	andi	r24, 0xBF	; 191
    10ee:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    10f0:	a8 e2       	ldi	r26, 0x28	; 40
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e8 e2       	ldi	r30, 0x28	; 40
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 61       	ori	r24, 0x10	; 16
    10fc:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    10fe:	a8 e2       	ldi	r26, 0x28	; 40
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e8 e2       	ldi	r30, 0x28	; 40
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	84 60       	ori	r24, 0x04	; 4
    110a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	8c 93       	st	X, r24
    111a:	73 c0       	rjmp	.+230    	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    111c:	a8 e2       	ldi	r26, 0x28	; 40
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e8 e2       	ldi	r30, 0x28	; 40
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7b       	andi	r24, 0xBF	; 191
    1128:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    112a:	a8 e2       	ldi	r26, 0x28	; 40
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e2       	ldi	r30, 0x28	; 40
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8f 7e       	andi	r24, 0xEF	; 239
    1136:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1138:	a8 e2       	ldi	r26, 0x28	; 40
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e2       	ldi	r30, 0x28	; 40
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	84 60       	ori	r24, 0x04	; 4
    1144:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1146:	a8 e2       	ldi	r26, 0x28	; 40
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e2       	ldi	r30, 0x28	; 40
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	8c 93       	st	X, r24
    1154:	56 c0       	rjmp	.+172    	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1156:	a8 e2       	ldi	r26, 0x28	; 40
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e8 e2       	ldi	r30, 0x28	; 40
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8f 7b       	andi	r24, 0xBF	; 191
    1162:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1164:	a8 e2       	ldi	r26, 0x28	; 40
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 e2       	ldi	r30, 0x28	; 40
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1172:	a8 e2       	ldi	r26, 0x28	; 40
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e2       	ldi	r30, 0x28	; 40
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	84 60       	ori	r24, 0x04	; 4
    117e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    1180:	a8 e2       	ldi	r26, 0x28	; 40
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e2       	ldi	r30, 0x28	; 40
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	8c 93       	st	X, r24
    118e:	39 c0       	rjmp	.+114    	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 7 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1190:	a8 e2       	ldi	r26, 0x28	; 40
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e2       	ldi	r30, 0x28	; 40
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8f 7b       	andi	r24, 0xBF	; 191
    119c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    119e:	a8 e2       	ldi	r26, 0x28	; 40
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e2       	ldi	r30, 0x28	; 40
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 7e       	andi	r24, 0xEF	; 239
    11aa:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    11ac:	a8 e2       	ldi	r26, 0x28	; 40
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e8 e2       	ldi	r30, 0x28	; 40
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8b 7f       	andi	r24, 0xFB	; 251
    11b8:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    11ba:	a8 e2       	ldi	r26, 0x28	; 40
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e2       	ldi	r30, 0x28	; 40
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
    11c8:	1c c0       	rjmp	.+56     	; 0x1202 <steppermotor2Write+0x266>
                break;
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    11ca:	a8 e2       	ldi	r26, 0x28	; 40
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e2       	ldi	r30, 0x28	; 40
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	80 64       	ori	r24, 0x40	; 64
    11d6:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    11d8:	a8 e2       	ldi	r26, 0x28	; 40
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e8 e2       	ldi	r30, 0x28	; 40
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7e       	andi	r24, 0xEF	; 239
    11e4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    11e6:	a8 e2       	ldi	r26, 0x28	; 40
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e8 e2       	ldi	r30, 0x28	; 40
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8b 7f       	andi	r24, 0xFB	; 251
    11f2:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    11f4:	a8 e2       	ldi	r26, 0x28	; 40
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e2       	ldi	r30, 0x28	; 40
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	8c 93       	st	X, r24
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	aa e7       	ldi	r26, 0x7A	; 122
    1208:	b4 e4       	ldi	r27, 0x44	; 68
    120a:	8d a7       	std	Y+45, r24	; 0x2d
    120c:	9e a7       	std	Y+46, r25	; 0x2e
    120e:	af a7       	std	Y+47, r26	; 0x2f
    1210:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1212:	6d a5       	ldd	r22, Y+45	; 0x2d
    1214:	7e a5       	ldd	r23, Y+46	; 0x2e
    1216:	8f a5       	ldd	r24, Y+47	; 0x2f
    1218:	98 a9       	ldd	r25, Y+48	; 0x30
    121a:	2b ea       	ldi	r18, 0xAB	; 171
    121c:	3a ea       	ldi	r19, 0xAA	; 170
    121e:	4a ea       	ldi	r20, 0xAA	; 170
    1220:	50 e4       	ldi	r21, 0x40	; 64
    1222:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	89 a7       	std	Y+41, r24	; 0x29
    122c:	9a a7       	std	Y+42, r25	; 0x2a
    122e:	ab a7       	std	Y+43, r26	; 0x2b
    1230:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1232:	69 a5       	ldd	r22, Y+41	; 0x29
    1234:	7a a5       	ldd	r23, Y+42	; 0x2a
    1236:	8b a5       	ldd	r24, Y+43	; 0x2b
    1238:	9c a5       	ldd	r25, Y+44	; 0x2c
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    1246:	88 23       	and	r24, r24
    1248:	1c f4       	brge	.+6      	; 0x1250 <steppermotor2Write+0x2b4>
		__ticks = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	88 a7       	std	Y+40, r24	; 0x28
    124e:	91 c0       	rjmp	.+290    	; 0x1372 <steppermotor2Write+0x3d6>
	else if (__tmp > 255)
    1250:	69 a5       	ldd	r22, Y+41	; 0x29
    1252:	7a a5       	ldd	r23, Y+42	; 0x2a
    1254:	8b a5       	ldd	r24, Y+43	; 0x2b
    1256:	9c a5       	ldd	r25, Y+44	; 0x2c
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	53 e4       	ldi	r21, 0x43	; 67
    1260:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	0c f0       	brlt	.+2      	; 0x126a <steppermotor2Write+0x2ce>
    1268:	7b c0       	rjmp	.+246    	; 0x1360 <steppermotor2Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    126a:	6d a5       	ldd	r22, Y+45	; 0x2d
    126c:	7e a5       	ldd	r23, Y+46	; 0x2e
    126e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1270:	98 a9       	ldd	r25, Y+48	; 0x30
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	4a e7       	ldi	r20, 0x7A	; 122
    1278:	54 e4       	ldi	r21, 0x44	; 68
    127a:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	8c a3       	std	Y+36, r24	; 0x24
    1284:	9d a3       	std	Y+37, r25	; 0x25
    1286:	ae a3       	std	Y+38, r26	; 0x26
    1288:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	6c a1       	ldd	r22, Y+36	; 0x24
    128c:	7d a1       	ldd	r23, Y+37	; 0x25
    128e:	8e a1       	ldd	r24, Y+38	; 0x26
    1290:	9f a1       	ldd	r25, Y+39	; 0x27
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	55 e4       	ldi	r21, 0x45	; 69
    129a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	88 a3       	std	Y+32, r24	; 0x20
    12a4:	99 a3       	std	Y+33, r25	; 0x21
    12a6:	aa a3       	std	Y+34, r26	; 0x22
    12a8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    12aa:	68 a1       	ldd	r22, Y+32	; 0x20
    12ac:	79 a1       	ldd	r23, Y+33	; 0x21
    12ae:	8a a1       	ldd	r24, Y+34	; 0x22
    12b0:	9b a1       	ldd	r25, Y+35	; 0x23
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <steppermotor2Write+0x330>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9f 8f       	std	Y+31, r25	; 0x1f
    12c8:	8e 8f       	std	Y+30, r24	; 0x1e
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <steppermotor2Write+0x3ae>
	else if (__tmp > 65535)
    12cc:	68 a1       	ldd	r22, Y+32	; 0x20
    12ce:	79 a1       	ldd	r23, Y+33	; 0x21
    12d0:	8a a1       	ldd	r24, Y+34	; 0x22
    12d2:	9b a1       	ldd	r25, Y+35	; 0x23
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <steppermotor2Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	6c a1       	ldd	r22, Y+36	; 0x24
    12e6:	7d a1       	ldd	r23, Y+37	; 0x25
    12e8:	8e a1       	ldd	r24, Y+38	; 0x26
    12ea:	9f a1       	ldd	r25, Y+39	; 0x27
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9f 8f       	std	Y+31, r25	; 0x1f
    130a:	8e 8f       	std	Y+30, r24	; 0x1e
    130c:	0f c0       	rjmp	.+30     	; 0x132c <steppermotor2Write+0x390>
    130e:	80 e9       	ldi	r24, 0x90	; 144
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	9d 8f       	std	Y+29, r25	; 0x1d
    1314:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1316:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1318:	9d 8d       	ldd	r25, Y+29	; 0x1d
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <steppermotor2Write+0x37e>
    131e:	9d 8f       	std	Y+29, r25	; 0x1d
    1320:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1324:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9f 8f       	std	Y+31, r25	; 0x1f
    132a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <steppermotor2Write+0x372>
    1334:	24 c0       	rjmp	.+72     	; 0x137e <steppermotor2Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	68 a1       	ldd	r22, Y+32	; 0x20
    1338:	79 a1       	ldd	r23, Y+33	; 0x21
    133a:	8a a1       	ldd	r24, Y+34	; 0x22
    133c:	9b a1       	ldd	r25, Y+35	; 0x23
    133e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9f 8f       	std	Y+31, r25	; 0x1f
    1348:	8e 8f       	std	Y+30, r24	; 0x1e
    134a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    134c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    134e:	9b 8f       	std	Y+27, r25	; 0x1b
    1350:	8a 8f       	std	Y+26, r24	; 0x1a
    1352:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1354:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <steppermotor2Write+0x3ba>
    135a:	9b 8f       	std	Y+27, r25	; 0x1b
    135c:	8a 8f       	std	Y+26, r24	; 0x1a
    135e:	0f c0       	rjmp	.+30     	; 0x137e <steppermotor2Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1360:	69 a5       	ldd	r22, Y+41	; 0x29
    1362:	7a a5       	ldd	r23, Y+42	; 0x2a
    1364:	8b a5       	ldd	r24, Y+43	; 0x2b
    1366:	9c a5       	ldd	r25, Y+44	; 0x2c
    1368:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	88 a7       	std	Y+40, r24	; 0x28
    1372:	88 a5       	ldd	r24, Y+40	; 0x28
    1374:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1376:	89 8d       	ldd	r24, Y+25	; 0x19
    1378:	8a 95       	dec	r24
    137a:	f1 f7       	brne	.-4      	; 0x1378 <steppermotor2Write+0x3dc>
    137c:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor2Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    137e:	8b a9       	ldd	r24, Y+51	; 0x33
    1380:	9c a9       	ldd	r25, Y+52	; 0x34
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	9c ab       	std	Y+52, r25	; 0x34
    1386:	8b ab       	std	Y+51, r24	; 0x33
    1388:	8b a9       	ldd	r24, Y+51	; 0x33
    138a:	9c a9       	ldd	r25, Y+52	; 0x34
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	91 05       	cpc	r25, r1
    1390:	0c f4       	brge	.+2      	; 0x1394 <steppermotor2Write+0x3f8>
    1392:	16 ce       	rjmp	.-980    	; 0xfc0 <steppermotor2Write+0x24>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1394:	1e aa       	std	Y+54, r1	; 0x36
    1396:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor2Write(int a)
{
    while(a  == 1)
    1398:	8d a9       	ldd	r24, Y+53	; 0x35
    139a:	9e a9       	ldd	r25, Y+54	; 0x36
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <steppermotor2Write+0x408>
    13a2:	09 ce       	rjmp	.-1006   	; 0xfb6 <steppermotor2Write+0x1a>
    13a4:	f0 c1       	rjmp	.+992    	; 0x1786 <steppermotor2Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    13a6:	88 e0       	ldi	r24, 0x08	; 8
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9a ab       	std	Y+50, r25	; 0x32
    13ac:	89 ab       	std	Y+49, r24	; 0x31
    13ae:	e3 c1       	rjmp	.+966    	; 0x1776 <steppermotor2Write+0x7da>
        {
            switch (i)
    13b0:	89 a9       	ldd	r24, Y+49	; 0x31
    13b2:	9a a9       	ldd	r25, Y+50	; 0x32
    13b4:	9a af       	std	Y+58, r25	; 0x3a
    13b6:	89 af       	std	Y+57, r24	; 0x39
    13b8:	89 ad       	ldd	r24, Y+57	; 0x39
    13ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <steppermotor2Write+0x428>
    13c2:	a3 c0       	rjmp	.+326    	; 0x150a <steppermotor2Write+0x56e>
    13c4:	89 ad       	ldd	r24, Y+57	; 0x39
    13c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    13c8:	85 30       	cpi	r24, 0x05	; 5
    13ca:	91 05       	cpc	r25, r1
    13cc:	94 f4       	brge	.+36     	; 0x13f2 <steppermotor2Write+0x456>
    13ce:	89 ad       	ldd	r24, Y+57	; 0x39
    13d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	91 05       	cpc	r25, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <steppermotor2Write+0x43e>
    13d8:	5e c0       	rjmp	.+188    	; 0x1496 <steppermotor2Write+0x4fa>
    13da:	89 ad       	ldd	r24, Y+57	; 0x39
    13dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	0c f0       	brlt	.+2      	; 0x13e6 <steppermotor2Write+0x44a>
    13e4:	75 c0       	rjmp	.+234    	; 0x14d0 <steppermotor2Write+0x534>
    13e6:	89 ad       	ldd	r24, Y+57	; 0x39
    13e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	b1 f1       	breq	.+108    	; 0x145c <steppermotor2Write+0x4c0>
    13f0:	ff c0       	rjmp	.+510    	; 0x15f0 <steppermotor2Write+0x654>
    13f2:	89 ad       	ldd	r24, Y+57	; 0x39
    13f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    13f6:	86 30       	cpi	r24, 0x06	; 6
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <steppermotor2Write+0x462>
    13fc:	c0 c0       	rjmp	.+384    	; 0x157e <steppermotor2Write+0x5e2>
    13fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1400:	9a ad       	ldd	r25, Y+58	; 0x3a
    1402:	86 30       	cpi	r24, 0x06	; 6
    1404:	91 05       	cpc	r25, r1
    1406:	0c f4       	brge	.+2      	; 0x140a <steppermotor2Write+0x46e>
    1408:	9d c0       	rjmp	.+314    	; 0x1544 <steppermotor2Write+0x5a8>
    140a:	89 ad       	ldd	r24, Y+57	; 0x39
    140c:	9a ad       	ldd	r25, Y+58	; 0x3a
    140e:	87 30       	cpi	r24, 0x07	; 7
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <steppermotor2Write+0x47a>
    1414:	d1 c0       	rjmp	.+418    	; 0x15b8 <steppermotor2Write+0x61c>
    1416:	89 ad       	ldd	r24, Y+57	; 0x39
    1418:	9a ad       	ldd	r25, Y+58	; 0x3a
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	91 05       	cpc	r25, r1
    141e:	09 f0       	breq	.+2      	; 0x1422 <steppermotor2Write+0x486>
    1420:	e7 c0       	rjmp	.+462    	; 0x15f0 <steppermotor2Write+0x654>
            {
            case 8 :
                PORTStepper2 |= (1 << PStepper2_1);
    1422:	a8 e2       	ldi	r26, 0x28	; 40
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e8 e2       	ldi	r30, 0x28	; 40
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 64       	ori	r24, 0x40	; 64
    142e:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1430:	a8 e2       	ldi	r26, 0x28	; 40
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e8 e2       	ldi	r30, 0x28	; 40
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8f 7e       	andi	r24, 0xEF	; 239
    143c:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    143e:	a8 e2       	ldi	r26, 0x28	; 40
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e8 e2       	ldi	r30, 0x28	; 40
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8b 7f       	andi	r24, 0xFB	; 251
    144a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    144c:	a8 e2       	ldi	r26, 0x28	; 40
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e8 e2       	ldi	r30, 0x28	; 40
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8e 7f       	andi	r24, 0xFE	; 254
    1458:	8c 93       	st	X, r24
    145a:	ca c0       	rjmp	.+404    	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 1 :
                PORTStepper2 |= (1 << PStepper2_1);
    145c:	a8 e2       	ldi	r26, 0x28	; 40
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e8 e2       	ldi	r30, 0x28	; 40
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 64       	ori	r24, 0x40	; 64
    1468:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    146a:	a8 e2       	ldi	r26, 0x28	; 40
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e2       	ldi	r30, 0x28	; 40
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    1478:	a8 e2       	ldi	r26, 0x28	; 40
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e8 e2       	ldi	r30, 0x28	; 40
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8b 7f       	andi	r24, 0xFB	; 251
    1484:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1486:	a8 e2       	ldi	r26, 0x28	; 40
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e8 e2       	ldi	r30, 0x28	; 40
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	8c 93       	st	X, r24
    1494:	ad c0       	rjmp	.+346    	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 2 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1496:	a8 e2       	ldi	r26, 0x28	; 40
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e8 e2       	ldi	r30, 0x28	; 40
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 7b       	andi	r24, 0xBF	; 191
    14a2:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14a4:	a8 e2       	ldi	r26, 0x28	; 40
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e8 e2       	ldi	r30, 0x28	; 40
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	80 61       	ori	r24, 0x10	; 16
    14b0:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    14b2:	a8 e2       	ldi	r26, 0x28	; 40
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 e2       	ldi	r30, 0x28	; 40
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8b 7f       	andi	r24, 0xFB	; 251
    14be:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14c0:	a8 e2       	ldi	r26, 0x28	; 40
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e2       	ldi	r30, 0x28	; 40
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8e 7f       	andi	r24, 0xFE	; 254
    14cc:	8c 93       	st	X, r24
    14ce:	90 c0       	rjmp	.+288    	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 3 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    14d0:	a8 e2       	ldi	r26, 0x28	; 40
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e8 e2       	ldi	r30, 0x28	; 40
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8f 7b       	andi	r24, 0xBF	; 191
    14dc:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_2);
    14de:	a8 e2       	ldi	r26, 0x28	; 40
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e8 e2       	ldi	r30, 0x28	; 40
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 61       	ori	r24, 0x10	; 16
    14ea:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    14ec:	a8 e2       	ldi	r26, 0x28	; 40
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e8 e2       	ldi	r30, 0x28	; 40
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    14fa:	a8 e2       	ldi	r26, 0x28	; 40
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e2       	ldi	r30, 0x28	; 40
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	8c 93       	st	X, r24
    1508:	73 c0       	rjmp	.+230    	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 4 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    150a:	a8 e2       	ldi	r26, 0x28	; 40
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e8 e2       	ldi	r30, 0x28	; 40
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 7b       	andi	r24, 0xBF	; 191
    1516:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1518:	a8 e2       	ldi	r26, 0x28	; 40
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e8 e2       	ldi	r30, 0x28	; 40
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 7e       	andi	r24, 0xEF	; 239
    1524:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1526:	a8 e2       	ldi	r26, 0x28	; 40
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e8 e2       	ldi	r30, 0x28	; 40
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	84 60       	ori	r24, 0x04	; 4
    1532:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_4);
    1534:	a8 e2       	ldi	r26, 0x28	; 40
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e2       	ldi	r30, 0x28	; 40
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8e 7f       	andi	r24, 0xFE	; 254
    1540:	8c 93       	st	X, r24
    1542:	56 c0       	rjmp	.+172    	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 5 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    1544:	a8 e2       	ldi	r26, 0x28	; 40
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e2       	ldi	r30, 0x28	; 40
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8f 7b       	andi	r24, 0xBF	; 191
    1550:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    1552:	a8 e2       	ldi	r26, 0x28	; 40
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e2       	ldi	r30, 0x28	; 40
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7e       	andi	r24, 0xEF	; 239
    155e:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_3);
    1560:	a8 e2       	ldi	r26, 0x28	; 40
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e8 e2       	ldi	r30, 0x28	; 40
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	84 60       	ori	r24, 0x04	; 4
    156c:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    156e:	a8 e2       	ldi	r26, 0x28	; 40
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e8 e2       	ldi	r30, 0x28	; 40
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	81 60       	ori	r24, 0x01	; 1
    157a:	8c 93       	st	X, r24
    157c:	39 c0       	rjmp	.+114    	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 6 :
                PORTStepper2 &= ~(1 << PStepper2_1);
    157e:	a8 e2       	ldi	r26, 0x28	; 40
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e8 e2       	ldi	r30, 0x28	; 40
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7b       	andi	r24, 0xBF	; 191
    158a:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    158c:	a8 e2       	ldi	r26, 0x28	; 40
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e8 e2       	ldi	r30, 0x28	; 40
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8f 7e       	andi	r24, 0xEF	; 239
    1598:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    159a:	a8 e2       	ldi	r26, 0x28	; 40
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e8 e2       	ldi	r30, 0x28	; 40
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8b 7f       	andi	r24, 0xFB	; 251
    15a6:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15a8:	a8 e2       	ldi	r26, 0x28	; 40
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e2       	ldi	r30, 0x28	; 40
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	81 60       	ori	r24, 0x01	; 1
    15b4:	8c 93       	st	X, r24
    15b6:	1c c0       	rjmp	.+56     	; 0x15f0 <steppermotor2Write+0x654>
                break;
            case 7 :
                PORTStepper2 |= (1 << PStepper2_1);
    15b8:	a8 e2       	ldi	r26, 0x28	; 40
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e2       	ldi	r30, 0x28	; 40
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 64       	ori	r24, 0x40	; 64
    15c4:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_2);
    15c6:	a8 e2       	ldi	r26, 0x28	; 40
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e8 e2       	ldi	r30, 0x28	; 40
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 7e       	andi	r24, 0xEF	; 239
    15d2:	8c 93       	st	X, r24
                PORTStepper2 &= ~(1 << PStepper2_3);
    15d4:	a8 e2       	ldi	r26, 0x28	; 40
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e2       	ldi	r30, 0x28	; 40
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8b 7f       	andi	r24, 0xFB	; 251
    15e0:	8c 93       	st	X, r24
                PORTStepper2 |= (1 << PStepper2_4);
    15e2:	a8 e2       	ldi	r26, 0x28	; 40
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e2       	ldi	r30, 0x28	; 40
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	8c 93       	st	X, r24
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	aa e7       	ldi	r26, 0x7A	; 122
    15f6:	b4 e4       	ldi	r27, 0x44	; 68
    15f8:	8d 8b       	std	Y+21, r24	; 0x15
    15fa:	9e 8b       	std	Y+22, r25	; 0x16
    15fc:	af 8b       	std	Y+23, r26	; 0x17
    15fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1600:	6d 89       	ldd	r22, Y+21	; 0x15
    1602:	7e 89       	ldd	r23, Y+22	; 0x16
    1604:	8f 89       	ldd	r24, Y+23	; 0x17
    1606:	98 8d       	ldd	r25, Y+24	; 0x18
    1608:	2b ea       	ldi	r18, 0xAB	; 171
    160a:	3a ea       	ldi	r19, 0xAA	; 170
    160c:	4a ea       	ldi	r20, 0xAA	; 170
    160e:	50 e4       	ldi	r21, 0x40	; 64
    1610:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	89 8b       	std	Y+17, r24	; 0x11
    161a:	9a 8b       	std	Y+18, r25	; 0x12
    161c:	ab 8b       	std	Y+19, r26	; 0x13
    161e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1620:	69 89       	ldd	r22, Y+17	; 0x11
    1622:	7a 89       	ldd	r23, Y+18	; 0x12
    1624:	8b 89       	ldd	r24, Y+19	; 0x13
    1626:	9c 89       	ldd	r25, Y+20	; 0x14
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	1c f4       	brge	.+6      	; 0x163e <steppermotor2Write+0x6a2>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	88 8b       	std	Y+16, r24	; 0x10
    163c:	91 c0       	rjmp	.+290    	; 0x1760 <steppermotor2Write+0x7c4>
	else if (__tmp > 255)
    163e:	69 89       	ldd	r22, Y+17	; 0x11
    1640:	7a 89       	ldd	r23, Y+18	; 0x12
    1642:	8b 89       	ldd	r24, Y+19	; 0x13
    1644:	9c 89       	ldd	r25, Y+20	; 0x14
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	53 e4       	ldi	r21, 0x43	; 67
    164e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    1652:	18 16       	cp	r1, r24
    1654:	0c f0       	brlt	.+2      	; 0x1658 <steppermotor2Write+0x6bc>
    1656:	7b c0       	rjmp	.+246    	; 0x174e <steppermotor2Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1658:	6d 89       	ldd	r22, Y+21	; 0x15
    165a:	7e 89       	ldd	r23, Y+22	; 0x16
    165c:	8f 89       	ldd	r24, Y+23	; 0x17
    165e:	98 8d       	ldd	r25, Y+24	; 0x18
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	4a e7       	ldi	r20, 0x7A	; 122
    1666:	54 e4       	ldi	r21, 0x44	; 68
    1668:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8c 87       	std	Y+12, r24	; 0x0c
    1672:	9d 87       	std	Y+13, r25	; 0x0d
    1674:	ae 87       	std	Y+14, r26	; 0x0e
    1676:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	6c 85       	ldd	r22, Y+12	; 0x0c
    167a:	7d 85       	ldd	r23, Y+13	; 0x0d
    167c:	8e 85       	ldd	r24, Y+14	; 0x0e
    167e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a e7       	ldi	r20, 0x7A	; 122
    1686:	55 e4       	ldi	r21, 0x45	; 69
    1688:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	88 87       	std	Y+8, r24	; 0x08
    1692:	99 87       	std	Y+9, r25	; 0x09
    1694:	aa 87       	std	Y+10, r26	; 0x0a
    1696:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1698:	68 85       	ldd	r22, Y+8	; 0x08
    169a:	79 85       	ldd	r23, Y+9	; 0x09
    169c:	8a 85       	ldd	r24, Y+10	; 0x0a
    169e:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <steppermotor2Write+0x71e>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9f 83       	std	Y+7, r25	; 0x07
    16b6:	8e 83       	std	Y+6, r24	; 0x06
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <steppermotor2Write+0x79c>
	else if (__tmp > 65535)
    16ba:	68 85       	ldd	r22, Y+8	; 0x08
    16bc:	79 85       	ldd	r23, Y+9	; 0x09
    16be:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	4c f5       	brge	.+82     	; 0x1724 <steppermotor2Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    16d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    16d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9f 83       	std	Y+7, r25	; 0x07
    16f8:	8e 83       	std	Y+6, r24	; 0x06
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <steppermotor2Write+0x77e>
    16fc:	80 e9       	ldi	r24, 0x90	; 144
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	9d 83       	std	Y+5, r25	; 0x05
    1702:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <steppermotor2Write+0x76c>
    170c:	9d 83       	std	Y+5, r25	; 0x05
    170e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8e 81       	ldd	r24, Y+6	; 0x06
    1712:	9f 81       	ldd	r25, Y+7	; 0x07
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9f 83       	std	Y+7, r25	; 0x07
    1718:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <steppermotor2Write+0x760>
    1722:	24 c0       	rjmp	.+72     	; 0x176c <steppermotor2Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	68 85       	ldd	r22, Y+8	; 0x08
    1726:	79 85       	ldd	r23, Y+9	; 0x09
    1728:	8a 85       	ldd	r24, Y+10	; 0x0a
    172a:	9b 85       	ldd	r25, Y+11	; 0x0b
    172c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9f 83       	std	Y+7, r25	; 0x07
    1736:	8e 83       	std	Y+6, r24	; 0x06
    1738:	8e 81       	ldd	r24, Y+6	; 0x06
    173a:	9f 81       	ldd	r25, Y+7	; 0x07
    173c:	9b 83       	std	Y+3, r25	; 0x03
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	9b 81       	ldd	r25, Y+3	; 0x03
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <steppermotor2Write+0x7a8>
    1748:	9b 83       	std	Y+3, r25	; 0x03
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	0f c0       	rjmp	.+30     	; 0x176c <steppermotor2Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    174e:	69 89       	ldd	r22, Y+17	; 0x11
    1750:	7a 89       	ldd	r23, Y+18	; 0x12
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	88 8b       	std	Y+16, r24	; 0x10
    1760:	88 89       	ldd	r24, Y+16	; 0x10
    1762:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	8a 95       	dec	r24
    1768:	f1 f7       	brne	.-4      	; 0x1766 <steppermotor2Write+0x7ca>
    176a:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    176c:	89 a9       	ldd	r24, Y+49	; 0x31
    176e:	9a a9       	ldd	r25, Y+50	; 0x32
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9a ab       	std	Y+50, r25	; 0x32
    1774:	89 ab       	std	Y+49, r24	; 0x31
    1776:	89 a9       	ldd	r24, Y+49	; 0x31
    1778:	9a a9       	ldd	r25, Y+50	; 0x32
    177a:	18 16       	cp	r1, r24
    177c:	19 06       	cpc	r1, r25
    177e:	0c f4       	brge	.+2      	; 0x1782 <steppermotor2Write+0x7e6>
    1780:	17 ce       	rjmp	.-978    	; 0x13b0 <steppermotor2Write+0x414>
                PORTStepper2 |= (1 << PStepper2_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1782:	1e aa       	std	Y+54, r1	; 0x36
    1784:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    1786:	8d a9       	ldd	r24, Y+53	; 0x35
    1788:	9e a9       	ldd	r25, Y+54	; 0x36
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <steppermotor2Write+0x7f6>
    1790:	0a ce       	rjmp	.-1004   	; 0x13a6 <steppermotor2Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    1792:	ea 96       	adiw	r28, 0x3a	; 58
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <steppermotor3Write>:

void steppermotor3Write(int a)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	ea 97       	sbiw	r28, 0x3a	; 58
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	9e ab       	std	Y+54, r25	; 0x36
    17ba:	8d ab       	std	Y+53, r24	; 0x35
    17bc:	f1 c1       	rjmp	.+994    	; 0x1ba0 <steppermotor3Write+0x3fc>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c ab       	std	Y+52, r25	; 0x34
    17c4:	8b ab       	std	Y+51, r24	; 0x33
    17c6:	e4 c1       	rjmp	.+968    	; 0x1b90 <steppermotor3Write+0x3ec>
        {
            switch (i)
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	98 af       	std	Y+56, r25	; 0x38
    17ce:	8f ab       	std	Y+55, r24	; 0x37
    17d0:	8f a9       	ldd	r24, Y+55	; 0x37
    17d2:	98 ad       	ldd	r25, Y+56	; 0x38
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <steppermotor3Write+0x38>
    17da:	87 c0       	rjmp	.+270    	; 0x18ea <steppermotor3Write+0x146>
    17dc:	8f a9       	ldd	r24, Y+55	; 0x37
    17de:	98 ad       	ldd	r25, Y+56	; 0x38
    17e0:	85 30       	cpi	r24, 0x05	; 5
    17e2:	91 05       	cpc	r25, r1
    17e4:	94 f4       	brge	.+36     	; 0x180a <steppermotor3Write+0x66>
    17e6:	8f a9       	ldd	r24, Y+55	; 0x37
    17e8:	98 ad       	ldd	r25, Y+56	; 0x38
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <steppermotor3Write+0x4e>
    17f0:	42 c0       	rjmp	.+132    	; 0x1876 <steppermotor3Write+0xd2>
    17f2:	8f a9       	ldd	r24, Y+55	; 0x37
    17f4:	98 ad       	ldd	r25, Y+56	; 0x38
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	91 05       	cpc	r25, r1
    17fa:	0c f0       	brlt	.+2      	; 0x17fe <steppermotor3Write+0x5a>
    17fc:	59 c0       	rjmp	.+178    	; 0x18b0 <steppermotor3Write+0x10c>
    17fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1800:	98 ad       	ldd	r25, Y+56	; 0x38
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	d1 f0       	breq	.+52     	; 0x183c <steppermotor3Write+0x98>
    1808:	00 c1       	rjmp	.+512    	; 0x1a0a <steppermotor3Write+0x266>
    180a:	8f a9       	ldd	r24, Y+55	; 0x37
    180c:	98 ad       	ldd	r25, Y+56	; 0x38
    180e:	86 30       	cpi	r24, 0x06	; 6
    1810:	91 05       	cpc	r25, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <steppermotor3Write+0x72>
    1814:	a4 c0       	rjmp	.+328    	; 0x195e <steppermotor3Write+0x1ba>
    1816:	8f a9       	ldd	r24, Y+55	; 0x37
    1818:	98 ad       	ldd	r25, Y+56	; 0x38
    181a:	86 30       	cpi	r24, 0x06	; 6
    181c:	91 05       	cpc	r25, r1
    181e:	0c f4       	brge	.+2      	; 0x1822 <steppermotor3Write+0x7e>
    1820:	81 c0       	rjmp	.+258    	; 0x1924 <steppermotor3Write+0x180>
    1822:	8f a9       	ldd	r24, Y+55	; 0x37
    1824:	98 ad       	ldd	r25, Y+56	; 0x38
    1826:	87 30       	cpi	r24, 0x07	; 7
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <steppermotor3Write+0x8a>
    182c:	b5 c0       	rjmp	.+362    	; 0x1998 <steppermotor3Write+0x1f4>
    182e:	8f a9       	ldd	r24, Y+55	; 0x37
    1830:	98 ad       	ldd	r25, Y+56	; 0x38
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <steppermotor3Write+0x96>
    1838:	cc c0       	rjmp	.+408    	; 0x19d2 <steppermotor3Write+0x22e>
    183a:	e7 c0       	rjmp	.+462    	; 0x1a0a <steppermotor3Write+0x266>
            {
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    183c:	ab e0       	ldi	r26, 0x0B	; 11
    183e:	b1 e0       	ldi	r27, 0x01	; 1
    1840:	eb e0       	ldi	r30, 0x0B	; 11
    1842:	f1 e0       	ldi	r31, 0x01	; 1
    1844:	80 81       	ld	r24, Z
    1846:	80 68       	ori	r24, 0x80	; 128
    1848:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    184a:	ab e0       	ldi	r26, 0x0B	; 11
    184c:	b1 e0       	ldi	r27, 0x01	; 1
    184e:	eb e0       	ldi	r30, 0x0B	; 11
    1850:	f1 e0       	ldi	r31, 0x01	; 1
    1852:	80 81       	ld	r24, Z
    1854:	8f 7d       	andi	r24, 0xDF	; 223
    1856:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1858:	ab e0       	ldi	r26, 0x0B	; 11
    185a:	b1 e0       	ldi	r27, 0x01	; 1
    185c:	eb e0       	ldi	r30, 0x0B	; 11
    185e:	f1 e0       	ldi	r31, 0x01	; 1
    1860:	80 81       	ld	r24, Z
    1862:	87 7f       	andi	r24, 0xF7	; 247
    1864:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1866:	ab e0       	ldi	r26, 0x0B	; 11
    1868:	b1 e0       	ldi	r27, 0x01	; 1
    186a:	eb e0       	ldi	r30, 0x0B	; 11
    186c:	f1 e0       	ldi	r31, 0x01	; 1
    186e:	80 81       	ld	r24, Z
    1870:	8d 7f       	andi	r24, 0xFD	; 253
    1872:	8c 93       	st	X, r24
    1874:	ca c0       	rjmp	.+404    	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 2 :
                PORTStepper3 |= (1 << PStepper3_1);
    1876:	ab e0       	ldi	r26, 0x0B	; 11
    1878:	b1 e0       	ldi	r27, 0x01	; 1
    187a:	eb e0       	ldi	r30, 0x0B	; 11
    187c:	f1 e0       	ldi	r31, 0x01	; 1
    187e:	80 81       	ld	r24, Z
    1880:	80 68       	ori	r24, 0x80	; 128
    1882:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1884:	ab e0       	ldi	r26, 0x0B	; 11
    1886:	b1 e0       	ldi	r27, 0x01	; 1
    1888:	eb e0       	ldi	r30, 0x0B	; 11
    188a:	f1 e0       	ldi	r31, 0x01	; 1
    188c:	80 81       	ld	r24, Z
    188e:	80 62       	ori	r24, 0x20	; 32
    1890:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1892:	ab e0       	ldi	r26, 0x0B	; 11
    1894:	b1 e0       	ldi	r27, 0x01	; 1
    1896:	eb e0       	ldi	r30, 0x0B	; 11
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	80 81       	ld	r24, Z
    189c:	87 7f       	andi	r24, 0xF7	; 247
    189e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    18a0:	ab e0       	ldi	r26, 0x0B	; 11
    18a2:	b1 e0       	ldi	r27, 0x01	; 1
    18a4:	eb e0       	ldi	r30, 0x0B	; 11
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	80 81       	ld	r24, Z
    18aa:	8d 7f       	andi	r24, 0xFD	; 253
    18ac:	8c 93       	st	X, r24
    18ae:	ad c0       	rjmp	.+346    	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    18b0:	ab e0       	ldi	r26, 0x0B	; 11
    18b2:	b1 e0       	ldi	r27, 0x01	; 1
    18b4:	eb e0       	ldi	r30, 0x0B	; 11
    18b6:	f1 e0       	ldi	r31, 0x01	; 1
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    18be:	ab e0       	ldi	r26, 0x0B	; 11
    18c0:	b1 e0       	ldi	r27, 0x01	; 1
    18c2:	eb e0       	ldi	r30, 0x0B	; 11
    18c4:	f1 e0       	ldi	r31, 0x01	; 1
    18c6:	80 81       	ld	r24, Z
    18c8:	80 62       	ori	r24, 0x20	; 32
    18ca:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    18cc:	ab e0       	ldi	r26, 0x0B	; 11
    18ce:	b1 e0       	ldi	r27, 0x01	; 1
    18d0:	eb e0       	ldi	r30, 0x0B	; 11
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	80 81       	ld	r24, Z
    18d6:	87 7f       	andi	r24, 0xF7	; 247
    18d8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    18da:	ab e0       	ldi	r26, 0x0B	; 11
    18dc:	b1 e0       	ldi	r27, 0x01	; 1
    18de:	eb e0       	ldi	r30, 0x0B	; 11
    18e0:	f1 e0       	ldi	r31, 0x01	; 1
    18e2:	80 81       	ld	r24, Z
    18e4:	8d 7f       	andi	r24, 0xFD	; 253
    18e6:	8c 93       	st	X, r24
    18e8:	90 c0       	rjmp	.+288    	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    18ea:	ab e0       	ldi	r26, 0x0B	; 11
    18ec:	b1 e0       	ldi	r27, 0x01	; 1
    18ee:	eb e0       	ldi	r30, 0x0B	; 11
    18f0:	f1 e0       	ldi	r31, 0x01	; 1
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    18f8:	ab e0       	ldi	r26, 0x0B	; 11
    18fa:	b1 e0       	ldi	r27, 0x01	; 1
    18fc:	eb e0       	ldi	r30, 0x0B	; 11
    18fe:	f1 e0       	ldi	r31, 0x01	; 1
    1900:	80 81       	ld	r24, Z
    1902:	80 62       	ori	r24, 0x20	; 32
    1904:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1906:	ab e0       	ldi	r26, 0x0B	; 11
    1908:	b1 e0       	ldi	r27, 0x01	; 1
    190a:	eb e0       	ldi	r30, 0x0B	; 11
    190c:	f1 e0       	ldi	r31, 0x01	; 1
    190e:	80 81       	ld	r24, Z
    1910:	88 60       	ori	r24, 0x08	; 8
    1912:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1914:	ab e0       	ldi	r26, 0x0B	; 11
    1916:	b1 e0       	ldi	r27, 0x01	; 1
    1918:	eb e0       	ldi	r30, 0x0B	; 11
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	80 81       	ld	r24, Z
    191e:	8d 7f       	andi	r24, 0xFD	; 253
    1920:	8c 93       	st	X, r24
    1922:	73 c0       	rjmp	.+230    	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1924:	ab e0       	ldi	r26, 0x0B	; 11
    1926:	b1 e0       	ldi	r27, 0x01	; 1
    1928:	eb e0       	ldi	r30, 0x0B	; 11
    192a:	f1 e0       	ldi	r31, 0x01	; 1
    192c:	80 81       	ld	r24, Z
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1932:	ab e0       	ldi	r26, 0x0B	; 11
    1934:	b1 e0       	ldi	r27, 0x01	; 1
    1936:	eb e0       	ldi	r30, 0x0B	; 11
    1938:	f1 e0       	ldi	r31, 0x01	; 1
    193a:	80 81       	ld	r24, Z
    193c:	8f 7d       	andi	r24, 0xDF	; 223
    193e:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1940:	ab e0       	ldi	r26, 0x0B	; 11
    1942:	b1 e0       	ldi	r27, 0x01	; 1
    1944:	eb e0       	ldi	r30, 0x0B	; 11
    1946:	f1 e0       	ldi	r31, 0x01	; 1
    1948:	80 81       	ld	r24, Z
    194a:	88 60       	ori	r24, 0x08	; 8
    194c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    194e:	ab e0       	ldi	r26, 0x0B	; 11
    1950:	b1 e0       	ldi	r27, 0x01	; 1
    1952:	eb e0       	ldi	r30, 0x0B	; 11
    1954:	f1 e0       	ldi	r31, 0x01	; 1
    1956:	80 81       	ld	r24, Z
    1958:	8d 7f       	andi	r24, 0xFD	; 253
    195a:	8c 93       	st	X, r24
    195c:	56 c0       	rjmp	.+172    	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    195e:	ab e0       	ldi	r26, 0x0B	; 11
    1960:	b1 e0       	ldi	r27, 0x01	; 1
    1962:	eb e0       	ldi	r30, 0x0B	; 11
    1964:	f1 e0       	ldi	r31, 0x01	; 1
    1966:	80 81       	ld	r24, Z
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    196c:	ab e0       	ldi	r26, 0x0B	; 11
    196e:	b1 e0       	ldi	r27, 0x01	; 1
    1970:	eb e0       	ldi	r30, 0x0B	; 11
    1972:	f1 e0       	ldi	r31, 0x01	; 1
    1974:	80 81       	ld	r24, Z
    1976:	8f 7d       	andi	r24, 0xDF	; 223
    1978:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    197a:	ab e0       	ldi	r26, 0x0B	; 11
    197c:	b1 e0       	ldi	r27, 0x01	; 1
    197e:	eb e0       	ldi	r30, 0x0B	; 11
    1980:	f1 e0       	ldi	r31, 0x01	; 1
    1982:	80 81       	ld	r24, Z
    1984:	88 60       	ori	r24, 0x08	; 8
    1986:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1988:	ab e0       	ldi	r26, 0x0B	; 11
    198a:	b1 e0       	ldi	r27, 0x01	; 1
    198c:	eb e0       	ldi	r30, 0x0B	; 11
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	80 81       	ld	r24, Z
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	8c 93       	st	X, r24
    1996:	39 c0       	rjmp	.+114    	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 7 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1998:	ab e0       	ldi	r26, 0x0B	; 11
    199a:	b1 e0       	ldi	r27, 0x01	; 1
    199c:	eb e0       	ldi	r30, 0x0B	; 11
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	80 81       	ld	r24, Z
    19a2:	8f 77       	andi	r24, 0x7F	; 127
    19a4:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    19a6:	ab e0       	ldi	r26, 0x0B	; 11
    19a8:	b1 e0       	ldi	r27, 0x01	; 1
    19aa:	eb e0       	ldi	r30, 0x0B	; 11
    19ac:	f1 e0       	ldi	r31, 0x01	; 1
    19ae:	80 81       	ld	r24, Z
    19b0:	8f 7d       	andi	r24, 0xDF	; 223
    19b2:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    19b4:	ab e0       	ldi	r26, 0x0B	; 11
    19b6:	b1 e0       	ldi	r27, 0x01	; 1
    19b8:	eb e0       	ldi	r30, 0x0B	; 11
    19ba:	f1 e0       	ldi	r31, 0x01	; 1
    19bc:	80 81       	ld	r24, Z
    19be:	87 7f       	andi	r24, 0xF7	; 247
    19c0:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    19c2:	ab e0       	ldi	r26, 0x0B	; 11
    19c4:	b1 e0       	ldi	r27, 0x01	; 1
    19c6:	eb e0       	ldi	r30, 0x0B	; 11
    19c8:	f1 e0       	ldi	r31, 0x01	; 1
    19ca:	80 81       	ld	r24, Z
    19cc:	82 60       	ori	r24, 0x02	; 2
    19ce:	8c 93       	st	X, r24
    19d0:	1c c0       	rjmp	.+56     	; 0x1a0a <steppermotor3Write+0x266>
                break;
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    19d2:	ab e0       	ldi	r26, 0x0B	; 11
    19d4:	b1 e0       	ldi	r27, 0x01	; 1
    19d6:	eb e0       	ldi	r30, 0x0B	; 11
    19d8:	f1 e0       	ldi	r31, 0x01	; 1
    19da:	80 81       	ld	r24, Z
    19dc:	80 68       	ori	r24, 0x80	; 128
    19de:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    19e0:	ab e0       	ldi	r26, 0x0B	; 11
    19e2:	b1 e0       	ldi	r27, 0x01	; 1
    19e4:	eb e0       	ldi	r30, 0x0B	; 11
    19e6:	f1 e0       	ldi	r31, 0x01	; 1
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 7d       	andi	r24, 0xDF	; 223
    19ec:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    19ee:	ab e0       	ldi	r26, 0x0B	; 11
    19f0:	b1 e0       	ldi	r27, 0x01	; 1
    19f2:	eb e0       	ldi	r30, 0x0B	; 11
    19f4:	f1 e0       	ldi	r31, 0x01	; 1
    19f6:	80 81       	ld	r24, Z
    19f8:	87 7f       	andi	r24, 0xF7	; 247
    19fa:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    19fc:	ab e0       	ldi	r26, 0x0B	; 11
    19fe:	b1 e0       	ldi	r27, 0x01	; 1
    1a00:	eb e0       	ldi	r30, 0x0B	; 11
    1a02:	f1 e0       	ldi	r31, 0x01	; 1
    1a04:	80 81       	ld	r24, Z
    1a06:	82 60       	ori	r24, 0x02	; 2
    1a08:	8c 93       	st	X, r24
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	aa e7       	ldi	r26, 0x7A	; 122
    1a10:	b4 e4       	ldi	r27, 0x44	; 68
    1a12:	8d a7       	std	Y+45, r24	; 0x2d
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	af a7       	std	Y+47, r26	; 0x2f
    1a18:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a1a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a1c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a20:	98 a9       	ldd	r25, Y+48	; 0x30
    1a22:	2b ea       	ldi	r18, 0xAB	; 171
    1a24:	3a ea       	ldi	r19, 0xAA	; 170
    1a26:	4a ea       	ldi	r20, 0xAA	; 170
    1a28:	50 e4       	ldi	r21, 0x40	; 64
    1a2a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	89 a7       	std	Y+41, r24	; 0x29
    1a34:	9a a7       	std	Y+42, r25	; 0x2a
    1a36:	ab a7       	std	Y+43, r26	; 0x2b
    1a38:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a3a:	69 a5       	ldd	r22, Y+41	; 0x29
    1a3c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	1c f4       	brge	.+6      	; 0x1a58 <steppermotor3Write+0x2b4>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	88 a7       	std	Y+40, r24	; 0x28
    1a56:	91 c0       	rjmp	.+290    	; 0x1b7a <steppermotor3Write+0x3d6>
	else if (__tmp > 255)
    1a58:	69 a5       	ldd	r22, Y+41	; 0x29
    1a5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4f e7       	ldi	r20, 0x7F	; 127
    1a66:	53 e4       	ldi	r21, 0x43	; 67
    1a68:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	0c f0       	brlt	.+2      	; 0x1a72 <steppermotor3Write+0x2ce>
    1a70:	7b c0       	rjmp	.+246    	; 0x1b68 <steppermotor3Write+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1a72:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a74:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a78:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a e7       	ldi	r20, 0x7A	; 122
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8c a3       	std	Y+36, r24	; 0x24
    1a8c:	9d a3       	std	Y+37, r25	; 0x25
    1a8e:	ae a3       	std	Y+38, r26	; 0x26
    1a90:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	6c a1       	ldd	r22, Y+36	; 0x24
    1a94:	7d a1       	ldd	r23, Y+37	; 0x25
    1a96:	8e a1       	ldd	r24, Y+38	; 0x26
    1a98:	9f a1       	ldd	r25, Y+39	; 0x27
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4a e7       	ldi	r20, 0x7A	; 122
    1aa0:	55 e4       	ldi	r21, 0x45	; 69
    1aa2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	88 a3       	std	Y+32, r24	; 0x20
    1aac:	99 a3       	std	Y+33, r25	; 0x21
    1aae:	aa a3       	std	Y+34, r26	; 0x22
    1ab0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ab2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ab4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ab6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ab8:	9b a1       	ldd	r25, Y+35	; 0x23
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <steppermotor3Write+0x330>
		__ticks = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9f 8f       	std	Y+31, r25	; 0x1f
    1ad0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ad2:	3f c0       	rjmp	.+126    	; 0x1b52 <steppermotor3Write+0x3ae>
	else if (__tmp > 65535)
    1ad4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ad6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ad8:	8a a1       	ldd	r24, Y+34	; 0x22
    1ada:	9b a1       	ldd	r25, Y+35	; 0x23
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	4c f5       	brge	.+82     	; 0x1b3e <steppermotor3Write+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aec:	6c a1       	ldd	r22, Y+36	; 0x24
    1aee:	7d a1       	ldd	r23, Y+37	; 0x25
    1af0:	8e a1       	ldd	r24, Y+38	; 0x26
    1af2:	9f a1       	ldd	r25, Y+39	; 0x27
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	bc 01       	movw	r22, r24
    1b06:	cd 01       	movw	r24, r26
    1b08:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9f 8f       	std	Y+31, r25	; 0x1f
    1b12:	8e 8f       	std	Y+30, r24	; 0x1e
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <steppermotor3Write+0x390>
    1b16:	80 e9       	ldi	r24, 0x90	; 144
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	9d 8f       	std	Y+29, r25	; 0x1d
    1b1c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <steppermotor3Write+0x37e>
    1b26:	9d 8f       	std	Y+29, r25	; 0x1d
    1b28:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	9f 8f       	std	Y+31, r25	; 0x1f
    1b32:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <steppermotor3Write+0x372>
    1b3c:	24 c0       	rjmp	.+72     	; 0x1b86 <steppermotor3Write+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b40:	79 a1       	ldd	r23, Y+33	; 0x21
    1b42:	8a a1       	ldd	r24, Y+34	; 0x22
    1b44:	9b a1       	ldd	r25, Y+35	; 0x23
    1b46:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9f 8f       	std	Y+31, r25	; 0x1f
    1b50:	8e 8f       	std	Y+30, r24	; 0x1e
    1b52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b54:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b56:	9b 8f       	std	Y+27, r25	; 0x1b
    1b58:	8a 8f       	std	Y+26, r24	; 0x1a
    1b5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <steppermotor3Write+0x3ba>
    1b62:	9b 8f       	std	Y+27, r25	; 0x1b
    1b64:	8a 8f       	std	Y+26, r24	; 0x1a
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <steppermotor3Write+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b68:	69 a5       	ldd	r22, Y+41	; 0x29
    1b6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b70:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	88 a7       	std	Y+40, r24	; 0x28
    1b7a:	88 a5       	ldd	r24, Y+40	; 0x28
    1b7c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b7e:	89 8d       	ldd	r24, Y+25	; 0x19
    1b80:	8a 95       	dec	r24
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <steppermotor3Write+0x3dc>
    1b84:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor3Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1b86:	8b a9       	ldd	r24, Y+51	; 0x33
    1b88:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	9c ab       	std	Y+52, r25	; 0x34
    1b8e:	8b ab       	std	Y+51, r24	; 0x33
    1b90:	8b a9       	ldd	r24, Y+51	; 0x33
    1b92:	9c a9       	ldd	r25, Y+52	; 0x34
    1b94:	88 30       	cpi	r24, 0x08	; 8
    1b96:	91 05       	cpc	r25, r1
    1b98:	0c f4       	brge	.+2      	; 0x1b9c <steppermotor3Write+0x3f8>
    1b9a:	16 ce       	rjmp	.-980    	; 0x17c8 <steppermotor3Write+0x24>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1b9c:	1e aa       	std	Y+54, r1	; 0x36
    1b9e:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor3Write(int a)
{
    while(a  == 1)
    1ba0:	8d a9       	ldd	r24, Y+53	; 0x35
    1ba2:	9e a9       	ldd	r25, Y+54	; 0x36
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <steppermotor3Write+0x408>
    1baa:	09 ce       	rjmp	.-1006   	; 0x17be <steppermotor3Write+0x1a>
    1bac:	f0 c1       	rjmp	.+992    	; 0x1f8e <steppermotor3Write+0x7ea>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9a ab       	std	Y+50, r25	; 0x32
    1bb4:	89 ab       	std	Y+49, r24	; 0x31
    1bb6:	e3 c1       	rjmp	.+966    	; 0x1f7e <steppermotor3Write+0x7da>
        {
            switch (i)
    1bb8:	89 a9       	ldd	r24, Y+49	; 0x31
    1bba:	9a a9       	ldd	r25, Y+50	; 0x32
    1bbc:	9a af       	std	Y+58, r25	; 0x3a
    1bbe:	89 af       	std	Y+57, r24	; 0x39
    1bc0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <steppermotor3Write+0x428>
    1bca:	a3 c0       	rjmp	.+326    	; 0x1d12 <steppermotor3Write+0x56e>
    1bcc:	89 ad       	ldd	r24, Y+57	; 0x39
    1bce:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd0:	85 30       	cpi	r24, 0x05	; 5
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	94 f4       	brge	.+36     	; 0x1bfa <steppermotor3Write+0x456>
    1bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <steppermotor3Write+0x43e>
    1be0:	5e c0       	rjmp	.+188    	; 0x1c9e <steppermotor3Write+0x4fa>
    1be2:	89 ad       	ldd	r24, Y+57	; 0x39
    1be4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	0c f0       	brlt	.+2      	; 0x1bee <steppermotor3Write+0x44a>
    1bec:	75 c0       	rjmp	.+234    	; 0x1cd8 <steppermotor3Write+0x534>
    1bee:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	b1 f1       	breq	.+108    	; 0x1c64 <steppermotor3Write+0x4c0>
    1bf8:	ff c0       	rjmp	.+510    	; 0x1df8 <steppermotor3Write+0x654>
    1bfa:	89 ad       	ldd	r24, Y+57	; 0x39
    1bfc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bfe:	86 30       	cpi	r24, 0x06	; 6
    1c00:	91 05       	cpc	r25, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <steppermotor3Write+0x462>
    1c04:	c0 c0       	rjmp	.+384    	; 0x1d86 <steppermotor3Write+0x5e2>
    1c06:	89 ad       	ldd	r24, Y+57	; 0x39
    1c08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c0a:	86 30       	cpi	r24, 0x06	; 6
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	0c f4       	brge	.+2      	; 0x1c12 <steppermotor3Write+0x46e>
    1c10:	9d c0       	rjmp	.+314    	; 0x1d4c <steppermotor3Write+0x5a8>
    1c12:	89 ad       	ldd	r24, Y+57	; 0x39
    1c14:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c16:	87 30       	cpi	r24, 0x07	; 7
    1c18:	91 05       	cpc	r25, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <steppermotor3Write+0x47a>
    1c1c:	d1 c0       	rjmp	.+418    	; 0x1dc0 <steppermotor3Write+0x61c>
    1c1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c22:	88 30       	cpi	r24, 0x08	; 8
    1c24:	91 05       	cpc	r25, r1
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <steppermotor3Write+0x486>
    1c28:	e7 c0       	rjmp	.+462    	; 0x1df8 <steppermotor3Write+0x654>
            {
            case 8 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c2a:	ab e0       	ldi	r26, 0x0B	; 11
    1c2c:	b1 e0       	ldi	r27, 0x01	; 1
    1c2e:	eb e0       	ldi	r30, 0x0B	; 11
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	80 81       	ld	r24, Z
    1c34:	80 68       	ori	r24, 0x80	; 128
    1c36:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1c38:	ab e0       	ldi	r26, 0x0B	; 11
    1c3a:	b1 e0       	ldi	r27, 0x01	; 1
    1c3c:	eb e0       	ldi	r30, 0x0B	; 11
    1c3e:	f1 e0       	ldi	r31, 0x01	; 1
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 7d       	andi	r24, 0xDF	; 223
    1c44:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1c46:	ab e0       	ldi	r26, 0x0B	; 11
    1c48:	b1 e0       	ldi	r27, 0x01	; 1
    1c4a:	eb e0       	ldi	r30, 0x0B	; 11
    1c4c:	f1 e0       	ldi	r31, 0x01	; 1
    1c4e:	80 81       	ld	r24, Z
    1c50:	87 7f       	andi	r24, 0xF7	; 247
    1c52:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1c54:	ab e0       	ldi	r26, 0x0B	; 11
    1c56:	b1 e0       	ldi	r27, 0x01	; 1
    1c58:	eb e0       	ldi	r30, 0x0B	; 11
    1c5a:	f1 e0       	ldi	r31, 0x01	; 1
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8d 7f       	andi	r24, 0xFD	; 253
    1c60:	8c 93       	st	X, r24
    1c62:	ca c0       	rjmp	.+404    	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 1 :
                PORTStepper3 |= (1 << PStepper3_1);
    1c64:	ab e0       	ldi	r26, 0x0B	; 11
    1c66:	b1 e0       	ldi	r27, 0x01	; 1
    1c68:	eb e0       	ldi	r30, 0x0B	; 11
    1c6a:	f1 e0       	ldi	r31, 0x01	; 1
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 68       	ori	r24, 0x80	; 128
    1c70:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1c72:	ab e0       	ldi	r26, 0x0B	; 11
    1c74:	b1 e0       	ldi	r27, 0x01	; 1
    1c76:	eb e0       	ldi	r30, 0x0B	; 11
    1c78:	f1 e0       	ldi	r31, 0x01	; 1
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 62       	ori	r24, 0x20	; 32
    1c7e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1c80:	ab e0       	ldi	r26, 0x0B	; 11
    1c82:	b1 e0       	ldi	r27, 0x01	; 1
    1c84:	eb e0       	ldi	r30, 0x0B	; 11
    1c86:	f1 e0       	ldi	r31, 0x01	; 1
    1c88:	80 81       	ld	r24, Z
    1c8a:	87 7f       	andi	r24, 0xF7	; 247
    1c8c:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1c8e:	ab e0       	ldi	r26, 0x0B	; 11
    1c90:	b1 e0       	ldi	r27, 0x01	; 1
    1c92:	eb e0       	ldi	r30, 0x0B	; 11
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	80 81       	ld	r24, Z
    1c98:	8d 7f       	andi	r24, 0xFD	; 253
    1c9a:	8c 93       	st	X, r24
    1c9c:	ad c0       	rjmp	.+346    	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 2 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1c9e:	ab e0       	ldi	r26, 0x0B	; 11
    1ca0:	b1 e0       	ldi	r27, 0x01	; 1
    1ca2:	eb e0       	ldi	r30, 0x0B	; 11
    1ca4:	f1 e0       	ldi	r31, 0x01	; 1
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 77       	andi	r24, 0x7F	; 127
    1caa:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1cac:	ab e0       	ldi	r26, 0x0B	; 11
    1cae:	b1 e0       	ldi	r27, 0x01	; 1
    1cb0:	eb e0       	ldi	r30, 0x0B	; 11
    1cb2:	f1 e0       	ldi	r31, 0x01	; 1
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 62       	ori	r24, 0x20	; 32
    1cb8:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1cba:	ab e0       	ldi	r26, 0x0B	; 11
    1cbc:	b1 e0       	ldi	r27, 0x01	; 1
    1cbe:	eb e0       	ldi	r30, 0x0B	; 11
    1cc0:	f1 e0       	ldi	r31, 0x01	; 1
    1cc2:	80 81       	ld	r24, Z
    1cc4:	87 7f       	andi	r24, 0xF7	; 247
    1cc6:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1cc8:	ab e0       	ldi	r26, 0x0B	; 11
    1cca:	b1 e0       	ldi	r27, 0x01	; 1
    1ccc:	eb e0       	ldi	r30, 0x0B	; 11
    1cce:	f1 e0       	ldi	r31, 0x01	; 1
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8d 7f       	andi	r24, 0xFD	; 253
    1cd4:	8c 93       	st	X, r24
    1cd6:	90 c0       	rjmp	.+288    	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 3 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1cd8:	ab e0       	ldi	r26, 0x0B	; 11
    1cda:	b1 e0       	ldi	r27, 0x01	; 1
    1cdc:	eb e0       	ldi	r30, 0x0B	; 11
    1cde:	f1 e0       	ldi	r31, 0x01	; 1
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8f 77       	andi	r24, 0x7F	; 127
    1ce4:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_2);
    1ce6:	ab e0       	ldi	r26, 0x0B	; 11
    1ce8:	b1 e0       	ldi	r27, 0x01	; 1
    1cea:	eb e0       	ldi	r30, 0x0B	; 11
    1cec:	f1 e0       	ldi	r31, 0x01	; 1
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 62       	ori	r24, 0x20	; 32
    1cf2:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1cf4:	ab e0       	ldi	r26, 0x0B	; 11
    1cf6:	b1 e0       	ldi	r27, 0x01	; 1
    1cf8:	eb e0       	ldi	r30, 0x0B	; 11
    1cfa:	f1 e0       	ldi	r31, 0x01	; 1
    1cfc:	80 81       	ld	r24, Z
    1cfe:	88 60       	ori	r24, 0x08	; 8
    1d00:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d02:	ab e0       	ldi	r26, 0x0B	; 11
    1d04:	b1 e0       	ldi	r27, 0x01	; 1
    1d06:	eb e0       	ldi	r30, 0x0B	; 11
    1d08:	f1 e0       	ldi	r31, 0x01	; 1
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8d 7f       	andi	r24, 0xFD	; 253
    1d0e:	8c 93       	st	X, r24
    1d10:	73 c0       	rjmp	.+230    	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 4 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d12:	ab e0       	ldi	r26, 0x0B	; 11
    1d14:	b1 e0       	ldi	r27, 0x01	; 1
    1d16:	eb e0       	ldi	r30, 0x0B	; 11
    1d18:	f1 e0       	ldi	r31, 0x01	; 1
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 77       	andi	r24, 0x7F	; 127
    1d1e:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d20:	ab e0       	ldi	r26, 0x0B	; 11
    1d22:	b1 e0       	ldi	r27, 0x01	; 1
    1d24:	eb e0       	ldi	r30, 0x0B	; 11
    1d26:	f1 e0       	ldi	r31, 0x01	; 1
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d2e:	ab e0       	ldi	r26, 0x0B	; 11
    1d30:	b1 e0       	ldi	r27, 0x01	; 1
    1d32:	eb e0       	ldi	r30, 0x0B	; 11
    1d34:	f1 e0       	ldi	r31, 0x01	; 1
    1d36:	80 81       	ld	r24, Z
    1d38:	88 60       	ori	r24, 0x08	; 8
    1d3a:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_4);
    1d3c:	ab e0       	ldi	r26, 0x0B	; 11
    1d3e:	b1 e0       	ldi	r27, 0x01	; 1
    1d40:	eb e0       	ldi	r30, 0x0B	; 11
    1d42:	f1 e0       	ldi	r31, 0x01	; 1
    1d44:	80 81       	ld	r24, Z
    1d46:	8d 7f       	andi	r24, 0xFD	; 253
    1d48:	8c 93       	st	X, r24
    1d4a:	56 c0       	rjmp	.+172    	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 5 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d4c:	ab e0       	ldi	r26, 0x0B	; 11
    1d4e:	b1 e0       	ldi	r27, 0x01	; 1
    1d50:	eb e0       	ldi	r30, 0x0B	; 11
    1d52:	f1 e0       	ldi	r31, 0x01	; 1
    1d54:	80 81       	ld	r24, Z
    1d56:	8f 77       	andi	r24, 0x7F	; 127
    1d58:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d5a:	ab e0       	ldi	r26, 0x0B	; 11
    1d5c:	b1 e0       	ldi	r27, 0x01	; 1
    1d5e:	eb e0       	ldi	r30, 0x0B	; 11
    1d60:	f1 e0       	ldi	r31, 0x01	; 1
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 7d       	andi	r24, 0xDF	; 223
    1d66:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_3);
    1d68:	ab e0       	ldi	r26, 0x0B	; 11
    1d6a:	b1 e0       	ldi	r27, 0x01	; 1
    1d6c:	eb e0       	ldi	r30, 0x0B	; 11
    1d6e:	f1 e0       	ldi	r31, 0x01	; 1
    1d70:	80 81       	ld	r24, Z
    1d72:	88 60       	ori	r24, 0x08	; 8
    1d74:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1d76:	ab e0       	ldi	r26, 0x0B	; 11
    1d78:	b1 e0       	ldi	r27, 0x01	; 1
    1d7a:	eb e0       	ldi	r30, 0x0B	; 11
    1d7c:	f1 e0       	ldi	r31, 0x01	; 1
    1d7e:	80 81       	ld	r24, Z
    1d80:	82 60       	ori	r24, 0x02	; 2
    1d82:	8c 93       	st	X, r24
    1d84:	39 c0       	rjmp	.+114    	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 6 :
                PORTStepper3 &= ~(1 << PStepper3_1);
    1d86:	ab e0       	ldi	r26, 0x0B	; 11
    1d88:	b1 e0       	ldi	r27, 0x01	; 1
    1d8a:	eb e0       	ldi	r30, 0x0B	; 11
    1d8c:	f1 e0       	ldi	r31, 0x01	; 1
    1d8e:	80 81       	ld	r24, Z
    1d90:	8f 77       	andi	r24, 0x7F	; 127
    1d92:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1d94:	ab e0       	ldi	r26, 0x0B	; 11
    1d96:	b1 e0       	ldi	r27, 0x01	; 1
    1d98:	eb e0       	ldi	r30, 0x0B	; 11
    1d9a:	f1 e0       	ldi	r31, 0x01	; 1
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 7d       	andi	r24, 0xDF	; 223
    1da0:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1da2:	ab e0       	ldi	r26, 0x0B	; 11
    1da4:	b1 e0       	ldi	r27, 0x01	; 1
    1da6:	eb e0       	ldi	r30, 0x0B	; 11
    1da8:	f1 e0       	ldi	r31, 0x01	; 1
    1daa:	80 81       	ld	r24, Z
    1dac:	87 7f       	andi	r24, 0xF7	; 247
    1dae:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1db0:	ab e0       	ldi	r26, 0x0B	; 11
    1db2:	b1 e0       	ldi	r27, 0x01	; 1
    1db4:	eb e0       	ldi	r30, 0x0B	; 11
    1db6:	f1 e0       	ldi	r31, 0x01	; 1
    1db8:	80 81       	ld	r24, Z
    1dba:	82 60       	ori	r24, 0x02	; 2
    1dbc:	8c 93       	st	X, r24
    1dbe:	1c c0       	rjmp	.+56     	; 0x1df8 <steppermotor3Write+0x654>
                break;
            case 7 :
                PORTStepper3 |= (1 << PStepper3_1);
    1dc0:	ab e0       	ldi	r26, 0x0B	; 11
    1dc2:	b1 e0       	ldi	r27, 0x01	; 1
    1dc4:	eb e0       	ldi	r30, 0x0B	; 11
    1dc6:	f1 e0       	ldi	r31, 0x01	; 1
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 68       	ori	r24, 0x80	; 128
    1dcc:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_2);
    1dce:	ab e0       	ldi	r26, 0x0B	; 11
    1dd0:	b1 e0       	ldi	r27, 0x01	; 1
    1dd2:	eb e0       	ldi	r30, 0x0B	; 11
    1dd4:	f1 e0       	ldi	r31, 0x01	; 1
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 7d       	andi	r24, 0xDF	; 223
    1dda:	8c 93       	st	X, r24
                PORTStepper3 &= ~(1 << PStepper3_3);
    1ddc:	ab e0       	ldi	r26, 0x0B	; 11
    1dde:	b1 e0       	ldi	r27, 0x01	; 1
    1de0:	eb e0       	ldi	r30, 0x0B	; 11
    1de2:	f1 e0       	ldi	r31, 0x01	; 1
    1de4:	80 81       	ld	r24, Z
    1de6:	87 7f       	andi	r24, 0xF7	; 247
    1de8:	8c 93       	st	X, r24
                PORTStepper3 |= (1 << PStepper3_4);
    1dea:	ab e0       	ldi	r26, 0x0B	; 11
    1dec:	b1 e0       	ldi	r27, 0x01	; 1
    1dee:	eb e0       	ldi	r30, 0x0B	; 11
    1df0:	f1 e0       	ldi	r31, 0x01	; 1
    1df2:	80 81       	ld	r24, Z
    1df4:	82 60       	ori	r24, 0x02	; 2
    1df6:	8c 93       	st	X, r24
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	aa e7       	ldi	r26, 0x7A	; 122
    1dfe:	b4 e4       	ldi	r27, 0x44	; 68
    1e00:	8d 8b       	std	Y+21, r24	; 0x15
    1e02:	9e 8b       	std	Y+22, r25	; 0x16
    1e04:	af 8b       	std	Y+23, r26	; 0x17
    1e06:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	2b ea       	ldi	r18, 0xAB	; 171
    1e12:	3a ea       	ldi	r19, 0xAA	; 170
    1e14:	4a ea       	ldi	r20, 0xAA	; 170
    1e16:	50 e4       	ldi	r21, 0x40	; 64
    1e18:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	89 8b       	std	Y+17, r24	; 0x11
    1e22:	9a 8b       	std	Y+18, r25	; 0x12
    1e24:	ab 8b       	std	Y+19, r26	; 0x13
    1e26:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e28:	69 89       	ldd	r22, Y+17	; 0x11
    1e2a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	1c f4       	brge	.+6      	; 0x1e46 <steppermotor3Write+0x6a2>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	88 8b       	std	Y+16, r24	; 0x10
    1e44:	91 c0       	rjmp	.+290    	; 0x1f68 <steppermotor3Write+0x7c4>
	else if (__tmp > 255)
    1e46:	69 89       	ldd	r22, Y+17	; 0x11
    1e48:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	53 e4       	ldi	r21, 0x43	; 67
    1e56:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	0c f0       	brlt	.+2      	; 0x1e60 <steppermotor3Write+0x6bc>
    1e5e:	7b c0       	rjmp	.+246    	; 0x1f56 <steppermotor3Write+0x7b2>
	{
		_delay_ms(__us / 1000.0);
    1e60:	6d 89       	ldd	r22, Y+21	; 0x15
    1e62:	7e 89       	ldd	r23, Y+22	; 0x16
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8c 87       	std	Y+12, r24	; 0x0c
    1e7a:	9d 87       	std	Y+13, r25	; 0x0d
    1e7c:	ae 87       	std	Y+14, r26	; 0x0e
    1e7e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e82:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e86:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a e7       	ldi	r20, 0x7A	; 122
    1e8e:	55 e4       	ldi	r21, 0x45	; 69
    1e90:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	88 87       	std	Y+8, r24	; 0x08
    1e9a:	99 87       	std	Y+9, r25	; 0x09
    1e9c:	aa 87       	std	Y+10, r26	; 0x0a
    1e9e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ea0:	68 85       	ldd	r22, Y+8	; 0x08
    1ea2:	79 85       	ldd	r23, Y+9	; 0x09
    1ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <steppermotor3Write+0x71e>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9f 83       	std	Y+7, r25	; 0x07
    1ebe:	8e 83       	std	Y+6, r24	; 0x06
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <steppermotor3Write+0x79c>
	else if (__tmp > 65535)
    1ec2:	68 85       	ldd	r22, Y+8	; 0x08
    1ec4:	79 85       	ldd	r23, Y+9	; 0x09
    1ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <steppermotor3Write+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6c 85       	ldd	r22, Y+12	; 0x0c
    1edc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9f 83       	std	Y+7, r25	; 0x07
    1f00:	8e 83       	std	Y+6, r24	; 0x06
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <steppermotor3Write+0x77e>
    1f04:	80 e9       	ldi	r24, 0x90	; 144
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	9d 83       	std	Y+5, r25	; 0x05
    1f0a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <steppermotor3Write+0x76c>
    1f14:	9d 83       	std	Y+5, r25	; 0x05
    1f16:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9f 83       	std	Y+7, r25	; 0x07
    1f20:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8e 81       	ldd	r24, Y+6	; 0x06
    1f24:	9f 81       	ldd	r25, Y+7	; 0x07
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <steppermotor3Write+0x760>
    1f2a:	24 c0       	rjmp	.+72     	; 0x1f74 <steppermotor3Write+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	68 85       	ldd	r22, Y+8	; 0x08
    1f2e:	79 85       	ldd	r23, Y+9	; 0x09
    1f30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f34:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9f 83       	std	Y+7, r25	; 0x07
    1f3e:	8e 83       	std	Y+6, r24	; 0x06
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	9f 81       	ldd	r25, Y+7	; 0x07
    1f44:	9b 83       	std	Y+3, r25	; 0x03
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <steppermotor3Write+0x7a8>
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	8a 83       	std	Y+2, r24	; 0x02
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <steppermotor3Write+0x7d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f56:	69 89       	ldd	r22, Y+17	; 0x11
    1f58:	7a 89       	ldd	r23, Y+18	; 0x12
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	88 8b       	std	Y+16, r24	; 0x10
    1f68:	88 89       	ldd	r24, Y+16	; 0x10
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	8a 95       	dec	r24
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <steppermotor3Write+0x7ca>
    1f72:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    1f74:	89 a9       	ldd	r24, Y+49	; 0x31
    1f76:	9a a9       	ldd	r25, Y+50	; 0x32
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9a ab       	std	Y+50, r25	; 0x32
    1f7c:	89 ab       	std	Y+49, r24	; 0x31
    1f7e:	89 a9       	ldd	r24, Y+49	; 0x31
    1f80:	9a a9       	ldd	r25, Y+50	; 0x32
    1f82:	18 16       	cp	r1, r24
    1f84:	19 06       	cpc	r1, r25
    1f86:	0c f4       	brge	.+2      	; 0x1f8a <steppermotor3Write+0x7e6>
    1f88:	17 ce       	rjmp	.-978    	; 0x1bb8 <steppermotor3Write+0x414>
                PORTStepper3 |= (1 << PStepper3_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    1f8a:	1e aa       	std	Y+54, r1	; 0x36
    1f8c:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    1f8e:	8d a9       	ldd	r24, Y+53	; 0x35
    1f90:	9e a9       	ldd	r25, Y+54	; 0x36
    1f92:	82 30       	cpi	r24, 0x02	; 2
    1f94:	91 05       	cpc	r25, r1
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <steppermotor3Write+0x7f6>
    1f98:	0a ce       	rjmp	.-1004   	; 0x1bae <steppermotor3Write+0x40a>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    1f9a:	ea 96       	adiw	r28, 0x3a	; 58
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <steppermotor4Write>:

void steppermotor4Write(int a)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	ea 97       	sbiw	r28, 0x3a	; 58
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	9e ab       	std	Y+54, r25	; 0x36
    1fc2:	8d ab       	std	Y+53, r24	; 0x35
    1fc4:	f1 c1       	rjmp	.+994    	; 0x23a8 <__stack+0x1a9>
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9c ab       	std	Y+52, r25	; 0x34
    1fcc:	8b ab       	std	Y+51, r24	; 0x33
    1fce:	e4 c1       	rjmp	.+968    	; 0x2398 <__stack+0x199>
        {
            switch (i)
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	98 af       	std	Y+56, r25	; 0x38
    1fd6:	8f ab       	std	Y+55, r24	; 0x37
    1fd8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fda:	98 ad       	ldd	r25, Y+56	; 0x38
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <steppermotor4Write+0x38>
    1fe2:	87 c0       	rjmp	.+270    	; 0x20f2 <steppermotor4Write+0x146>
    1fe4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe8:	85 30       	cpi	r24, 0x05	; 5
    1fea:	91 05       	cpc	r25, r1
    1fec:	94 f4       	brge	.+36     	; 0x2012 <steppermotor4Write+0x66>
    1fee:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <steppermotor4Write+0x4e>
    1ff8:	42 c0       	rjmp	.+132    	; 0x207e <steppermotor4Write+0xd2>
    1ffa:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffe:	83 30       	cpi	r24, 0x03	; 3
    2000:	91 05       	cpc	r25, r1
    2002:	0c f0       	brlt	.+2      	; 0x2006 <steppermotor4Write+0x5a>
    2004:	59 c0       	rjmp	.+178    	; 0x20b8 <steppermotor4Write+0x10c>
    2006:	8f a9       	ldd	r24, Y+55	; 0x37
    2008:	98 ad       	ldd	r25, Y+56	; 0x38
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 05       	cpc	r25, r1
    200e:	d1 f0       	breq	.+52     	; 0x2044 <steppermotor4Write+0x98>
    2010:	00 c1       	rjmp	.+512    	; 0x2212 <__stack+0x13>
    2012:	8f a9       	ldd	r24, Y+55	; 0x37
    2014:	98 ad       	ldd	r25, Y+56	; 0x38
    2016:	86 30       	cpi	r24, 0x06	; 6
    2018:	91 05       	cpc	r25, r1
    201a:	09 f4       	brne	.+2      	; 0x201e <steppermotor4Write+0x72>
    201c:	a4 c0       	rjmp	.+328    	; 0x2166 <steppermotor4Write+0x1ba>
    201e:	8f a9       	ldd	r24, Y+55	; 0x37
    2020:	98 ad       	ldd	r25, Y+56	; 0x38
    2022:	86 30       	cpi	r24, 0x06	; 6
    2024:	91 05       	cpc	r25, r1
    2026:	0c f4       	brge	.+2      	; 0x202a <steppermotor4Write+0x7e>
    2028:	81 c0       	rjmp	.+258    	; 0x212c <steppermotor4Write+0x180>
    202a:	8f a9       	ldd	r24, Y+55	; 0x37
    202c:	98 ad       	ldd	r25, Y+56	; 0x38
    202e:	87 30       	cpi	r24, 0x07	; 7
    2030:	91 05       	cpc	r25, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <steppermotor4Write+0x8a>
    2034:	b5 c0       	rjmp	.+362    	; 0x21a0 <steppermotor4Write+0x1f4>
    2036:	8f a9       	ldd	r24, Y+55	; 0x37
    2038:	98 ad       	ldd	r25, Y+56	; 0x38
    203a:	88 30       	cpi	r24, 0x08	; 8
    203c:	91 05       	cpc	r25, r1
    203e:	09 f4       	brne	.+2      	; 0x2042 <steppermotor4Write+0x96>
    2040:	cc c0       	rjmp	.+408    	; 0x21da <steppermotor4Write+0x22e>
    2042:	e7 c0       	rjmp	.+462    	; 0x2212 <__stack+0x13>
            {
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    2044:	ab e0       	ldi	r26, 0x0B	; 11
    2046:	b1 e0       	ldi	r27, 0x01	; 1
    2048:	eb e0       	ldi	r30, 0x0B	; 11
    204a:	f1 e0       	ldi	r31, 0x01	; 1
    204c:	80 81       	ld	r24, Z
    204e:	80 64       	ori	r24, 0x40	; 64
    2050:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2052:	ab e0       	ldi	r26, 0x0B	; 11
    2054:	b1 e0       	ldi	r27, 0x01	; 1
    2056:	eb e0       	ldi	r30, 0x0B	; 11
    2058:	f1 e0       	ldi	r31, 0x01	; 1
    205a:	80 81       	ld	r24, Z
    205c:	8f 7e       	andi	r24, 0xEF	; 239
    205e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2060:	ab e0       	ldi	r26, 0x0B	; 11
    2062:	b1 e0       	ldi	r27, 0x01	; 1
    2064:	eb e0       	ldi	r30, 0x0B	; 11
    2066:	f1 e0       	ldi	r31, 0x01	; 1
    2068:	80 81       	ld	r24, Z
    206a:	8b 7f       	andi	r24, 0xFB	; 251
    206c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    206e:	ab e0       	ldi	r26, 0x0B	; 11
    2070:	b1 e0       	ldi	r27, 0x01	; 1
    2072:	eb e0       	ldi	r30, 0x0B	; 11
    2074:	f1 e0       	ldi	r31, 0x01	; 1
    2076:	80 81       	ld	r24, Z
    2078:	8e 7f       	andi	r24, 0xFE	; 254
    207a:	8c 93       	st	X, r24
    207c:	ca c0       	rjmp	.+404    	; 0x2212 <__stack+0x13>
                break;
            case 2 :
                PORTStepper4 |= (1 << PStepper4_1);
    207e:	ab e0       	ldi	r26, 0x0B	; 11
    2080:	b1 e0       	ldi	r27, 0x01	; 1
    2082:	eb e0       	ldi	r30, 0x0B	; 11
    2084:	f1 e0       	ldi	r31, 0x01	; 1
    2086:	80 81       	ld	r24, Z
    2088:	80 64       	ori	r24, 0x40	; 64
    208a:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    208c:	ab e0       	ldi	r26, 0x0B	; 11
    208e:	b1 e0       	ldi	r27, 0x01	; 1
    2090:	eb e0       	ldi	r30, 0x0B	; 11
    2092:	f1 e0       	ldi	r31, 0x01	; 1
    2094:	80 81       	ld	r24, Z
    2096:	80 61       	ori	r24, 0x10	; 16
    2098:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    209a:	ab e0       	ldi	r26, 0x0B	; 11
    209c:	b1 e0       	ldi	r27, 0x01	; 1
    209e:	eb e0       	ldi	r30, 0x0B	; 11
    20a0:	f1 e0       	ldi	r31, 0x01	; 1
    20a2:	80 81       	ld	r24, Z
    20a4:	8b 7f       	andi	r24, 0xFB	; 251
    20a6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    20a8:	ab e0       	ldi	r26, 0x0B	; 11
    20aa:	b1 e0       	ldi	r27, 0x01	; 1
    20ac:	eb e0       	ldi	r30, 0x0B	; 11
    20ae:	f1 e0       	ldi	r31, 0x01	; 1
    20b0:	80 81       	ld	r24, Z
    20b2:	8e 7f       	andi	r24, 0xFE	; 254
    20b4:	8c 93       	st	X, r24
    20b6:	ad c0       	rjmp	.+346    	; 0x2212 <__stack+0x13>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    20b8:	ab e0       	ldi	r26, 0x0B	; 11
    20ba:	b1 e0       	ldi	r27, 0x01	; 1
    20bc:	eb e0       	ldi	r30, 0x0B	; 11
    20be:	f1 e0       	ldi	r31, 0x01	; 1
    20c0:	80 81       	ld	r24, Z
    20c2:	8f 7b       	andi	r24, 0xBF	; 191
    20c4:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    20c6:	ab e0       	ldi	r26, 0x0B	; 11
    20c8:	b1 e0       	ldi	r27, 0x01	; 1
    20ca:	eb e0       	ldi	r30, 0x0B	; 11
    20cc:	f1 e0       	ldi	r31, 0x01	; 1
    20ce:	80 81       	ld	r24, Z
    20d0:	80 61       	ori	r24, 0x10	; 16
    20d2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    20d4:	ab e0       	ldi	r26, 0x0B	; 11
    20d6:	b1 e0       	ldi	r27, 0x01	; 1
    20d8:	eb e0       	ldi	r30, 0x0B	; 11
    20da:	f1 e0       	ldi	r31, 0x01	; 1
    20dc:	80 81       	ld	r24, Z
    20de:	8b 7f       	andi	r24, 0xFB	; 251
    20e0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    20e2:	ab e0       	ldi	r26, 0x0B	; 11
    20e4:	b1 e0       	ldi	r27, 0x01	; 1
    20e6:	eb e0       	ldi	r30, 0x0B	; 11
    20e8:	f1 e0       	ldi	r31, 0x01	; 1
    20ea:	80 81       	ld	r24, Z
    20ec:	8e 7f       	andi	r24, 0xFE	; 254
    20ee:	8c 93       	st	X, r24
    20f0:	90 c0       	rjmp	.+288    	; 0x2212 <__stack+0x13>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    20f2:	ab e0       	ldi	r26, 0x0B	; 11
    20f4:	b1 e0       	ldi	r27, 0x01	; 1
    20f6:	eb e0       	ldi	r30, 0x0B	; 11
    20f8:	f1 e0       	ldi	r31, 0x01	; 1
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 7b       	andi	r24, 0xBF	; 191
    20fe:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    2100:	ab e0       	ldi	r26, 0x0B	; 11
    2102:	b1 e0       	ldi	r27, 0x01	; 1
    2104:	eb e0       	ldi	r30, 0x0B	; 11
    2106:	f1 e0       	ldi	r31, 0x01	; 1
    2108:	80 81       	ld	r24, Z
    210a:	80 61       	ori	r24, 0x10	; 16
    210c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    210e:	ab e0       	ldi	r26, 0x0B	; 11
    2110:	b1 e0       	ldi	r27, 0x01	; 1
    2112:	eb e0       	ldi	r30, 0x0B	; 11
    2114:	f1 e0       	ldi	r31, 0x01	; 1
    2116:	80 81       	ld	r24, Z
    2118:	84 60       	ori	r24, 0x04	; 4
    211a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    211c:	ab e0       	ldi	r26, 0x0B	; 11
    211e:	b1 e0       	ldi	r27, 0x01	; 1
    2120:	eb e0       	ldi	r30, 0x0B	; 11
    2122:	f1 e0       	ldi	r31, 0x01	; 1
    2124:	80 81       	ld	r24, Z
    2126:	8e 7f       	andi	r24, 0xFE	; 254
    2128:	8c 93       	st	X, r24
    212a:	73 c0       	rjmp	.+230    	; 0x2212 <__stack+0x13>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    212c:	ab e0       	ldi	r26, 0x0B	; 11
    212e:	b1 e0       	ldi	r27, 0x01	; 1
    2130:	eb e0       	ldi	r30, 0x0B	; 11
    2132:	f1 e0       	ldi	r31, 0x01	; 1
    2134:	80 81       	ld	r24, Z
    2136:	8f 7b       	andi	r24, 0xBF	; 191
    2138:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    213a:	ab e0       	ldi	r26, 0x0B	; 11
    213c:	b1 e0       	ldi	r27, 0x01	; 1
    213e:	eb e0       	ldi	r30, 0x0B	; 11
    2140:	f1 e0       	ldi	r31, 0x01	; 1
    2142:	80 81       	ld	r24, Z
    2144:	8f 7e       	andi	r24, 0xEF	; 239
    2146:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2148:	ab e0       	ldi	r26, 0x0B	; 11
    214a:	b1 e0       	ldi	r27, 0x01	; 1
    214c:	eb e0       	ldi	r30, 0x0B	; 11
    214e:	f1 e0       	ldi	r31, 0x01	; 1
    2150:	80 81       	ld	r24, Z
    2152:	84 60       	ori	r24, 0x04	; 4
    2154:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2156:	ab e0       	ldi	r26, 0x0B	; 11
    2158:	b1 e0       	ldi	r27, 0x01	; 1
    215a:	eb e0       	ldi	r30, 0x0B	; 11
    215c:	f1 e0       	ldi	r31, 0x01	; 1
    215e:	80 81       	ld	r24, Z
    2160:	8e 7f       	andi	r24, 0xFE	; 254
    2162:	8c 93       	st	X, r24
    2164:	56 c0       	rjmp	.+172    	; 0x2212 <__stack+0x13>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2166:	ab e0       	ldi	r26, 0x0B	; 11
    2168:	b1 e0       	ldi	r27, 0x01	; 1
    216a:	eb e0       	ldi	r30, 0x0B	; 11
    216c:	f1 e0       	ldi	r31, 0x01	; 1
    216e:	80 81       	ld	r24, Z
    2170:	8f 7b       	andi	r24, 0xBF	; 191
    2172:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2174:	ab e0       	ldi	r26, 0x0B	; 11
    2176:	b1 e0       	ldi	r27, 0x01	; 1
    2178:	eb e0       	ldi	r30, 0x0B	; 11
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	80 81       	ld	r24, Z
    217e:	8f 7e       	andi	r24, 0xEF	; 239
    2180:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2182:	ab e0       	ldi	r26, 0x0B	; 11
    2184:	b1 e0       	ldi	r27, 0x01	; 1
    2186:	eb e0       	ldi	r30, 0x0B	; 11
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	80 81       	ld	r24, Z
    218c:	84 60       	ori	r24, 0x04	; 4
    218e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2190:	ab e0       	ldi	r26, 0x0B	; 11
    2192:	b1 e0       	ldi	r27, 0x01	; 1
    2194:	eb e0       	ldi	r30, 0x0B	; 11
    2196:	f1 e0       	ldi	r31, 0x01	; 1
    2198:	80 81       	ld	r24, Z
    219a:	81 60       	ori	r24, 0x01	; 1
    219c:	8c 93       	st	X, r24
    219e:	39 c0       	rjmp	.+114    	; 0x2212 <__stack+0x13>
                break;
            case 7 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    21a0:	ab e0       	ldi	r26, 0x0B	; 11
    21a2:	b1 e0       	ldi	r27, 0x01	; 1
    21a4:	eb e0       	ldi	r30, 0x0B	; 11
    21a6:	f1 e0       	ldi	r31, 0x01	; 1
    21a8:	80 81       	ld	r24, Z
    21aa:	8f 7b       	andi	r24, 0xBF	; 191
    21ac:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    21ae:	ab e0       	ldi	r26, 0x0B	; 11
    21b0:	b1 e0       	ldi	r27, 0x01	; 1
    21b2:	eb e0       	ldi	r30, 0x0B	; 11
    21b4:	f1 e0       	ldi	r31, 0x01	; 1
    21b6:	80 81       	ld	r24, Z
    21b8:	8f 7e       	andi	r24, 0xEF	; 239
    21ba:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    21bc:	ab e0       	ldi	r26, 0x0B	; 11
    21be:	b1 e0       	ldi	r27, 0x01	; 1
    21c0:	eb e0       	ldi	r30, 0x0B	; 11
    21c2:	f1 e0       	ldi	r31, 0x01	; 1
    21c4:	80 81       	ld	r24, Z
    21c6:	8b 7f       	andi	r24, 0xFB	; 251
    21c8:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    21ca:	ab e0       	ldi	r26, 0x0B	; 11
    21cc:	b1 e0       	ldi	r27, 0x01	; 1
    21ce:	eb e0       	ldi	r30, 0x0B	; 11
    21d0:	f1 e0       	ldi	r31, 0x01	; 1
    21d2:	80 81       	ld	r24, Z
    21d4:	81 60       	ori	r24, 0x01	; 1
    21d6:	8c 93       	st	X, r24
    21d8:	1c c0       	rjmp	.+56     	; 0x2212 <__stack+0x13>
                break;
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    21da:	ab e0       	ldi	r26, 0x0B	; 11
    21dc:	b1 e0       	ldi	r27, 0x01	; 1
    21de:	eb e0       	ldi	r30, 0x0B	; 11
    21e0:	f1 e0       	ldi	r31, 0x01	; 1
    21e2:	80 81       	ld	r24, Z
    21e4:	80 64       	ori	r24, 0x40	; 64
    21e6:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    21e8:	ab e0       	ldi	r26, 0x0B	; 11
    21ea:	b1 e0       	ldi	r27, 0x01	; 1
    21ec:	eb e0       	ldi	r30, 0x0B	; 11
    21ee:	f1 e0       	ldi	r31, 0x01	; 1
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 7e       	andi	r24, 0xEF	; 239
    21f4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    21f6:	ab e0       	ldi	r26, 0x0B	; 11
    21f8:	b1 e0       	ldi	r27, 0x01	; 1
    21fa:	eb e0       	ldi	r30, 0x0B	; 11
    21fc:	f1 e0       	ldi	r31, 0x01	; 1
    21fe:	80 81       	ld	r24, Z
    2200:	8b 7f       	andi	r24, 0xFB	; 251
    2202:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    2204:	ab e0       	ldi	r26, 0x0B	; 11
    2206:	b1 e0       	ldi	r27, 0x01	; 1
    2208:	eb e0       	ldi	r30, 0x0B	; 11
    220a:	f1 e0       	ldi	r31, 0x01	; 1
    220c:	80 81       	ld	r24, Z
    220e:	81 60       	ori	r24, 0x01	; 1
    2210:	8c 93       	st	X, r24
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	aa e7       	ldi	r26, 0x7A	; 122
    2218:	b4 e4       	ldi	r27, 0x44	; 68
    221a:	8d a7       	std	Y+45, r24	; 0x2d
    221c:	9e a7       	std	Y+46, r25	; 0x2e
    221e:	af a7       	std	Y+47, r26	; 0x2f
    2220:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2222:	6d a5       	ldd	r22, Y+45	; 0x2d
    2224:	7e a5       	ldd	r23, Y+46	; 0x2e
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	2b ea       	ldi	r18, 0xAB	; 171
    222c:	3a ea       	ldi	r19, 0xAA	; 170
    222e:	4a ea       	ldi	r20, 0xAA	; 170
    2230:	50 e4       	ldi	r21, 0x40	; 64
    2232:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	89 a7       	std	Y+41, r24	; 0x29
    223c:	9a a7       	std	Y+42, r25	; 0x2a
    223e:	ab a7       	std	Y+43, r26	; 0x2b
    2240:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2242:	69 a5       	ldd	r22, Y+41	; 0x29
    2244:	7a a5       	ldd	r23, Y+42	; 0x2a
    2246:	8b a5       	ldd	r24, Y+43	; 0x2b
    2248:	9c a5       	ldd	r25, Y+44	; 0x2c
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	1c f4       	brge	.+6      	; 0x2260 <__stack+0x61>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	88 a7       	std	Y+40, r24	; 0x28
    225e:	91 c0       	rjmp	.+290    	; 0x2382 <__stack+0x183>
	else if (__tmp > 255)
    2260:	69 a5       	ldd	r22, Y+41	; 0x29
    2262:	7a a5       	ldd	r23, Y+42	; 0x2a
    2264:	8b a5       	ldd	r24, Y+43	; 0x2b
    2266:	9c a5       	ldd	r25, Y+44	; 0x2c
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	53 e4       	ldi	r21, 0x43	; 67
    2270:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	0c f0       	brlt	.+2      	; 0x227a <__stack+0x7b>
    2278:	7b c0       	rjmp	.+246    	; 0x2370 <__stack+0x171>
	{
		_delay_ms(__us / 1000.0);
    227a:	6d a5       	ldd	r22, Y+45	; 0x2d
    227c:	7e a5       	ldd	r23, Y+46	; 0x2e
    227e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2280:	98 a9       	ldd	r25, Y+48	; 0x30
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	54 e4       	ldi	r21, 0x44	; 68
    228a:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8c a3       	std	Y+36, r24	; 0x24
    2294:	9d a3       	std	Y+37, r25	; 0x25
    2296:	ae a3       	std	Y+38, r26	; 0x26
    2298:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6c a1       	ldd	r22, Y+36	; 0x24
    229c:	7d a1       	ldd	r23, Y+37	; 0x25
    229e:	8e a1       	ldd	r24, Y+38	; 0x26
    22a0:	9f a1       	ldd	r25, Y+39	; 0x27
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a e7       	ldi	r20, 0x7A	; 122
    22a8:	55 e4       	ldi	r21, 0x45	; 69
    22aa:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	88 a3       	std	Y+32, r24	; 0x20
    22b4:	99 a3       	std	Y+33, r25	; 0x21
    22b6:	aa a3       	std	Y+34, r26	; 0x22
    22b8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22ba:	68 a1       	ldd	r22, Y+32	; 0x20
    22bc:	79 a1       	ldd	r23, Y+33	; 0x21
    22be:	8a a1       	ldd	r24, Y+34	; 0x22
    22c0:	9b a1       	ldd	r25, Y+35	; 0x23
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <__stack+0xdd>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9f 8f       	std	Y+31, r25	; 0x1f
    22d8:	8e 8f       	std	Y+30, r24	; 0x1e
    22da:	3f c0       	rjmp	.+126    	; 0x235a <__stack+0x15b>
	else if (__tmp > 65535)
    22dc:	68 a1       	ldd	r22, Y+32	; 0x20
    22de:	79 a1       	ldd	r23, Y+33	; 0x21
    22e0:	8a a1       	ldd	r24, Y+34	; 0x22
    22e2:	9b a1       	ldd	r25, Y+35	; 0x23
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <__stack+0x147>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6c a1       	ldd	r22, Y+36	; 0x24
    22f6:	7d a1       	ldd	r23, Y+37	; 0x25
    22f8:	8e a1       	ldd	r24, Y+38	; 0x26
    22fa:	9f a1       	ldd	r25, Y+39	; 0x27
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9f 8f       	std	Y+31, r25	; 0x1f
    231a:	8e 8f       	std	Y+30, r24	; 0x1e
    231c:	0f c0       	rjmp	.+30     	; 0x233c <__stack+0x13d>
    231e:	80 e9       	ldi	r24, 0x90	; 144
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	9d 8f       	std	Y+29, r25	; 0x1d
    2324:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2326:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2328:	9d 8d       	ldd	r25, Y+29	; 0x1d
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <__stack+0x12b>
    232e:	9d 8f       	std	Y+29, r25	; 0x1d
    2330:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2334:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9f 8f       	std	Y+31, r25	; 0x1f
    233a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    233e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <__stack+0x11f>
    2344:	24 c0       	rjmp	.+72     	; 0x238e <__stack+0x18f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	68 a1       	ldd	r22, Y+32	; 0x20
    2348:	79 a1       	ldd	r23, Y+33	; 0x21
    234a:	8a a1       	ldd	r24, Y+34	; 0x22
    234c:	9b a1       	ldd	r25, Y+35	; 0x23
    234e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9f 8f       	std	Y+31, r25	; 0x1f
    2358:	8e 8f       	std	Y+30, r24	; 0x1e
    235a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    235c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    235e:	9b 8f       	std	Y+27, r25	; 0x1b
    2360:	8a 8f       	std	Y+26, r24	; 0x1a
    2362:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2364:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <__stack+0x167>
    236a:	9b 8f       	std	Y+27, r25	; 0x1b
    236c:	8a 8f       	std	Y+26, r24	; 0x1a
    236e:	0f c0       	rjmp	.+30     	; 0x238e <__stack+0x18f>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2370:	69 a5       	ldd	r22, Y+41	; 0x29
    2372:	7a a5       	ldd	r23, Y+42	; 0x2a
    2374:	8b a5       	ldd	r24, Y+43	; 0x2b
    2376:	9c a5       	ldd	r25, Y+44	; 0x2c
    2378:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	88 a7       	std	Y+40, r24	; 0x28
    2382:	88 a5       	ldd	r24, Y+40	; 0x28
    2384:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2386:	89 8d       	ldd	r24, Y+25	; 0x19
    2388:	8a 95       	dec	r24
    238a:	f1 f7       	brne	.-4      	; 0x2388 <__stack+0x189>
    238c:	89 8f       	std	Y+25, r24	; 0x19
void steppermotor4Write(int a)
{
    while(a  == 1)
    {
        int i;
        for(i = 1; i < 8; i=i+1)
    238e:	8b a9       	ldd	r24, Y+51	; 0x33
    2390:	9c a9       	ldd	r25, Y+52	; 0x34
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	9c ab       	std	Y+52, r25	; 0x34
    2396:	8b ab       	std	Y+51, r24	; 0x33
    2398:	8b a9       	ldd	r24, Y+51	; 0x33
    239a:	9c a9       	ldd	r25, Y+52	; 0x34
    239c:	88 30       	cpi	r24, 0x08	; 8
    239e:	91 05       	cpc	r25, r1
    23a0:	0c f4       	brge	.+2      	; 0x23a4 <__stack+0x1a5>
    23a2:	16 ce       	rjmp	.-980    	; 0x1fd0 <steppermotor4Write+0x24>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    23a4:	1e aa       	std	Y+54, r1	; 0x36
    23a6:	1d aa       	std	Y+53, r1	; 0x35
    }
}

void steppermotor4Write(int a)
{
    while(a  == 1)
    23a8:	8d a9       	ldd	r24, Y+53	; 0x35
    23aa:	9e a9       	ldd	r25, Y+54	; 0x36
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <__stack+0x1b5>
    23b2:	09 ce       	rjmp	.-1006   	; 0x1fc6 <steppermotor4Write+0x1a>
    23b4:	f0 c1       	rjmp	.+992    	; 0x2796 <__stack+0x597>
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    23b6:	88 e0       	ldi	r24, 0x08	; 8
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9a ab       	std	Y+50, r25	; 0x32
    23bc:	89 ab       	std	Y+49, r24	; 0x31
    23be:	e3 c1       	rjmp	.+966    	; 0x2786 <__stack+0x587>
        {
            switch (i)
    23c0:	89 a9       	ldd	r24, Y+49	; 0x31
    23c2:	9a a9       	ldd	r25, Y+50	; 0x32
    23c4:	9a af       	std	Y+58, r25	; 0x3a
    23c6:	89 af       	std	Y+57, r24	; 0x39
    23c8:	89 ad       	ldd	r24, Y+57	; 0x39
    23ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	91 05       	cpc	r25, r1
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <__stack+0x1d5>
    23d2:	a3 c0       	rjmp	.+326    	; 0x251a <__stack+0x31b>
    23d4:	89 ad       	ldd	r24, Y+57	; 0x39
    23d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    23d8:	85 30       	cpi	r24, 0x05	; 5
    23da:	91 05       	cpc	r25, r1
    23dc:	94 f4       	brge	.+36     	; 0x2402 <__stack+0x203>
    23de:	89 ad       	ldd	r24, Y+57	; 0x39
    23e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	91 05       	cpc	r25, r1
    23e6:	09 f4       	brne	.+2      	; 0x23ea <__stack+0x1eb>
    23e8:	5e c0       	rjmp	.+188    	; 0x24a6 <__stack+0x2a7>
    23ea:	89 ad       	ldd	r24, Y+57	; 0x39
    23ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ee:	83 30       	cpi	r24, 0x03	; 3
    23f0:	91 05       	cpc	r25, r1
    23f2:	0c f0       	brlt	.+2      	; 0x23f6 <__stack+0x1f7>
    23f4:	75 c0       	rjmp	.+234    	; 0x24e0 <__stack+0x2e1>
    23f6:	89 ad       	ldd	r24, Y+57	; 0x39
    23f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	91 05       	cpc	r25, r1
    23fe:	b1 f1       	breq	.+108    	; 0x246c <__stack+0x26d>
    2400:	ff c0       	rjmp	.+510    	; 0x2600 <__stack+0x401>
    2402:	89 ad       	ldd	r24, Y+57	; 0x39
    2404:	9a ad       	ldd	r25, Y+58	; 0x3a
    2406:	86 30       	cpi	r24, 0x06	; 6
    2408:	91 05       	cpc	r25, r1
    240a:	09 f4       	brne	.+2      	; 0x240e <__stack+0x20f>
    240c:	c0 c0       	rjmp	.+384    	; 0x258e <__stack+0x38f>
    240e:	89 ad       	ldd	r24, Y+57	; 0x39
    2410:	9a ad       	ldd	r25, Y+58	; 0x3a
    2412:	86 30       	cpi	r24, 0x06	; 6
    2414:	91 05       	cpc	r25, r1
    2416:	0c f4       	brge	.+2      	; 0x241a <__stack+0x21b>
    2418:	9d c0       	rjmp	.+314    	; 0x2554 <__stack+0x355>
    241a:	89 ad       	ldd	r24, Y+57	; 0x39
    241c:	9a ad       	ldd	r25, Y+58	; 0x3a
    241e:	87 30       	cpi	r24, 0x07	; 7
    2420:	91 05       	cpc	r25, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <__stack+0x227>
    2424:	d1 c0       	rjmp	.+418    	; 0x25c8 <__stack+0x3c9>
    2426:	89 ad       	ldd	r24, Y+57	; 0x39
    2428:	9a ad       	ldd	r25, Y+58	; 0x3a
    242a:	88 30       	cpi	r24, 0x08	; 8
    242c:	91 05       	cpc	r25, r1
    242e:	09 f0       	breq	.+2      	; 0x2432 <__stack+0x233>
    2430:	e7 c0       	rjmp	.+462    	; 0x2600 <__stack+0x401>
            {
            case 8 :
                PORTStepper4 |= (1 << PStepper4_1);
    2432:	ab e0       	ldi	r26, 0x0B	; 11
    2434:	b1 e0       	ldi	r27, 0x01	; 1
    2436:	eb e0       	ldi	r30, 0x0B	; 11
    2438:	f1 e0       	ldi	r31, 0x01	; 1
    243a:	80 81       	ld	r24, Z
    243c:	80 64       	ori	r24, 0x40	; 64
    243e:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2440:	ab e0       	ldi	r26, 0x0B	; 11
    2442:	b1 e0       	ldi	r27, 0x01	; 1
    2444:	eb e0       	ldi	r30, 0x0B	; 11
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	80 81       	ld	r24, Z
    244a:	8f 7e       	andi	r24, 0xEF	; 239
    244c:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    244e:	ab e0       	ldi	r26, 0x0B	; 11
    2450:	b1 e0       	ldi	r27, 0x01	; 1
    2452:	eb e0       	ldi	r30, 0x0B	; 11
    2454:	f1 e0       	ldi	r31, 0x01	; 1
    2456:	80 81       	ld	r24, Z
    2458:	8b 7f       	andi	r24, 0xFB	; 251
    245a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    245c:	ab e0       	ldi	r26, 0x0B	; 11
    245e:	b1 e0       	ldi	r27, 0x01	; 1
    2460:	eb e0       	ldi	r30, 0x0B	; 11
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	80 81       	ld	r24, Z
    2466:	8e 7f       	andi	r24, 0xFE	; 254
    2468:	8c 93       	st	X, r24
    246a:	ca c0       	rjmp	.+404    	; 0x2600 <__stack+0x401>
                break;
            case 1 :
                PORTStepper4 |= (1 << PStepper4_1);
    246c:	ab e0       	ldi	r26, 0x0B	; 11
    246e:	b1 e0       	ldi	r27, 0x01	; 1
    2470:	eb e0       	ldi	r30, 0x0B	; 11
    2472:	f1 e0       	ldi	r31, 0x01	; 1
    2474:	80 81       	ld	r24, Z
    2476:	80 64       	ori	r24, 0x40	; 64
    2478:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    247a:	ab e0       	ldi	r26, 0x0B	; 11
    247c:	b1 e0       	ldi	r27, 0x01	; 1
    247e:	eb e0       	ldi	r30, 0x0B	; 11
    2480:	f1 e0       	ldi	r31, 0x01	; 1
    2482:	80 81       	ld	r24, Z
    2484:	80 61       	ori	r24, 0x10	; 16
    2486:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    2488:	ab e0       	ldi	r26, 0x0B	; 11
    248a:	b1 e0       	ldi	r27, 0x01	; 1
    248c:	eb e0       	ldi	r30, 0x0B	; 11
    248e:	f1 e0       	ldi	r31, 0x01	; 1
    2490:	80 81       	ld	r24, Z
    2492:	8b 7f       	andi	r24, 0xFB	; 251
    2494:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2496:	ab e0       	ldi	r26, 0x0B	; 11
    2498:	b1 e0       	ldi	r27, 0x01	; 1
    249a:	eb e0       	ldi	r30, 0x0B	; 11
    249c:	f1 e0       	ldi	r31, 0x01	; 1
    249e:	80 81       	ld	r24, Z
    24a0:	8e 7f       	andi	r24, 0xFE	; 254
    24a2:	8c 93       	st	X, r24
    24a4:	ad c0       	rjmp	.+346    	; 0x2600 <__stack+0x401>
                break;
            case 2 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    24a6:	ab e0       	ldi	r26, 0x0B	; 11
    24a8:	b1 e0       	ldi	r27, 0x01	; 1
    24aa:	eb e0       	ldi	r30, 0x0B	; 11
    24ac:	f1 e0       	ldi	r31, 0x01	; 1
    24ae:	80 81       	ld	r24, Z
    24b0:	8f 7b       	andi	r24, 0xBF	; 191
    24b2:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24b4:	ab e0       	ldi	r26, 0x0B	; 11
    24b6:	b1 e0       	ldi	r27, 0x01	; 1
    24b8:	eb e0       	ldi	r30, 0x0B	; 11
    24ba:	f1 e0       	ldi	r31, 0x01	; 1
    24bc:	80 81       	ld	r24, Z
    24be:	80 61       	ori	r24, 0x10	; 16
    24c0:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    24c2:	ab e0       	ldi	r26, 0x0B	; 11
    24c4:	b1 e0       	ldi	r27, 0x01	; 1
    24c6:	eb e0       	ldi	r30, 0x0B	; 11
    24c8:	f1 e0       	ldi	r31, 0x01	; 1
    24ca:	80 81       	ld	r24, Z
    24cc:	8b 7f       	andi	r24, 0xFB	; 251
    24ce:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    24d0:	ab e0       	ldi	r26, 0x0B	; 11
    24d2:	b1 e0       	ldi	r27, 0x01	; 1
    24d4:	eb e0       	ldi	r30, 0x0B	; 11
    24d6:	f1 e0       	ldi	r31, 0x01	; 1
    24d8:	80 81       	ld	r24, Z
    24da:	8e 7f       	andi	r24, 0xFE	; 254
    24dc:	8c 93       	st	X, r24
    24de:	90 c0       	rjmp	.+288    	; 0x2600 <__stack+0x401>
                break;
            case 3 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    24e0:	ab e0       	ldi	r26, 0x0B	; 11
    24e2:	b1 e0       	ldi	r27, 0x01	; 1
    24e4:	eb e0       	ldi	r30, 0x0B	; 11
    24e6:	f1 e0       	ldi	r31, 0x01	; 1
    24e8:	80 81       	ld	r24, Z
    24ea:	8f 7b       	andi	r24, 0xBF	; 191
    24ec:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_2);
    24ee:	ab e0       	ldi	r26, 0x0B	; 11
    24f0:	b1 e0       	ldi	r27, 0x01	; 1
    24f2:	eb e0       	ldi	r30, 0x0B	; 11
    24f4:	f1 e0       	ldi	r31, 0x01	; 1
    24f6:	80 81       	ld	r24, Z
    24f8:	80 61       	ori	r24, 0x10	; 16
    24fa:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    24fc:	ab e0       	ldi	r26, 0x0B	; 11
    24fe:	b1 e0       	ldi	r27, 0x01	; 1
    2500:	eb e0       	ldi	r30, 0x0B	; 11
    2502:	f1 e0       	ldi	r31, 0x01	; 1
    2504:	80 81       	ld	r24, Z
    2506:	84 60       	ori	r24, 0x04	; 4
    2508:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    250a:	ab e0       	ldi	r26, 0x0B	; 11
    250c:	b1 e0       	ldi	r27, 0x01	; 1
    250e:	eb e0       	ldi	r30, 0x0B	; 11
    2510:	f1 e0       	ldi	r31, 0x01	; 1
    2512:	80 81       	ld	r24, Z
    2514:	8e 7f       	andi	r24, 0xFE	; 254
    2516:	8c 93       	st	X, r24
    2518:	73 c0       	rjmp	.+230    	; 0x2600 <__stack+0x401>
                break;
            case 4 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    251a:	ab e0       	ldi	r26, 0x0B	; 11
    251c:	b1 e0       	ldi	r27, 0x01	; 1
    251e:	eb e0       	ldi	r30, 0x0B	; 11
    2520:	f1 e0       	ldi	r31, 0x01	; 1
    2522:	80 81       	ld	r24, Z
    2524:	8f 7b       	andi	r24, 0xBF	; 191
    2526:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2528:	ab e0       	ldi	r26, 0x0B	; 11
    252a:	b1 e0       	ldi	r27, 0x01	; 1
    252c:	eb e0       	ldi	r30, 0x0B	; 11
    252e:	f1 e0       	ldi	r31, 0x01	; 1
    2530:	80 81       	ld	r24, Z
    2532:	8f 7e       	andi	r24, 0xEF	; 239
    2534:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2536:	ab e0       	ldi	r26, 0x0B	; 11
    2538:	b1 e0       	ldi	r27, 0x01	; 1
    253a:	eb e0       	ldi	r30, 0x0B	; 11
    253c:	f1 e0       	ldi	r31, 0x01	; 1
    253e:	80 81       	ld	r24, Z
    2540:	84 60       	ori	r24, 0x04	; 4
    2542:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_4);
    2544:	ab e0       	ldi	r26, 0x0B	; 11
    2546:	b1 e0       	ldi	r27, 0x01	; 1
    2548:	eb e0       	ldi	r30, 0x0B	; 11
    254a:	f1 e0       	ldi	r31, 0x01	; 1
    254c:	80 81       	ld	r24, Z
    254e:	8e 7f       	andi	r24, 0xFE	; 254
    2550:	8c 93       	st	X, r24
    2552:	56 c0       	rjmp	.+172    	; 0x2600 <__stack+0x401>
                break;
            case 5 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    2554:	ab e0       	ldi	r26, 0x0B	; 11
    2556:	b1 e0       	ldi	r27, 0x01	; 1
    2558:	eb e0       	ldi	r30, 0x0B	; 11
    255a:	f1 e0       	ldi	r31, 0x01	; 1
    255c:	80 81       	ld	r24, Z
    255e:	8f 7b       	andi	r24, 0xBF	; 191
    2560:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    2562:	ab e0       	ldi	r26, 0x0B	; 11
    2564:	b1 e0       	ldi	r27, 0x01	; 1
    2566:	eb e0       	ldi	r30, 0x0B	; 11
    2568:	f1 e0       	ldi	r31, 0x01	; 1
    256a:	80 81       	ld	r24, Z
    256c:	8f 7e       	andi	r24, 0xEF	; 239
    256e:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_3);
    2570:	ab e0       	ldi	r26, 0x0B	; 11
    2572:	b1 e0       	ldi	r27, 0x01	; 1
    2574:	eb e0       	ldi	r30, 0x0B	; 11
    2576:	f1 e0       	ldi	r31, 0x01	; 1
    2578:	80 81       	ld	r24, Z
    257a:	84 60       	ori	r24, 0x04	; 4
    257c:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    257e:	ab e0       	ldi	r26, 0x0B	; 11
    2580:	b1 e0       	ldi	r27, 0x01	; 1
    2582:	eb e0       	ldi	r30, 0x0B	; 11
    2584:	f1 e0       	ldi	r31, 0x01	; 1
    2586:	80 81       	ld	r24, Z
    2588:	81 60       	ori	r24, 0x01	; 1
    258a:	8c 93       	st	X, r24
    258c:	39 c0       	rjmp	.+114    	; 0x2600 <__stack+0x401>
                break;
            case 6 :
                PORTStepper4 &= ~(1 << PStepper4_1);
    258e:	ab e0       	ldi	r26, 0x0B	; 11
    2590:	b1 e0       	ldi	r27, 0x01	; 1
    2592:	eb e0       	ldi	r30, 0x0B	; 11
    2594:	f1 e0       	ldi	r31, 0x01	; 1
    2596:	80 81       	ld	r24, Z
    2598:	8f 7b       	andi	r24, 0xBF	; 191
    259a:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    259c:	ab e0       	ldi	r26, 0x0B	; 11
    259e:	b1 e0       	ldi	r27, 0x01	; 1
    25a0:	eb e0       	ldi	r30, 0x0B	; 11
    25a2:	f1 e0       	ldi	r31, 0x01	; 1
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 7e       	andi	r24, 0xEF	; 239
    25a8:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    25aa:	ab e0       	ldi	r26, 0x0B	; 11
    25ac:	b1 e0       	ldi	r27, 0x01	; 1
    25ae:	eb e0       	ldi	r30, 0x0B	; 11
    25b0:	f1 e0       	ldi	r31, 0x01	; 1
    25b2:	80 81       	ld	r24, Z
    25b4:	8b 7f       	andi	r24, 0xFB	; 251
    25b6:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25b8:	ab e0       	ldi	r26, 0x0B	; 11
    25ba:	b1 e0       	ldi	r27, 0x01	; 1
    25bc:	eb e0       	ldi	r30, 0x0B	; 11
    25be:	f1 e0       	ldi	r31, 0x01	; 1
    25c0:	80 81       	ld	r24, Z
    25c2:	81 60       	ori	r24, 0x01	; 1
    25c4:	8c 93       	st	X, r24
    25c6:	1c c0       	rjmp	.+56     	; 0x2600 <__stack+0x401>
                break;
            case 7 :
                PORTStepper4 |= (1 << PStepper4_1);
    25c8:	ab e0       	ldi	r26, 0x0B	; 11
    25ca:	b1 e0       	ldi	r27, 0x01	; 1
    25cc:	eb e0       	ldi	r30, 0x0B	; 11
    25ce:	f1 e0       	ldi	r31, 0x01	; 1
    25d0:	80 81       	ld	r24, Z
    25d2:	80 64       	ori	r24, 0x40	; 64
    25d4:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_2);
    25d6:	ab e0       	ldi	r26, 0x0B	; 11
    25d8:	b1 e0       	ldi	r27, 0x01	; 1
    25da:	eb e0       	ldi	r30, 0x0B	; 11
    25dc:	f1 e0       	ldi	r31, 0x01	; 1
    25de:	80 81       	ld	r24, Z
    25e0:	8f 7e       	andi	r24, 0xEF	; 239
    25e2:	8c 93       	st	X, r24
                PORTStepper4 &= ~(1 << PStepper4_3);
    25e4:	ab e0       	ldi	r26, 0x0B	; 11
    25e6:	b1 e0       	ldi	r27, 0x01	; 1
    25e8:	eb e0       	ldi	r30, 0x0B	; 11
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	80 81       	ld	r24, Z
    25ee:	8b 7f       	andi	r24, 0xFB	; 251
    25f0:	8c 93       	st	X, r24
                PORTStepper4 |= (1 << PStepper4_4);
    25f2:	ab e0       	ldi	r26, 0x0B	; 11
    25f4:	b1 e0       	ldi	r27, 0x01	; 1
    25f6:	eb e0       	ldi	r30, 0x0B	; 11
    25f8:	f1 e0       	ldi	r31, 0x01	; 1
    25fa:	80 81       	ld	r24, Z
    25fc:	81 60       	ori	r24, 0x01	; 1
    25fe:	8c 93       	st	X, r24
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	aa e7       	ldi	r26, 0x7A	; 122
    2606:	b4 e4       	ldi	r27, 0x44	; 68
    2608:	8d 8b       	std	Y+21, r24	; 0x15
    260a:	9e 8b       	std	Y+22, r25	; 0x16
    260c:	af 8b       	std	Y+23, r26	; 0x17
    260e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	2b ea       	ldi	r18, 0xAB	; 171
    261a:	3a ea       	ldi	r19, 0xAA	; 170
    261c:	4a ea       	ldi	r20, 0xAA	; 170
    261e:	50 e4       	ldi	r21, 0x40	; 64
    2620:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	89 8b       	std	Y+17, r24	; 0x11
    262a:	9a 8b       	std	Y+18, r25	; 0x12
    262c:	ab 8b       	std	Y+19, r26	; 0x13
    262e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2630:	69 89       	ldd	r22, Y+17	; 0x11
    2632:	7a 89       	ldd	r23, Y+18	; 0x12
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	1c f4       	brge	.+6      	; 0x264e <__stack+0x44f>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	88 8b       	std	Y+16, r24	; 0x10
    264c:	91 c0       	rjmp	.+290    	; 0x2770 <__stack+0x571>
	else if (__tmp > 255)
    264e:	69 89       	ldd	r22, Y+17	; 0x11
    2650:	7a 89       	ldd	r23, Y+18	; 0x12
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	53 e4       	ldi	r21, 0x43	; 67
    265e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	0c f0       	brlt	.+2      	; 0x2668 <__stack+0x469>
    2666:	7b c0       	rjmp	.+246    	; 0x275e <__stack+0x55f>
	{
		_delay_ms(__us / 1000.0);
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a e7       	ldi	r20, 0x7A	; 122
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8c 87       	std	Y+12, r24	; 0x0c
    2682:	9d 87       	std	Y+13, r25	; 0x0d
    2684:	ae 87       	std	Y+14, r26	; 0x0e
    2686:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6c 85       	ldd	r22, Y+12	; 0x0c
    268a:	7d 85       	ldd	r23, Y+13	; 0x0d
    268c:	8e 85       	ldd	r24, Y+14	; 0x0e
    268e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a e7       	ldi	r20, 0x7A	; 122
    2696:	55 e4       	ldi	r21, 0x45	; 69
    2698:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	88 87       	std	Y+8, r24	; 0x08
    26a2:	99 87       	std	Y+9, r25	; 0x09
    26a4:	aa 87       	std	Y+10, r26	; 0x0a
    26a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26a8:	68 85       	ldd	r22, Y+8	; 0x08
    26aa:	79 85       	ldd	r23, Y+9	; 0x09
    26ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <__stack+0x4cb>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9f 83       	std	Y+7, r25	; 0x07
    26c6:	8e 83       	std	Y+6, r24	; 0x06
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <__stack+0x549>
	else if (__tmp > 65535)
    26ca:	68 85       	ldd	r22, Y+8	; 0x08
    26cc:	79 85       	ldd	r23, Y+9	; 0x09
    26ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <__stack+0x535>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9f 83       	std	Y+7, r25	; 0x07
    2708:	8e 83       	std	Y+6, r24	; 0x06
    270a:	0f c0       	rjmp	.+30     	; 0x272a <__stack+0x52b>
    270c:	80 e9       	ldi	r24, 0x90	; 144
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	9d 83       	std	Y+5, r25	; 0x05
    2712:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <__stack+0x519>
    271c:	9d 83       	std	Y+5, r25	; 0x05
    271e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	9f 81       	ldd	r25, Y+7	; 0x07
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9f 83       	std	Y+7, r25	; 0x07
    2728:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	9f 81       	ldd	r25, Y+7	; 0x07
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <__stack+0x50d>
    2732:	24 c0       	rjmp	.+72     	; 0x277c <__stack+0x57d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	68 85       	ldd	r22, Y+8	; 0x08
    2736:	79 85       	ldd	r23, Y+9	; 0x09
    2738:	8a 85       	ldd	r24, Y+10	; 0x0a
    273a:	9b 85       	ldd	r25, Y+11	; 0x0b
    273c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9f 83       	std	Y+7, r25	; 0x07
    2746:	8e 83       	std	Y+6, r24	; 0x06
    2748:	8e 81       	ldd	r24, Y+6	; 0x06
    274a:	9f 81       	ldd	r25, Y+7	; 0x07
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <__stack+0x555>
    2758:	9b 83       	std	Y+3, r25	; 0x03
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	0f c0       	rjmp	.+30     	; 0x277c <__stack+0x57d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    275e:	69 89       	ldd	r22, Y+17	; 0x11
    2760:	7a 89       	ldd	r23, Y+18	; 0x12
    2762:	8b 89       	ldd	r24, Y+19	; 0x13
    2764:	9c 89       	ldd	r25, Y+20	; 0x14
    2766:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	88 8b       	std	Y+16, r24	; 0x10
    2770:	88 89       	ldd	r24, Y+16	; 0x10
    2772:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	8a 95       	dec	r24
    2778:	f1 f7       	brne	.-4      	; 0x2776 <__stack+0x577>
    277a:	89 83       	std	Y+1, r24	; 0x01
        a = 0;
    }
    while(a  == 2)
    {
        int i;
        for(i = 8; i > 0; --i)
    277c:	89 a9       	ldd	r24, Y+49	; 0x31
    277e:	9a a9       	ldd	r25, Y+50	; 0x32
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9a ab       	std	Y+50, r25	; 0x32
    2784:	89 ab       	std	Y+49, r24	; 0x31
    2786:	89 a9       	ldd	r24, Y+49	; 0x31
    2788:	9a a9       	ldd	r25, Y+50	; 0x32
    278a:	18 16       	cp	r1, r24
    278c:	19 06       	cpc	r1, r25
    278e:	0c f4       	brge	.+2      	; 0x2792 <__stack+0x593>
    2790:	17 ce       	rjmp	.-978    	; 0x23c0 <__stack+0x1c1>
                PORTStepper4 |= (1 << PStepper4_4);
                break;
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    2792:	1e aa       	std	Y+54, r1	; 0x36
    2794:	1d aa       	std	Y+53, r1	; 0x35
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
    while(a  == 2)
    2796:	8d a9       	ldd	r24, Y+53	; 0x35
    2798:	9e a9       	ldd	r25, Y+54	; 0x36
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	91 05       	cpc	r25, r1
    279e:	09 f4       	brne	.+2      	; 0x27a2 <__stack+0x5a3>
    27a0:	0a ce       	rjmp	.-1004   	; 0x23b6 <__stack+0x1b7>
            }
            _delay_us(delaytime_stepper);
        }
        a = 0;
    }
}
    27a2:	ea 96       	adiw	r28, 0x3a	; 58
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <Vooruit>:

void Vooruit(int Steppermotortijd)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <Vooruit+0x6>
    27ba:	0f 92       	push	r0
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    27c4:	1a 82       	std	Y+2, r1	; 0x02
    27c6:	19 82       	std	Y+1, r1	; 0x01
    27c8:	15 c0       	rjmp	.+42     	; 0x27f4 <Vooruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 ca 03 	call	0x794	; 0x794 <steppermotor1Write>
        steppermotor2Write(1);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <steppermotor2Write>
        steppermotor3Write(1);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <steppermotor3Write>
        steppermotor4Write(1);
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <steppermotor4Write>
        j++;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
}

void Vooruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    27f4:	29 81       	ldd	r18, Y+1	; 0x01
    27f6:	3a 81       	ldd	r19, Y+2	; 0x02
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	28 17       	cp	r18, r24
    27fe:	39 07       	cpc	r19, r25
    2800:	24 f3       	brlt	.-56     	; 0x27ca <Vooruit+0x16>
        steppermotor2Write(1);
        steppermotor3Write(1);
        steppermotor4Write(1);
        j++;
    }
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <Achteruit>:

void Achteruit(int Steppermotortijd)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <Achteruit+0x6>
    2816:	0f 92       	push	r0
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	9c 83       	std	Y+4, r25	; 0x04
    281e:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    2820:	1a 82       	std	Y+2, r1	; 0x02
    2822:	19 82       	std	Y+1, r1	; 0x01
    2824:	15 c0       	rjmp	.+42     	; 0x2850 <Achteruit+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 ca 03 	call	0x794	; 0x794 <steppermotor1Write>
        steppermotor2Write(2);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 ce 07 	call	0xf9c	; 0xf9c <steppermotor2Write>
        steppermotor3Write(2);
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <steppermotor3Write>
        steppermotor4Write(2);
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <steppermotor4Write>
        j++;
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
}

void Achteruit(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2850:	29 81       	ldd	r18, Y+1	; 0x01
    2852:	3a 81       	ldd	r19, Y+2	; 0x02
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	28 17       	cp	r18, r24
    285a:	39 07       	cpc	r19, r25
    285c:	24 f3       	brlt	.-56     	; 0x2826 <Achteruit+0x16>
        steppermotor2Write(2);
        steppermotor3Write(2);
        steppermotor4Write(2);
        j++;
    }
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <Rechtsaf>:

void Rechtsaf(int Steppermotortijd)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <Rechtsaf+0x6>
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    287c:	1a 82       	std	Y+2, r1	; 0x02
    287e:	19 82       	std	Y+1, r1	; 0x01
    2880:	15 c0       	rjmp	.+42     	; 0x28ac <Rechtsaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(1);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 ca 03 	call	0x794	; 0x794 <steppermotor1Write>
        steppermotor2Write(2);
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <steppermotor2Write>
        steppermotor3Write(1);
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <steppermotor3Write>
        steppermotor4Write(2);
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <steppermotor4Write>
        j++;
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	89 83       	std	Y+1, r24	; 0x01
}

void Rechtsaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    28ac:	29 81       	ldd	r18, Y+1	; 0x01
    28ae:	3a 81       	ldd	r19, Y+2	; 0x02
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	24 f3       	brlt	.-56     	; 0x2882 <Rechtsaf+0x16>
        steppermotor2Write(2);
        steppermotor3Write(1);
        steppermotor4Write(2);
        j++;
    }
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <Linksaf>:

void Linksaf(int Steppermotortijd)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <Linksaf+0x6>
    28ce:	0f 92       	push	r0
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
    int j = 0;
    28d8:	1a 82       	std	Y+2, r1	; 0x02
    28da:	19 82       	std	Y+1, r1	; 0x01
    28dc:	15 c0       	rjmp	.+42     	; 0x2908 <Linksaf+0x40>
    while (j< Steppermotortijd)
    {
        steppermotor1Write(2);
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 ca 03 	call	0x794	; 0x794 <steppermotor1Write>
        steppermotor2Write(1);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 ce 07 	call	0xf9c	; 0xf9c <steppermotor2Write>
        steppermotor3Write(2);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <steppermotor3Write>
        steppermotor4Write(1);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <steppermotor4Write>
        j++;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
}

void Linksaf(int Steppermotortijd)
{
    int j = 0;
    while (j< Steppermotortijd)
    2908:	29 81       	ldd	r18, Y+1	; 0x01
    290a:	3a 81       	ldd	r19, Y+2	; 0x02
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	28 17       	cp	r18, r24
    2912:	39 07       	cpc	r19, r25
    2914:	24 f3       	brlt	.-56     	; 0x28de <Linksaf+0x16>
        steppermotor2Write(1);
        steppermotor3Write(2);
        steppermotor4Write(1);
        j++;
    }
}
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <distance>:
static volatile unsigned long pulse = 0; //the variable for the pulse
static volatile int echo_pin = 0; //logic for the ultrasoon
volatile int isTriggerd = 0;    // used in the while loop
volatile int overflows = 0;

int distance(int triggerpin) {
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	ea 97       	sbiw	r28, 0x3a	; 58
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	9e ab       	std	Y+54, r25	; 0x36
    293a:	8d ab       	std	Y+53, r24	; 0x35

    switch(triggerpin)
    293c:	8d a9       	ldd	r24, Y+53	; 0x35
    293e:	9e a9       	ldd	r25, Y+54	; 0x36
    2940:	9a af       	std	Y+58, r25	; 0x3a
    2942:	89 af       	std	Y+57, r24	; 0x39
    2944:	89 ad       	ldd	r24, Y+57	; 0x39
    2946:	9a ad       	ldd	r25, Y+58	; 0x3a
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	31 f0       	breq	.+12     	; 0x2958 <distance+0x34>
    294c:	89 ad       	ldd	r24, Y+57	; 0x39
    294e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	91 05       	cpc	r25, r1
    2954:	49 f0       	breq	.+18     	; 0x2968 <distance+0x44>
    2956:	0f c0       	rjmp	.+30     	; 0x2976 <distance+0x52>
    {
        case ultra_1_trigger:
            PCMASK = 0;
    2958:	eb e6       	ldi	r30, 0x6B	; 107
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	10 82       	st	Z, r1
            PCMASK = ultra_1_pin;
    295e:	eb e6       	ldi	r30, 0x6B	; 107
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 83       	st	Z, r24
    2966:	07 c0       	rjmp	.+14     	; 0x2976 <distance+0x52>
        break;

        case ultra_2_trigger:
            PCMASK = 0;
    2968:	eb e6       	ldi	r30, 0x6B	; 107
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	10 82       	st	Z, r1
            PCMASK = ultra_2_pin;
    296e:	eb e6       	ldi	r30, 0x6B	; 107
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	82 e0       	ldi	r24, 0x02	; 2
    2974:	80 83       	st	Z, r24
        break;
    }

    TRIGGERPORT |= (1 << triggerpin);
    2976:	ab e2       	ldi	r26, 0x2B	; 43
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	eb e2       	ldi	r30, 0x2B	; 43
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	28 2f       	mov	r18, r24
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0d a8       	ldd	r0, Y+53	; 0x35
    2988:	02 c0       	rjmp	.+4      	; 0x298e <distance+0x6a>
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	0a 94       	dec	r0
    2990:	e2 f7       	brpl	.-8      	; 0x298a <distance+0x66>
    2992:	82 2b       	or	r24, r18
    2994:	8c 93       	st	X, r24
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e7       	ldi	r26, 0x70	; 112
    299c:	b1 e4       	ldi	r27, 0x41	; 65
    299e:	8d a7       	std	Y+45, r24	; 0x2d
    29a0:	9e a7       	std	Y+46, r25	; 0x2e
    29a2:	af a7       	std	Y+47, r26	; 0x2f
    29a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    29a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    29aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ac:	98 a9       	ldd	r25, Y+48	; 0x30
    29ae:	2b ea       	ldi	r18, 0xAB	; 171
    29b0:	3a ea       	ldi	r19, 0xAA	; 170
    29b2:	4a ea       	ldi	r20, 0xAA	; 170
    29b4:	50 e4       	ldi	r21, 0x40	; 64
    29b6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	89 a7       	std	Y+41, r24	; 0x29
    29c0:	9a a7       	std	Y+42, r25	; 0x2a
    29c2:	ab a7       	std	Y+43, r26	; 0x2b
    29c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29c6:	69 a5       	ldd	r22, Y+41	; 0x29
    29c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    29cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	1c f4       	brge	.+6      	; 0x29e4 <distance+0xc0>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	88 a7       	std	Y+40, r24	; 0x28
    29e2:	91 c0       	rjmp	.+290    	; 0x2b06 <distance+0x1e2>
	else if (__tmp > 255)
    29e4:	69 a5       	ldd	r22, Y+41	; 0x29
    29e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    29e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	53 e4       	ldi	r21, 0x43	; 67
    29f4:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	0c f0       	brlt	.+2      	; 0x29fe <distance+0xda>
    29fc:	7b c0       	rjmp	.+246    	; 0x2af4 <distance+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    29fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a00:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a04:	98 a9       	ldd	r25, Y+48	; 0x30
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a e7       	ldi	r20, 0x7A	; 122
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8c a3       	std	Y+36, r24	; 0x24
    2a18:	9d a3       	std	Y+37, r25	; 0x25
    2a1a:	ae a3       	std	Y+38, r26	; 0x26
    2a1c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	6c a1       	ldd	r22, Y+36	; 0x24
    2a20:	7d a1       	ldd	r23, Y+37	; 0x25
    2a22:	8e a1       	ldd	r24, Y+38	; 0x26
    2a24:	9f a1       	ldd	r25, Y+39	; 0x27
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a e7       	ldi	r20, 0x7A	; 122
    2a2c:	55 e4       	ldi	r21, 0x45	; 69
    2a2e:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	88 a3       	std	Y+32, r24	; 0x20
    2a38:	99 a3       	std	Y+33, r25	; 0x21
    2a3a:	aa a3       	std	Y+34, r26	; 0x22
    2a3c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a3e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a40:	79 a1       	ldd	r23, Y+33	; 0x21
    2a42:	8a a1       	ldd	r24, Y+34	; 0x22
    2a44:	9b a1       	ldd	r25, Y+35	; 0x23
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <distance+0x13c>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a5c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <distance+0x1ba>
	else if (__tmp > 65535)
    2a60:	68 a1       	ldd	r22, Y+32	; 0x20
    2a62:	79 a1       	ldd	r23, Y+33	; 0x21
    2a64:	8a a1       	ldd	r24, Y+34	; 0x22
    2a66:	9b a1       	ldd	r25, Y+35	; 0x23
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <distance+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	6c a1       	ldd	r22, Y+36	; 0x24
    2a7a:	7d a1       	ldd	r23, Y+37	; 0x25
    2a7c:	8e a1       	ldd	r24, Y+38	; 0x26
    2a7e:	9f a1       	ldd	r25, Y+39	; 0x27
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a9e:	8e 8f       	std	Y+30, r24	; 0x1e
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <distance+0x19c>
    2aa2:	80 e9       	ldi	r24, 0x90	; 144
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	9d 8f       	std	Y+29, r25	; 0x1d
    2aa8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2aaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2aac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <distance+0x18a>
    2ab2:	9d 8f       	std	Y+29, r25	; 0x1d
    2ab4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	9f 8f       	std	Y+31, r25	; 0x1f
    2abe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ac2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <distance+0x17e>
    2ac8:	24 c0       	rjmp	.+72     	; 0x2b12 <distance+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	68 a1       	ldd	r22, Y+32	; 0x20
    2acc:	79 a1       	ldd	r23, Y+33	; 0x21
    2ace:	8a a1       	ldd	r24, Y+34	; 0x22
    2ad0:	9b a1       	ldd	r25, Y+35	; 0x23
    2ad2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9f 8f       	std	Y+31, r25	; 0x1f
    2adc:	8e 8f       	std	Y+30, r24	; 0x1e
    2ade:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ae0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ae2:	9b 8f       	std	Y+27, r25	; 0x1b
    2ae4:	8a 8f       	std	Y+26, r24	; 0x1a
    2ae6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ae8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <distance+0x1c6>
    2aee:	9b 8f       	std	Y+27, r25	; 0x1b
    2af0:	8a 8f       	std	Y+26, r24	; 0x1a
    2af2:	0f c0       	rjmp	.+30     	; 0x2b12 <distance+0x1ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2af4:	69 a5       	ldd	r22, Y+41	; 0x29
    2af6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2af8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2afc:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	88 a7       	std	Y+40, r24	; 0x28
    2b06:	88 a5       	ldd	r24, Y+40	; 0x28
    2b08:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b0a:	89 8d       	ldd	r24, Y+25	; 0x19
    2b0c:	8a 95       	dec	r24
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <distance+0x1e8>
    2b10:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(15);
    TRIGGERPORT &= ~( 1 << triggerpin);
    2b12:	ab e2       	ldi	r26, 0x2B	; 43
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	eb e2       	ldi	r30, 0x2B	; 43
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0d a8       	ldd	r0, Y+53	; 0x35
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <distance+0x206>
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	0a 94       	dec	r0
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <distance+0x202>
    2b2e:	80 95       	com	r24
    2b30:	82 23       	and	r24, r18
    2b32:	8c 93       	st	X, r24
    isTriggerd = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	90 93 09 03 	sts	0x0309, r25
    2b3c:	80 93 08 03 	sts	0x0308, r24
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e7       	ldi	r26, 0x70	; 112
    2b46:	b1 e4       	ldi	r27, 0x41	; 65
    2b48:	8d 8b       	std	Y+21, r24	; 0x15
    2b4a:	9e 8b       	std	Y+22, r25	; 0x16
    2b4c:	af 8b       	std	Y+23, r26	; 0x17
    2b4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	2b ea       	ldi	r18, 0xAB	; 171
    2b5a:	3a ea       	ldi	r19, 0xAA	; 170
    2b5c:	4a ea       	ldi	r20, 0xAA	; 170
    2b5e:	50 e4       	ldi	r21, 0x40	; 64
    2b60:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	89 8b       	std	Y+17, r24	; 0x11
    2b6a:	9a 8b       	std	Y+18, r25	; 0x12
    2b6c:	ab 8b       	std	Y+19, r26	; 0x13
    2b6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b70:	69 89       	ldd	r22, Y+17	; 0x11
    2b72:	7a 89       	ldd	r23, Y+18	; 0x12
    2b74:	8b 89       	ldd	r24, Y+19	; 0x13
    2b76:	9c 89       	ldd	r25, Y+20	; 0x14
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	1c f4       	brge	.+6      	; 0x2b8e <distance+0x26a>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	88 8b       	std	Y+16, r24	; 0x10
    2b8c:	91 c0       	rjmp	.+290    	; 0x2cb0 <distance+0x38c>
	else if (__tmp > 255)
    2b8e:	69 89       	ldd	r22, Y+17	; 0x11
    2b90:	7a 89       	ldd	r23, Y+18	; 0x12
    2b92:	8b 89       	ldd	r24, Y+19	; 0x13
    2b94:	9c 89       	ldd	r25, Y+20	; 0x14
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	4f e7       	ldi	r20, 0x7F	; 127
    2b9c:	53 e4       	ldi	r21, 0x43	; 67
    2b9e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    2ba2:	18 16       	cp	r1, r24
    2ba4:	0c f0       	brlt	.+2      	; 0x2ba8 <distance+0x284>
    2ba6:	7b c0       	rjmp	.+246    	; 0x2c9e <distance+0x37a>
	{
		_delay_ms(__us / 1000.0);
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4a e7       	ldi	r20, 0x7A	; 122
    2bb6:	54 e4       	ldi	r21, 0x44	; 68
    2bb8:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	8c 87       	std	Y+12, r24	; 0x0c
    2bc2:	9d 87       	std	Y+13, r25	; 0x0d
    2bc4:	ae 87       	std	Y+14, r26	; 0x0e
    2bc6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bca:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bce:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	55 e4       	ldi	r21, 0x45	; 69
    2bd8:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	88 87       	std	Y+8, r24	; 0x08
    2be2:	99 87       	std	Y+9, r25	; 0x09
    2be4:	aa 87       	std	Y+10, r26	; 0x0a
    2be6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2be8:	68 85       	ldd	r22, Y+8	; 0x08
    2bea:	79 85       	ldd	r23, Y+9	; 0x09
    2bec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e8       	ldi	r20, 0x80	; 128
    2bf6:	5f e3       	ldi	r21, 0x3F	; 63
    2bf8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__ltsf2>
    2bfc:	88 23       	and	r24, r24
    2bfe:	2c f4       	brge	.+10     	; 0x2c0a <distance+0x2e6>
		__ticks = 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9f 83       	std	Y+7, r25	; 0x07
    2c06:	8e 83       	std	Y+6, r24	; 0x06
    2c08:	3f c0       	rjmp	.+126    	; 0x2c88 <distance+0x364>
	else if (__tmp > 65535)
    2c0a:	68 85       	ldd	r22, Y+8	; 0x08
    2c0c:	79 85       	ldd	r23, Y+9	; 0x09
    2c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	3f ef       	ldi	r19, 0xFF	; 255
    2c16:	4f e7       	ldi	r20, 0x7F	; 127
    2c18:	57 e4       	ldi	r21, 0x47	; 71
    2c1a:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__gtsf2>
    2c1e:	18 16       	cp	r1, r24
    2c20:	4c f5       	brge	.+82     	; 0x2c74 <distance+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c22:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c24:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c26:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c28:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9f 83       	std	Y+7, r25	; 0x07
    2c48:	8e 83       	std	Y+6, r24	; 0x06
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <distance+0x346>
    2c4c:	80 e9       	ldi	r24, 0x90	; 144
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	9d 83       	std	Y+5, r25	; 0x05
    2c52:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c54:	8c 81       	ldd	r24, Y+4	; 0x04
    2c56:	9d 81       	ldd	r25, Y+5	; 0x05
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <distance+0x334>
    2c5c:	9d 83       	std	Y+5, r25	; 0x05
    2c5e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c60:	8e 81       	ldd	r24, Y+6	; 0x06
    2c62:	9f 81       	ldd	r25, Y+7	; 0x07
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	9f 83       	std	Y+7, r25	; 0x07
    2c68:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	69 f7       	brne	.-38     	; 0x2c4c <distance+0x328>
    2c72:	24 c0       	rjmp	.+72     	; 0x2cbc <distance+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c74:	68 85       	ldd	r22, Y+8	; 0x08
    2c76:	79 85       	ldd	r23, Y+9	; 0x09
    2c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c7c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9f 83       	std	Y+7, r25	; 0x07
    2c86:	8e 83       	std	Y+6, r24	; 0x06
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8c:	9b 83       	std	Y+3, r25	; 0x03
    2c8e:	8a 83       	std	Y+2, r24	; 0x02
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	9b 81       	ldd	r25, Y+3	; 0x03
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <distance+0x370>
    2c98:	9b 83       	std	Y+3, r25	; 0x03
    2c9a:	8a 83       	std	Y+2, r24	; 0x02
    2c9c:	0f c0       	rjmp	.+30     	; 0x2cbc <distance+0x398>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c9e:	69 89       	ldd	r22, Y+17	; 0x11
    2ca0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	88 8b       	std	Y+16, r24	; 0x10
    2cb0:	88 89       	ldd	r24, Y+16	; 0x10
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	8a 95       	dec	r24
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <distance+0x392>
    2cba:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);

    unsigned long i = 0;
    2cbc:	19 aa       	std	Y+49, r1	; 0x31
    2cbe:	1a aa       	std	Y+50, r1	; 0x32
    2cc0:	1b aa       	std	Y+51, r1	; 0x33
    2cc2:	1c aa       	std	Y+52, r1	; 0x34
    2cc4:	1f c0       	rjmp	.+62     	; 0x2d04 <distance+0x3e0>
    while(isTriggerd){
       if(i > ((RETURNVALUE+10)*16))
    2cc6:	89 a9       	ldd	r24, Y+49	; 0x31
    2cc8:	9a a9       	ldd	r25, Y+50	; 0x32
    2cca:	ab a9       	ldd	r26, Y+51	; 0x33
    2ccc:	bc a9       	ldd	r27, Y+52	; 0x34
    2cce:	81 3e       	cpi	r24, 0xE1	; 225
    2cd0:	26 e0       	ldi	r18, 0x06	; 6
    2cd2:	92 07       	cpc	r25, r18
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	a2 07       	cpc	r26, r18
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	b2 07       	cpc	r27, r18
    2cdc:	40 f0       	brcs	.+16     	; 0x2cee <distance+0x3ca>
       {
           PCMASK = 0;
    2cde:	eb e6       	ldi	r30, 0x6B	; 107
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	10 82       	st	Z, r1
           return RETURNVALUE;
    2ce4:	84 e6       	ldi	r24, 0x64	; 100
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	98 af       	std	Y+56, r25	; 0x38
    2cea:	8f ab       	std	Y+55, r24	; 0x37
    2cec:	31 c0       	rjmp	.+98     	; 0x2d50 <distance+0x42c>
       }
       i++;
    2cee:	89 a9       	ldd	r24, Y+49	; 0x31
    2cf0:	9a a9       	ldd	r25, Y+50	; 0x32
    2cf2:	ab a9       	ldd	r26, Y+51	; 0x33
    2cf4:	bc a9       	ldd	r27, Y+52	; 0x34
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	a1 1d       	adc	r26, r1
    2cfa:	b1 1d       	adc	r27, r1
    2cfc:	89 ab       	std	Y+49, r24	; 0x31
    2cfe:	9a ab       	std	Y+50, r25	; 0x32
    2d00:	ab ab       	std	Y+51, r26	; 0x33
    2d02:	bc ab       	std	Y+52, r27	; 0x34
    TRIGGERPORT &= ~( 1 << triggerpin);
    isTriggerd = 1;
    _delay_us(15);

    unsigned long i = 0;
    while(isTriggerd){
    2d04:	80 91 08 03 	lds	r24, 0x0308
    2d08:	90 91 09 03 	lds	r25, 0x0309
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	d9 f6       	brne	.-74     	; 0x2cc6 <distance+0x3a2>
       }
       i++;

    }

    return pulse/928.0;
    2d10:	80 91 0c 03 	lds	r24, 0x030C
    2d14:	90 91 0d 03 	lds	r25, 0x030D
    2d18:	a0 91 0e 03 	lds	r26, 0x030E
    2d1c:	b0 91 0f 03 	lds	r27, 0x030F
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 3b 1c 	call	0x3876	; 0x3876 <__floatunsisf>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	48 e6       	ldi	r20, 0x68	; 104
    2d36:	54 e4       	ldi	r21, 0x44	; 68
    2d38:	0e 94 4d 1a 	call	0x349a	; 0x349a <__divsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	98 af       	std	Y+56, r25	; 0x38
    2d4e:	8f ab       	std	Y+55, r24	; 0x37
    2d50:	8f a9       	ldd	r24, Y+55	; 0x37
    2d52:	98 ad       	ldd	r25, Y+56	; 0x38
}
    2d54:	ea 96       	adiw	r28, 0x3a	; 58
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <init_ultrasoon>:
void init_ultrasoon(){
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    TRIGGERDDR |= (1 << ultra_1_trigger) | (1 << ultra_2_trigger);
    2d6e:	aa e2       	ldi	r26, 0x2A	; 42
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	ea e2       	ldi	r30, 0x2A	; 42
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	83 60       	ori	r24, 0x03	; 3
    2d7a:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_1_trigger);
    2d7c:	ab e2       	ldi	r26, 0x2B	; 43
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	eb e2       	ldi	r30, 0x2B	; 43
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	8e 7f       	andi	r24, 0xFE	; 254
    2d88:	8c 93       	st	X, r24
    TRIGGERPORT &= ~(1 << ultra_2_trigger);
    2d8a:	ab e2       	ldi	r26, 0x2B	; 43
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	eb e2       	ldi	r30, 0x2B	; 43
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	8d 7f       	andi	r24, 0xFD	; 253
    2d96:	8c 93       	st	X, r24
    PCICR |= (1 << PCREG);
    2d98:	a8 e6       	ldi	r26, 0x68	; 104
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e8 e6       	ldi	r30, 0x68	; 104
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	81 60       	ori	r24, 0x01	; 1
    2da4:	8c 93       	st	X, r24
    PCMASK = 0;
    2da6:	eb e6       	ldi	r30, 0x6B	; 107
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	10 82       	st	Z, r1
}
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <__vector_9>:

ISR(PCISR)   // Interrupt service routine.
{
    2db2:	1f 92       	push	r1
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	0f 92       	push	r0
    2dba:	00 90 5b 00 	lds	r0, 0x005B
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	2f 93       	push	r18
    2dcc:	3f 93       	push	r19
    2dce:	4f 93       	push	r20
    2dd0:	5f 93       	push	r21
    2dd2:	6f 93       	push	r22
    2dd4:	7f 93       	push	r23
    2dd6:	8f 93       	push	r24
    2dd8:	9f 93       	push	r25
    2dda:	af 93       	push	r26
    2ddc:	bf 93       	push	r27
    2dde:	ef 93       	push	r30
    2de0:	ff 93       	push	r31
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    if (echo_pin==1)
    2dea:	80 91 10 03 	lds	r24, 0x0310
    2dee:	90 91 11 03 	lds	r25, 0x0311
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	91 05       	cpc	r25, r1
    2df6:	c9 f5       	brne	.+114    	; 0x2e6a <__vector_9+0xb8>
	{
		TIMER_B = 0;    //TIMER COUNTER CONTROL REGITER (Stop the counter)
    2df8:	e1 e2       	ldi	r30, 0x21	; 33
    2dfa:	f1 e0       	ldi	r31, 0x01	; 1
    2dfc:	10 82       	st	Z, r1
		pulse=TNCT_timer+(overflows*OVERFLOW);  // store the value of counter
    2dfe:	e4 e2       	ldi	r30, 0x24	; 36
    2e00:	f1 e0       	ldi	r31, 0x01	; 1
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	7c 01       	movw	r14, r24
    2e08:	00 e0       	ldi	r16, 0x00	; 0
    2e0a:	10 e0       	ldi	r17, 0x00	; 0
    2e0c:	80 91 0a 03 	lds	r24, 0x030A
    2e10:	90 91 0b 03 	lds	r25, 0x030B
    2e14:	aa 27       	eor	r26, r26
    2e16:	97 fd       	sbrc	r25, 7
    2e18:	a0 95       	com	r26
    2e1a:	ba 2f       	mov	r27, r26
    2e1c:	2f ef       	ldi	r18, 0xFF	; 255
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	50 e0       	ldi	r21, 0x00	; 0
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__mulsi3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8e 0d       	add	r24, r14
    2e32:	9f 1d       	adc	r25, r15
    2e34:	a0 1f       	adc	r26, r16
    2e36:	b1 1f       	adc	r27, r17
    2e38:	80 93 0c 03 	sts	0x030C, r24
    2e3c:	90 93 0d 03 	sts	0x030D, r25
    2e40:	a0 93 0e 03 	sts	0x030E, r26
    2e44:	b0 93 0f 03 	sts	0x030F, r27
		TNCT_timer=0;     // reset the counter
    2e48:	e4 e2       	ldi	r30, 0x24	; 36
    2e4a:	f1 e0       	ldi	r31, 0x01	; 1
    2e4c:	11 82       	std	Z+1, r1	; 0x01
    2e4e:	10 82       	st	Z, r1
		echo_pin=0;
    2e50:	10 92 11 03 	sts	0x0311, r1
    2e54:	10 92 10 03 	sts	0x0310, r1
		isTriggerd = 0;
    2e58:	10 92 09 03 	sts	0x0309, r1
    2e5c:	10 92 08 03 	sts	0x0308, r1
		overflows = 0;
    2e60:	10 92 0b 03 	sts	0x030B, r1
    2e64:	10 92 0a 03 	sts	0x030A, r1
    2e68:	11 c0       	rjmp	.+34     	; 0x2e8c <__vector_9+0xda>
	}
	else
	{
		TIMER_B |=(1<<CS10);  // used to start the internal counter of microcontroller
    2e6a:	a1 e2       	ldi	r26, 0x21	; 33
    2e6c:	b1 e0       	ldi	r27, 0x01	; 1
    2e6e:	e1 e2       	ldi	r30, 0x21	; 33
    2e70:	f1 e0       	ldi	r31, 0x01	; 1
    2e72:	80 81       	ld	r24, Z
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	8c 93       	st	X, r24
		TIMSK_timer = (1 <<TIMSK_bit);
    2e78:	e3 e7       	ldi	r30, 0x73	; 115
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	80 83       	st	Z, r24
		echo_pin=1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	90 93 11 03 	sts	0x0311, r25
    2e88:	80 93 10 03 	sts	0x0310, r24
	}
}
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	ff 91       	pop	r31
    2e92:	ef 91       	pop	r30
    2e94:	bf 91       	pop	r27
    2e96:	af 91       	pop	r26
    2e98:	9f 91       	pop	r25
    2e9a:	8f 91       	pop	r24
    2e9c:	7f 91       	pop	r23
    2e9e:	6f 91       	pop	r22
    2ea0:	5f 91       	pop	r21
    2ea2:	4f 91       	pop	r20
    2ea4:	3f 91       	pop	r19
    2ea6:	2f 91       	pop	r18
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 91       	pop	r16
    2eac:	ff 90       	pop	r15
    2eae:	ef 90       	pop	r14
    2eb0:	0f 90       	pop	r0
    2eb2:	00 92 5b 00 	sts	0x005B, r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	0f 90       	pop	r0
    2ebc:	1f 90       	pop	r1
    2ebe:	18 95       	reti

00002ec0 <__vector_50>:

ISR(ISR_TIMER_OVF){
    2ec0:	1f 92       	push	r1
    2ec2:	0f 92       	push	r0
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	0f 92       	push	r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    overflows++;
    2ed6:	80 91 0a 03 	lds	r24, 0x030A
    2eda:	90 91 0b 03 	lds	r25, 0x030B
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	90 93 0b 03 	sts	0x030B, r25
    2ee4:	80 93 0a 03 	sts	0x030A, r24
}
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	9f 91       	pop	r25
    2eee:	8f 91       	pop	r24
    2ef0:	0f 90       	pop	r0
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	0f 90       	pop	r0
    2ef6:	1f 90       	pop	r1
    2ef8:	18 95       	reti

00002efa <__fixunssfsi>:
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	7b 01       	movw	r14, r22
    2f04:	8c 01       	movw	r16, r24
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	5f e4       	ldi	r21, 0x4F	; 79
    2f0e:	0e 94 29 1b 	call	0x3652	; 0x3652 <__gesf2>
    2f12:	88 23       	and	r24, r24
    2f14:	8c f0       	brlt	.+34     	; 0x2f38 <__fixunssfsi+0x3e>
    2f16:	c8 01       	movw	r24, r16
    2f18:	b7 01       	movw	r22, r14
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	5f e4       	ldi	r21, 0x4F	; 79
    2f22:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__subsf3>
    2f26:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
    2f2a:	9b 01       	movw	r18, r22
    2f2c:	ac 01       	movw	r20, r24
    2f2e:	20 50       	subi	r18, 0x00	; 0
    2f30:	30 40       	sbci	r19, 0x00	; 0
    2f32:	40 40       	sbci	r20, 0x00	; 0
    2f34:	50 48       	sbci	r21, 0x80	; 128
    2f36:	06 c0       	rjmp	.+12     	; 0x2f44 <__fixunssfsi+0x4a>
    2f38:	c8 01       	movw	r24, r16
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__fixsfsi>
    2f40:	9b 01       	movw	r18, r22
    2f42:	ac 01       	movw	r20, r24
    2f44:	b9 01       	movw	r22, r18
    2f46:	ca 01       	movw	r24, r20
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	08 95       	ret

00002f52 <_fpadd_parts>:
    2f52:	a0 e0       	ldi	r26, 0x00	; 0
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	ef ea       	ldi	r30, 0xAF	; 175
    2f58:	f7 e1       	ldi	r31, 0x17	; 23
    2f5a:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__prologue_saves__>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	2b 01       	movw	r4, r22
    2f62:	fa 01       	movw	r30, r20
    2f64:	9c 91       	ld	r25, X
    2f66:	92 30       	cpi	r25, 0x02	; 2
    2f68:	08 f4       	brcc	.+2      	; 0x2f6c <_fpadd_parts+0x1a>
    2f6a:	39 c1       	rjmp	.+626    	; 0x31de <_fpadd_parts+0x28c>
    2f6c:	eb 01       	movw	r28, r22
    2f6e:	88 81       	ld	r24, Y
    2f70:	82 30       	cpi	r24, 0x02	; 2
    2f72:	08 f4       	brcc	.+2      	; 0x2f76 <_fpadd_parts+0x24>
    2f74:	33 c1       	rjmp	.+614    	; 0x31dc <_fpadd_parts+0x28a>
    2f76:	94 30       	cpi	r25, 0x04	; 4
    2f78:	69 f4       	brne	.+26     	; 0x2f94 <_fpadd_parts+0x42>
    2f7a:	84 30       	cpi	r24, 0x04	; 4
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <_fpadd_parts+0x2e>
    2f7e:	2f c1       	rjmp	.+606    	; 0x31de <_fpadd_parts+0x28c>
    2f80:	11 96       	adiw	r26, 0x01	; 1
    2f82:	9c 91       	ld	r25, X
    2f84:	11 97       	sbiw	r26, 0x01	; 1
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	98 17       	cp	r25, r24
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <_fpadd_parts+0x3c>
    2f8c:	28 c1       	rjmp	.+592    	; 0x31de <_fpadd_parts+0x28c>
    2f8e:	a0 e0       	ldi	r26, 0x00	; 0
    2f90:	b2 e0       	ldi	r27, 0x02	; 2
    2f92:	25 c1       	rjmp	.+586    	; 0x31de <_fpadd_parts+0x28c>
    2f94:	84 30       	cpi	r24, 0x04	; 4
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <_fpadd_parts+0x48>
    2f98:	21 c1       	rjmp	.+578    	; 0x31dc <_fpadd_parts+0x28a>
    2f9a:	82 30       	cpi	r24, 0x02	; 2
    2f9c:	a9 f4       	brne	.+42     	; 0x2fc8 <_fpadd_parts+0x76>
    2f9e:	92 30       	cpi	r25, 0x02	; 2
    2fa0:	09 f0       	breq	.+2      	; 0x2fa4 <_fpadd_parts+0x52>
    2fa2:	1d c1       	rjmp	.+570    	; 0x31de <_fpadd_parts+0x28c>
    2fa4:	9a 01       	movw	r18, r20
    2fa6:	ad 01       	movw	r20, r26
    2fa8:	88 e0       	ldi	r24, 0x08	; 8
    2faa:	ea 01       	movw	r28, r20
    2fac:	09 90       	ld	r0, Y+
    2fae:	ae 01       	movw	r20, r28
    2fb0:	e9 01       	movw	r28, r18
    2fb2:	09 92       	st	Y+, r0
    2fb4:	9e 01       	movw	r18, r28
    2fb6:	81 50       	subi	r24, 0x01	; 1
    2fb8:	c1 f7       	brne	.-16     	; 0x2faa <_fpadd_parts+0x58>
    2fba:	e2 01       	movw	r28, r4
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	11 96       	adiw	r26, 0x01	; 1
    2fc0:	9c 91       	ld	r25, X
    2fc2:	89 23       	and	r24, r25
    2fc4:	81 83       	std	Z+1, r24	; 0x01
    2fc6:	08 c1       	rjmp	.+528    	; 0x31d8 <_fpadd_parts+0x286>
    2fc8:	92 30       	cpi	r25, 0x02	; 2
    2fca:	09 f4       	brne	.+2      	; 0x2fce <_fpadd_parts+0x7c>
    2fcc:	07 c1       	rjmp	.+526    	; 0x31dc <_fpadd_parts+0x28a>
    2fce:	12 96       	adiw	r26, 0x02	; 2
    2fd0:	2d 90       	ld	r2, X+
    2fd2:	3c 90       	ld	r3, X
    2fd4:	13 97       	sbiw	r26, 0x03	; 3
    2fd6:	eb 01       	movw	r28, r22
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	9b 81       	ldd	r25, Y+3	; 0x03
    2fdc:	14 96       	adiw	r26, 0x04	; 4
    2fde:	ad 90       	ld	r10, X+
    2fe0:	bd 90       	ld	r11, X+
    2fe2:	cd 90       	ld	r12, X+
    2fe4:	dc 90       	ld	r13, X
    2fe6:	17 97       	sbiw	r26, 0x07	; 7
    2fe8:	ec 80       	ldd	r14, Y+4	; 0x04
    2fea:	fd 80       	ldd	r15, Y+5	; 0x05
    2fec:	0e 81       	ldd	r16, Y+6	; 0x06
    2fee:	1f 81       	ldd	r17, Y+7	; 0x07
    2ff0:	91 01       	movw	r18, r2
    2ff2:	28 1b       	sub	r18, r24
    2ff4:	39 0b       	sbc	r19, r25
    2ff6:	b9 01       	movw	r22, r18
    2ff8:	37 ff       	sbrs	r19, 7
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <_fpadd_parts+0xb2>
    2ffc:	66 27       	eor	r22, r22
    2ffe:	77 27       	eor	r23, r23
    3000:	62 1b       	sub	r22, r18
    3002:	73 0b       	sbc	r23, r19
    3004:	60 32       	cpi	r22, 0x20	; 32
    3006:	71 05       	cpc	r23, r1
    3008:	0c f0       	brlt	.+2      	; 0x300c <_fpadd_parts+0xba>
    300a:	61 c0       	rjmp	.+194    	; 0x30ce <_fpadd_parts+0x17c>
    300c:	12 16       	cp	r1, r18
    300e:	13 06       	cpc	r1, r19
    3010:	6c f5       	brge	.+90     	; 0x306c <_fpadd_parts+0x11a>
    3012:	37 01       	movw	r6, r14
    3014:	48 01       	movw	r8, r16
    3016:	06 2e       	mov	r0, r22
    3018:	04 c0       	rjmp	.+8      	; 0x3022 <_fpadd_parts+0xd0>
    301a:	96 94       	lsr	r9
    301c:	87 94       	ror	r8
    301e:	77 94       	ror	r7
    3020:	67 94       	ror	r6
    3022:	0a 94       	dec	r0
    3024:	d2 f7       	brpl	.-12     	; 0x301a <_fpadd_parts+0xc8>
    3026:	21 e0       	ldi	r18, 0x01	; 1
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	04 c0       	rjmp	.+8      	; 0x3038 <_fpadd_parts+0xe6>
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	44 1f       	adc	r20, r20
    3036:	55 1f       	adc	r21, r21
    3038:	6a 95       	dec	r22
    303a:	d2 f7       	brpl	.-12     	; 0x3030 <_fpadd_parts+0xde>
    303c:	21 50       	subi	r18, 0x01	; 1
    303e:	30 40       	sbci	r19, 0x00	; 0
    3040:	40 40       	sbci	r20, 0x00	; 0
    3042:	50 40       	sbci	r21, 0x00	; 0
    3044:	2e 21       	and	r18, r14
    3046:	3f 21       	and	r19, r15
    3048:	40 23       	and	r20, r16
    304a:	51 23       	and	r21, r17
    304c:	21 15       	cp	r18, r1
    304e:	31 05       	cpc	r19, r1
    3050:	41 05       	cpc	r20, r1
    3052:	51 05       	cpc	r21, r1
    3054:	21 f0       	breq	.+8      	; 0x305e <_fpadd_parts+0x10c>
    3056:	21 e0       	ldi	r18, 0x01	; 1
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	79 01       	movw	r14, r18
    3060:	8a 01       	movw	r16, r20
    3062:	e6 28       	or	r14, r6
    3064:	f7 28       	or	r15, r7
    3066:	08 29       	or	r16, r8
    3068:	19 29       	or	r17, r9
    306a:	3c c0       	rjmp	.+120    	; 0x30e4 <_fpadd_parts+0x192>
    306c:	23 2b       	or	r18, r19
    306e:	d1 f1       	breq	.+116    	; 0x30e4 <_fpadd_parts+0x192>
    3070:	26 0e       	add	r2, r22
    3072:	37 1e       	adc	r3, r23
    3074:	35 01       	movw	r6, r10
    3076:	46 01       	movw	r8, r12
    3078:	06 2e       	mov	r0, r22
    307a:	04 c0       	rjmp	.+8      	; 0x3084 <_fpadd_parts+0x132>
    307c:	96 94       	lsr	r9
    307e:	87 94       	ror	r8
    3080:	77 94       	ror	r7
    3082:	67 94       	ror	r6
    3084:	0a 94       	dec	r0
    3086:	d2 f7       	brpl	.-12     	; 0x307c <_fpadd_parts+0x12a>
    3088:	21 e0       	ldi	r18, 0x01	; 1
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	50 e0       	ldi	r21, 0x00	; 0
    3090:	04 c0       	rjmp	.+8      	; 0x309a <_fpadd_parts+0x148>
    3092:	22 0f       	add	r18, r18
    3094:	33 1f       	adc	r19, r19
    3096:	44 1f       	adc	r20, r20
    3098:	55 1f       	adc	r21, r21
    309a:	6a 95       	dec	r22
    309c:	d2 f7       	brpl	.-12     	; 0x3092 <_fpadd_parts+0x140>
    309e:	21 50       	subi	r18, 0x01	; 1
    30a0:	30 40       	sbci	r19, 0x00	; 0
    30a2:	40 40       	sbci	r20, 0x00	; 0
    30a4:	50 40       	sbci	r21, 0x00	; 0
    30a6:	2a 21       	and	r18, r10
    30a8:	3b 21       	and	r19, r11
    30aa:	4c 21       	and	r20, r12
    30ac:	5d 21       	and	r21, r13
    30ae:	21 15       	cp	r18, r1
    30b0:	31 05       	cpc	r19, r1
    30b2:	41 05       	cpc	r20, r1
    30b4:	51 05       	cpc	r21, r1
    30b6:	21 f0       	breq	.+8      	; 0x30c0 <_fpadd_parts+0x16e>
    30b8:	21 e0       	ldi	r18, 0x01	; 1
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e0       	ldi	r20, 0x00	; 0
    30be:	50 e0       	ldi	r21, 0x00	; 0
    30c0:	59 01       	movw	r10, r18
    30c2:	6a 01       	movw	r12, r20
    30c4:	a6 28       	or	r10, r6
    30c6:	b7 28       	or	r11, r7
    30c8:	c8 28       	or	r12, r8
    30ca:	d9 28       	or	r13, r9
    30cc:	0b c0       	rjmp	.+22     	; 0x30e4 <_fpadd_parts+0x192>
    30ce:	82 15       	cp	r24, r2
    30d0:	93 05       	cpc	r25, r3
    30d2:	2c f0       	brlt	.+10     	; 0x30de <_fpadd_parts+0x18c>
    30d4:	1c 01       	movw	r2, r24
    30d6:	aa 24       	eor	r10, r10
    30d8:	bb 24       	eor	r11, r11
    30da:	65 01       	movw	r12, r10
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <_fpadd_parts+0x192>
    30de:	ee 24       	eor	r14, r14
    30e0:	ff 24       	eor	r15, r15
    30e2:	87 01       	movw	r16, r14
    30e4:	11 96       	adiw	r26, 0x01	; 1
    30e6:	9c 91       	ld	r25, X
    30e8:	d2 01       	movw	r26, r4
    30ea:	11 96       	adiw	r26, 0x01	; 1
    30ec:	8c 91       	ld	r24, X
    30ee:	98 17       	cp	r25, r24
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <_fpadd_parts+0x1a2>
    30f2:	45 c0       	rjmp	.+138    	; 0x317e <_fpadd_parts+0x22c>
    30f4:	99 23       	and	r25, r25
    30f6:	39 f0       	breq	.+14     	; 0x3106 <_fpadd_parts+0x1b4>
    30f8:	a8 01       	movw	r20, r16
    30fa:	97 01       	movw	r18, r14
    30fc:	2a 19       	sub	r18, r10
    30fe:	3b 09       	sbc	r19, r11
    3100:	4c 09       	sbc	r20, r12
    3102:	5d 09       	sbc	r21, r13
    3104:	06 c0       	rjmp	.+12     	; 0x3112 <_fpadd_parts+0x1c0>
    3106:	a6 01       	movw	r20, r12
    3108:	95 01       	movw	r18, r10
    310a:	2e 19       	sub	r18, r14
    310c:	3f 09       	sbc	r19, r15
    310e:	40 0b       	sbc	r20, r16
    3110:	51 0b       	sbc	r21, r17
    3112:	57 fd       	sbrc	r21, 7
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <_fpadd_parts+0x1d4>
    3116:	11 82       	std	Z+1, r1	; 0x01
    3118:	33 82       	std	Z+3, r3	; 0x03
    311a:	22 82       	std	Z+2, r2	; 0x02
    311c:	24 83       	std	Z+4, r18	; 0x04
    311e:	35 83       	std	Z+5, r19	; 0x05
    3120:	46 83       	std	Z+6, r20	; 0x06
    3122:	57 83       	std	Z+7, r21	; 0x07
    3124:	1d c0       	rjmp	.+58     	; 0x3160 <_fpadd_parts+0x20e>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	81 83       	std	Z+1, r24	; 0x01
    312a:	33 82       	std	Z+3, r3	; 0x03
    312c:	22 82       	std	Z+2, r2	; 0x02
    312e:	88 27       	eor	r24, r24
    3130:	99 27       	eor	r25, r25
    3132:	dc 01       	movw	r26, r24
    3134:	82 1b       	sub	r24, r18
    3136:	93 0b       	sbc	r25, r19
    3138:	a4 0b       	sbc	r26, r20
    313a:	b5 0b       	sbc	r27, r21
    313c:	84 83       	std	Z+4, r24	; 0x04
    313e:	95 83       	std	Z+5, r25	; 0x05
    3140:	a6 83       	std	Z+6, r26	; 0x06
    3142:	b7 83       	std	Z+7, r27	; 0x07
    3144:	0d c0       	rjmp	.+26     	; 0x3160 <_fpadd_parts+0x20e>
    3146:	22 0f       	add	r18, r18
    3148:	33 1f       	adc	r19, r19
    314a:	44 1f       	adc	r20, r20
    314c:	55 1f       	adc	r21, r21
    314e:	24 83       	std	Z+4, r18	; 0x04
    3150:	35 83       	std	Z+5, r19	; 0x05
    3152:	46 83       	std	Z+6, r20	; 0x06
    3154:	57 83       	std	Z+7, r21	; 0x07
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	93 83       	std	Z+3, r25	; 0x03
    315e:	82 83       	std	Z+2, r24	; 0x02
    3160:	24 81       	ldd	r18, Z+4	; 0x04
    3162:	35 81       	ldd	r19, Z+5	; 0x05
    3164:	46 81       	ldd	r20, Z+6	; 0x06
    3166:	57 81       	ldd	r21, Z+7	; 0x07
    3168:	da 01       	movw	r26, r20
    316a:	c9 01       	movw	r24, r18
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	a1 09       	sbc	r26, r1
    3170:	b1 09       	sbc	r27, r1
    3172:	8f 5f       	subi	r24, 0xFF	; 255
    3174:	9f 4f       	sbci	r25, 0xFF	; 255
    3176:	af 4f       	sbci	r26, 0xFF	; 255
    3178:	bf 43       	sbci	r27, 0x3F	; 63
    317a:	28 f3       	brcs	.-54     	; 0x3146 <_fpadd_parts+0x1f4>
    317c:	0b c0       	rjmp	.+22     	; 0x3194 <_fpadd_parts+0x242>
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	33 82       	std	Z+3, r3	; 0x03
    3182:	22 82       	std	Z+2, r2	; 0x02
    3184:	ea 0c       	add	r14, r10
    3186:	fb 1c       	adc	r15, r11
    3188:	0c 1d       	adc	r16, r12
    318a:	1d 1d       	adc	r17, r13
    318c:	e4 82       	std	Z+4, r14	; 0x04
    318e:	f5 82       	std	Z+5, r15	; 0x05
    3190:	06 83       	std	Z+6, r16	; 0x06
    3192:	17 83       	std	Z+7, r17	; 0x07
    3194:	83 e0       	ldi	r24, 0x03	; 3
    3196:	80 83       	st	Z, r24
    3198:	24 81       	ldd	r18, Z+4	; 0x04
    319a:	35 81       	ldd	r19, Z+5	; 0x05
    319c:	46 81       	ldd	r20, Z+6	; 0x06
    319e:	57 81       	ldd	r21, Z+7	; 0x07
    31a0:	57 ff       	sbrs	r21, 7
    31a2:	1a c0       	rjmp	.+52     	; 0x31d8 <_fpadd_parts+0x286>
    31a4:	c9 01       	movw	r24, r18
    31a6:	aa 27       	eor	r26, r26
    31a8:	97 fd       	sbrc	r25, 7
    31aa:	a0 95       	com	r26
    31ac:	ba 2f       	mov	r27, r26
    31ae:	81 70       	andi	r24, 0x01	; 1
    31b0:	90 70       	andi	r25, 0x00	; 0
    31b2:	a0 70       	andi	r26, 0x00	; 0
    31b4:	b0 70       	andi	r27, 0x00	; 0
    31b6:	56 95       	lsr	r21
    31b8:	47 95       	ror	r20
    31ba:	37 95       	ror	r19
    31bc:	27 95       	ror	r18
    31be:	82 2b       	or	r24, r18
    31c0:	93 2b       	or	r25, r19
    31c2:	a4 2b       	or	r26, r20
    31c4:	b5 2b       	or	r27, r21
    31c6:	84 83       	std	Z+4, r24	; 0x04
    31c8:	95 83       	std	Z+5, r25	; 0x05
    31ca:	a6 83       	std	Z+6, r26	; 0x06
    31cc:	b7 83       	std	Z+7, r27	; 0x07
    31ce:	82 81       	ldd	r24, Z+2	; 0x02
    31d0:	93 81       	ldd	r25, Z+3	; 0x03
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	93 83       	std	Z+3, r25	; 0x03
    31d6:	82 83       	std	Z+2, r24	; 0x02
    31d8:	df 01       	movw	r26, r30
    31da:	01 c0       	rjmp	.+2      	; 0x31de <_fpadd_parts+0x28c>
    31dc:	d2 01       	movw	r26, r4
    31de:	cd 01       	movw	r24, r26
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	e2 e1       	ldi	r30, 0x12	; 18
    31e6:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__epilogue_restores__>

000031ea <__subsf3>:
    31ea:	a0 e2       	ldi	r26, 0x20	; 32
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	eb ef       	ldi	r30, 0xFB	; 251
    31f0:	f8 e1       	ldi	r31, 0x18	; 24
    31f2:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__prologue_saves__+0x18>
    31f6:	69 83       	std	Y+1, r22	; 0x01
    31f8:	7a 83       	std	Y+2, r23	; 0x02
    31fa:	8b 83       	std	Y+3, r24	; 0x03
    31fc:	9c 83       	std	Y+4, r25	; 0x04
    31fe:	2d 83       	std	Y+5, r18	; 0x05
    3200:	3e 83       	std	Y+6, r19	; 0x06
    3202:	4f 83       	std	Y+7, r20	; 0x07
    3204:	58 87       	std	Y+8, r21	; 0x08
    3206:	e9 e0       	ldi	r30, 0x09	; 9
    3208:	ee 2e       	mov	r14, r30
    320a:	f1 2c       	mov	r15, r1
    320c:	ec 0e       	add	r14, r28
    320e:	fd 1e       	adc	r15, r29
    3210:	ce 01       	movw	r24, r28
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	b7 01       	movw	r22, r14
    3216:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    321a:	8e 01       	movw	r16, r28
    321c:	0f 5e       	subi	r16, 0xEF	; 239
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	ce 01       	movw	r24, r28
    3222:	05 96       	adiw	r24, 0x05	; 5
    3224:	b8 01       	movw	r22, r16
    3226:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    322a:	8a 89       	ldd	r24, Y+18	; 0x12
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	89 27       	eor	r24, r25
    3230:	8a 8b       	std	Y+18, r24	; 0x12
    3232:	c7 01       	movw	r24, r14
    3234:	b8 01       	movw	r22, r16
    3236:	ae 01       	movw	r20, r28
    3238:	47 5e       	subi	r20, 0xE7	; 231
    323a:	5f 4f       	sbci	r21, 0xFF	; 255
    323c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_fpadd_parts>
    3240:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__pack_f>
    3244:	a0 96       	adiw	r28, 0x20	; 32
    3246:	e6 e0       	ldi	r30, 0x06	; 6
    3248:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__epilogue_restores__+0x18>

0000324c <__addsf3>:
    324c:	a0 e2       	ldi	r26, 0x20	; 32
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	ec e2       	ldi	r30, 0x2C	; 44
    3252:	f9 e1       	ldi	r31, 0x19	; 25
    3254:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__prologue_saves__+0x18>
    3258:	69 83       	std	Y+1, r22	; 0x01
    325a:	7a 83       	std	Y+2, r23	; 0x02
    325c:	8b 83       	std	Y+3, r24	; 0x03
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	2d 83       	std	Y+5, r18	; 0x05
    3262:	3e 83       	std	Y+6, r19	; 0x06
    3264:	4f 83       	std	Y+7, r20	; 0x07
    3266:	58 87       	std	Y+8, r21	; 0x08
    3268:	f9 e0       	ldi	r31, 0x09	; 9
    326a:	ef 2e       	mov	r14, r31
    326c:	f1 2c       	mov	r15, r1
    326e:	ec 0e       	add	r14, r28
    3270:	fd 1e       	adc	r15, r29
    3272:	ce 01       	movw	r24, r28
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	b7 01       	movw	r22, r14
    3278:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    327c:	8e 01       	movw	r16, r28
    327e:	0f 5e       	subi	r16, 0xEF	; 239
    3280:	1f 4f       	sbci	r17, 0xFF	; 255
    3282:	ce 01       	movw	r24, r28
    3284:	05 96       	adiw	r24, 0x05	; 5
    3286:	b8 01       	movw	r22, r16
    3288:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    328c:	c7 01       	movw	r24, r14
    328e:	b8 01       	movw	r22, r16
    3290:	ae 01       	movw	r20, r28
    3292:	47 5e       	subi	r20, 0xE7	; 231
    3294:	5f 4f       	sbci	r21, 0xFF	; 255
    3296:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_fpadd_parts>
    329a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__pack_f>
    329e:	a0 96       	adiw	r28, 0x20	; 32
    32a0:	e6 e0       	ldi	r30, 0x06	; 6
    32a2:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__epilogue_restores__+0x18>

000032a6 <__mulsf3>:
    32a6:	a0 e2       	ldi	r26, 0x20	; 32
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e9 e5       	ldi	r30, 0x59	; 89
    32ac:	f9 e1       	ldi	r31, 0x19	; 25
    32ae:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__prologue_saves__>
    32b2:	69 83       	std	Y+1, r22	; 0x01
    32b4:	7a 83       	std	Y+2, r23	; 0x02
    32b6:	8b 83       	std	Y+3, r24	; 0x03
    32b8:	9c 83       	std	Y+4, r25	; 0x04
    32ba:	2d 83       	std	Y+5, r18	; 0x05
    32bc:	3e 83       	std	Y+6, r19	; 0x06
    32be:	4f 83       	std	Y+7, r20	; 0x07
    32c0:	58 87       	std	Y+8, r21	; 0x08
    32c2:	ce 01       	movw	r24, r28
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	be 01       	movw	r22, r28
    32c8:	67 5f       	subi	r22, 0xF7	; 247
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    32d0:	ce 01       	movw	r24, r28
    32d2:	05 96       	adiw	r24, 0x05	; 5
    32d4:	be 01       	movw	r22, r28
    32d6:	6f 5e       	subi	r22, 0xEF	; 239
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    32de:	99 85       	ldd	r25, Y+9	; 0x09
    32e0:	92 30       	cpi	r25, 0x02	; 2
    32e2:	88 f0       	brcs	.+34     	; 0x3306 <__mulsf3+0x60>
    32e4:	89 89       	ldd	r24, Y+17	; 0x11
    32e6:	82 30       	cpi	r24, 0x02	; 2
    32e8:	c8 f0       	brcs	.+50     	; 0x331c <__mulsf3+0x76>
    32ea:	94 30       	cpi	r25, 0x04	; 4
    32ec:	19 f4       	brne	.+6      	; 0x32f4 <__mulsf3+0x4e>
    32ee:	82 30       	cpi	r24, 0x02	; 2
    32f0:	51 f4       	brne	.+20     	; 0x3306 <__mulsf3+0x60>
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <__mulsf3+0x56>
    32f4:	84 30       	cpi	r24, 0x04	; 4
    32f6:	29 f4       	brne	.+10     	; 0x3302 <__mulsf3+0x5c>
    32f8:	92 30       	cpi	r25, 0x02	; 2
    32fa:	81 f4       	brne	.+32     	; 0x331c <__mulsf3+0x76>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	92 e0       	ldi	r25, 0x02	; 2
    3300:	c6 c0       	rjmp	.+396    	; 0x348e <__mulsf3+0x1e8>
    3302:	92 30       	cpi	r25, 0x02	; 2
    3304:	49 f4       	brne	.+18     	; 0x3318 <__mulsf3+0x72>
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	9a 85       	ldd	r25, Y+10	; 0x0a
    330a:	8a 89       	ldd	r24, Y+18	; 0x12
    330c:	98 13       	cpse	r25, r24
    330e:	21 e0       	ldi	r18, 0x01	; 1
    3310:	2a 87       	std	Y+10, r18	; 0x0a
    3312:	ce 01       	movw	r24, r28
    3314:	09 96       	adiw	r24, 0x09	; 9
    3316:	bb c0       	rjmp	.+374    	; 0x348e <__mulsf3+0x1e8>
    3318:	82 30       	cpi	r24, 0x02	; 2
    331a:	49 f4       	brne	.+18     	; 0x332e <__mulsf3+0x88>
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	8a 89       	ldd	r24, Y+18	; 0x12
    3322:	98 13       	cpse	r25, r24
    3324:	21 e0       	ldi	r18, 0x01	; 1
    3326:	2a 8b       	std	Y+18, r18	; 0x12
    3328:	ce 01       	movw	r24, r28
    332a:	41 96       	adiw	r24, 0x11	; 17
    332c:	b0 c0       	rjmp	.+352    	; 0x348e <__mulsf3+0x1e8>
    332e:	2d 84       	ldd	r2, Y+13	; 0x0d
    3330:	3e 84       	ldd	r3, Y+14	; 0x0e
    3332:	4f 84       	ldd	r4, Y+15	; 0x0f
    3334:	58 88       	ldd	r5, Y+16	; 0x10
    3336:	6d 88       	ldd	r6, Y+21	; 0x15
    3338:	7e 88       	ldd	r7, Y+22	; 0x16
    333a:	8f 88       	ldd	r8, Y+23	; 0x17
    333c:	98 8c       	ldd	r9, Y+24	; 0x18
    333e:	ee 24       	eor	r14, r14
    3340:	ff 24       	eor	r15, r15
    3342:	87 01       	movw	r16, r14
    3344:	aa 24       	eor	r10, r10
    3346:	bb 24       	eor	r11, r11
    3348:	65 01       	movw	r12, r10
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	60 e0       	ldi	r22, 0x00	; 0
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	e0 e0       	ldi	r30, 0x00	; 0
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	c1 01       	movw	r24, r2
    3358:	81 70       	andi	r24, 0x01	; 1
    335a:	90 70       	andi	r25, 0x00	; 0
    335c:	89 2b       	or	r24, r25
    335e:	e9 f0       	breq	.+58     	; 0x339a <__mulsf3+0xf4>
    3360:	e6 0c       	add	r14, r6
    3362:	f7 1c       	adc	r15, r7
    3364:	08 1d       	adc	r16, r8
    3366:	19 1d       	adc	r17, r9
    3368:	9a 01       	movw	r18, r20
    336a:	ab 01       	movw	r20, r22
    336c:	2a 0d       	add	r18, r10
    336e:	3b 1d       	adc	r19, r11
    3370:	4c 1d       	adc	r20, r12
    3372:	5d 1d       	adc	r21, r13
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	a0 e0       	ldi	r26, 0x00	; 0
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e6 14       	cp	r14, r6
    337e:	f7 04       	cpc	r15, r7
    3380:	08 05       	cpc	r16, r8
    3382:	19 05       	cpc	r17, r9
    3384:	20 f4       	brcc	.+8      	; 0x338e <__mulsf3+0xe8>
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e0       	ldi	r26, 0x00	; 0
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	ba 01       	movw	r22, r20
    3390:	a9 01       	movw	r20, r18
    3392:	48 0f       	add	r20, r24
    3394:	59 1f       	adc	r21, r25
    3396:	6a 1f       	adc	r22, r26
    3398:	7b 1f       	adc	r23, r27
    339a:	aa 0c       	add	r10, r10
    339c:	bb 1c       	adc	r11, r11
    339e:	cc 1c       	adc	r12, r12
    33a0:	dd 1c       	adc	r13, r13
    33a2:	97 fe       	sbrs	r9, 7
    33a4:	08 c0       	rjmp	.+16     	; 0x33b6 <__mulsf3+0x110>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	a8 2a       	or	r10, r24
    33b0:	b9 2a       	or	r11, r25
    33b2:	ca 2a       	or	r12, r26
    33b4:	db 2a       	or	r13, r27
    33b6:	31 96       	adiw	r30, 0x01	; 1
    33b8:	e0 32       	cpi	r30, 0x20	; 32
    33ba:	f1 05       	cpc	r31, r1
    33bc:	49 f0       	breq	.+18     	; 0x33d0 <__mulsf3+0x12a>
    33be:	66 0c       	add	r6, r6
    33c0:	77 1c       	adc	r7, r7
    33c2:	88 1c       	adc	r8, r8
    33c4:	99 1c       	adc	r9, r9
    33c6:	56 94       	lsr	r5
    33c8:	47 94       	ror	r4
    33ca:	37 94       	ror	r3
    33cc:	27 94       	ror	r2
    33ce:	c3 cf       	rjmp	.-122    	; 0x3356 <__mulsf3+0xb0>
    33d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    33d2:	ea 89       	ldd	r30, Y+18	; 0x12
    33d4:	2b 89       	ldd	r18, Y+19	; 0x13
    33d6:	3c 89       	ldd	r19, Y+20	; 0x14
    33d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    33da:	9c 85       	ldd	r25, Y+12	; 0x0c
    33dc:	28 0f       	add	r18, r24
    33de:	39 1f       	adc	r19, r25
    33e0:	2e 5f       	subi	r18, 0xFE	; 254
    33e2:	3f 4f       	sbci	r19, 0xFF	; 255
    33e4:	17 c0       	rjmp	.+46     	; 0x3414 <__mulsf3+0x16e>
    33e6:	ca 01       	movw	r24, r20
    33e8:	81 70       	andi	r24, 0x01	; 1
    33ea:	90 70       	andi	r25, 0x00	; 0
    33ec:	89 2b       	or	r24, r25
    33ee:	61 f0       	breq	.+24     	; 0x3408 <__mulsf3+0x162>
    33f0:	16 95       	lsr	r17
    33f2:	07 95       	ror	r16
    33f4:	f7 94       	ror	r15
    33f6:	e7 94       	ror	r14
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	a0 e0       	ldi	r26, 0x00	; 0
    33fe:	b0 e8       	ldi	r27, 0x80	; 128
    3400:	e8 2a       	or	r14, r24
    3402:	f9 2a       	or	r15, r25
    3404:	0a 2b       	or	r16, r26
    3406:	1b 2b       	or	r17, r27
    3408:	76 95       	lsr	r23
    340a:	67 95       	ror	r22
    340c:	57 95       	ror	r21
    340e:	47 95       	ror	r20
    3410:	2f 5f       	subi	r18, 0xFF	; 255
    3412:	3f 4f       	sbci	r19, 0xFF	; 255
    3414:	77 fd       	sbrc	r23, 7
    3416:	e7 cf       	rjmp	.-50     	; 0x33e6 <__mulsf3+0x140>
    3418:	0c c0       	rjmp	.+24     	; 0x3432 <__mulsf3+0x18c>
    341a:	44 0f       	add	r20, r20
    341c:	55 1f       	adc	r21, r21
    341e:	66 1f       	adc	r22, r22
    3420:	77 1f       	adc	r23, r23
    3422:	17 fd       	sbrc	r17, 7
    3424:	41 60       	ori	r20, 0x01	; 1
    3426:	ee 0c       	add	r14, r14
    3428:	ff 1c       	adc	r15, r15
    342a:	00 1f       	adc	r16, r16
    342c:	11 1f       	adc	r17, r17
    342e:	21 50       	subi	r18, 0x01	; 1
    3430:	30 40       	sbci	r19, 0x00	; 0
    3432:	40 30       	cpi	r20, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	59 07       	cpc	r21, r25
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	69 07       	cpc	r22, r25
    343c:	90 e4       	ldi	r25, 0x40	; 64
    343e:	79 07       	cpc	r23, r25
    3440:	60 f3       	brcs	.-40     	; 0x341a <__mulsf3+0x174>
    3442:	2b 8f       	std	Y+27, r18	; 0x1b
    3444:	3c 8f       	std	Y+28, r19	; 0x1c
    3446:	db 01       	movw	r26, r22
    3448:	ca 01       	movw	r24, r20
    344a:	8f 77       	andi	r24, 0x7F	; 127
    344c:	90 70       	andi	r25, 0x00	; 0
    344e:	a0 70       	andi	r26, 0x00	; 0
    3450:	b0 70       	andi	r27, 0x00	; 0
    3452:	80 34       	cpi	r24, 0x40	; 64
    3454:	91 05       	cpc	r25, r1
    3456:	a1 05       	cpc	r26, r1
    3458:	b1 05       	cpc	r27, r1
    345a:	61 f4       	brne	.+24     	; 0x3474 <__mulsf3+0x1ce>
    345c:	47 fd       	sbrc	r20, 7
    345e:	0a c0       	rjmp	.+20     	; 0x3474 <__mulsf3+0x1ce>
    3460:	e1 14       	cp	r14, r1
    3462:	f1 04       	cpc	r15, r1
    3464:	01 05       	cpc	r16, r1
    3466:	11 05       	cpc	r17, r1
    3468:	29 f0       	breq	.+10     	; 0x3474 <__mulsf3+0x1ce>
    346a:	40 5c       	subi	r20, 0xC0	; 192
    346c:	5f 4f       	sbci	r21, 0xFF	; 255
    346e:	6f 4f       	sbci	r22, 0xFF	; 255
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	40 78       	andi	r20, 0x80	; 128
    3474:	1a 8e       	std	Y+26, r1	; 0x1a
    3476:	fe 17       	cp	r31, r30
    3478:	11 f0       	breq	.+4      	; 0x347e <__mulsf3+0x1d8>
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	8a 8f       	std	Y+26, r24	; 0x1a
    347e:	4d 8f       	std	Y+29, r20	; 0x1d
    3480:	5e 8f       	std	Y+30, r21	; 0x1e
    3482:	6f 8f       	std	Y+31, r22	; 0x1f
    3484:	78 a3       	std	Y+32, r23	; 0x20
    3486:	83 e0       	ldi	r24, 0x03	; 3
    3488:	89 8f       	std	Y+25, r24	; 0x19
    348a:	ce 01       	movw	r24, r28
    348c:	49 96       	adiw	r24, 0x19	; 25
    348e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__pack_f>
    3492:	a0 96       	adiw	r28, 0x20	; 32
    3494:	e2 e1       	ldi	r30, 0x12	; 18
    3496:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__epilogue_restores__>

0000349a <__divsf3>:
    349a:	a8 e1       	ldi	r26, 0x18	; 24
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e3 e5       	ldi	r30, 0x53	; 83
    34a0:	fa e1       	ldi	r31, 0x1A	; 26
    34a2:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__prologue_saves__+0x10>
    34a6:	69 83       	std	Y+1, r22	; 0x01
    34a8:	7a 83       	std	Y+2, r23	; 0x02
    34aa:	8b 83       	std	Y+3, r24	; 0x03
    34ac:	9c 83       	std	Y+4, r25	; 0x04
    34ae:	2d 83       	std	Y+5, r18	; 0x05
    34b0:	3e 83       	std	Y+6, r19	; 0x06
    34b2:	4f 83       	std	Y+7, r20	; 0x07
    34b4:	58 87       	std	Y+8, r21	; 0x08
    34b6:	b9 e0       	ldi	r27, 0x09	; 9
    34b8:	eb 2e       	mov	r14, r27
    34ba:	f1 2c       	mov	r15, r1
    34bc:	ec 0e       	add	r14, r28
    34be:	fd 1e       	adc	r15, r29
    34c0:	ce 01       	movw	r24, r28
    34c2:	01 96       	adiw	r24, 0x01	; 1
    34c4:	b7 01       	movw	r22, r14
    34c6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    34ca:	8e 01       	movw	r16, r28
    34cc:	0f 5e       	subi	r16, 0xEF	; 239
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	ce 01       	movw	r24, r28
    34d2:	05 96       	adiw	r24, 0x05	; 5
    34d4:	b8 01       	movw	r22, r16
    34d6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    34da:	29 85       	ldd	r18, Y+9	; 0x09
    34dc:	22 30       	cpi	r18, 0x02	; 2
    34de:	08 f4       	brcc	.+2      	; 0x34e2 <__divsf3+0x48>
    34e0:	7e c0       	rjmp	.+252    	; 0x35de <__divsf3+0x144>
    34e2:	39 89       	ldd	r19, Y+17	; 0x11
    34e4:	32 30       	cpi	r19, 0x02	; 2
    34e6:	10 f4       	brcc	.+4      	; 0x34ec <__divsf3+0x52>
    34e8:	b8 01       	movw	r22, r16
    34ea:	7c c0       	rjmp	.+248    	; 0x35e4 <__divsf3+0x14a>
    34ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ee:	9a 89       	ldd	r25, Y+18	; 0x12
    34f0:	89 27       	eor	r24, r25
    34f2:	8a 87       	std	Y+10, r24	; 0x0a
    34f4:	24 30       	cpi	r18, 0x04	; 4
    34f6:	11 f0       	breq	.+4      	; 0x34fc <__divsf3+0x62>
    34f8:	22 30       	cpi	r18, 0x02	; 2
    34fa:	31 f4       	brne	.+12     	; 0x3508 <__divsf3+0x6e>
    34fc:	23 17       	cp	r18, r19
    34fe:	09 f0       	breq	.+2      	; 0x3502 <__divsf3+0x68>
    3500:	6e c0       	rjmp	.+220    	; 0x35de <__divsf3+0x144>
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	72 e0       	ldi	r23, 0x02	; 2
    3506:	6e c0       	rjmp	.+220    	; 0x35e4 <__divsf3+0x14a>
    3508:	34 30       	cpi	r19, 0x04	; 4
    350a:	39 f4       	brne	.+14     	; 0x351a <__divsf3+0x80>
    350c:	1d 86       	std	Y+13, r1	; 0x0d
    350e:	1e 86       	std	Y+14, r1	; 0x0e
    3510:	1f 86       	std	Y+15, r1	; 0x0f
    3512:	18 8a       	std	Y+16, r1	; 0x10
    3514:	1c 86       	std	Y+12, r1	; 0x0c
    3516:	1b 86       	std	Y+11, r1	; 0x0b
    3518:	04 c0       	rjmp	.+8      	; 0x3522 <__divsf3+0x88>
    351a:	32 30       	cpi	r19, 0x02	; 2
    351c:	21 f4       	brne	.+8      	; 0x3526 <__divsf3+0x8c>
    351e:	84 e0       	ldi	r24, 0x04	; 4
    3520:	89 87       	std	Y+9, r24	; 0x09
    3522:	b7 01       	movw	r22, r14
    3524:	5f c0       	rjmp	.+190    	; 0x35e4 <__divsf3+0x14a>
    3526:	2b 85       	ldd	r18, Y+11	; 0x0b
    3528:	3c 85       	ldd	r19, Y+12	; 0x0c
    352a:	8b 89       	ldd	r24, Y+19	; 0x13
    352c:	9c 89       	ldd	r25, Y+20	; 0x14
    352e:	28 1b       	sub	r18, r24
    3530:	39 0b       	sbc	r19, r25
    3532:	3c 87       	std	Y+12, r19	; 0x0c
    3534:	2b 87       	std	Y+11, r18	; 0x0b
    3536:	ed 84       	ldd	r14, Y+13	; 0x0d
    3538:	fe 84       	ldd	r15, Y+14	; 0x0e
    353a:	0f 85       	ldd	r16, Y+15	; 0x0f
    353c:	18 89       	ldd	r17, Y+16	; 0x10
    353e:	ad 88       	ldd	r10, Y+21	; 0x15
    3540:	be 88       	ldd	r11, Y+22	; 0x16
    3542:	cf 88       	ldd	r12, Y+23	; 0x17
    3544:	d8 8c       	ldd	r13, Y+24	; 0x18
    3546:	ea 14       	cp	r14, r10
    3548:	fb 04       	cpc	r15, r11
    354a:	0c 05       	cpc	r16, r12
    354c:	1d 05       	cpc	r17, r13
    354e:	40 f4       	brcc	.+16     	; 0x3560 <__divsf3+0xc6>
    3550:	ee 0c       	add	r14, r14
    3552:	ff 1c       	adc	r15, r15
    3554:	00 1f       	adc	r16, r16
    3556:	11 1f       	adc	r17, r17
    3558:	21 50       	subi	r18, 0x01	; 1
    355a:	30 40       	sbci	r19, 0x00	; 0
    355c:	3c 87       	std	Y+12, r19	; 0x0c
    355e:	2b 87       	std	Y+11, r18	; 0x0b
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	a0 e0       	ldi	r26, 0x00	; 0
    356e:	b0 e4       	ldi	r27, 0x40	; 64
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	ea 14       	cp	r14, r10
    3576:	fb 04       	cpc	r15, r11
    3578:	0c 05       	cpc	r16, r12
    357a:	1d 05       	cpc	r17, r13
    357c:	40 f0       	brcs	.+16     	; 0x358e <__divsf3+0xf4>
    357e:	28 2b       	or	r18, r24
    3580:	39 2b       	or	r19, r25
    3582:	4a 2b       	or	r20, r26
    3584:	5b 2b       	or	r21, r27
    3586:	ea 18       	sub	r14, r10
    3588:	fb 08       	sbc	r15, r11
    358a:	0c 09       	sbc	r16, r12
    358c:	1d 09       	sbc	r17, r13
    358e:	b6 95       	lsr	r27
    3590:	a7 95       	ror	r26
    3592:	97 95       	ror	r25
    3594:	87 95       	ror	r24
    3596:	ee 0c       	add	r14, r14
    3598:	ff 1c       	adc	r15, r15
    359a:	00 1f       	adc	r16, r16
    359c:	11 1f       	adc	r17, r17
    359e:	6f 5f       	subi	r22, 0xFF	; 255
    35a0:	7f 4f       	sbci	r23, 0xFF	; 255
    35a2:	6f 31       	cpi	r22, 0x1F	; 31
    35a4:	71 05       	cpc	r23, r1
    35a6:	31 f7       	brne	.-52     	; 0x3574 <__divsf3+0xda>
    35a8:	da 01       	movw	r26, r20
    35aa:	c9 01       	movw	r24, r18
    35ac:	8f 77       	andi	r24, 0x7F	; 127
    35ae:	90 70       	andi	r25, 0x00	; 0
    35b0:	a0 70       	andi	r26, 0x00	; 0
    35b2:	b0 70       	andi	r27, 0x00	; 0
    35b4:	80 34       	cpi	r24, 0x40	; 64
    35b6:	91 05       	cpc	r25, r1
    35b8:	a1 05       	cpc	r26, r1
    35ba:	b1 05       	cpc	r27, r1
    35bc:	61 f4       	brne	.+24     	; 0x35d6 <__divsf3+0x13c>
    35be:	27 fd       	sbrc	r18, 7
    35c0:	0a c0       	rjmp	.+20     	; 0x35d6 <__divsf3+0x13c>
    35c2:	e1 14       	cp	r14, r1
    35c4:	f1 04       	cpc	r15, r1
    35c6:	01 05       	cpc	r16, r1
    35c8:	11 05       	cpc	r17, r1
    35ca:	29 f0       	breq	.+10     	; 0x35d6 <__divsf3+0x13c>
    35cc:	20 5c       	subi	r18, 0xC0	; 192
    35ce:	3f 4f       	sbci	r19, 0xFF	; 255
    35d0:	4f 4f       	sbci	r20, 0xFF	; 255
    35d2:	5f 4f       	sbci	r21, 0xFF	; 255
    35d4:	20 78       	andi	r18, 0x80	; 128
    35d6:	2d 87       	std	Y+13, r18	; 0x0d
    35d8:	3e 87       	std	Y+14, r19	; 0x0e
    35da:	4f 87       	std	Y+15, r20	; 0x0f
    35dc:	58 8b       	std	Y+16, r21	; 0x10
    35de:	be 01       	movw	r22, r28
    35e0:	67 5f       	subi	r22, 0xF7	; 247
    35e2:	7f 4f       	sbci	r23, 0xFF	; 255
    35e4:	cb 01       	movw	r24, r22
    35e6:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__pack_f>
    35ea:	68 96       	adiw	r28, 0x18	; 24
    35ec:	ea e0       	ldi	r30, 0x0A	; 10
    35ee:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__epilogue_restores__+0x10>

000035f2 <__gtsf2>:
    35f2:	a8 e1       	ldi	r26, 0x18	; 24
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	ef ef       	ldi	r30, 0xFF	; 255
    35f8:	fa e1       	ldi	r31, 0x1A	; 26
    35fa:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__prologue_saves__+0x18>
    35fe:	69 83       	std	Y+1, r22	; 0x01
    3600:	7a 83       	std	Y+2, r23	; 0x02
    3602:	8b 83       	std	Y+3, r24	; 0x03
    3604:	9c 83       	std	Y+4, r25	; 0x04
    3606:	2d 83       	std	Y+5, r18	; 0x05
    3608:	3e 83       	std	Y+6, r19	; 0x06
    360a:	4f 83       	std	Y+7, r20	; 0x07
    360c:	58 87       	std	Y+8, r21	; 0x08
    360e:	89 e0       	ldi	r24, 0x09	; 9
    3610:	e8 2e       	mov	r14, r24
    3612:	f1 2c       	mov	r15, r1
    3614:	ec 0e       	add	r14, r28
    3616:	fd 1e       	adc	r15, r29
    3618:	ce 01       	movw	r24, r28
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	b7 01       	movw	r22, r14
    361e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    3622:	8e 01       	movw	r16, r28
    3624:	0f 5e       	subi	r16, 0xEF	; 239
    3626:	1f 4f       	sbci	r17, 0xFF	; 255
    3628:	ce 01       	movw	r24, r28
    362a:	05 96       	adiw	r24, 0x05	; 5
    362c:	b8 01       	movw	r22, r16
    362e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	82 30       	cpi	r24, 0x02	; 2
    3636:	40 f0       	brcs	.+16     	; 0x3648 <__gtsf2+0x56>
    3638:	89 89       	ldd	r24, Y+17	; 0x11
    363a:	82 30       	cpi	r24, 0x02	; 2
    363c:	28 f0       	brcs	.+10     	; 0x3648 <__gtsf2+0x56>
    363e:	c7 01       	movw	r24, r14
    3640:	b8 01       	movw	r22, r16
    3642:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__fpcmp_parts_f>
    3646:	01 c0       	rjmp	.+2      	; 0x364a <__gtsf2+0x58>
    3648:	8f ef       	ldi	r24, 0xFF	; 255
    364a:	68 96       	adiw	r28, 0x18	; 24
    364c:	e6 e0       	ldi	r30, 0x06	; 6
    364e:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__epilogue_restores__+0x18>

00003652 <__gesf2>:
    3652:	a8 e1       	ldi	r26, 0x18	; 24
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	ef e2       	ldi	r30, 0x2F	; 47
    3658:	fb e1       	ldi	r31, 0x1B	; 27
    365a:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__prologue_saves__+0x18>
    365e:	69 83       	std	Y+1, r22	; 0x01
    3660:	7a 83       	std	Y+2, r23	; 0x02
    3662:	8b 83       	std	Y+3, r24	; 0x03
    3664:	9c 83       	std	Y+4, r25	; 0x04
    3666:	2d 83       	std	Y+5, r18	; 0x05
    3668:	3e 83       	std	Y+6, r19	; 0x06
    366a:	4f 83       	std	Y+7, r20	; 0x07
    366c:	58 87       	std	Y+8, r21	; 0x08
    366e:	89 e0       	ldi	r24, 0x09	; 9
    3670:	e8 2e       	mov	r14, r24
    3672:	f1 2c       	mov	r15, r1
    3674:	ec 0e       	add	r14, r28
    3676:	fd 1e       	adc	r15, r29
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	b7 01       	movw	r22, r14
    367e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    3682:	8e 01       	movw	r16, r28
    3684:	0f 5e       	subi	r16, 0xEF	; 239
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	ce 01       	movw	r24, r28
    368a:	05 96       	adiw	r24, 0x05	; 5
    368c:	b8 01       	movw	r22, r16
    368e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    3692:	89 85       	ldd	r24, Y+9	; 0x09
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	40 f0       	brcs	.+16     	; 0x36a8 <__gesf2+0x56>
    3698:	89 89       	ldd	r24, Y+17	; 0x11
    369a:	82 30       	cpi	r24, 0x02	; 2
    369c:	28 f0       	brcs	.+10     	; 0x36a8 <__gesf2+0x56>
    369e:	c7 01       	movw	r24, r14
    36a0:	b8 01       	movw	r22, r16
    36a2:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__fpcmp_parts_f>
    36a6:	01 c0       	rjmp	.+2      	; 0x36aa <__gesf2+0x58>
    36a8:	8f ef       	ldi	r24, 0xFF	; 255
    36aa:	68 96       	adiw	r28, 0x18	; 24
    36ac:	e6 e0       	ldi	r30, 0x06	; 6
    36ae:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__epilogue_restores__+0x18>

000036b2 <__ltsf2>:
    36b2:	a8 e1       	ldi	r26, 0x18	; 24
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	ef e5       	ldi	r30, 0x5F	; 95
    36b8:	fb e1       	ldi	r31, 0x1B	; 27
    36ba:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__prologue_saves__+0x18>
    36be:	69 83       	std	Y+1, r22	; 0x01
    36c0:	7a 83       	std	Y+2, r23	; 0x02
    36c2:	8b 83       	std	Y+3, r24	; 0x03
    36c4:	9c 83       	std	Y+4, r25	; 0x04
    36c6:	2d 83       	std	Y+5, r18	; 0x05
    36c8:	3e 83       	std	Y+6, r19	; 0x06
    36ca:	4f 83       	std	Y+7, r20	; 0x07
    36cc:	58 87       	std	Y+8, r21	; 0x08
    36ce:	89 e0       	ldi	r24, 0x09	; 9
    36d0:	e8 2e       	mov	r14, r24
    36d2:	f1 2c       	mov	r15, r1
    36d4:	ec 0e       	add	r14, r28
    36d6:	fd 1e       	adc	r15, r29
    36d8:	ce 01       	movw	r24, r28
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	b7 01       	movw	r22, r14
    36de:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    36e2:	8e 01       	movw	r16, r28
    36e4:	0f 5e       	subi	r16, 0xEF	; 239
    36e6:	1f 4f       	sbci	r17, 0xFF	; 255
    36e8:	ce 01       	movw	r24, r28
    36ea:	05 96       	adiw	r24, 0x05	; 5
    36ec:	b8 01       	movw	r22, r16
    36ee:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    36f2:	89 85       	ldd	r24, Y+9	; 0x09
    36f4:	82 30       	cpi	r24, 0x02	; 2
    36f6:	40 f0       	brcs	.+16     	; 0x3708 <__ltsf2+0x56>
    36f8:	89 89       	ldd	r24, Y+17	; 0x11
    36fa:	82 30       	cpi	r24, 0x02	; 2
    36fc:	28 f0       	brcs	.+10     	; 0x3708 <__ltsf2+0x56>
    36fe:	c7 01       	movw	r24, r14
    3700:	b8 01       	movw	r22, r16
    3702:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__fpcmp_parts_f>
    3706:	01 c0       	rjmp	.+2      	; 0x370a <__ltsf2+0x58>
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	68 96       	adiw	r28, 0x18	; 24
    370c:	e6 e0       	ldi	r30, 0x06	; 6
    370e:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__epilogue_restores__+0x18>

00003712 <__floatsisf>:
    3712:	a8 e0       	ldi	r26, 0x08	; 8
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	ef e8       	ldi	r30, 0x8F	; 143
    3718:	fb e1       	ldi	r31, 0x1B	; 27
    371a:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__prologue_saves__+0x12>
    371e:	9b 01       	movw	r18, r22
    3720:	ac 01       	movw	r20, r24
    3722:	83 e0       	ldi	r24, 0x03	; 3
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	da 01       	movw	r26, r20
    3728:	c9 01       	movw	r24, r18
    372a:	88 27       	eor	r24, r24
    372c:	b7 fd       	sbrc	r27, 7
    372e:	83 95       	inc	r24
    3730:	99 27       	eor	r25, r25
    3732:	aa 27       	eor	r26, r26
    3734:	bb 27       	eor	r27, r27
    3736:	b8 2e       	mov	r11, r24
    3738:	21 15       	cp	r18, r1
    373a:	31 05       	cpc	r19, r1
    373c:	41 05       	cpc	r20, r1
    373e:	51 05       	cpc	r21, r1
    3740:	19 f4       	brne	.+6      	; 0x3748 <__floatsisf+0x36>
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	3a c0       	rjmp	.+116    	; 0x37bc <__floatsisf+0xaa>
    3748:	88 23       	and	r24, r24
    374a:	a9 f0       	breq	.+42     	; 0x3776 <__floatsisf+0x64>
    374c:	20 30       	cpi	r18, 0x00	; 0
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	38 07       	cpc	r19, r24
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	48 07       	cpc	r20, r24
    3756:	80 e8       	ldi	r24, 0x80	; 128
    3758:	58 07       	cpc	r21, r24
    375a:	29 f4       	brne	.+10     	; 0x3766 <__floatsisf+0x54>
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	9f ec       	ldi	r25, 0xCF	; 207
    3764:	30 c0       	rjmp	.+96     	; 0x37c6 <__floatsisf+0xb4>
    3766:	ee 24       	eor	r14, r14
    3768:	ff 24       	eor	r15, r15
    376a:	87 01       	movw	r16, r14
    376c:	e2 1a       	sub	r14, r18
    376e:	f3 0a       	sbc	r15, r19
    3770:	04 0b       	sbc	r16, r20
    3772:	15 0b       	sbc	r17, r21
    3774:	02 c0       	rjmp	.+4      	; 0x377a <__floatsisf+0x68>
    3776:	79 01       	movw	r14, r18
    3778:	8a 01       	movw	r16, r20
    377a:	8e e1       	ldi	r24, 0x1E	; 30
    377c:	c8 2e       	mov	r12, r24
    377e:	d1 2c       	mov	r13, r1
    3780:	dc 82       	std	Y+4, r13	; 0x04
    3782:	cb 82       	std	Y+3, r12	; 0x03
    3784:	ed 82       	std	Y+5, r14	; 0x05
    3786:	fe 82       	std	Y+6, r15	; 0x06
    3788:	0f 83       	std	Y+7, r16	; 0x07
    378a:	18 87       	std	Y+8, r17	; 0x08
    378c:	c8 01       	movw	r24, r16
    378e:	b7 01       	movw	r22, r14
    3790:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__clzsi2>
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	18 16       	cp	r1, r24
    3798:	19 06       	cpc	r1, r25
    379a:	84 f4       	brge	.+32     	; 0x37bc <__floatsisf+0xaa>
    379c:	08 2e       	mov	r0, r24
    379e:	04 c0       	rjmp	.+8      	; 0x37a8 <__floatsisf+0x96>
    37a0:	ee 0c       	add	r14, r14
    37a2:	ff 1c       	adc	r15, r15
    37a4:	00 1f       	adc	r16, r16
    37a6:	11 1f       	adc	r17, r17
    37a8:	0a 94       	dec	r0
    37aa:	d2 f7       	brpl	.-12     	; 0x37a0 <__floatsisf+0x8e>
    37ac:	ed 82       	std	Y+5, r14	; 0x05
    37ae:	fe 82       	std	Y+6, r15	; 0x06
    37b0:	0f 83       	std	Y+7, r16	; 0x07
    37b2:	18 87       	std	Y+8, r17	; 0x08
    37b4:	c8 1a       	sub	r12, r24
    37b6:	d9 0a       	sbc	r13, r25
    37b8:	dc 82       	std	Y+4, r13	; 0x04
    37ba:	cb 82       	std	Y+3, r12	; 0x03
    37bc:	ba 82       	std	Y+2, r11	; 0x02
    37be:	ce 01       	movw	r24, r28
    37c0:	01 96       	adiw	r24, 0x01	; 1
    37c2:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__pack_f>
    37c6:	28 96       	adiw	r28, 0x08	; 8
    37c8:	e9 e0       	ldi	r30, 0x09	; 9
    37ca:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__epilogue_restores__+0x12>

000037ce <__fixsfsi>:
    37ce:	ac e0       	ldi	r26, 0x0C	; 12
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	ed ee       	ldi	r30, 0xED	; 237
    37d4:	fb e1       	ldi	r31, 0x1B	; 27
    37d6:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__prologue_saves__+0x20>
    37da:	69 83       	std	Y+1, r22	; 0x01
    37dc:	7a 83       	std	Y+2, r23	; 0x02
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	9c 83       	std	Y+4, r25	; 0x04
    37e2:	ce 01       	movw	r24, r28
    37e4:	01 96       	adiw	r24, 0x01	; 1
    37e6:	be 01       	movw	r22, r28
    37e8:	6b 5f       	subi	r22, 0xFB	; 251
    37ea:	7f 4f       	sbci	r23, 0xFF	; 255
    37ec:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__unpack_f>
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	82 30       	cpi	r24, 0x02	; 2
    37f4:	61 f1       	breq	.+88     	; 0x384e <__fixsfsi+0x80>
    37f6:	82 30       	cpi	r24, 0x02	; 2
    37f8:	50 f1       	brcs	.+84     	; 0x384e <__fixsfsi+0x80>
    37fa:	84 30       	cpi	r24, 0x04	; 4
    37fc:	21 f4       	brne	.+8      	; 0x3806 <__fixsfsi+0x38>
    37fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3800:	88 23       	and	r24, r24
    3802:	51 f1       	breq	.+84     	; 0x3858 <__fixsfsi+0x8a>
    3804:	2e c0       	rjmp	.+92     	; 0x3862 <__fixsfsi+0x94>
    3806:	2f 81       	ldd	r18, Y+7	; 0x07
    3808:	38 85       	ldd	r19, Y+8	; 0x08
    380a:	37 fd       	sbrc	r19, 7
    380c:	20 c0       	rjmp	.+64     	; 0x384e <__fixsfsi+0x80>
    380e:	6e 81       	ldd	r22, Y+6	; 0x06
    3810:	2f 31       	cpi	r18, 0x1F	; 31
    3812:	31 05       	cpc	r19, r1
    3814:	1c f0       	brlt	.+6      	; 0x381c <__fixsfsi+0x4e>
    3816:	66 23       	and	r22, r22
    3818:	f9 f0       	breq	.+62     	; 0x3858 <__fixsfsi+0x8a>
    381a:	23 c0       	rjmp	.+70     	; 0x3862 <__fixsfsi+0x94>
    381c:	8e e1       	ldi	r24, 0x1E	; 30
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	82 1b       	sub	r24, r18
    3822:	93 0b       	sbc	r25, r19
    3824:	29 85       	ldd	r18, Y+9	; 0x09
    3826:	3a 85       	ldd	r19, Y+10	; 0x0a
    3828:	4b 85       	ldd	r20, Y+11	; 0x0b
    382a:	5c 85       	ldd	r21, Y+12	; 0x0c
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <__fixsfsi+0x68>
    382e:	56 95       	lsr	r21
    3830:	47 95       	ror	r20
    3832:	37 95       	ror	r19
    3834:	27 95       	ror	r18
    3836:	8a 95       	dec	r24
    3838:	d2 f7       	brpl	.-12     	; 0x382e <__fixsfsi+0x60>
    383a:	66 23       	and	r22, r22
    383c:	b1 f0       	breq	.+44     	; 0x386a <__fixsfsi+0x9c>
    383e:	50 95       	com	r21
    3840:	40 95       	com	r20
    3842:	30 95       	com	r19
    3844:	21 95       	neg	r18
    3846:	3f 4f       	sbci	r19, 0xFF	; 255
    3848:	4f 4f       	sbci	r20, 0xFF	; 255
    384a:	5f 4f       	sbci	r21, 0xFF	; 255
    384c:	0e c0       	rjmp	.+28     	; 0x386a <__fixsfsi+0x9c>
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	50 e0       	ldi	r21, 0x00	; 0
    3856:	09 c0       	rjmp	.+18     	; 0x386a <__fixsfsi+0x9c>
    3858:	2f ef       	ldi	r18, 0xFF	; 255
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f ef       	ldi	r20, 0xFF	; 255
    385e:	5f e7       	ldi	r21, 0x7F	; 127
    3860:	04 c0       	rjmp	.+8      	; 0x386a <__fixsfsi+0x9c>
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	50 e8       	ldi	r21, 0x80	; 128
    386a:	b9 01       	movw	r22, r18
    386c:	ca 01       	movw	r24, r20
    386e:	2c 96       	adiw	r28, 0x0c	; 12
    3870:	e2 e0       	ldi	r30, 0x02	; 2
    3872:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__epilogue_restores__+0x20>

00003876 <__floatunsisf>:
    3876:	a8 e0       	ldi	r26, 0x08	; 8
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	e1 e4       	ldi	r30, 0x41	; 65
    387c:	fc e1       	ldi	r31, 0x1C	; 28
    387e:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__prologue_saves__+0x10>
    3882:	7b 01       	movw	r14, r22
    3884:	8c 01       	movw	r16, r24
    3886:	61 15       	cp	r22, r1
    3888:	71 05       	cpc	r23, r1
    388a:	81 05       	cpc	r24, r1
    388c:	91 05       	cpc	r25, r1
    388e:	19 f4       	brne	.+6      	; 0x3896 <__floatunsisf+0x20>
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	89 83       	std	Y+1, r24	; 0x01
    3894:	60 c0       	rjmp	.+192    	; 0x3956 <__floatunsisf+0xe0>
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	89 83       	std	Y+1, r24	; 0x01
    389a:	8e e1       	ldi	r24, 0x1E	; 30
    389c:	c8 2e       	mov	r12, r24
    389e:	d1 2c       	mov	r13, r1
    38a0:	dc 82       	std	Y+4, r13	; 0x04
    38a2:	cb 82       	std	Y+3, r12	; 0x03
    38a4:	ed 82       	std	Y+5, r14	; 0x05
    38a6:	fe 82       	std	Y+6, r15	; 0x06
    38a8:	0f 83       	std	Y+7, r16	; 0x07
    38aa:	18 87       	std	Y+8, r17	; 0x08
    38ac:	c8 01       	movw	r24, r16
    38ae:	b7 01       	movw	r22, r14
    38b0:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__clzsi2>
    38b4:	fc 01       	movw	r30, r24
    38b6:	31 97       	sbiw	r30, 0x01	; 1
    38b8:	f7 ff       	sbrs	r31, 7
    38ba:	3b c0       	rjmp	.+118    	; 0x3932 <__floatunsisf+0xbc>
    38bc:	22 27       	eor	r18, r18
    38be:	33 27       	eor	r19, r19
    38c0:	2e 1b       	sub	r18, r30
    38c2:	3f 0b       	sbc	r19, r31
    38c4:	57 01       	movw	r10, r14
    38c6:	68 01       	movw	r12, r16
    38c8:	02 2e       	mov	r0, r18
    38ca:	04 c0       	rjmp	.+8      	; 0x38d4 <__floatunsisf+0x5e>
    38cc:	d6 94       	lsr	r13
    38ce:	c7 94       	ror	r12
    38d0:	b7 94       	ror	r11
    38d2:	a7 94       	ror	r10
    38d4:	0a 94       	dec	r0
    38d6:	d2 f7       	brpl	.-12     	; 0x38cc <__floatunsisf+0x56>
    38d8:	40 e0       	ldi	r20, 0x00	; 0
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	a0 e0       	ldi	r26, 0x00	; 0
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	04 c0       	rjmp	.+8      	; 0x38f2 <__floatunsisf+0x7c>
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	aa 1f       	adc	r26, r26
    38f0:	bb 1f       	adc	r27, r27
    38f2:	2a 95       	dec	r18
    38f4:	d2 f7       	brpl	.-12     	; 0x38ea <__floatunsisf+0x74>
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	a1 09       	sbc	r26, r1
    38fa:	b1 09       	sbc	r27, r1
    38fc:	8e 21       	and	r24, r14
    38fe:	9f 21       	and	r25, r15
    3900:	a0 23       	and	r26, r16
    3902:	b1 23       	and	r27, r17
    3904:	00 97       	sbiw	r24, 0x00	; 0
    3906:	a1 05       	cpc	r26, r1
    3908:	b1 05       	cpc	r27, r1
    390a:	21 f0       	breq	.+8      	; 0x3914 <__floatunsisf+0x9e>
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	60 e0       	ldi	r22, 0x00	; 0
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	4a 29       	or	r20, r10
    3916:	5b 29       	or	r21, r11
    3918:	6c 29       	or	r22, r12
    391a:	7d 29       	or	r23, r13
    391c:	4d 83       	std	Y+5, r20	; 0x05
    391e:	5e 83       	std	Y+6, r21	; 0x06
    3920:	6f 83       	std	Y+7, r22	; 0x07
    3922:	78 87       	std	Y+8, r23	; 0x08
    3924:	8e e1       	ldi	r24, 0x1E	; 30
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	8e 1b       	sub	r24, r30
    392a:	9f 0b       	sbc	r25, r31
    392c:	9c 83       	std	Y+4, r25	; 0x04
    392e:	8b 83       	std	Y+3, r24	; 0x03
    3930:	12 c0       	rjmp	.+36     	; 0x3956 <__floatunsisf+0xe0>
    3932:	30 97       	sbiw	r30, 0x00	; 0
    3934:	81 f0       	breq	.+32     	; 0x3956 <__floatunsisf+0xe0>
    3936:	0e 2e       	mov	r0, r30
    3938:	04 c0       	rjmp	.+8      	; 0x3942 <__floatunsisf+0xcc>
    393a:	ee 0c       	add	r14, r14
    393c:	ff 1c       	adc	r15, r15
    393e:	00 1f       	adc	r16, r16
    3940:	11 1f       	adc	r17, r17
    3942:	0a 94       	dec	r0
    3944:	d2 f7       	brpl	.-12     	; 0x393a <__floatunsisf+0xc4>
    3946:	ed 82       	std	Y+5, r14	; 0x05
    3948:	fe 82       	std	Y+6, r15	; 0x06
    394a:	0f 83       	std	Y+7, r16	; 0x07
    394c:	18 87       	std	Y+8, r17	; 0x08
    394e:	ce 1a       	sub	r12, r30
    3950:	df 0a       	sbc	r13, r31
    3952:	dc 82       	std	Y+4, r13	; 0x04
    3954:	cb 82       	std	Y+3, r12	; 0x03
    3956:	1a 82       	std	Y+2, r1	; 0x02
    3958:	ce 01       	movw	r24, r28
    395a:	01 96       	adiw	r24, 0x01	; 1
    395c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__pack_f>
    3960:	28 96       	adiw	r28, 0x08	; 8
    3962:	ea e0       	ldi	r30, 0x0A	; 10
    3964:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__epilogue_restores__+0x10>

00003968 <__clzsi2>:
    3968:	ef 92       	push	r14
    396a:	ff 92       	push	r15
    396c:	0f 93       	push	r16
    396e:	1f 93       	push	r17
    3970:	7b 01       	movw	r14, r22
    3972:	8c 01       	movw	r16, r24
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	e8 16       	cp	r14, r24
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	f8 06       	cpc	r15, r24
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	08 07       	cpc	r16, r24
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	18 07       	cpc	r17, r24
    3984:	88 f4       	brcc	.+34     	; 0x39a8 <__clzsi2+0x40>
    3986:	8f ef       	ldi	r24, 0xFF	; 255
    3988:	e8 16       	cp	r14, r24
    398a:	f1 04       	cpc	r15, r1
    398c:	01 05       	cpc	r16, r1
    398e:	11 05       	cpc	r17, r1
    3990:	31 f0       	breq	.+12     	; 0x399e <__clzsi2+0x36>
    3992:	28 f0       	brcs	.+10     	; 0x399e <__clzsi2+0x36>
    3994:	88 e0       	ldi	r24, 0x08	; 8
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	a0 e0       	ldi	r26, 0x00	; 0
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	17 c0       	rjmp	.+46     	; 0x39cc <__clzsi2+0x64>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	a0 e0       	ldi	r26, 0x00	; 0
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	12 c0       	rjmp	.+36     	; 0x39cc <__clzsi2+0x64>
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	e8 16       	cp	r14, r24
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	f8 06       	cpc	r15, r24
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	08 07       	cpc	r16, r24
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	18 07       	cpc	r17, r24
    39b8:	28 f0       	brcs	.+10     	; 0x39c4 <__clzsi2+0x5c>
    39ba:	88 e1       	ldi	r24, 0x18	; 24
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	a0 e0       	ldi	r26, 0x00	; 0
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	04 c0       	rjmp	.+8      	; 0x39cc <__clzsi2+0x64>
    39c4:	80 e1       	ldi	r24, 0x10	; 16
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 e0       	ldi	r26, 0x00	; 0
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	20 e2       	ldi	r18, 0x20	; 32
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	50 e0       	ldi	r21, 0x00	; 0
    39d4:	28 1b       	sub	r18, r24
    39d6:	39 0b       	sbc	r19, r25
    39d8:	4a 0b       	sbc	r20, r26
    39da:	5b 0b       	sbc	r21, r27
    39dc:	04 c0       	rjmp	.+8      	; 0x39e6 <__clzsi2+0x7e>
    39de:	16 95       	lsr	r17
    39e0:	07 95       	ror	r16
    39e2:	f7 94       	ror	r15
    39e4:	e7 94       	ror	r14
    39e6:	8a 95       	dec	r24
    39e8:	d2 f7       	brpl	.-12     	; 0x39de <__clzsi2+0x76>
    39ea:	f7 01       	movw	r30, r14
    39ec:	e8 5f       	subi	r30, 0xF8	; 248
    39ee:	fd 4f       	sbci	r31, 0xFD	; 253
    39f0:	80 81       	ld	r24, Z
    39f2:	28 1b       	sub	r18, r24
    39f4:	31 09       	sbc	r19, r1
    39f6:	41 09       	sbc	r20, r1
    39f8:	51 09       	sbc	r21, r1
    39fa:	c9 01       	movw	r24, r18
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	08 95       	ret

00003a06 <__pack_f>:
    3a06:	df 92       	push	r13
    3a08:	ef 92       	push	r14
    3a0a:	ff 92       	push	r15
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	fc 01       	movw	r30, r24
    3a12:	e4 80       	ldd	r14, Z+4	; 0x04
    3a14:	f5 80       	ldd	r15, Z+5	; 0x05
    3a16:	06 81       	ldd	r16, Z+6	; 0x06
    3a18:	17 81       	ldd	r17, Z+7	; 0x07
    3a1a:	d1 80       	ldd	r13, Z+1	; 0x01
    3a1c:	80 81       	ld	r24, Z
    3a1e:	82 30       	cpi	r24, 0x02	; 2
    3a20:	48 f4       	brcc	.+18     	; 0x3a34 <__pack_f+0x2e>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	a0 e1       	ldi	r26, 0x10	; 16
    3a28:	b0 e0       	ldi	r27, 0x00	; 0
    3a2a:	e8 2a       	or	r14, r24
    3a2c:	f9 2a       	or	r15, r25
    3a2e:	0a 2b       	or	r16, r26
    3a30:	1b 2b       	or	r17, r27
    3a32:	a5 c0       	rjmp	.+330    	; 0x3b7e <__pack_f+0x178>
    3a34:	84 30       	cpi	r24, 0x04	; 4
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <__pack_f+0x34>
    3a38:	9f c0       	rjmp	.+318    	; 0x3b78 <__pack_f+0x172>
    3a3a:	82 30       	cpi	r24, 0x02	; 2
    3a3c:	21 f4       	brne	.+8      	; 0x3a46 <__pack_f+0x40>
    3a3e:	ee 24       	eor	r14, r14
    3a40:	ff 24       	eor	r15, r15
    3a42:	87 01       	movw	r16, r14
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <__pack_f+0x4a>
    3a46:	e1 14       	cp	r14, r1
    3a48:	f1 04       	cpc	r15, r1
    3a4a:	01 05       	cpc	r16, r1
    3a4c:	11 05       	cpc	r17, r1
    3a4e:	19 f4       	brne	.+6      	; 0x3a56 <__pack_f+0x50>
    3a50:	e0 e0       	ldi	r30, 0x00	; 0
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	96 c0       	rjmp	.+300    	; 0x3b82 <__pack_f+0x17c>
    3a56:	62 81       	ldd	r22, Z+2	; 0x02
    3a58:	73 81       	ldd	r23, Z+3	; 0x03
    3a5a:	9f ef       	ldi	r25, 0xFF	; 255
    3a5c:	62 38       	cpi	r22, 0x82	; 130
    3a5e:	79 07       	cpc	r23, r25
    3a60:	0c f0       	brlt	.+2      	; 0x3a64 <__pack_f+0x5e>
    3a62:	5b c0       	rjmp	.+182    	; 0x3b1a <__pack_f+0x114>
    3a64:	22 e8       	ldi	r18, 0x82	; 130
    3a66:	3f ef       	ldi	r19, 0xFF	; 255
    3a68:	26 1b       	sub	r18, r22
    3a6a:	37 0b       	sbc	r19, r23
    3a6c:	2a 31       	cpi	r18, 0x1A	; 26
    3a6e:	31 05       	cpc	r19, r1
    3a70:	2c f0       	brlt	.+10     	; 0x3a7c <__pack_f+0x76>
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	2a c0       	rjmp	.+84     	; 0x3ad0 <__pack_f+0xca>
    3a7c:	b8 01       	movw	r22, r16
    3a7e:	a7 01       	movw	r20, r14
    3a80:	02 2e       	mov	r0, r18
    3a82:	04 c0       	rjmp	.+8      	; 0x3a8c <__pack_f+0x86>
    3a84:	76 95       	lsr	r23
    3a86:	67 95       	ror	r22
    3a88:	57 95       	ror	r21
    3a8a:	47 95       	ror	r20
    3a8c:	0a 94       	dec	r0
    3a8e:	d2 f7       	brpl	.-12     	; 0x3a84 <__pack_f+0x7e>
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	a0 e0       	ldi	r26, 0x00	; 0
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	04 c0       	rjmp	.+8      	; 0x3aa2 <__pack_f+0x9c>
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	aa 1f       	adc	r26, r26
    3aa0:	bb 1f       	adc	r27, r27
    3aa2:	2a 95       	dec	r18
    3aa4:	d2 f7       	brpl	.-12     	; 0x3a9a <__pack_f+0x94>
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	a1 09       	sbc	r26, r1
    3aaa:	b1 09       	sbc	r27, r1
    3aac:	8e 21       	and	r24, r14
    3aae:	9f 21       	and	r25, r15
    3ab0:	a0 23       	and	r26, r16
    3ab2:	b1 23       	and	r27, r17
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	a1 05       	cpc	r26, r1
    3ab8:	b1 05       	cpc	r27, r1
    3aba:	21 f0       	breq	.+8      	; 0x3ac4 <__pack_f+0xbe>
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	a0 e0       	ldi	r26, 0x00	; 0
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	9a 01       	movw	r18, r20
    3ac6:	ab 01       	movw	r20, r22
    3ac8:	28 2b       	or	r18, r24
    3aca:	39 2b       	or	r19, r25
    3acc:	4a 2b       	or	r20, r26
    3ace:	5b 2b       	or	r21, r27
    3ad0:	da 01       	movw	r26, r20
    3ad2:	c9 01       	movw	r24, r18
    3ad4:	8f 77       	andi	r24, 0x7F	; 127
    3ad6:	90 70       	andi	r25, 0x00	; 0
    3ad8:	a0 70       	andi	r26, 0x00	; 0
    3ada:	b0 70       	andi	r27, 0x00	; 0
    3adc:	80 34       	cpi	r24, 0x40	; 64
    3ade:	91 05       	cpc	r25, r1
    3ae0:	a1 05       	cpc	r26, r1
    3ae2:	b1 05       	cpc	r27, r1
    3ae4:	39 f4       	brne	.+14     	; 0x3af4 <__pack_f+0xee>
    3ae6:	27 ff       	sbrs	r18, 7
    3ae8:	09 c0       	rjmp	.+18     	; 0x3afc <__pack_f+0xf6>
    3aea:	20 5c       	subi	r18, 0xC0	; 192
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	4f 4f       	sbci	r20, 0xFF	; 255
    3af0:	5f 4f       	sbci	r21, 0xFF	; 255
    3af2:	04 c0       	rjmp	.+8      	; 0x3afc <__pack_f+0xf6>
    3af4:	21 5c       	subi	r18, 0xC1	; 193
    3af6:	3f 4f       	sbci	r19, 0xFF	; 255
    3af8:	4f 4f       	sbci	r20, 0xFF	; 255
    3afa:	5f 4f       	sbci	r21, 0xFF	; 255
    3afc:	e0 e0       	ldi	r30, 0x00	; 0
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	20 30       	cpi	r18, 0x00	; 0
    3b02:	a0 e0       	ldi	r26, 0x00	; 0
    3b04:	3a 07       	cpc	r19, r26
    3b06:	a0 e0       	ldi	r26, 0x00	; 0
    3b08:	4a 07       	cpc	r20, r26
    3b0a:	a0 e4       	ldi	r26, 0x40	; 64
    3b0c:	5a 07       	cpc	r21, r26
    3b0e:	10 f0       	brcs	.+4      	; 0x3b14 <__pack_f+0x10e>
    3b10:	e1 e0       	ldi	r30, 0x01	; 1
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	79 01       	movw	r14, r18
    3b16:	8a 01       	movw	r16, r20
    3b18:	27 c0       	rjmp	.+78     	; 0x3b68 <__pack_f+0x162>
    3b1a:	60 38       	cpi	r22, 0x80	; 128
    3b1c:	71 05       	cpc	r23, r1
    3b1e:	64 f5       	brge	.+88     	; 0x3b78 <__pack_f+0x172>
    3b20:	fb 01       	movw	r30, r22
    3b22:	e1 58       	subi	r30, 0x81	; 129
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	d8 01       	movw	r26, r16
    3b28:	c7 01       	movw	r24, r14
    3b2a:	8f 77       	andi	r24, 0x7F	; 127
    3b2c:	90 70       	andi	r25, 0x00	; 0
    3b2e:	a0 70       	andi	r26, 0x00	; 0
    3b30:	b0 70       	andi	r27, 0x00	; 0
    3b32:	80 34       	cpi	r24, 0x40	; 64
    3b34:	91 05       	cpc	r25, r1
    3b36:	a1 05       	cpc	r26, r1
    3b38:	b1 05       	cpc	r27, r1
    3b3a:	39 f4       	brne	.+14     	; 0x3b4a <__pack_f+0x144>
    3b3c:	e7 fe       	sbrs	r14, 7
    3b3e:	0d c0       	rjmp	.+26     	; 0x3b5a <__pack_f+0x154>
    3b40:	80 e4       	ldi	r24, 0x40	; 64
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	a0 e0       	ldi	r26, 0x00	; 0
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	04 c0       	rjmp	.+8      	; 0x3b52 <__pack_f+0x14c>
    3b4a:	8f e3       	ldi	r24, 0x3F	; 63
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	a0 e0       	ldi	r26, 0x00	; 0
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	e8 0e       	add	r14, r24
    3b54:	f9 1e       	adc	r15, r25
    3b56:	0a 1f       	adc	r16, r26
    3b58:	1b 1f       	adc	r17, r27
    3b5a:	17 ff       	sbrs	r17, 7
    3b5c:	05 c0       	rjmp	.+10     	; 0x3b68 <__pack_f+0x162>
    3b5e:	16 95       	lsr	r17
    3b60:	07 95       	ror	r16
    3b62:	f7 94       	ror	r15
    3b64:	e7 94       	ror	r14
    3b66:	31 96       	adiw	r30, 0x01	; 1
    3b68:	87 e0       	ldi	r24, 0x07	; 7
    3b6a:	16 95       	lsr	r17
    3b6c:	07 95       	ror	r16
    3b6e:	f7 94       	ror	r15
    3b70:	e7 94       	ror	r14
    3b72:	8a 95       	dec	r24
    3b74:	d1 f7       	brne	.-12     	; 0x3b6a <__pack_f+0x164>
    3b76:	05 c0       	rjmp	.+10     	; 0x3b82 <__pack_f+0x17c>
    3b78:	ee 24       	eor	r14, r14
    3b7a:	ff 24       	eor	r15, r15
    3b7c:	87 01       	movw	r16, r14
    3b7e:	ef ef       	ldi	r30, 0xFF	; 255
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	6e 2f       	mov	r22, r30
    3b84:	67 95       	ror	r22
    3b86:	66 27       	eor	r22, r22
    3b88:	67 95       	ror	r22
    3b8a:	90 2f       	mov	r25, r16
    3b8c:	9f 77       	andi	r25, 0x7F	; 127
    3b8e:	d7 94       	ror	r13
    3b90:	dd 24       	eor	r13, r13
    3b92:	d7 94       	ror	r13
    3b94:	8e 2f       	mov	r24, r30
    3b96:	86 95       	lsr	r24
    3b98:	49 2f       	mov	r20, r25
    3b9a:	46 2b       	or	r20, r22
    3b9c:	58 2f       	mov	r21, r24
    3b9e:	5d 29       	or	r21, r13
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	ca 01       	movw	r24, r20
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ff 90       	pop	r15
    3baa:	ef 90       	pop	r14
    3bac:	df 90       	pop	r13
    3bae:	08 95       	ret

00003bb0 <__unpack_f>:
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	db 01       	movw	r26, r22
    3bb4:	40 81       	ld	r20, Z
    3bb6:	51 81       	ldd	r21, Z+1	; 0x01
    3bb8:	22 81       	ldd	r18, Z+2	; 0x02
    3bba:	62 2f       	mov	r22, r18
    3bbc:	6f 77       	andi	r22, 0x7F	; 127
    3bbe:	70 e0       	ldi	r23, 0x00	; 0
    3bc0:	22 1f       	adc	r18, r18
    3bc2:	22 27       	eor	r18, r18
    3bc4:	22 1f       	adc	r18, r18
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	89 2f       	mov	r24, r25
    3bca:	88 0f       	add	r24, r24
    3bcc:	82 2b       	or	r24, r18
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	99 27       	eor	r25, r25
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	11 96       	adiw	r26, 0x01	; 1
    3bda:	9c 93       	st	X, r25
    3bdc:	11 97       	sbiw	r26, 0x01	; 1
    3bde:	21 15       	cp	r18, r1
    3be0:	31 05       	cpc	r19, r1
    3be2:	a9 f5       	brne	.+106    	; 0x3c4e <__unpack_f+0x9e>
    3be4:	41 15       	cp	r20, r1
    3be6:	51 05       	cpc	r21, r1
    3be8:	61 05       	cpc	r22, r1
    3bea:	71 05       	cpc	r23, r1
    3bec:	11 f4       	brne	.+4      	; 0x3bf2 <__unpack_f+0x42>
    3bee:	82 e0       	ldi	r24, 0x02	; 2
    3bf0:	37 c0       	rjmp	.+110    	; 0x3c60 <__unpack_f+0xb0>
    3bf2:	82 e8       	ldi	r24, 0x82	; 130
    3bf4:	9f ef       	ldi	r25, 0xFF	; 255
    3bf6:	13 96       	adiw	r26, 0x03	; 3
    3bf8:	9c 93       	st	X, r25
    3bfa:	8e 93       	st	-X, r24
    3bfc:	12 97       	sbiw	r26, 0x02	; 2
    3bfe:	9a 01       	movw	r18, r20
    3c00:	ab 01       	movw	r20, r22
    3c02:	67 e0       	ldi	r22, 0x07	; 7
    3c04:	22 0f       	add	r18, r18
    3c06:	33 1f       	adc	r19, r19
    3c08:	44 1f       	adc	r20, r20
    3c0a:	55 1f       	adc	r21, r21
    3c0c:	6a 95       	dec	r22
    3c0e:	d1 f7       	brne	.-12     	; 0x3c04 <__unpack_f+0x54>
    3c10:	83 e0       	ldi	r24, 0x03	; 3
    3c12:	8c 93       	st	X, r24
    3c14:	0d c0       	rjmp	.+26     	; 0x3c30 <__unpack_f+0x80>
    3c16:	22 0f       	add	r18, r18
    3c18:	33 1f       	adc	r19, r19
    3c1a:	44 1f       	adc	r20, r20
    3c1c:	55 1f       	adc	r21, r21
    3c1e:	12 96       	adiw	r26, 0x02	; 2
    3c20:	8d 91       	ld	r24, X+
    3c22:	9c 91       	ld	r25, X
    3c24:	13 97       	sbiw	r26, 0x03	; 3
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	13 96       	adiw	r26, 0x03	; 3
    3c2a:	9c 93       	st	X, r25
    3c2c:	8e 93       	st	-X, r24
    3c2e:	12 97       	sbiw	r26, 0x02	; 2
    3c30:	20 30       	cpi	r18, 0x00	; 0
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	38 07       	cpc	r19, r24
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	48 07       	cpc	r20, r24
    3c3a:	80 e4       	ldi	r24, 0x40	; 64
    3c3c:	58 07       	cpc	r21, r24
    3c3e:	58 f3       	brcs	.-42     	; 0x3c16 <__unpack_f+0x66>
    3c40:	14 96       	adiw	r26, 0x04	; 4
    3c42:	2d 93       	st	X+, r18
    3c44:	3d 93       	st	X+, r19
    3c46:	4d 93       	st	X+, r20
    3c48:	5c 93       	st	X, r21
    3c4a:	17 97       	sbiw	r26, 0x07	; 7
    3c4c:	08 95       	ret
    3c4e:	2f 3f       	cpi	r18, 0xFF	; 255
    3c50:	31 05       	cpc	r19, r1
    3c52:	79 f4       	brne	.+30     	; 0x3c72 <__unpack_f+0xc2>
    3c54:	41 15       	cp	r20, r1
    3c56:	51 05       	cpc	r21, r1
    3c58:	61 05       	cpc	r22, r1
    3c5a:	71 05       	cpc	r23, r1
    3c5c:	19 f4       	brne	.+6      	; 0x3c64 <__unpack_f+0xb4>
    3c5e:	84 e0       	ldi	r24, 0x04	; 4
    3c60:	8c 93       	st	X, r24
    3c62:	08 95       	ret
    3c64:	64 ff       	sbrs	r22, 4
    3c66:	03 c0       	rjmp	.+6      	; 0x3c6e <__unpack_f+0xbe>
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	8c 93       	st	X, r24
    3c6c:	12 c0       	rjmp	.+36     	; 0x3c92 <__unpack_f+0xe2>
    3c6e:	1c 92       	st	X, r1
    3c70:	10 c0       	rjmp	.+32     	; 0x3c92 <__unpack_f+0xe2>
    3c72:	2f 57       	subi	r18, 0x7F	; 127
    3c74:	30 40       	sbci	r19, 0x00	; 0
    3c76:	13 96       	adiw	r26, 0x03	; 3
    3c78:	3c 93       	st	X, r19
    3c7a:	2e 93       	st	-X, r18
    3c7c:	12 97       	sbiw	r26, 0x02	; 2
    3c7e:	83 e0       	ldi	r24, 0x03	; 3
    3c80:	8c 93       	st	X, r24
    3c82:	87 e0       	ldi	r24, 0x07	; 7
    3c84:	44 0f       	add	r20, r20
    3c86:	55 1f       	adc	r21, r21
    3c88:	66 1f       	adc	r22, r22
    3c8a:	77 1f       	adc	r23, r23
    3c8c:	8a 95       	dec	r24
    3c8e:	d1 f7       	brne	.-12     	; 0x3c84 <__unpack_f+0xd4>
    3c90:	70 64       	ori	r23, 0x40	; 64
    3c92:	14 96       	adiw	r26, 0x04	; 4
    3c94:	4d 93       	st	X+, r20
    3c96:	5d 93       	st	X+, r21
    3c98:	6d 93       	st	X+, r22
    3c9a:	7c 93       	st	X, r23
    3c9c:	17 97       	sbiw	r26, 0x07	; 7
    3c9e:	08 95       	ret

00003ca0 <__fpcmp_parts_f>:
    3ca0:	1f 93       	push	r17
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	fb 01       	movw	r30, r22
    3ca6:	9c 91       	ld	r25, X
    3ca8:	92 30       	cpi	r25, 0x02	; 2
    3caa:	08 f4       	brcc	.+2      	; 0x3cae <__fpcmp_parts_f+0xe>
    3cac:	47 c0       	rjmp	.+142    	; 0x3d3c <__fpcmp_parts_f+0x9c>
    3cae:	80 81       	ld	r24, Z
    3cb0:	82 30       	cpi	r24, 0x02	; 2
    3cb2:	08 f4       	brcc	.+2      	; 0x3cb6 <__fpcmp_parts_f+0x16>
    3cb4:	43 c0       	rjmp	.+134    	; 0x3d3c <__fpcmp_parts_f+0x9c>
    3cb6:	94 30       	cpi	r25, 0x04	; 4
    3cb8:	51 f4       	brne	.+20     	; 0x3cce <__fpcmp_parts_f+0x2e>
    3cba:	11 96       	adiw	r26, 0x01	; 1
    3cbc:	1c 91       	ld	r17, X
    3cbe:	84 30       	cpi	r24, 0x04	; 4
    3cc0:	99 f5       	brne	.+102    	; 0x3d28 <__fpcmp_parts_f+0x88>
    3cc2:	81 81       	ldd	r24, Z+1	; 0x01
    3cc4:	68 2f       	mov	r22, r24
    3cc6:	70 e0       	ldi	r23, 0x00	; 0
    3cc8:	61 1b       	sub	r22, r17
    3cca:	71 09       	sbc	r23, r1
    3ccc:	3f c0       	rjmp	.+126    	; 0x3d4c <__fpcmp_parts_f+0xac>
    3cce:	84 30       	cpi	r24, 0x04	; 4
    3cd0:	21 f0       	breq	.+8      	; 0x3cda <__fpcmp_parts_f+0x3a>
    3cd2:	92 30       	cpi	r25, 0x02	; 2
    3cd4:	31 f4       	brne	.+12     	; 0x3ce2 <__fpcmp_parts_f+0x42>
    3cd6:	82 30       	cpi	r24, 0x02	; 2
    3cd8:	b9 f1       	breq	.+110    	; 0x3d48 <__fpcmp_parts_f+0xa8>
    3cda:	81 81       	ldd	r24, Z+1	; 0x01
    3cdc:	88 23       	and	r24, r24
    3cde:	89 f1       	breq	.+98     	; 0x3d42 <__fpcmp_parts_f+0xa2>
    3ce0:	2d c0       	rjmp	.+90     	; 0x3d3c <__fpcmp_parts_f+0x9c>
    3ce2:	11 96       	adiw	r26, 0x01	; 1
    3ce4:	1c 91       	ld	r17, X
    3ce6:	11 97       	sbiw	r26, 0x01	; 1
    3ce8:	82 30       	cpi	r24, 0x02	; 2
    3cea:	f1 f0       	breq	.+60     	; 0x3d28 <__fpcmp_parts_f+0x88>
    3cec:	81 81       	ldd	r24, Z+1	; 0x01
    3cee:	18 17       	cp	r17, r24
    3cf0:	d9 f4       	brne	.+54     	; 0x3d28 <__fpcmp_parts_f+0x88>
    3cf2:	12 96       	adiw	r26, 0x02	; 2
    3cf4:	2d 91       	ld	r18, X+
    3cf6:	3c 91       	ld	r19, X
    3cf8:	13 97       	sbiw	r26, 0x03	; 3
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	82 17       	cp	r24, r18
    3d00:	93 07       	cpc	r25, r19
    3d02:	94 f0       	brlt	.+36     	; 0x3d28 <__fpcmp_parts_f+0x88>
    3d04:	28 17       	cp	r18, r24
    3d06:	39 07       	cpc	r19, r25
    3d08:	bc f0       	brlt	.+46     	; 0x3d38 <__fpcmp_parts_f+0x98>
    3d0a:	14 96       	adiw	r26, 0x04	; 4
    3d0c:	8d 91       	ld	r24, X+
    3d0e:	9d 91       	ld	r25, X+
    3d10:	0d 90       	ld	r0, X+
    3d12:	bc 91       	ld	r27, X
    3d14:	a0 2d       	mov	r26, r0
    3d16:	24 81       	ldd	r18, Z+4	; 0x04
    3d18:	35 81       	ldd	r19, Z+5	; 0x05
    3d1a:	46 81       	ldd	r20, Z+6	; 0x06
    3d1c:	57 81       	ldd	r21, Z+7	; 0x07
    3d1e:	28 17       	cp	r18, r24
    3d20:	39 07       	cpc	r19, r25
    3d22:	4a 07       	cpc	r20, r26
    3d24:	5b 07       	cpc	r21, r27
    3d26:	18 f4       	brcc	.+6      	; 0x3d2e <__fpcmp_parts_f+0x8e>
    3d28:	11 23       	and	r17, r17
    3d2a:	41 f0       	breq	.+16     	; 0x3d3c <__fpcmp_parts_f+0x9c>
    3d2c:	0a c0       	rjmp	.+20     	; 0x3d42 <__fpcmp_parts_f+0xa2>
    3d2e:	82 17       	cp	r24, r18
    3d30:	93 07       	cpc	r25, r19
    3d32:	a4 07       	cpc	r26, r20
    3d34:	b5 07       	cpc	r27, r21
    3d36:	40 f4       	brcc	.+16     	; 0x3d48 <__fpcmp_parts_f+0xa8>
    3d38:	11 23       	and	r17, r17
    3d3a:	19 f0       	breq	.+6      	; 0x3d42 <__fpcmp_parts_f+0xa2>
    3d3c:	61 e0       	ldi	r22, 0x01	; 1
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	05 c0       	rjmp	.+10     	; 0x3d4c <__fpcmp_parts_f+0xac>
    3d42:	6f ef       	ldi	r22, 0xFF	; 255
    3d44:	7f ef       	ldi	r23, 0xFF	; 255
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <__fpcmp_parts_f+0xac>
    3d48:	60 e0       	ldi	r22, 0x00	; 0
    3d4a:	70 e0       	ldi	r23, 0x00	; 0
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	1f 91       	pop	r17
    3d50:	08 95       	ret

00003d52 <__mulsi3>:
    3d52:	62 9f       	mul	r22, r18
    3d54:	d0 01       	movw	r26, r0
    3d56:	73 9f       	mul	r23, r19
    3d58:	f0 01       	movw	r30, r0
    3d5a:	82 9f       	mul	r24, r18
    3d5c:	e0 0d       	add	r30, r0
    3d5e:	f1 1d       	adc	r31, r1
    3d60:	64 9f       	mul	r22, r20
    3d62:	e0 0d       	add	r30, r0
    3d64:	f1 1d       	adc	r31, r1
    3d66:	92 9f       	mul	r25, r18
    3d68:	f0 0d       	add	r31, r0
    3d6a:	83 9f       	mul	r24, r19
    3d6c:	f0 0d       	add	r31, r0
    3d6e:	74 9f       	mul	r23, r20
    3d70:	f0 0d       	add	r31, r0
    3d72:	65 9f       	mul	r22, r21
    3d74:	f0 0d       	add	r31, r0
    3d76:	99 27       	eor	r25, r25
    3d78:	72 9f       	mul	r23, r18
    3d7a:	b0 0d       	add	r27, r0
    3d7c:	e1 1d       	adc	r30, r1
    3d7e:	f9 1f       	adc	r31, r25
    3d80:	63 9f       	mul	r22, r19
    3d82:	b0 0d       	add	r27, r0
    3d84:	e1 1d       	adc	r30, r1
    3d86:	f9 1f       	adc	r31, r25
    3d88:	bd 01       	movw	r22, r26
    3d8a:	cf 01       	movw	r24, r30
    3d8c:	11 24       	eor	r1, r1
    3d8e:	08 95       	ret

00003d90 <__prologue_saves__>:
    3d90:	2f 92       	push	r2
    3d92:	3f 92       	push	r3
    3d94:	4f 92       	push	r4
    3d96:	5f 92       	push	r5
    3d98:	6f 92       	push	r6
    3d9a:	7f 92       	push	r7
    3d9c:	8f 92       	push	r8
    3d9e:	9f 92       	push	r9
    3da0:	af 92       	push	r10
    3da2:	bf 92       	push	r11
    3da4:	cf 92       	push	r12
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	ca 1b       	sub	r28, r26
    3dba:	db 0b       	sbc	r29, r27
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
    3dc6:	19 94       	eijmp

00003dc8 <__epilogue_restores__>:
    3dc8:	2a 88       	ldd	r2, Y+18	; 0x12
    3dca:	39 88       	ldd	r3, Y+17	; 0x11
    3dcc:	48 88       	ldd	r4, Y+16	; 0x10
    3dce:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dda:	b9 84       	ldd	r11, Y+9	; 0x09
    3ddc:	c8 84       	ldd	r12, Y+8	; 0x08
    3dde:	df 80       	ldd	r13, Y+7	; 0x07
    3de0:	ee 80       	ldd	r14, Y+6	; 0x06
    3de2:	fd 80       	ldd	r15, Y+5	; 0x05
    3de4:	0c 81       	ldd	r16, Y+4	; 0x04
    3de6:	1b 81       	ldd	r17, Y+3	; 0x03
    3de8:	aa 81       	ldd	r26, Y+2	; 0x02
    3dea:	b9 81       	ldd	r27, Y+1	; 0x01
    3dec:	ce 0f       	add	r28, r30
    3dee:	d1 1d       	adc	r29, r1
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	ed 01       	movw	r28, r26
    3dfc:	08 95       	ret

00003dfe <_exit>:
    3dfe:	f8 94       	cli

00003e00 <__stop_program>:
    3e00:	ff cf       	rjmp	.-2      	; 0x3e00 <__stop_program>
